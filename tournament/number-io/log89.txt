Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-28.416019090119946 -47] -75.41601909011995]
Train Case:   1 | Input/Output: [[34.00664322593215 -8] 26.00664322593215]
Train Case:   2 | Input/Output: [[28.13697811794188 -36] -7.863021882058121]
Train Case:   3 | Input/Output: [[-56.914502455317994 100] 43.085497544682006]
Train Case:   4 | Input/Output: [[-91.02590057327673 72] -19.02590057327673]
Train Case:   5 | Input/Output: [[-9.561589690779314 -27] -36.561589690779314]
Train Case:   6 | Input/Output: [[-88.71791354587211 2] -86.71791354587211]
Train Case:   7 | Input/Output: [[-68.1780786914768 61] -7.178078691476799]
Train Case:   8 | Input/Output: [[10.025776452717736 93] 103.02577645271774]
Train Case:   9 | Input/Output: [[-26.32387566236187 97] 70.67612433763813]
Train Case:  10 | Input/Output: [[-54.651893390157326 -87] -141.65189339015734]
Train Case:  11 | Input/Output: [[30.243566218221645 52] 82.24356621822164]
Train Case:  12 | Input/Output: [[26.947221405472078 89] 115.94722140547208]
Train Case:  13 | Input/Output: [[85.08338150926068 72] 157.08338150926068]
Train Case:  14 | Input/Output: [[-53.964349068485554 49] -4.964349068485554]
Train Case:  15 | Input/Output: [[25.121297555481362 35] 60.12129755548136]
Train Case:  16 | Input/Output: [[73.6445537772926 -78] -4.3554462227074]
Train Case:  17 | Input/Output: [[-83.92788401855312 11] -72.92788401855312]
Train Case:  18 | Input/Output: [[-72.36015222233165 -38] -110.36015222233165]
Train Case:  19 | Input/Output: [[79.17844040386328 -74] 5.178440403863277]
Train Case:  20 | Input/Output: [[-78.88684592037703 -17] -95.88684592037703]
Train Case:  21 | Input/Output: [[62.61135452794383 -26] 36.61135452794383]
Train Case:  22 | Input/Output: [[-42.931092412772884 26] -16.931092412772884]
Train Case:  23 | Input/Output: [[-18.016572477792266 -39] -57.016572477792266]
Train Case:  24 | Input/Output: [[-19.42927524686307 19] -0.42927524686307095]
Test Case:   0 | Input/Output: [[-92.58378168309905 47] -45.58378168309905]
Test Case:   1 | Input/Output: [[-34.34950181020811 -12] -46.34950181020811]
Test Case:   2 | Input/Output: [[55.85714597173765 -81] -25.14285402826235]
Test Case:   3 | Input/Output: [[-42.64318768792956 -35] -77.64318768792955]
Test Case:   4 | Input/Output: [[-3.5355521122839093 -79] -82.53555211228391]
Test Case:   5 | Input/Output: [[-86.65760416538042 13] -73.65760416538042]
Test Case:   6 | Input/Output: [[8.24725968303008 66] 74.24725968303008]
Test Case:   7 | Input/Output: [[-66.5489367264656 -91] -157.5489367264656]
Test Case:   8 | Input/Output: [[-95.91960669699229 -86] -181.91960669699228]
Test Case:   9 | Input/Output: [[-18.852082929013548 -68] -86.85208292901355]
Test Case:  10 | Input/Output: [[-30.839880620521427 -63] -93.83988062052143]
Test Case:  11 | Input/Output: [[-59.35190134162749 -24] -83.3519013416275]
Test Case:  12 | Input/Output: [[61.85957725207925 60] 121.85957725207925]
Test Case:  13 | Input/Output: [[56.91824825612841 14] 70.91824825612841]
Test Case:  14 | Input/Output: [[88.00662184711572 -15] 73.00662184711572]
Test Case:  15 | Input/Output: [[-81.35742587113921 17] -64.35742587113921]
Test Case:  16 | Input/Output: [[-19.282501515702123 61] 41.71749848429788]
Test Case:  17 | Input/Output: [[32.87184790998941 -37] -4.1281520900105875]
Test Case:  18 | Input/Output: [[41.370892414837726 -27] 14.370892414837726]
Test Case:  19 | Input/Output: [[92.31873657129458 -2] 90.31873657129458]
Test Case:  20 | Input/Output: [[-64.24761639225893 -94] -158.24761639225892]
Test Case:  21 | Input/Output: [[-29.093238979025784 61] 31.906761020974216]
Test Case:  22 | Input/Output: [[-17.644826294043554 -36] -53.644826294043554]
Test Case:  23 | Input/Output: [[60.81464473237642 -29] 31.814644732376422]
Test Case:  24 | Input/Output: [[0.5611894177599055 36] 36.561189417759905]
Test Case:  25 | Input/Output: [[68.65504029952334 -65] 3.6550402995233355]
Test Case:  26 | Input/Output: [[9.310858778822407 -73] -63.68914122117759]
Test Case:  27 | Input/Output: [[52.04181336034347 -86] -33.95818663965653]
Test Case:  28 | Input/Output: [[6.552005312403168 0] 6.552005312403168]
Test Case:  29 | Input/Output: [[41.572128161281626 77] 118.57212816128163]
Test Case:  30 | Input/Output: [[-20.136218072751788 -35] -55.13621807275179]
Test Case:  31 | Input/Output: [[-18.919854027086387 -5] -23.919854027086387]
Test Case:  32 | Input/Output: [[35.544240422840204 6] 41.544240422840204]
Test Case:  33 | Input/Output: [[50.48257442941372 69] 119.48257442941372]
Test Case:  34 | Input/Output: [[67.63887710813452 -11] 56.63887710813452]
Test Case:  35 | Input/Output: [[-38.86276541274902 -96] -134.862765412749]
Test Case:  36 | Input/Output: [[-26.847890161690557 61] 34.15210983830944]
Test Case:  37 | Input/Output: [[-28.346355903777393 -64] -92.3463559037774]
Test Case:  38 | Input/Output: [[-65.27497935442858 10] -55.27497935442858]
Test Case:  39 | Input/Output: [[-52.33270106272343 -28] -80.33270106272343]
Test Case:  40 | Input/Output: [[-1.4965413714775622 6] 4.503458628522438]
Test Case:  41 | Input/Output: [[96.27451630572722 -57] 39.27451630572722]
Test Case:  42 | Input/Output: [[0.9249178800129698 96] 96.92491788001297]
Test Case:  43 | Input/Output: [[98.43112302155805 -27] 71.43112302155805]
Test Case:  44 | Input/Output: [[-74.61790905222205 -33] -107.61790905222205]
Test Case:  45 | Input/Output: [[-94.42886530176634 36] -58.428865301766336]
Test Case:  46 | Input/Output: [[-83.93448459679442 65] -18.93448459679442]
Test Case:  47 | Input/Output: [[87.77149641683093 95] 182.77149641683093]
Test Case:  48 | Input/Output: [[52.7371563183255 9] 61.7371563183255]
Test Case:  49 | Input/Output: [[-89.54010551577069 1] -88.54010551577069]
Test Case:  50 | Input/Output: [[-67.13196342417622 -72] -139.1319634241762]
Test Case:  51 | Input/Output: [[-93.99309999592785 -51] -144.99309999592785]
Test Case:  52 | Input/Output: [[70.06014214688068 -10] 60.06014214688068]
Test Case:  53 | Input/Output: [[-94.66542151334643 -62] -156.66542151334642]
Test Case:  54 | Input/Output: [[-19.789646312781997 62] 42.210353687218]
Test Case:  55 | Input/Output: [[13.386032323141151 -22] -8.613967676858849]
Test Case:  56 | Input/Output: [[-48.345316882148715 -63] -111.34531688214872]
Test Case:  57 | Input/Output: [[82.28357034678223 7] 89.28357034678223]
Test Case:  58 | Input/Output: [[48.207884886944015 18] 66.20788488694402]
Test Case:  59 | Input/Output: [[15.499825540682039 43] 58.49982554068204]
Test Case:  60 | Input/Output: [[60.09266334085655 -71] -10.907336659143454]
Test Case:  61 | Input/Output: [[-28.72445179352816 75] 46.27554820647184]
Test Case:  62 | Input/Output: [[18.41179185128206 68] 86.41179185128206]
Test Case:  63 | Input/Output: [[86.12740460179268 38] 124.12740460179268]
Test Case:  64 | Input/Output: [[55.86920163867393 14] 69.86920163867393]
Test Case:  65 | Input/Output: [[-53.60204962165045 -49] -102.60204962165045]
Test Case:  66 | Input/Output: [[51.61494674744918 -29] 22.61494674744918]
Test Case:  67 | Input/Output: [[68.32911357644201 -94] -25.670886423557988]
Test Case:  68 | Input/Output: [[15.805468702151359 72] 87.80546870215136]
Test Case:  69 | Input/Output: [[-55.31310143706967 -53] -108.31310143706966]
Test Case:  70 | Input/Output: [[95.79515570072721 42] 137.7951557007272]
Test Case:  71 | Input/Output: [[58.54362781824156 23] 81.54362781824156]
Test Case:  72 | Input/Output: [[60.37112009715656 50] 110.37112009715656]
Test Case:  73 | Input/Output: [[-68.38161044423082 16] -52.381610444230816]
Test Case:  74 | Input/Output: [[7.460537129431373 -16] -8.539462870568627]
Test Case:  75 | Input/Output: [[99.32008750215456 -82] 17.320087502154564]
Test Case:  76 | Input/Output: [[78.49630583510233 1] 79.49630583510233]
Test Case:  77 | Input/Output: [[-77.25619050918681 -81] -158.2561905091868]
Test Case:  78 | Input/Output: [[36.69449436436361 81] 117.6944943643636]
Test Case:  79 | Input/Output: [[97.1318728983833 21] 118.1318728983833]
Test Case:  80 | Input/Output: [[73.930023055888 -11] 62.930023055888]
Test Case:  81 | Input/Output: [[13.406414531504197 -35] -21.593585468495803]
Test Case:  82 | Input/Output: [[96.44495200899743 -26] 70.44495200899743]
Test Case:  83 | Input/Output: [[3.645177255075268 -23] -19.354822744924732]
Test Case:  84 | Input/Output: [[47.24193898159609 -12] 35.24193898159609]
Test Case:  85 | Input/Output: [[99.25855245749878 -73] 26.25855245749878]
Test Case:  86 | Input/Output: [[-54.93688501015268 40] -14.936885010152679]
Test Case:  87 | Input/Output: [[-83.78609348858566 -68] -151.78609348858566]
Test Case:  88 | Input/Output: [[-86.56769309690628 29] -57.56769309690628]
Test Case:  89 | Input/Output: [[-30.32940537528978 9] -21.32940537528978]
Test Case:  90 | Input/Output: [[-28.69239803531714 -60] -88.69239803531714]
Test Case:  91 | Input/Output: [[-24.490186113214804 -49] -73.4901861132148]
Test Case:  92 | Input/Output: [[61.65270807059849 11] 72.6527080705985]
Test Case:  93 | Input/Output: [[-68.59683200217876 -39] -107.59683200217876]
Test Case:  94 | Input/Output: [[74.69404923464 57] 131.69404923464]
Test Case:  95 | Input/Output: [[40.0582299572778 49] 89.0582299572778]
Test Case:  96 | Input/Output: [[89.50663316654607 -85] 4.506633166546067]
Test Case:  97 | Input/Output: [[-61.441372031710316 -40] -101.44137203171032]
Test Case:  98 | Input/Output: [[49.855561480089705 72] 121.8555614800897]
Test Case:  99 | Input/Output: [[-81.45363431671257 -29] -110.45363431671257]
Test Case: 100 | Input/Output: [[17.807940278447603 5] 22.807940278447603]
Test Case: 101 | Input/Output: [[-11.863340252410111 79] 67.13665974758989]
Test Case: 102 | Input/Output: [[-85.7661604797596 -58] -143.7661604797596]
Test Case: 103 | Input/Output: [[-98.36447444470531 -11] -109.36447444470531]
Test Case: 104 | Input/Output: [[-6.976159989375418 -60] -66.97615998937542]
Test Case: 105 | Input/Output: [[-77.04010176173992 -83] -160.04010176173992]
Test Case: 106 | Input/Output: [[92.86060081716639 -10] 82.86060081716639]
Test Case: 107 | Input/Output: [[54.54792815793809 -69] -14.452071842061912]
Test Case: 108 | Input/Output: [[-72.02112843532633 -52] -124.02112843532633]
Test Case: 109 | Input/Output: [[54.016210267413015 -97] -42.983789732586985]
Test Case: 110 | Input/Output: [[-37.03489182437358 -97] -134.03489182437357]
Test Case: 111 | Input/Output: [[77.31984488342701 -38] 39.31984488342701]
Test Case: 112 | Input/Output: [[-44.593313152975256 76] 31.406686847024744]
Test Case: 113 | Input/Output: [[72.26399685202708 85] 157.26399685202708]
Test Case: 114 | Input/Output: [[84.71221404432166 -55] 29.712214044321655]
Test Case: 115 | Input/Output: [[57.45224165234049 -90] -32.54775834765951]
Test Case: 116 | Input/Output: [[-96.48552212865755 53] -43.48552212865755]
Test Case: 117 | Input/Output: [[-92.24512734711534 89] -3.245127347115343]
Test Case: 118 | Input/Output: [[-55.120993904281065 -82] -137.12099390428108]
Test Case: 119 | Input/Output: [[12.650677144775813 22] 34.65067714477581]
Test Case: 120 | Input/Output: [[-10.390717487053337 -44] -54.39071748705334]
Test Case: 121 | Input/Output: [[-90.30988736143877 -37] -127.30988736143877]
Test Case: 122 | Input/Output: [[93.6587930867756 47] 140.6587930867756]
Test Case: 123 | Input/Output: [[-59.359911631249076 -57] -116.35991163124908]
Test Case: 124 | Input/Output: [[70.7249687933398 10] 80.7249687933398]
Test Case: 125 | Input/Output: [[42.59639979795833 90] 132.59639979795833]
Test Case: 126 | Input/Output: [[-27.167415546923564 -76] -103.16741554692356]
Test Case: 127 | Input/Output: [[2.6093981723994943 -40] -37.390601827600506]
Test Case: 128 | Input/Output: [[16.907189250099847 76] 92.90718925009985]
Test Case: 129 | Input/Output: [[53.87338697462232 12] 65.87338697462232]
Test Case: 130 | Input/Output: [[25.575147372671665 -24] 1.5751473726716654]
Test Case: 131 | Input/Output: [[28.20127223608469 7] 35.20127223608469]
Test Case: 132 | Input/Output: [[90.7795794449604 76] 166.7795794449604]
Test Case: 133 | Input/Output: [[-30.395228522088402 41] 10.604771477911598]
Test Case: 134 | Input/Output: [[-28.26664055530499 95] 66.73335944469501]
Test Case: 135 | Input/Output: [[-13.831103927414972 -29] -42.83110392741497]
Test Case: 136 | Input/Output: [[-5.910175047588638 -49] -54.91017504758864]
Test Case: 137 | Input/Output: [[35.539282971475274 99] 134.53928297147527]
Test Case: 138 | Input/Output: [[-23.785430125235024 -8] -31.785430125235024]
Test Case: 139 | Input/Output: [[-75.83653163735411 -34] -109.83653163735411]
Test Case: 140 | Input/Output: [[95.0724647799585 36] 131.0724647799585]
Test Case: 141 | Input/Output: [[47.70474417292132 45] 92.70474417292132]
Test Case: 142 | Input/Output: [[-54.2928384288164 28] -26.292838428816403]
Test Case: 143 | Input/Output: [[-23.19100411193466 -48] -71.19100411193466]
Test Case: 144 | Input/Output: [[-65.76801988755881 12] -53.76801988755881]
Test Case: 145 | Input/Output: [[1.6029569668206847 -35] -33.397043033179315]
Test Case: 146 | Input/Output: [[94.51951686671038 -77] 17.519516866710376]
Test Case: 147 | Input/Output: [[-24.85716791885531 -20] -44.85716791885531]
Test Case: 148 | Input/Output: [[-88.69625702934994 -46] -134.69625702934994]
Test Case: 149 | Input/Output: [[-30.614526495720824 -94] -124.61452649572082]
Test Case: 150 | Input/Output: [[-3.205808374628077 -71] -74.20580837462808]
Test Case: 151 | Input/Output: [[-27.64369035012176 38] 10.356309649878241]
Test Case: 152 | Input/Output: [[98.86854066943837 -100] -1.1314593305616256]
Test Case: 153 | Input/Output: [[-55.3868063690794 46] -9.386806369079402]
Test Case: 154 | Input/Output: [[-21.92574300846168 69] 47.07425699153832]
Test Case: 155 | Input/Output: [[-36.208033419368554 72] 35.791966580631446]
Test Case: 156 | Input/Output: [[17.810012820292002 -100] -82.189987179708]
Test Case: 157 | Input/Output: [[19.039048543699664 58] 77.03904854369966]
Test Case: 158 | Input/Output: [[30.74215864037538 -40] -9.25784135962462]
Test Case: 159 | Input/Output: [[-56.255176450997205 -67] -123.2551764509972]
Test Case: 160 | Input/Output: [[15.97635198660383 -12] 3.976351986603831]
Test Case: 161 | Input/Output: [[80.75370773533416 -67] 13.75370773533416]
Test Case: 162 | Input/Output: [[-73.24118840641029 23] -50.24118840641029]
Test Case: 163 | Input/Output: [[26.09912728039008 -4] 22.09912728039008]
Test Case: 164 | Input/Output: [[45.471619789473266 50] 95.47161978947327]
Test Case: 165 | Input/Output: [[-5.964154896962754 16] 10.035845103037246]
Test Case: 166 | Input/Output: [[3.9307968711194405 -48] -44.06920312888056]
Test Case: 167 | Input/Output: [[-97.88625026670172 -97] -194.88625026670172]
Test Case: 168 | Input/Output: [[38.30379122254618 -98] -59.69620877745382]
Test Case: 169 | Input/Output: [[-56.99886615429737 -13] -69.99886615429736]
Test Case: 170 | Input/Output: [[-95.37490830487327 42] -53.37490830487327]
Test Case: 171 | Input/Output: [[-75.568941920645 13] -62.568941920645]
Test Case: 172 | Input/Output: [[-14.76590832890156 -43] -57.76590832890156]
Test Case: 173 | Input/Output: [[35.97335050000095 1] 36.97335050000095]
Test Case: 174 | Input/Output: [[-17.56173273656418 36] 18.43826726343582]
Test Case: 175 | Input/Output: [[-9.725968941747354 97] 87.27403105825265]
Test Case: 176 | Input/Output: [[-32.373988587653415 -71] -103.37398858765341]
Test Case: 177 | Input/Output: [[66.19838099864523 -21] 45.198380998645234]
Test Case: 178 | Input/Output: [[-59.43140940355982 27] -32.43140940355982]
Test Case: 179 | Input/Output: [[-19.945393656296503 82] 62.0546063437035]
Test Case: 180 | Input/Output: [[28.359684145414292 78] 106.35968414541429]
Test Case: 181 | Input/Output: [[-16.155076382491274 9] -7.1550763824912735]
Test Case: 182 | Input/Output: [[-15.032868568850489 -58] -73.03286856885049]
Test Case: 183 | Input/Output: [[-81.05422394374308 92] 10.945776056256918]
Test Case: 184 | Input/Output: [[50.04109162253971 12] 62.04109162253971]
Test Case: 185 | Input/Output: [[35.1810274655773 95] 130.1810274655773]
Test Case: 186 | Input/Output: [[-47.44546907665295 87] 39.55453092334705]
Test Case: 187 | Input/Output: [[-91.25678443370096 -72] -163.25678443370094]
Test Case: 188 | Input/Output: [[80.33889310521982 53] 133.33889310521982]
Test Case: 189 | Input/Output: [[80.26308432922721 -83] -2.736915670772788]
Test Case: 190 | Input/Output: [[-14.050780556989679 -35] -49.05078055698968]
Test Case: 191 | Input/Output: [[4.344118066444352 43] 47.34411806644435]
Test Case: 192 | Input/Output: [[52.46154577405747 -20] 32.46154577405747]
Test Case: 193 | Input/Output: [[47.692971102924986 52] 99.69297110292499]
Test Case: 194 | Input/Output: [[68.74843041844679 76] 144.7484304184468]
Test Case: 195 | Input/Output: [[-4.655081579280846 -24] -28.655081579280846]
Test Case: 196 | Input/Output: [[88.61449024304468 83] 171.61449024304468]
Test Case: 197 | Input/Output: [[-77.63229287651181 -51] -128.63229287651183]
Test Case: 198 | Input/Output: [[65.40283579039959 -95] -29.597164209600408]
Test Case: 199 | Input/Output: [[-41.2866192504658 -34] -75.2866192504658]
Test Case: 200 | Input/Output: [[-18.23378279831988 -97] -115.23378279831988]
Test Case: 201 | Input/Output: [[6.826608768292061 -18] -11.173391231707939]
Test Case: 202 | Input/Output: [[19.219416018238505 -75] -55.780583981761495]
Test Case: 203 | Input/Output: [[-78.66361339124812 39] -39.66361339124812]
Test Case: 204 | Input/Output: [[-79.27918136021266 77] -2.279181360212661]
Test Case: 205 | Input/Output: [[81.39337408997488 81] 162.39337408997488]
Test Case: 206 | Input/Output: [[87.27777749392479 34] 121.27777749392479]
Test Case: 207 | Input/Output: [[-6.027069532613055 14] 7.972930467386945]
Test Case: 208 | Input/Output: [[-26.009639535740845 87] 60.990360464259155]
Test Case: 209 | Input/Output: [[81.9240568954848 65] 146.9240568954848]
Test Case: 210 | Input/Output: [[-26.566320714755335 -72] -98.56632071475534]
Test Case: 211 | Input/Output: [[-51.16164565263421 -2] -53.16164565263421]
Test Case: 212 | Input/Output: [[-50.95021647857854 -1] -51.95021647857854]
Test Case: 213 | Input/Output: [[94.00476179555412 -58] 36.00476179555412]
Test Case: 214 | Input/Output: [[92.35404105711814 -24] 68.35404105711814]
Test Case: 215 | Input/Output: [[44.953963816135314 -61] -16.046036183864686]
Test Case: 216 | Input/Output: [[-87.45203338984587 49] -38.452033389845866]
Test Case: 217 | Input/Output: [[-11.875767497359718 72] 60.12423250264028]
Test Case: 218 | Input/Output: [[-12.423099866618344 50] 37.576900133381656]
Test Case: 219 | Input/Output: [[-94.40537731252195 -20] -114.40537731252195]
Test Case: 220 | Input/Output: [[-61.37414233362293 50] -11.374142333622927]
Test Case: 221 | Input/Output: [[67.00488173704045 -3] 64.00488173704045]
Test Case: 222 | Input/Output: [[78.56708884705051 -48] 30.567088847050513]
Test Case: 223 | Input/Output: [[90.82387053027793 97] 187.82387053027793]
Test Case: 224 | Input/Output: [[35.56107195028062 -68] -32.43892804971938]
Test Case: 225 | Input/Output: [[-25.65264267489671 -81] -106.65264267489671]
Test Case: 226 | Input/Output: [[49.999479467189445 -29] 20.999479467189445]
Test Case: 227 | Input/Output: [[89.01023881426855 84] 173.01023881426855]
Test Case: 228 | Input/Output: [[-94.26538644692377 96] 1.7346135530762297]
Test Case: 229 | Input/Output: [[53.45778072053321 58] 111.45778072053321]
Test Case: 230 | Input/Output: [[83.09195017461425 -85] -1.9080498253857456]
Test Case: 231 | Input/Output: [[-48.01259348562006 -12] -60.01259348562006]
Test Case: 232 | Input/Output: [[-55.89906168170524 92] 36.10093831829476]
Test Case: 233 | Input/Output: [[-85.58159700175494 -59] -144.58159700175494]
Test Case: 234 | Input/Output: [[-30.24062729024108 -28] -58.24062729024108]
Test Case: 235 | Input/Output: [[-57.24479257905997 -1] -58.24479257905997]
Test Case: 236 | Input/Output: [[99.25448056627323 -2] 97.25448056627323]
Test Case: 237 | Input/Output: [[99.26815469501523 34] 133.26815469501523]
Test Case: 238 | Input/Output: [[-0.04616326229947276 -33] -33.04616326229947]
Test Case: 239 | Input/Output: [[-53.978561161530926 -77] -130.97856116153093]
Test Case: 240 | Input/Output: [[-82.41730595592942 -92] -174.4173059559294]
Test Case: 241 | Input/Output: [[-9.912095782839089 47] 37.08790421716091]
Test Case: 242 | Input/Output: [[6.85559427743469 67] 73.85559427743469]
Test Case: 243 | Input/Output: [[-60.41866773481757 -56] -116.41866773481757]
Test Case: 244 | Input/Output: [[-97.24810280950504 -97] -194.24810280950504]
Test Case: 245 | Input/Output: [[59.3832005382537 -75] -15.616799461746297]
Test Case: 246 | Input/Output: [[-50.037970094145656 97] 46.962029905854344]
Test Case: 247 | Input/Output: [[36.80231868279046 25] 61.80231868279046]
Test Case: 248 | Input/Output: [[-12.621623580921366 -32] -44.621623580921366]
Test Case: 249 | Input/Output: [[-0.6715712091238402 29] 28.32842879087616]
Test Case: 250 | Input/Output: [[8.059400053115809 88] 96.05940005311581]
Test Case: 251 | Input/Output: [[-44.8006996734176 -93] -137.8006996734176]
Test Case: 252 | Input/Output: [[-45.700829159760744 -23] -68.70082915976074]
Test Case: 253 | Input/Output: [[-23.154481066899862 55] 31.845518933100138]
Test Case: 254 | Input/Output: [[39.58244183569079 -76] -36.41755816430921]
Test Case: 255 | Input/Output: [[-63.076203849688525 55] -8.076203849688525]
Test Case: 256 | Input/Output: [[-53.462310897592126 -38] -91.46231089759212]
Test Case: 257 | Input/Output: [[59.63784052592979 -56] 3.6378405259297892]
Test Case: 258 | Input/Output: [[-38.21791222638187 16] -22.21791222638187]
Test Case: 259 | Input/Output: [[14.869511950873473 -23] -8.130488049126527]
Test Case: 260 | Input/Output: [[88.13577215719718 -56] 32.13577215719718]
Test Case: 261 | Input/Output: [[-50.62505362717076 -14] -64.62505362717076]
Test Case: 262 | Input/Output: [[-43.64417972130934 32] -11.644179721309342]
Test Case: 263 | Input/Output: [[-17.469853091994196 71] 53.530146908005804]
Test Case: 264 | Input/Output: [[-62.74041669206773 -34] -96.74041669206773]
Test Case: 265 | Input/Output: [[-36.06717209945531 -48] -84.06717209945532]
Test Case: 266 | Input/Output: [[-42.92794393843553 81] 38.07205606156447]
Test Case: 267 | Input/Output: [[77.26037435111124 36] 113.26037435111124]
Test Case: 268 | Input/Output: [[7.4195425861777125 -13] -5.5804574138222875]
Test Case: 269 | Input/Output: [[-22.017733074679228 -51] -73.01773307467923]
Test Case: 270 | Input/Output: [[3.40712541898111 -72] -68.59287458101889]
Test Case: 271 | Input/Output: [[20.47793380088467 61] 81.47793380088467]
Test Case: 272 | Input/Output: [[-62.47095233773157 99] 36.52904766226843]
Test Case: 273 | Input/Output: [[4.813760135144179 0] 4.813760135144179]
Test Case: 274 | Input/Output: [[-28.45920323957867 -96] -124.45920323957867]
Test Case: 275 | Input/Output: [[64.05532670024442 -59] 5.0553267002444215]
Test Case: 276 | Input/Output: [[-45.56793584903298 57] 11.432064150967022]
Test Case: 277 | Input/Output: [[-83.82767966470831 -66] -149.8276796647083]
Test Case: 278 | Input/Output: [[-84.75829402300914 -76] -160.75829402300914]
Test Case: 279 | Input/Output: [[76.72480690271323 66] 142.72480690271323]
Test Case: 280 | Input/Output: [[-45.26315975745388 22] -23.263159757453877]
Test Case: 281 | Input/Output: [[9.819913553581273 31] 40.81991355358127]
Test Case: 282 | Input/Output: [[-19.319690610445562 23] 3.680309389554438]
Test Case: 283 | Input/Output: [[15.409629678391596 -37] -21.590370321608404]
Test Case: 284 | Input/Output: [[-57.70885449112744 95] 37.29114550887256]
Test Case: 285 | Input/Output: [[-73.03026498860402 71] -2.030264988604017]
Test Case: 286 | Input/Output: [[-81.06969713068757 99] 17.930302869312428]
Test Case: 287 | Input/Output: [[17.826805904863235 85] 102.82680590486324]
Test Case: 288 | Input/Output: [[-54.32420794243589 -75] -129.3242079424359]
Test Case: 289 | Input/Output: [[-84.05323362236759 92] 7.9467663776324144]
Test Case: 290 | Input/Output: [[7.33874337277021 -13] -5.66125662722979]
Test Case: 291 | Input/Output: [[84.44226798041029 -3] 81.44226798041029]
Test Case: 292 | Input/Output: [[45.199984831403356 -3] 42.199984831403356]
Test Case: 293 | Input/Output: [[8.916039953916922 66] 74.91603995391692]
Test Case: 294 | Input/Output: [[-16.390815412829895 35] 18.609184587170105]
Test Case: 295 | Input/Output: [[-4.6204215749129105 82] 77.37957842508709]
Test Case: 296 | Input/Output: [[3.9812052015846717 30] 33.98120520158467]
Test Case: 297 | Input/Output: [[28.02127572171048 -93] -64.97872427828952]
Test Case: 298 | Input/Output: [[-85.0872037823905 -14] -99.0872037823905]
Test Case: 299 | Input/Output: [[-13.592686205516259 86] 72.40731379448374]
Test Case: 300 | Input/Output: [[-29.77559063982092 -26] -55.77559063982092]
Test Case: 301 | Input/Output: [[-26.105737541526835 14] -12.105737541526835]
Test Case: 302 | Input/Output: [[-64.95383616884278 -95] -159.95383616884277]
Test Case: 303 | Input/Output: [[-88.14655123117048 87] -1.146551231170477]
Test Case: 304 | Input/Output: [[-71.64054978283743 -87] -158.6405497828374]
Test Case: 305 | Input/Output: [[76.27900383091989 97] 173.2790038309199]
Test Case: 306 | Input/Output: [[52.93836041823894 10] 62.93836041823894]
Test Case: 307 | Input/Output: [[29.644885017113666 89] 118.64488501711367]
Test Case: 308 | Input/Output: [[25.798928638558976 -24] 1.7989286385589764]
Test Case: 309 | Input/Output: [[-78.91704760342866 9] -69.91704760342866]
Test Case: 310 | Input/Output: [[42.692831349718375 9] 51.692831349718375]
Test Case: 311 | Input/Output: [[60.88432692259852 7] 67.88432692259852]
Test Case: 312 | Input/Output: [[61.056014235444025 -72] -10.943985764555975]
Test Case: 313 | Input/Output: [[72.88853476643092 -4] 68.88853476643092]
Test Case: 314 | Input/Output: [[63.01783231071224 -86] -22.982167689287763]
Test Case: 315 | Input/Output: [[-84.1065235813451 22] -62.1065235813451]
Test Case: 316 | Input/Output: [[69.90812499442075 79] 148.90812499442075]
Test Case: 317 | Input/Output: [[-97.95089493542295 -24] -121.95089493542295]
Test Case: 318 | Input/Output: [[-77.62084230737749 -18] -95.62084230737749]
Test Case: 319 | Input/Output: [[-13.965371629073942 -7] -20.965371629073942]
Test Case: 320 | Input/Output: [[60.22935982985214 -43] 17.229359829852143]
Test Case: 321 | Input/Output: [[-47.03456751660562 41] -6.03456751660562]
Test Case: 322 | Input/Output: [[0.09028628493766178 8] 8.090286284937662]
Test Case: 323 | Input/Output: [[78.81895756059814 -87] -8.181042439401864]
Test Case: 324 | Input/Output: [[28.518314799124482 -22] 6.518314799124482]
Test Case: 325 | Input/Output: [[-41.086944075824874 93] 51.913055924175126]
Test Case: 326 | Input/Output: [[-14.085769020490432 -31] -45.08576902049043]
Test Case: 327 | Input/Output: [[-12.796172504854425 26] 13.203827495145575]
Test Case: 328 | Input/Output: [[35.2133569443707 -89] -53.7866430556293]
Test Case: 329 | Input/Output: [[-28.932789778813657 100] 71.06721022118634]
Test Case: 330 | Input/Output: [[-84.75072713863456 -35] -119.75072713863456]
Test Case: 331 | Input/Output: [[24.0855396805149 74] 98.0855396805149]
Test Case: 332 | Input/Output: [[-34.93618699772338 -92] -126.93618699772338]
Test Case: 333 | Input/Output: [[-30.391006180472544 5] -25.391006180472544]
Test Case: 334 | Input/Output: [[18.11157917805606 83] 101.11157917805606]
Test Case: 335 | Input/Output: [[35.50595018330574 100] 135.50595018330574]
Test Case: 336 | Input/Output: [[-68.42944908749449 40] -28.42944908749449]
Test Case: 337 | Input/Output: [[67.19273816185782 24] 91.19273816185782]
Test Case: 338 | Input/Output: [[-96.88986422639205 51] -45.88986422639205]
Test Case: 339 | Input/Output: [[-82.49977604870551 -63] -145.4997760487055]
Test Case: 340 | Input/Output: [[88.06721257344344 41] 129.06721257344344]
Test Case: 341 | Input/Output: [[-6.884799514708689 -14] -20.88479951470869]
Test Case: 342 | Input/Output: [[76.77726879176231 -31] 45.77726879176231]
Test Case: 343 | Input/Output: [[32.372544333322395 -49] -16.627455666677605]
Test Case: 344 | Input/Output: [[-66.03877142981558 82] 15.961228570184417]
Test Case: 345 | Input/Output: [[6.009341397986034 -59] -52.990658602013966]
Test Case: 346 | Input/Output: [[-57.711940205129466 -88] -145.71194020512945]
Test Case: 347 | Input/Output: [[95.69084980812158 0] 95.69084980812158]
Test Case: 348 | Input/Output: [[58.038890276993385 41] 99.03889027699338]
Test Case: 349 | Input/Output: [[54.78980893983126 -65] -10.21019106016874]
Test Case: 350 | Input/Output: [[-47.72582648875061 7] -40.72582648875061]
Test Case: 351 | Input/Output: [[-30.923103988318587 18] -12.923103988318587]
Test Case: 352 | Input/Output: [[39.17410541568077 33] 72.17410541568077]
Test Case: 353 | Input/Output: [[38.95265768716308 37] 75.95265768716308]
Test Case: 354 | Input/Output: [[-3.9045535550815913 -65] -68.90455355508159]
Test Case: 355 | Input/Output: [[-99.94879223028646 -6] -105.94879223028646]
Test Case: 356 | Input/Output: [[93.68039488666662 -66] 27.68039488666662]
Test Case: 357 | Input/Output: [[-12.069576236591189 -31] -43.06957623659119]
Test Case: 358 | Input/Output: [[15.215180909469254 72] 87.21518090946925]
Test Case: 359 | Input/Output: [[74.29531741642549 66] 140.2953174164255]
Test Case: 360 | Input/Output: [[-82.09883016297485 20] -62.09883016297485]
Test Case: 361 | Input/Output: [[34.91184675528575 -43] -8.088153244714249]
Test Case: 362 | Input/Output: [[-84.6379272035893 65] -19.6379272035893]
Test Case: 363 | Input/Output: [[-77.17656423476046 -64] -141.17656423476046]
Test Case: 364 | Input/Output: [[71.00767236216768 -16] 55.00767236216768]
Test Case: 365 | Input/Output: [[-14.854719595537375 64] 49.145280404462625]
Test Case: 366 | Input/Output: [[-52.19350574061603 -36] -88.19350574061603]
Test Case: 367 | Input/Output: [[-23.233868499557644 47] 23.766131500442356]
Test Case: 368 | Input/Output: [[-66.86390206140953 -11] -77.86390206140953]
Test Case: 369 | Input/Output: [[-20.69415188644706 39] 18.30584811355294]
Test Case: 370 | Input/Output: [[47.99936610863588 -46] 1.9993661086358827]
Test Case: 371 | Input/Output: [[-87.62152890354753 69] -18.621528903547528]
Test Case: 372 | Input/Output: [[31.560396948708217 -81] -49.43960305129178]
Test Case: 373 | Input/Output: [[13.59205772610106 12] 25.59205772610106]
Test Case: 374 | Input/Output: [[25.58349057412528 31] 56.58349057412528]
Test Case: 375 | Input/Output: [[-66.8911753517512 98] 31.1088246482488]
Test Case: 376 | Input/Output: [[-60.05837618090495 95] 34.94162381909505]
Test Case: 377 | Input/Output: [[61.80824765714752 -18] 43.80824765714752]
Test Case: 378 | Input/Output: [[95.2688278209736 -61] 34.2688278209736]
Test Case: 379 | Input/Output: [[75.8787193531862 76] 151.8787193531862]
Test Case: 380 | Input/Output: [[-53.22256388601934 51] -2.222563886019337]
Test Case: 381 | Input/Output: [[49.826579506750335 -37] 12.826579506750335]
Test Case: 382 | Input/Output: [[-48.65674220766123 -43] -91.65674220766124]
Test Case: 383 | Input/Output: [[-86.93799323800116 24] -62.937993238001155]
Test Case: 384 | Input/Output: [[-24.76871112897581 46] 21.23128887102419]
Test Case: 385 | Input/Output: [[33.503737915702686 78] 111.50373791570269]
Test Case: 386 | Input/Output: [[18.023304577818422 6] 24.023304577818422]
Test Case: 387 | Input/Output: [[16.11952404682542 -90] -73.88047595317458]
Test Case: 388 | Input/Output: [[53.92198631732549 78] 131.9219863173255]
Test Case: 389 | Input/Output: [[-21.67776248310504 24] 2.3222375168949583]
Test Case: 390 | Input/Output: [[67.57604222643369 67] 134.57604222643369]
Test Case: 391 | Input/Output: [[-98.04434545426967 39] -59.044345454269674]
Test Case: 392 | Input/Output: [[40.77664561655652 -71] -30.22335438344348]
Test Case: 393 | Input/Output: [[-75.97206969713268 -82] -157.97206969713267]
Test Case: 394 | Input/Output: [[70.86450801323073 -50] 20.864508013230733]
Test Case: 395 | Input/Output: [[-2.9717553016972147 -33] -35.971755301697215]
Test Case: 396 | Input/Output: [[5.304518945463556 -46] -40.695481054536444]
Test Case: 397 | Input/Output: [[74.70408829963054 80] 154.70408829963054]
Test Case: 398 | Input/Output: [[49.06914075748037 -78] -28.93085924251963]
Test Case: 399 | Input/Output: [[-67.04350829894389 54] -13.043508298943891]
Test Case: 400 | Input/Output: [[92.70458476897758 -17] 75.70458476897758]
Test Case: 401 | Input/Output: [[37.686393632055285 51] 88.68639363205529]
Test Case: 402 | Input/Output: [[5.3231873120871 -100] -94.6768126879129]
Test Case: 403 | Input/Output: [[17.15357832524404 12] 29.15357832524404]
Test Case: 404 | Input/Output: [[14.958360566760248 -54] -39.04163943323975]
Test Case: 405 | Input/Output: [[-88.3129719169739 -60] -148.31297191697388]
Test Case: 406 | Input/Output: [[50.48339714567328 82] 132.48339714567328]
Test Case: 407 | Input/Output: [[84.06378850388134 45] 129.06378850388134]
Test Case: 408 | Input/Output: [[55.62199986049342 -8] 47.62199986049342]
Test Case: 409 | Input/Output: [[-60.96865380448253 -6] -66.96865380448253]
Test Case: 410 | Input/Output: [[49.94379544374323 86] 135.94379544374323]
Test Case: 411 | Input/Output: [[-75.87022980476677 16] -59.870229804766765]
Test Case: 412 | Input/Output: [[65.65414400063082 42] 107.65414400063082]
Test Case: 413 | Input/Output: [[-89.92611031964137 68] -21.926110319641367]
Test Case: 414 | Input/Output: [[3.011303163648705 -29] -25.988696836351295]
Test Case: 415 | Input/Output: [[-25.408573543132036 43] 17.591426456867964]
Test Case: 416 | Input/Output: [[-32.86181988921135 36] 3.138180110788653]
Test Case: 417 | Input/Output: [[-52.87005639763791 -73] -125.87005639763791]
Test Case: 418 | Input/Output: [[6.7613659694206945 15] 21.761365969420694]
Test Case: 419 | Input/Output: [[80.69493080722069 63] 143.6949308072207]
Test Case: 420 | Input/Output: [[19.877845539348883 -51] -31.122154460651117]
Test Case: 421 | Input/Output: [[-47.9649420206212 -61] -108.96494202062121]
Test Case: 422 | Input/Output: [[-35.7246702526072 -16] -51.7246702526072]
Test Case: 423 | Input/Output: [[4.852891257729226 79] 83.85289125772923]
Test Case: 424 | Input/Output: [[-85.59901635018998 -40] -125.59901635018998]
Test Case: 425 | Input/Output: [[0.06248664511420543 -62] -61.937513354885795]
Test Case: 426 | Input/Output: [[33.44277297193605 50] 83.44277297193605]
Test Case: 427 | Input/Output: [[-87.11333355183955 -93] -180.11333355183956]
Test Case: 428 | Input/Output: [[-16.482043248835936 -71] -87.48204324883594]
Test Case: 429 | Input/Output: [[-70.19607186473266 1] -69.19607186473266]
Test Case: 430 | Input/Output: [[-88.5797885586399 3] -85.5797885586399]
Test Case: 431 | Input/Output: [[37.5054517259405 10] 47.5054517259405]
Test Case: 432 | Input/Output: [[-96.2159143388722 -12] -108.2159143388722]
Test Case: 433 | Input/Output: [[14.57309024397739 -73] -58.42690975602261]
Test Case: 434 | Input/Output: [[-27.263135854674545 -97] -124.26313585467454]
Test Case: 435 | Input/Output: [[-49.47715890869118 17] -32.47715890869118]
Test Case: 436 | Input/Output: [[-14.694830531523678 -52] -66.69483053152368]
Test Case: 437 | Input/Output: [[15.458200046942736 30] 45.458200046942736]
Test Case: 438 | Input/Output: [[-21.489206260636905 -75] -96.4892062606369]
Test Case: 439 | Input/Output: [[-42.24294496617067 -88] -130.24294496617068]
Test Case: 440 | Input/Output: [[-78.20334372332469 -5] -83.20334372332469]
Test Case: 441 | Input/Output: [[68.9301074248539 40] 108.9301074248539]
Test Case: 442 | Input/Output: [[-5.799813581928916 -99] -104.79981358192892]
Test Case: 443 | Input/Output: [[-84.7048281859441 -22] -106.7048281859441]
Test Case: 444 | Input/Output: [[93.78961390116046 -56] 37.789613901160465]
Test Case: 445 | Input/Output: [[-41.22262627631692 -98] -139.22262627631693]
Test Case: 446 | Input/Output: [[16.872560588404113 -54] -37.12743941159589]
Test Case: 447 | Input/Output: [[6.046131716422948 53] 59.04613171642295]
Test Case: 448 | Input/Output: [[-43.32120919572269 -32] -75.32120919572269]
Test Case: 449 | Input/Output: [[-66.70949019391803 -80] -146.70949019391804]
Test Case: 450 | Input/Output: [[63.8017293679369 71] 134.8017293679369]
Test Case: 451 | Input/Output: [[-37.69207499876168 -56] -93.69207499876168]
Test Case: 452 | Input/Output: [[36.91898998236556 -95] -58.08101001763444]
Test Case: 453 | Input/Output: [[-29.54521539292226 0] -29.54521539292226]
Test Case: 454 | Input/Output: [[59.46246896838818 34] 93.46246896838818]
Test Case: 455 | Input/Output: [[65.46703538980444 67] 132.46703538980444]
Test Case: 456 | Input/Output: [[-16.738452866257376 -80] -96.73845286625738]
Test Case: 457 | Input/Output: [[48.52701017568242 -77] -28.47298982431758]
Test Case: 458 | Input/Output: [[93.81841102866201 -47] 46.81841102866201]
Test Case: 459 | Input/Output: [[-80.11595115269648 1] -79.11595115269648]
Test Case: 460 | Input/Output: [[53.004470407209624 -17] 36.004470407209624]
Test Case: 461 | Input/Output: [[-86.95747958922215 -67] -153.95747958922215]
Test Case: 462 | Input/Output: [[-86.37096252073152 -10] -96.37096252073152]
Test Case: 463 | Input/Output: [[-32.971870480293845 30] -2.9718704802938447]
Test Case: 464 | Input/Output: [[57.009622023967665 46] 103.00962202396767]
Test Case: 465 | Input/Output: [[-98.56156412808106 2] -96.56156412808106]
Test Case: 466 | Input/Output: [[35.156073928000865 54] 89.15607392800086]
Test Case: 467 | Input/Output: [[-34.469752223681255 18] -16.469752223681255]
Test Case: 468 | Input/Output: [[-83.20389996243844 -98] -181.20389996243844]
Test Case: 469 | Input/Output: [[-36.40777863632425 64] 27.592221363675748]
Test Case: 470 | Input/Output: [[47.30536401979222 -31] 16.305364019792222]
Test Case: 471 | Input/Output: [[-77.63261267218923 65] -12.632612672189225]
Test Case: 472 | Input/Output: [[62.302131608605634 39] 101.30213160860563]
Test Case: 473 | Input/Output: [[68.4235959821172 -99] -30.576404017882794]
Test Case: 474 | Input/Output: [[-53.05864917297218 -7] -60.05864917297218]
Test Case: 475 | Input/Output: [[-43.632209638566664 -54] -97.63220963856666]
Test Case: 476 | Input/Output: [[54.12784449526842 -92] -37.87215550473158]
Test Case: 477 | Input/Output: [[-27.503076835204496 15] -12.503076835204496]
Test Case: 478 | Input/Output: [[50.83916802037169 -93] -42.16083197962831]
Test Case: 479 | Input/Output: [[-11.99454653294498 8] -3.9945465329449803]
Test Case: 480 | Input/Output: [[72.27096788050613 1] 73.27096788050613]
Test Case: 481 | Input/Output: [[65.10536881884656 31] 96.10536881884656]
Test Case: 482 | Input/Output: [[-97.70440246031345 16] -81.70440246031345]
Test Case: 483 | Input/Output: [[56.37502318869281 -35] 21.375023188692808]
Test Case: 484 | Input/Output: [[-92.6138904292794 -8] -100.6138904292794]
Test Case: 485 | Input/Output: [[-44.53600666404971 -42] -86.53600666404971]
Test Case: 486 | Input/Output: [[0.3092485076945337 -82] -81.69075149230547]
Test Case: 487 | Input/Output: [[18.89932842638538 -8] 10.899328426385381]
Test Case: 488 | Input/Output: [[99.31518943331196 -27] 72.31518943331196]
Test Case: 489 | Input/Output: [[-30.164144355719074 35] 4.835855644280926]
Test Case: 490 | Input/Output: [[-83.02930660285021 60] -23.029306602850212]
Test Case: 491 | Input/Output: [[52.39881415378028 -94] -41.60118584621972]
Test Case: 492 | Input/Output: [[-11.597975420861559 5] -6.597975420861559]
Test Case: 493 | Input/Output: [[-41.07700100440932 -66] -107.07700100440931]
Test Case: 494 | Input/Output: [[-85.36514463043827 41] -44.365144630438266]
Test Case: 495 | Input/Output: [[47.27050837749479 92] 139.2705083774948]
Test Case: 496 | Input/Output: [[-66.09253964703016 -6] -72.09253964703016]
Test Case: 497 | Input/Output: [[82.6858677242237 99] 181.6858677242237]
Test Case: 498 | Input/Output: [[-71.09344896129804 -8] -79.09344896129804]
Test Case: 499 | Input/Output: [[-53.247150971572864 94] 40.752849028427136]
Test Case: 500 | Input/Output: [[31.036378929663243 -6] 25.036378929663243]
Test Case: 501 | Input/Output: [[60.14378372591352 -67] -6.856216274086478]
Test Case: 502 | Input/Output: [[90.2536628289229 -50] 40.2536628289229]
Test Case: 503 | Input/Output: [[-38.49370841512434 -94] -132.49370841512433]
Test Case: 504 | Input/Output: [[-82.97238615018294 71] -11.972386150182942]
Test Case: 505 | Input/Output: [[70.75195875457408 14] 84.75195875457408]
Test Case: 506 | Input/Output: [[74.49664079283227 31] 105.49664079283227]
Test Case: 507 | Input/Output: [[17.127092616847065 67] 84.12709261684707]
Test Case: 508 | Input/Output: [[88.84046921826581 -64] 24.84046921826581]
Test Case: 509 | Input/Output: [[13.973664587640712 16] 29.973664587640712]
Test Case: 510 | Input/Output: [[47.36484830764786 70] 117.36484830764786]
Test Case: 511 | Input/Output: [[-8.55238609172342 12] 3.4476139082765798]
Test Case: 512 | Input/Output: [[24.80235057686673 -17] 7.802350576866729]
Test Case: 513 | Input/Output: [[79.42913388231071 -4] 75.42913388231071]
Test Case: 514 | Input/Output: [[-93.21965070114867 16] -77.21965070114867]
Test Case: 515 | Input/Output: [[-2.093449166957285 -4] -6.093449166957285]
Test Case: 516 | Input/Output: [[-90.67547406492875 -89] -179.67547406492875]
Test Case: 517 | Input/Output: [[-11.051969932966202 -15] -26.051969932966202]
Test Case: 518 | Input/Output: [[-71.95312381548105 -60] -131.95312381548104]
Test Case: 519 | Input/Output: [[-60.94077076653912 -35] -95.94077076653912]
Test Case: 520 | Input/Output: [[3.4775592810158287 -58] -54.52244071898417]
Test Case: 521 | Input/Output: [[95.12684035130516 0] 95.12684035130516]
Test Case: 522 | Input/Output: [[64.24287238287633 44] 108.24287238287633]
Test Case: 523 | Input/Output: [[50.086448911205196 -19] 31.086448911205196]
Test Case: 524 | Input/Output: [[-73.6288370759273 -43] -116.6288370759273]
Test Case: 525 | Input/Output: [[-65.71108776932293 48] -17.71108776932293]
Test Case: 526 | Input/Output: [[-65.81709929079756 10] -55.81709929079756]
Test Case: 527 | Input/Output: [[56.48135895168642 28] 84.48135895168642]
Test Case: 528 | Input/Output: [[88.75884425202625 49] 137.75884425202625]
Test Case: 529 | Input/Output: [[29.991908719611388 -59] -29.008091280388612]
Test Case: 530 | Input/Output: [[-74.72665237835898 55] -19.726652378358978]
Test Case: 531 | Input/Output: [[75.10247891442185 95] 170.10247891442185]
Test Case: 532 | Input/Output: [[-84.15668635496144 64] -20.156686354961437]
Test Case: 533 | Input/Output: [[-26.316173900983756 83] 56.683826099016244]
Test Case: 534 | Input/Output: [[-30.314826835628935 -11] -41.314826835628935]
Test Case: 535 | Input/Output: [[-57.706525710075326 -8] -65.70652571007533]
Test Case: 536 | Input/Output: [[-27.33553264795576 -86] -113.33553264795576]
Test Case: 537 | Input/Output: [[-69.11963151224614 65] -4.119631512246144]
Test Case: 538 | Input/Output: [[-58.95617829480359 90] 31.043821705196407]
Test Case: 539 | Input/Output: [[73.30610590725243 23] 96.30610590725243]
Test Case: 540 | Input/Output: [[88.56702262935659 41] 129.5670226293566]
Test Case: 541 | Input/Output: [[91.68662796885383 76] 167.68662796885383]
Test Case: 542 | Input/Output: [[10.806498355252117 40] 50.80649835525212]
Test Case: 543 | Input/Output: [[-76.11463453213238 100] 23.885365467867615]
Test Case: 544 | Input/Output: [[-9.708763491616295 97] 87.2912365083837]
Test Case: 545 | Input/Output: [[72.04593256133523 -31] 41.045932561335235]
Test Case: 546 | Input/Output: [[41.69085085865447 -83] -41.30914914134553]
Test Case: 547 | Input/Output: [[90.15597467902836 -85] 5.155974679028361]
Test Case: 548 | Input/Output: [[71.61515436088774 -36] 35.61515436088774]
Test Case: 549 | Input/Output: [[-60.71440111626889 -87] -147.7144011162689]
Test Case: 550 | Input/Output: [[-1.1702890635188794 -47] -48.17028906351888]
Test Case: 551 | Input/Output: [[16.314696045718307 78] 94.3146960457183]
Test Case: 552 | Input/Output: [[32.24800123007975 -44] -11.751998769920249]
Test Case: 553 | Input/Output: [[45.714330328379305 84] 129.7143303283793]
Test Case: 554 | Input/Output: [[-0.6351015076251088 65] 64.36489849237489]
Test Case: 555 | Input/Output: [[-57.22164957008869 0] -57.22164957008869]
Test Case: 556 | Input/Output: [[-49.39117178564545 -17] -66.39117178564544]
Test Case: 557 | Input/Output: [[-94.78129075292547 -27] -121.78129075292547]
Test Case: 558 | Input/Output: [[66.25259483788554 3] 69.25259483788554]
Test Case: 559 | Input/Output: [[-15.780782231271758 8] -7.780782231271758]
Test Case: 560 | Input/Output: [[69.6388222331984 -81] -11.361177766801603]
Test Case: 561 | Input/Output: [[-1.9288383057561447 58] 56.071161694243855]
Test Case: 562 | Input/Output: [[-50.48407068240852 -28] -78.48407068240851]
Test Case: 563 | Input/Output: [[9.621725505491312 -48] -38.37827449450869]
Test Case: 564 | Input/Output: [[-61.013753540071505 -5] -66.0137535400715]
Test Case: 565 | Input/Output: [[45.37261566054852 80] 125.37261566054852]
Test Case: 566 | Input/Output: [[-55.803546925572704 -98] -153.8035469255727]
Test Case: 567 | Input/Output: [[26.20474629327188 37] 63.20474629327188]
Test Case: 568 | Input/Output: [[76.44334948448088 28] 104.44334948448088]
Test Case: 569 | Input/Output: [[16.295493598554728 18] 34.29549359855473]
Test Case: 570 | Input/Output: [[6.0751877400814465 -69] -62.92481225991855]
Test Case: 571 | Input/Output: [[74.68170645718581 64] 138.6817064571858]
Test Case: 572 | Input/Output: [[-24.61011918184579 -16] -40.61011918184579]
Test Case: 573 | Input/Output: [[48.556354366026 32] 80.556354366026]
Test Case: 574 | Input/Output: [[92.62424987435864 -72] 20.62424987435864]
Test Case: 575 | Input/Output: [[-52.771573642998206 -43] -95.7715736429982]
Test Case: 576 | Input/Output: [[39.06788629395035 -39] 0.06788629395035173]
Test Case: 577 | Input/Output: [[60.729178018814366 -22] 38.729178018814366]
Test Case: 578 | Input/Output: [[-17.20416774363831 64] 46.79583225636169]
Test Case: 579 | Input/Output: [[-14.702814298462826 27] 12.297185701537174]
Test Case: 580 | Input/Output: [[-97.67705318473905 53] -44.67705318473905]
Test Case: 581 | Input/Output: [[4.5625800957106435 84] 88.56258009571064]
Test Case: 582 | Input/Output: [[65.50020278440348 100] 165.50020278440348]
Test Case: 583 | Input/Output: [[-17.47278452768593 -81] -98.47278452768593]
Test Case: 584 | Input/Output: [[82.3859941055394 -45] 37.385994105539396]
Test Case: 585 | Input/Output: [[-55.35325247922207 24] -31.35325247922207]
Test Case: 586 | Input/Output: [[-98.2753276942724 -30] -128.2753276942724]
Test Case: 587 | Input/Output: [[-48.11941358222003 91] 42.88058641777997]
Test Case: 588 | Input/Output: [[2.8324827767470993 -43] -40.1675172232529]
Test Case: 589 | Input/Output: [[-57.15682322189555 -7] -64.15682322189555]
Test Case: 590 | Input/Output: [[-63.334325159813076 -69] -132.3343251598131]
Test Case: 591 | Input/Output: [[-55.860895570718405 -38] -93.86089557071841]
Test Case: 592 | Input/Output: [[55.99327450494556 -14] 41.99327450494556]
Test Case: 593 | Input/Output: [[97.76752608180303 -63] 34.76752608180303]
Test Case: 594 | Input/Output: [[28.84271805863372 55] 83.84271805863372]
Test Case: 595 | Input/Output: [[38.51187912606119 -21] 17.51187912606119]
Test Case: 596 | Input/Output: [[-17.486012164509816 78] 60.513987835490184]
Test Case: 597 | Input/Output: [[26.33474693903115 79] 105.33474693903115]
Test Case: 598 | Input/Output: [[63.707309200521365 -51] 12.707309200521365]
Test Case: 599 | Input/Output: [[-93.9902650497054 1] -92.9902650497054]
Test Case: 600 | Input/Output: [[88.7243850649376 -18] 70.7243850649376]
Test Case: 601 | Input/Output: [[-70.08795182696026 95] 24.912048173039736]
Test Case: 602 | Input/Output: [[98.45774903935322 -74] 24.457749039353217]
Test Case: 603 | Input/Output: [[37.26326905352698 1] 38.26326905352698]
Test Case: 604 | Input/Output: [[94.73182713137945 -52] 42.73182713137945]
Test Case: 605 | Input/Output: [[-41.57578925094321 39] -2.5757892509432097]
Test Case: 606 | Input/Output: [[82.73244607821744 -35] 47.732446078217436]
Test Case: 607 | Input/Output: [[62.263366046301 45] 107.263366046301]
Test Case: 608 | Input/Output: [[53.061438785285674 -33] 20.061438785285674]
Test Case: 609 | Input/Output: [[-93.953038957578 21] -72.953038957578]
Test Case: 610 | Input/Output: [[39.177008538616775 14] 53.177008538616775]
Test Case: 611 | Input/Output: [[37.95466992686525 84] 121.95466992686525]
Test Case: 612 | Input/Output: [[-35.106963576165256 -69] -104.10696357616526]
Test Case: 613 | Input/Output: [[-12.355452474140677 61] 48.64454752585932]
Test Case: 614 | Input/Output: [[92.03245297635166 -90] 2.0324529763516637]
Test Case: 615 | Input/Output: [[89.9990094509279 55] 144.9990094509279]
Test Case: 616 | Input/Output: [[19.83740088608708 81] 100.83740088608708]
Test Case: 617 | Input/Output: [[-70.0559463601219 -42] -112.0559463601219]
Test Case: 618 | Input/Output: [[12.029703364827313 65] 77.02970336482731]
Test Case: 619 | Input/Output: [[36.789525314295446 -78] -41.210474685704554]
Test Case: 620 | Input/Output: [[55.86019630400946 0] 55.86019630400946]
Test Case: 621 | Input/Output: [[-57.15310542071197 58] 0.8468945792880334]
Test Case: 622 | Input/Output: [[-50.16463953619146 -57] -107.16463953619146]
Test Case: 623 | Input/Output: [[41.93450141946883 -59] -17.06549858053117]
Test Case: 624 | Input/Output: [[-15.008029720153957 -84] -99.00802972015396]
Test Case: 625 | Input/Output: [[-42.19065128010235 96] 53.80934871989765]
Test Case: 626 | Input/Output: [[21.775208174727382 77] 98.77520817472738]
Test Case: 627 | Input/Output: [[-20.844610426193498 21] 0.1553895738065023]
Test Case: 628 | Input/Output: [[-25.575077926763186 13] -12.575077926763186]
Test Case: 629 | Input/Output: [[2.180018000377885 47] 49.180018000377885]
Test Case: 630 | Input/Output: [[79.83761433502323 97] 176.83761433502323]
Test Case: 631 | Input/Output: [[17.938180839687675 48] 65.93818083968767]
Test Case: 632 | Input/Output: [[86.75666230888635 -91] -4.243337691113652]
Test Case: 633 | Input/Output: [[-39.03396930736738 -15] -54.03396930736738]
Test Case: 634 | Input/Output: [[-4.871577694203836 -24] -28.871577694203836]
Test Case: 635 | Input/Output: [[96.04793976465339 1] 97.04793976465339]
Test Case: 636 | Input/Output: [[62.319524739430705 -6] 56.319524739430705]
Test Case: 637 | Input/Output: [[-36.77890965953259 -95] -131.7789096595326]
Test Case: 638 | Input/Output: [[97.61240738754992 37] 134.61240738754992]
Test Case: 639 | Input/Output: [[-74.9554438861473 40] -34.95544388614729]
Test Case: 640 | Input/Output: [[-85.53801603438038 89] 3.4619839656196234]
Test Case: 641 | Input/Output: [[31.204031881918155 19] 50.204031881918155]
Test Case: 642 | Input/Output: [[28.716865768376863 -44] -15.283134231623137]
Test Case: 643 | Input/Output: [[32.00341305914708 14] 46.00341305914708]
Test Case: 644 | Input/Output: [[-88.02137637815667 31] -57.021376378156674]
Test Case: 645 | Input/Output: [[16.438628329648353 12] 28.438628329648353]
Test Case: 646 | Input/Output: [[-20.788227137362682 -5] -25.788227137362682]
Test Case: 647 | Input/Output: [[76.20282336269238 -19] 57.202823362692385]
Test Case: 648 | Input/Output: [[-77.51691316336388 50] -27.51691316336388]
Test Case: 649 | Input/Output: [[94.93336167756556 -26] 68.93336167756556]
Test Case: 650 | Input/Output: [[33.00019888449276 77] 110.00019888449276]
Test Case: 651 | Input/Output: [[74.1809741246314 -31] 43.180974124631405]
Test Case: 652 | Input/Output: [[55.53068492498059 54] 109.53068492498059]
Test Case: 653 | Input/Output: [[7.518505647237134 47] 54.518505647237134]
Test Case: 654 | Input/Output: [[80.21476654316746 -75] 5.214766543167457]
Test Case: 655 | Input/Output: [[11.947357006406307 -36] -24.052642993593693]
Test Case: 656 | Input/Output: [[9.139053758819074 70] 79.13905375881907]
Test Case: 657 | Input/Output: [[-24.620004110197243 100] 75.37999588980276]
Test Case: 658 | Input/Output: [[25.536361174873548 62] 87.53636117487355]
Test Case: 659 | Input/Output: [[53.79236521274021 -38] 15.792365212740208]
Test Case: 660 | Input/Output: [[2.124794926149292 70] 72.12479492614929]
Test Case: 661 | Input/Output: [[45.53700402830546 48] 93.53700402830546]
Test Case: 662 | Input/Output: [[88.51933660682545 19] 107.51933660682545]
Test Case: 663 | Input/Output: [[90.12624234139773 72] 162.12624234139773]
Test Case: 664 | Input/Output: [[97.71229437756153 32] 129.71229437756153]
Test Case: 665 | Input/Output: [[-84.3755206484871 -11] -95.3755206484871]
Test Case: 666 | Input/Output: [[33.446727973866786 -10] 23.446727973866786]
Test Case: 667 | Input/Output: [[84.16434895404308 -9] 75.16434895404308]
Test Case: 668 | Input/Output: [[53.442749125948154 47] 100.44274912594815]
Test Case: 669 | Input/Output: [[-44.485157901817104 63] 18.514842098182896]
Test Case: 670 | Input/Output: [[34.87599421817379 -36] -1.124005781826213]
Test Case: 671 | Input/Output: [[-83.56342373450522 -88] -171.56342373450522]
Test Case: 672 | Input/Output: [[-78.93524401434351 2] -76.93524401434351]
Test Case: 673 | Input/Output: [[-5.496677012509579 18] 12.50332298749042]
Test Case: 674 | Input/Output: [[-87.0141946123164 -82] -169.0141946123164]
Test Case: 675 | Input/Output: [[-47.70941396340951 -64] -111.7094139634095]
Test Case: 676 | Input/Output: [[-17.54351007390798 -96] -113.54351007390798]
Test Case: 677 | Input/Output: [[-44.79032674426114 -43] -87.79032674426114]
Test Case: 678 | Input/Output: [[-46.45085309850021 75] 28.54914690149979]
Test Case: 679 | Input/Output: [[79.97461161384848 -47] 32.97461161384848]
Test Case: 680 | Input/Output: [[90.31684513810174 1] 91.31684513810174]
Test Case: 681 | Input/Output: [[18.05547471942552 78] 96.05547471942552]
Test Case: 682 | Input/Output: [[71.25019503351007 20] 91.25019503351007]
Test Case: 683 | Input/Output: [[-54.39971875319927 -45] -99.39971875319927]
Test Case: 684 | Input/Output: [[70.15406295717628 -82] -11.84593704282372]
Test Case: 685 | Input/Output: [[-70.83087672645652 72] 1.1691232735434767]
Test Case: 686 | Input/Output: [[-87.05677754879405 31] -56.056777548794045]
Test Case: 687 | Input/Output: [[13.440743575681083 81] 94.44074357568108]
Test Case: 688 | Input/Output: [[83.56074189532401 67] 150.560741895324]
Test Case: 689 | Input/Output: [[-68.91446272313823 -54] -122.91446272313823]
Test Case: 690 | Input/Output: [[54.38118867124629 31] 85.38118867124629]
Test Case: 691 | Input/Output: [[66.19095882471683 64] 130.19095882471683]
Test Case: 692 | Input/Output: [[-96.61497367338237 -43] -139.61497367338237]
Test Case: 693 | Input/Output: [[-71.32775866776822 24] -47.32775866776822]
Test Case: 694 | Input/Output: [[-70.1747360774364 -95] -165.17473607743642]
Test Case: 695 | Input/Output: [[-17.553468922130875 -61] -78.55346892213088]
Test Case: 696 | Input/Output: [[-92.2576674485888 21] -71.2576674485888]
Test Case: 697 | Input/Output: [[19.811599163568133 64] 83.81159916356813]
Test Case: 698 | Input/Output: [[-28.22852611272002 -73] -101.22852611272002]
Test Case: 699 | Input/Output: [[24.97900122211493 51] 75.97900122211493]
Test Case: 700 | Input/Output: [[89.56121478593747 60] 149.56121478593747]
Test Case: 701 | Input/Output: [[-86.35283618442136 71] -15.352836184421363]
Test Case: 702 | Input/Output: [[54.683986743000986 49] 103.68398674300099]
Test Case: 703 | Input/Output: [[-80.19065471018168 -23] -103.19065471018168]
Test Case: 704 | Input/Output: [[9.192042122352518 -2] 7.192042122352518]
Test Case: 705 | Input/Output: [[-26.2620824785117 26] -0.26208247851170086]
Test Case: 706 | Input/Output: [[11.913037440152195 60] 71.9130374401522]
Test Case: 707 | Input/Output: [[-7.23903536409631 -29] -36.23903536409631]
Test Case: 708 | Input/Output: [[-25.89127660696029 23] -2.8912766069602895]
Test Case: 709 | Input/Output: [[95.28451958996351 0] 95.28451958996351]
Test Case: 710 | Input/Output: [[-79.47230777491717 -2] -81.47230777491717]
Test Case: 711 | Input/Output: [[49.6268465859408 -26] 23.626846585940797]
Test Case: 712 | Input/Output: [[43.62317268291966 32] 75.62317268291966]
Test Case: 713 | Input/Output: [[5.592225473495034 48] 53.592225473495034]
Test Case: 714 | Input/Output: [[41.12551740239243 97] 138.12551740239243]
Test Case: 715 | Input/Output: [[-47.79847269120889 85] 37.20152730879111]
Test Case: 716 | Input/Output: [[77.75308020884432 12] 89.75308020884432]
Test Case: 717 | Input/Output: [[51.239683444376794 11] 62.239683444376794]
Test Case: 718 | Input/Output: [[-3.2910903373368967 -41] -44.2910903373369]
Test Case: 719 | Input/Output: [[-48.646206231397684 71] 22.353793768602316]
Test Case: 720 | Input/Output: [[-77.63526937134976 72] -5.635269371349764]
Test Case: 721 | Input/Output: [[-74.36324114926036 -3] -77.36324114926036]
Test Case: 722 | Input/Output: [[-23.191859104165033 -52] -75.19185910416503]
Test Case: 723 | Input/Output: [[-39.454929032977915 34] -5.454929032977915]
Test Case: 724 | Input/Output: [[-35.792321095337144 -51] -86.79232109533714]
Test Case: 725 | Input/Output: [[-51.37660436446146 0] -51.37660436446146]
Test Case: 726 | Input/Output: [[-26.70098110036679 37] 10.29901889963321]
Test Case: 727 | Input/Output: [[94.654544267104 11] 105.654544267104]
Test Case: 728 | Input/Output: [[-3.166771953955177 -56] -59.16677195395518]
Test Case: 729 | Input/Output: [[90.23045059634069 92] 182.2304505963407]
Test Case: 730 | Input/Output: [[-10.76387516847501 -65] -75.76387516847501]
Test Case: 731 | Input/Output: [[49.55894142964189 -95] -45.44105857035811]
Test Case: 732 | Input/Output: [[-34.80593469820843 20] -14.805934698208432]
Test Case: 733 | Input/Output: [[81.45715684672331 60] 141.4571568467233]
Test Case: 734 | Input/Output: [[-86.66530511249061 -38] -124.66530511249061]
Test Case: 735 | Input/Output: [[47.50474260888538 -6] 41.50474260888538]
Test Case: 736 | Input/Output: [[-77.47053026683528 69] -8.470530266835283]
Test Case: 737 | Input/Output: [[69.63379994286188 27] 96.63379994286188]
Test Case: 738 | Input/Output: [[13.006438968705837 94] 107.00643896870584]
Test Case: 739 | Input/Output: [[92.19305114213583 -62] 30.19305114213583]
Test Case: 740 | Input/Output: [[-57.03379506803054 58] 0.9662049319694574]
Test Case: 741 | Input/Output: [[-73.66554098685745 27] -46.66554098685745]
Test Case: 742 | Input/Output: [[-0.1800796817067294 -23] -23.18007968170673]
Test Case: 743 | Input/Output: [[95.67516316721029 31] 126.67516316721029]
Test Case: 744 | Input/Output: [[33.75736618920874 -6] 27.75736618920874]
Test Case: 745 | Input/Output: [[-25.91854276952506 93] 67.08145723047494]
Test Case: 746 | Input/Output: [[75.28695411336938 25] 100.28695411336938]
Test Case: 747 | Input/Output: [[-66.61443111020708 65] -1.6144311102070787]
Test Case: 748 | Input/Output: [[16.61271665599719 91] 107.61271665599719]
Test Case: 749 | Input/Output: [[-62.012616320171674 38] -24.012616320171674]
Test Case: 750 | Input/Output: [[25.89443604597706 33] 58.89443604597706]
Test Case: 751 | Input/Output: [[-95.34075768173788 -53] -148.3407576817379]
Test Case: 752 | Input/Output: [[-57.3651495145844 -72] -129.3651495145844]
Test Case: 753 | Input/Output: [[40.69351848022123 93] 133.69351848022123]
Test Case: 754 | Input/Output: [[48.04963196527626 44] 92.04963196527626]
Test Case: 755 | Input/Output: [[-37.322306050309216 8] -29.322306050309216]
Test Case: 756 | Input/Output: [[96.86404521623106 13] 109.86404521623106]
Test Case: 757 | Input/Output: [[95.35186905996903 20] 115.35186905996903]
Test Case: 758 | Input/Output: [[-38.333564235770545 51] 12.666435764229455]
Test Case: 759 | Input/Output: [[95.89381499050319 53] 148.8938149905032]
Test Case: 760 | Input/Output: [[98.31089164109207 4] 102.31089164109207]
Test Case: 761 | Input/Output: [[-52.580948300907096 -89] -141.5809483009071]
Test Case: 762 | Input/Output: [[-98.36946584760022 -81] -179.36946584760022]
Test Case: 763 | Input/Output: [[-47.70632190308734 -20] -67.70632190308734]
Test Case: 764 | Input/Output: [[-93.62431816542522 -24] -117.62431816542522]
Test Case: 765 | Input/Output: [[25.29627442314046 -44] -18.70372557685954]
Test Case: 766 | Input/Output: [[4.248642408977091 3] 7.248642408977091]
Test Case: 767 | Input/Output: [[-74.79845754046397 38] -36.79845754046397]
Test Case: 768 | Input/Output: [[-5.982412621152093 -41] -46.98241262115209]
Test Case: 769 | Input/Output: [[-58.57334015516293 60] 1.4266598448370686]
Test Case: 770 | Input/Output: [[38.25769089808267 -42] -3.7423091019173285]
Test Case: 771 | Input/Output: [[18.54111125080709 83] 101.54111125080709]
Test Case: 772 | Input/Output: [[-46.30110051357556 -40] -86.30110051357556]
Test Case: 773 | Input/Output: [[-31.383606655440005 -86] -117.38360665544]
Test Case: 774 | Input/Output: [[12.90061751157377 43] 55.90061751157377]
Test Case: 775 | Input/Output: [[24.25954060608187 58] 82.25954060608187]
Test Case: 776 | Input/Output: [[-44.18173233114038 -26] -70.18173233114038]
Test Case: 777 | Input/Output: [[-3.0843815742399556 46] 42.915618425760044]
Test Case: 778 | Input/Output: [[39.50476779241839 -33] 6.5047677924183915]
Test Case: 779 | Input/Output: [[94.74167086539495 -31] 63.74167086539495]
Test Case: 780 | Input/Output: [[-73.78218565399584 35] -38.78218565399584]
Test Case: 781 | Input/Output: [[-34.69008193414457 46] 11.309918065855427]
Test Case: 782 | Input/Output: [[4.889528374765376 23] 27.889528374765376]
Test Case: 783 | Input/Output: [[80.57339699451967 -13] 67.57339699451967]
Test Case: 784 | Input/Output: [[57.310347127049084 97] 154.31034712704908]
Test Case: 785 | Input/Output: [[-46.942273158344626 69] 22.057726841655374]
Test Case: 786 | Input/Output: [[-87.95904802861799 26] -61.959048028617985]
Test Case: 787 | Input/Output: [[-88.96482927812403 -44] -132.96482927812403]
Test Case: 788 | Input/Output: [[-83.56971569250757 88] 4.430284307492428]
Test Case: 789 | Input/Output: [[-84.62543166148997 37] -47.62543166148997]
Test Case: 790 | Input/Output: [[-42.407909873957685 62] 19.592090126042315]
Test Case: 791 | Input/Output: [[-67.69846141538173 -82] -149.69846141538173]
Test Case: 792 | Input/Output: [[-32.02327466921133 -25] -57.02327466921133]
Test Case: 793 | Input/Output: [[57.36785411911683 -57] 0.36785411911682786]
Test Case: 794 | Input/Output: [[51.074015275496436 14] 65.07401527549644]
Test Case: 795 | Input/Output: [[38.146524616346824 -19] 19.146524616346824]
Test Case: 796 | Input/Output: [[-70.9948718377663 -19] -89.9948718377663]
Test Case: 797 | Input/Output: [[7.355783642472872 15] 22.355783642472872]
Test Case: 798 | Input/Output: [[21.66855367189848 -42] -20.33144632810152]
Test Case: 799 | Input/Output: [[-72.66939582639873 30] -42.66939582639873]
Test Case: 800 | Input/Output: [[77.21385438218783 6] 83.21385438218783]
Test Case: 801 | Input/Output: [[-65.93386264805896 53] -12.933862648058962]
Test Case: 802 | Input/Output: [[-68.15317388293047 29] -39.153173882930474]
Test Case: 803 | Input/Output: [[9.942512663284518 72] 81.94251266328452]
Test Case: 804 | Input/Output: [[3.657437765772542 90] 93.65743776577254]
Test Case: 805 | Input/Output: [[-22.619347881533017 20] -2.6193478815330167]
Test Case: 806 | Input/Output: [[-80.53593084995924 -5] -85.53593084995924]
Test Case: 807 | Input/Output: [[94.80010665831469 -67] 27.80010665831469]
Test Case: 808 | Input/Output: [[-44.40485294370671 -22] -66.40485294370671]
Test Case: 809 | Input/Output: [[-43.14351453722549 -55] -98.14351453722549]
Test Case: 810 | Input/Output: [[92.46006526363925 34] 126.46006526363925]
Test Case: 811 | Input/Output: [[93.73442986996417 70] 163.73442986996417]
Test Case: 812 | Input/Output: [[1.4961794967514237 32] 33.496179496751424]
Test Case: 813 | Input/Output: [[22.351463621132112 80] 102.35146362113211]
Test Case: 814 | Input/Output: [[51.38466665011529 85] 136.3846666501153]
Test Case: 815 | Input/Output: [[87.53254913786324 -19] 68.53254913786324]
Test Case: 816 | Input/Output: [[8.476510332945765 -1] 7.4765103329457645]
Test Case: 817 | Input/Output: [[44.34677060386437 -39] 5.346770603864371]
Test Case: 818 | Input/Output: [[70.44457171663302 30] 100.44457171663302]
Test Case: 819 | Input/Output: [[93.47454076774008 -33] 60.47454076774008]
Test Case: 820 | Input/Output: [[34.46987314279974 -71] -36.53012685720026]
Test Case: 821 | Input/Output: [[-27.49506919522338 89] 61.50493080477662]
Test Case: 822 | Input/Output: [[-36.51330796218335 -56] -92.51330796218335]
Test Case: 823 | Input/Output: [[-4.082457127476573 -51] -55.08245712747657]
Test Case: 824 | Input/Output: [[-6.773512707893076 11] 4.226487292106924]
Test Case: 825 | Input/Output: [[-83.66248341908616 -71] -154.66248341908616]
Test Case: 826 | Input/Output: [[-13.874070457841924 65] 51.125929542158076]
Test Case: 827 | Input/Output: [[-27.573964255507335 -67] -94.57396425550733]
Test Case: 828 | Input/Output: [[-46.843096658018865 23] -23.843096658018865]
Test Case: 829 | Input/Output: [[74.19960836739884 79] 153.19960836739884]
Test Case: 830 | Input/Output: [[-62.78609698649147 1] -61.78609698649147]
Test Case: 831 | Input/Output: [[37.295070443877535 -56] -18.704929556122465]
Test Case: 832 | Input/Output: [[-2.4236140402448427 -81] -83.42361404024484]
Test Case: 833 | Input/Output: [[7.530115132946264 -83] -75.46988486705374]
Test Case: 834 | Input/Output: [[11.28140951843335 -65] -53.71859048156665]
Test Case: 835 | Input/Output: [[-16.25206496663951 94] 77.74793503336049]
Test Case: 836 | Input/Output: [[-89.16892012643933 34] -55.16892012643933]
Test Case: 837 | Input/Output: [[-8.42244775837591 -16] -24.42244775837591]
Test Case: 838 | Input/Output: [[19.74995905617662 -100] -80.25004094382338]
Test Case: 839 | Input/Output: [[85.40783790144872 -35] 50.407837901448715]
Test Case: 840 | Input/Output: [[6.192603750153708 -12] -5.807396249846292]
Test Case: 841 | Input/Output: [[75.39876850500198 21] 96.39876850500198]
Test Case: 842 | Input/Output: [[-53.87220803724939 -26] -79.8722080372494]
Test Case: 843 | Input/Output: [[37.953355292747005 81] 118.953355292747]
Test Case: 844 | Input/Output: [[-90.29140245663909 65] -25.29140245663909]
Test Case: 845 | Input/Output: [[-80.70423263645966 -71] -151.70423263645966]
Test Case: 846 | Input/Output: [[72.46399179664823 -43] 29.46399179664823]
Test Case: 847 | Input/Output: [[-63.42829605518811 76] 12.571703944811887]
Test Case: 848 | Input/Output: [[19.356444273685213 14] 33.35644427368521]
Test Case: 849 | Input/Output: [[-82.5414042772428 -91] -173.5414042772428]
Test Case: 850 | Input/Output: [[13.041861906197667 51] 64.04186190619767]
Test Case: 851 | Input/Output: [[8.384718546736664 -48] -39.615281453263336]
Test Case: 852 | Input/Output: [[-79.65383687540083 -79] -158.65383687540083]
Test Case: 853 | Input/Output: [[-86.54303127024329 56] -30.54303127024329]
Test Case: 854 | Input/Output: [[-15.495456620319388 89] 73.50454337968061]
Test Case: 855 | Input/Output: [[-88.52596721178128 91] 2.4740327882187216]
Test Case: 856 | Input/Output: [[43.305916785820784 35] 78.30591678582078]
Test Case: 857 | Input/Output: [[-44.43284133923655 -23] -67.43284133923655]
Test Case: 858 | Input/Output: [[3.1185210083666703 48] 51.11852100836667]
Test Case: 859 | Input/Output: [[21.945215028098005 -43] -21.054784971901995]
Test Case: 860 | Input/Output: [[-9.595411469234392 9] -0.5954114692343921]
Test Case: 861 | Input/Output: [[-11.021394228803189 91] 79.97860577119681]
Test Case: 862 | Input/Output: [[-0.7614703812138828 58] 57.23852961878612]
Test Case: 863 | Input/Output: [[-34.16652526866308 -75] -109.16652526866308]
Test Case: 864 | Input/Output: [[12.327031010147252 -85] -72.67296898985275]
Test Case: 865 | Input/Output: [[-68.86015585870882 76] 7.139844141291178]
Test Case: 866 | Input/Output: [[-58.23520470365637 -95] -153.23520470365636]
Test Case: 867 | Input/Output: [[81.06495735578534 27] 108.06495735578534]
Test Case: 868 | Input/Output: [[-94.80798974512396 -32] -126.80798974512396]
Test Case: 869 | Input/Output: [[-25.14622395605582 -59] -84.14622395605582]
Test Case: 870 | Input/Output: [[27.66835668503191 54] 81.66835668503191]
Test Case: 871 | Input/Output: [[-99.49275974746156 83] -16.492759747461562]
Test Case: 872 | Input/Output: [[95.17582402921457 -69] 26.175824029214567]
Test Case: 873 | Input/Output: [[33.920717708948814 -1] 32.920717708948814]
Test Case: 874 | Input/Output: [[-28.287685746104472 -67] -95.28768574610447]
Test Case: 875 | Input/Output: [[47.18471636158742 -91] -43.81528363841258]
Test Case: 876 | Input/Output: [[6.514996224575327 -49] -42.48500377542467]
Test Case: 877 | Input/Output: [[87.4880543000159 -72] 15.488054300015904]
Test Case: 878 | Input/Output: [[41.009284605152146 -49] -7.990715394847854]
Test Case: 879 | Input/Output: [[13.640062506039257 92] 105.64006250603926]
Test Case: 880 | Input/Output: [[55.43708091191564 22] 77.43708091191564]
Test Case: 881 | Input/Output: [[-0.88748097955677 93] 92.11251902044323]
Test Case: 882 | Input/Output: [[83.81081696235529 -58] 25.81081696235529]
Test Case: 883 | Input/Output: [[18.369320286362097 -62] -43.6306797136379]
Test Case: 884 | Input/Output: [[47.947453009902546 1] 48.947453009902546]
Test Case: 885 | Input/Output: [[-55.271170568710446 -90] -145.27117056871043]
Test Case: 886 | Input/Output: [[70.14721482751801 7] 77.14721482751801]
Test Case: 887 | Input/Output: [[-67.44017682704673 -60] -127.44017682704673]
Test Case: 888 | Input/Output: [[-4.273819773450043 -70] -74.27381977345004]
Test Case: 889 | Input/Output: [[-45.67788423601586 72] 26.322115763984137]
Test Case: 890 | Input/Output: [[9.579103030780914 -5] 4.579103030780914]
Test Case: 891 | Input/Output: [[-27.53117423054769 45] 17.46882576945231]
Test Case: 892 | Input/Output: [[-78.49954444061484 15] -63.49954444061484]
Test Case: 893 | Input/Output: [[-56.306057969102994 58] 1.6939420308970057]
Test Case: 894 | Input/Output: [[51.11606437933878 -85] -33.88393562066122]
Test Case: 895 | Input/Output: [[37.92441552390238 94] 131.92441552390238]
Test Case: 896 | Input/Output: [[-30.709649663280885 69] 38.290350336719115]
Test Case: 897 | Input/Output: [[-68.28750117494485 15] -53.28750117494485]
Test Case: 898 | Input/Output: [[-23.173418435650333 90] 66.82658156434967]
Test Case: 899 | Input/Output: [[69.11007575038471 11] 80.11007575038471]
Test Case: 900 | Input/Output: [[13.643240810678648 12] 25.64324081067865]
Test Case: 901 | Input/Output: [[65.25054474323159 -30] 35.250544743231586]
Test Case: 902 | Input/Output: [[-87.07822345410791 -84] -171.0782234541079]
Test Case: 903 | Input/Output: [[-42.75448361789278 -47] -89.75448361789279]
Test Case: 904 | Input/Output: [[-71.76812441433896 -29] -100.76812441433896]
Test Case: 905 | Input/Output: [[51.120722640195964 40] 91.12072264019596]
Test Case: 906 | Input/Output: [[-58.9041683246442 -36] -94.9041683246442]
Test Case: 907 | Input/Output: [[-33.104216978714035 77] 43.895783021285965]
Test Case: 908 | Input/Output: [[46.633205031285314 -26] 20.633205031285314]
Test Case: 909 | Input/Output: [[14.504565403664245 85] 99.50456540366424]
Test Case: 910 | Input/Output: [[91.33960596568784 74] 165.33960596568784]
Test Case: 911 | Input/Output: [[34.898616739390945 -82] -47.101383260609055]
Test Case: 912 | Input/Output: [[37.91578903580361 77] 114.91578903580361]
Test Case: 913 | Input/Output: [[53.02787510107828 18] 71.02787510107828]
Test Case: 914 | Input/Output: [[-2.1821744732678923 66] 63.81782552673211]
Test Case: 915 | Input/Output: [[-38.5716812535992 48] 9.428318746400798]
Test Case: 916 | Input/Output: [[63.729684284952725 -53] 10.729684284952725]
Test Case: 917 | Input/Output: [[97.59059073176667 20] 117.59059073176667]
Test Case: 918 | Input/Output: [[-54.15013847412147 -28] -82.15013847412146]
Test Case: 919 | Input/Output: [[35.08356354420022 66] 101.08356354420022]
Test Case: 920 | Input/Output: [[-63.07709284102039 29] -34.07709284102039]
Test Case: 921 | Input/Output: [[70.12292480713649 10] 80.12292480713649]
Test Case: 922 | Input/Output: [[2.688790708882621 41] 43.68879070888262]
Test Case: 923 | Input/Output: [[28.232974161248478 80] 108.23297416124848]
Test Case: 924 | Input/Output: [[-98.94135714996735 33] -65.94135714996735]
Test Case: 925 | Input/Output: [[-50.39637423508794 41] -9.39637423508794]
Test Case: 926 | Input/Output: [[0.6669059426122459 -39] -38.333094057387754]
Test Case: 927 | Input/Output: [[3.624524327971642 -83] -79.37547567202836]
Test Case: 928 | Input/Output: [[52.81734706058961 -24] 28.81734706058961]
Test Case: 929 | Input/Output: [[51.44146540522408 -93] -41.55853459477592]
Test Case: 930 | Input/Output: [[-53.205887096204904 93] 39.794112903795096]
Test Case: 931 | Input/Output: [[-47.72485550993455 -12] -59.72485550993455]
Test Case: 932 | Input/Output: [[-59.32902343545186 19] -40.32902343545186]
Test Case: 933 | Input/Output: [[6.702389616007437 28] 34.70238961600744]
Test Case: 934 | Input/Output: [[50.73700960165371 -5] 45.73700960165371]
Test Case: 935 | Input/Output: [[-51.508406739384526 -82] -133.50840673938453]
Test Case: 936 | Input/Output: [[35.23142221866286 96] 131.23142221866286]
Test Case: 937 | Input/Output: [[-81.32815886758462 23] -58.32815886758462]
Test Case: 938 | Input/Output: [[17.850377096097873 -89] -71.14962290390213]
Test Case: 939 | Input/Output: [[-22.860508618069275 -35] -57.860508618069275]
Test Case: 940 | Input/Output: [[-16.055533325790236 -68] -84.05553332579024]
Test Case: 941 | Input/Output: [[-47.68514645893518 -66] -113.68514645893518]
Test Case: 942 | Input/Output: [[78.7691078565465 91] 169.7691078565465]
Test Case: 943 | Input/Output: [[-90.26568078572257 97] 6.734319214277434]
Test Case: 944 | Input/Output: [[77.10686888215977 90] 167.10686888215977]
Test Case: 945 | Input/Output: [[-76.18892916761435 -95] -171.18892916761433]
Test Case: 946 | Input/Output: [[21.901466087680916 -52] -30.098533912319084]
Test Case: 947 | Input/Output: [[-78.05477239945553 -19] -97.05477239945553]
Test Case: 948 | Input/Output: [[-83.11956403127311 -49] -132.11956403127311]
Test Case: 949 | Input/Output: [[11.703290963398587 -60] -48.29670903660141]
Test Case: 950 | Input/Output: [[-98.9626649139052 -67] -165.9626649139052]
Test Case: 951 | Input/Output: [[51.115444252254946 20] 71.11544425225495]
Test Case: 952 | Input/Output: [[15.081462388001256 -31] -15.918537611998744]
Test Case: 953 | Input/Output: [[-77.89364474445154 88] 10.106355255548465]
Test Case: 954 | Input/Output: [[16.48096067001788 -73] -56.51903932998212]
Test Case: 955 | Input/Output: [[40.20817574853746 -97] -56.79182425146254]
Test Case: 956 | Input/Output: [[-87.8093578869161 10] -77.8093578869161]
Test Case: 957 | Input/Output: [[-2.8033700184237915 53] 50.19662998157621]
Test Case: 958 | Input/Output: [[-37.40838050276321 45] 7.591619497236792]
Test Case: 959 | Input/Output: [[-49.98556945850523 -25] -74.98556945850524]
Test Case: 960 | Input/Output: [[10.500414737310209 89] 99.50041473731021]
Test Case: 961 | Input/Output: [[-71.75786642445286 -78] -149.75786642445286]
Test Case: 962 | Input/Output: [[-42.55763998792739 -20] -62.55763998792739]
Test Case: 963 | Input/Output: [[39.68957416168496 -96] -56.31042583831504]
Test Case: 964 | Input/Output: [[-21.41690261278211 19] -2.41690261278211]
Test Case: 965 | Input/Output: [[26.05227071711211 -18] 8.052270717112108]
Test Case: 966 | Input/Output: [[28.857640308963227 7] 35.85764030896323]
Test Case: 967 | Input/Output: [[71.21560887371245 -70] 1.2156088737124549]
Test Case: 968 | Input/Output: [[9.135865715107983 -69] -59.86413428489202]
Test Case: 969 | Input/Output: [[-98.17313202952249 95] -3.173132029522492]
Test Case: 970 | Input/Output: [[27.622645596592292 84] 111.62264559659229]
Test Case: 971 | Input/Output: [[81.30045515874792 -94] -12.699544841252077]
Test Case: 972 | Input/Output: [[-6.1689238777813244 57] 50.831076122218676]
Test Case: 973 | Input/Output: [[91.10403696980671 0] 91.10403696980671]
Test Case: 974 | Input/Output: [[77.28858521460558 87] 164.28858521460558]
Test Case: 975 | Input/Output: [[24.229193190509918 -82] -57.77080680949008]
Test Case: 976 | Input/Output: [[34.54561177771879 -66] -31.45438822228121]
Test Case: 977 | Input/Output: [[-24.38577974636786 -54] -78.38577974636786]
Test Case: 978 | Input/Output: [[94.93704111973008 -12] 82.93704111973008]
Test Case: 979 | Input/Output: [[-62.829227008909314 93] 30.170772991090686]
Test Case: 980 | Input/Output: [[-42.15682778310281 6] -36.15682778310281]
Test Case: 981 | Input/Output: [[-43.963877190531896 -75] -118.96387719053189]
Test Case: 982 | Input/Output: [[-3.2732570944152855 -89] -92.27325709441529]
Test Case: 983 | Input/Output: [[-41.49539777465456 -16] -57.49539777465456]
Test Case: 984 | Input/Output: [[24.854001704415225 -74] -49.145998295584775]
Test Case: 985 | Input/Output: [[-95.41396992061956 -71] -166.41396992061956]
Test Case: 986 | Input/Output: [[38.31625802205576 49] 87.31625802205576]
Test Case: 987 | Input/Output: [[65.10735802925393 89] 154.10735802925393]
Test Case: 988 | Input/Output: [[47.527828970515685 24] 71.52782897051569]
Test Case: 989 | Input/Output: [[-47.1561655635582 14] -33.1561655635582]
Test Case: 990 | Input/Output: [[26.386973128859026 -90] -63.613026871140974]
Test Case: 991 | Input/Output: [[-57.586373270587664 -23] -80.58637327058767]
Test Case: 992 | Input/Output: [[43.44603807781547 86] 129.44603807781547]
Test Case: 993 | Input/Output: [[18.577863435365714 38] 56.577863435365714]
Test Case: 994 | Input/Output: [[-47.361533562667326 -90] -137.36153356266732]
Test Case: 995 | Input/Output: [[-54.706237315042515 -3] -57.706237315042515]
Test Case: 996 | Input/Output: [[-90.75641972619016 60] -30.75641972619016]
Test Case: 997 | Input/Output: [[93.56724341272084 -35] 58.56724341272084]
Test Case: 998 | Input/Output: [[-62.947292969310496 37] -25.947292969310496]
Test Case: 999 | Input/Output: [[10.395271800746997 -86] -75.604728199253]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -59 -18 -26 -108 15 -5 -5 -67 -39 114 -5 49 124 70 37 -39
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 53712.0
Test mean error for best: 26.85600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -28.4160190901
Correct output: 26.0066432259  | Program output: 34.0066432259 
Correct output: -7.8630218821  | Program output: 28.1369781179 
Correct output: 43.0854975447  | Program output: -56.9145024553
Correct output: -19.0259005733 | Program output: -91.0259005733
Correct output: -36.5615896908 | Program output: -9.5615896908 
Correct output: -86.7179135459 | Program output: -88.7179135459
Correct output: -7.1780786915  | Program output: -68.1780786915
Correct output: 103.0257764527 | Program output: 10.0257764527 
Correct output: 70.6761243376  | Program output: -26.3238756624
Correct output: -141.6518933902 | Program output: -54.6518933902
Correct output: 82.2435662182  | Program output: 30.2435662182 
Correct output: 115.9472214055 | Program output: 26.9472214055 
Correct output: 157.0833815093 | Program output: 85.0833815093 
Correct output: -4.9643490685  | Program output: -53.9643490685
Correct output: 60.1212975555  | Program output: 25.1212975555 
Correct output: -4.3554462227  | Program output: 73.6445537773 
Correct output: -72.9278840186 | Program output: -83.9278840186
Correct output: -110.3601522223 | Program output: -72.3601522223
Correct output: 5.1784404039   | Program output: 79.1784404039 
Correct output: -95.8868459204 | Program output: -78.8868459204
Correct output: 36.6113545279  | Program output: 62.6113545279 
Correct output: -16.9310924128 | Program output: -42.9310924128
Correct output: -57.0165724778 | Program output: -18.0165724778
Correct output: -0.4292752469  | Program output: -19.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_rot} {:instruction float_rot} {:instruction integer_max} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_rot} {:instruction float_yank} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction integer_shove} {:instruction float_swap} {:instruction tagged_216} {:instruction float_yank} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_add})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div integer_inc float_swap float_rot float_rot integer_max print_float float_inc integer_fromfloat integer_shove float_rot float_yank float_swap float_swap float_inc integer_shove float_swap tagged_216 float_yank integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop float_dup_times integer_yankdup float_inc float_pop float_sin integer_mult float_pop 41 float_add)
Errors: [47.0 2 8.0 2 36.0 11 100.0 12 72.0 2 27.0 2 2.0 1 61.0 2 93.0 1 97.0 12 87.0 2 52.0 2 89.0 3 72.0 2 49.0 2 35.0 2 78.0 11 11.0 2 38.0 3 74.0 2 17.0 2 26.0 2 26.0 2 39.0 2 19.0 2]
Total: 1343.0
Mean: 26.86
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 17806.2238922
Median total errors in population: 25339.0
Error averages by case: (708.9656773000002 13.22 692.0010662999998 12.624 690.1604053000005 13.012 697.2826405000001 13.237 693.6293042000012 13.224 698.637856000001 13.249 699.7079280000008 13.264 687.4463017000013 12.386 698.2716814999976 13.2 701.2858024000005 13.058 728.4658108000018 14.083 695.5926104000007 12.561 705.0493856000014 13.356 715.7817184000004 13.348 688.8990813999991 12.421 689.6052590999994 12.601 694.6136704999997 13.267 699.2488811000011 13.231 717.9166347999992 14.102 694.489978599998 11.829 714.4564701999974 13.365 698.4544992000012 12.618 685.2343912000003 13.174 701.9165854999973 13.279 682.9582521999993 12.443)
Error minima by case: (0.124 2 0.9934 2 0.3463 7 0.4567 8 0.2443 2 0.3356 2 0.2821 1 0.8219 2 2.5096 1 1.6761 7 30.3481 2 0.8168 2 11.0 2 3.9166 2 0.0357 1 1.7505 2 0.601 7 0.9279 2 8.3602 3 0.8216 2 1.8868 2 0.161 2 1.2833 2 0.9834 2 0.0446 1)
Average genome size in population (length): 50.458
Average program size in population (points): 51.458
Average percent parens in population: 0.041
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.315
Error (vector) diversity:			 0.352
Behavioral diversity:				 0.376
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1264916
--- Timings ---
Current time: 1529615940852 milliseconds
Total Time:           3.1 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.5 seconds, 16.7%
Fitness Testing:      2.4 seconds, 79.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 53712.0
Test mean error for best: 26.85600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -28.4160190901
Correct output: 26.0066432259  | Program output: 34.0066432259 
Correct output: -7.8630218821  | Program output: 28.1369781179 
Correct output: 43.0854975447  | Program output: -56.9145024553
Correct output: -19.0259005733 | Program output: -91.0259005733
Correct output: -36.5615896908 | Program output: -9.5615896908 
Correct output: -86.7179135459 | Program output: -88.7179135459
Correct output: -7.1780786915  | Program output: -68.1780786915
Correct output: 103.0257764527 | Program output: 10.0257764527 
Correct output: 70.6761243376  | Program output: -26.3238756624
Correct output: -141.6518933902 | Program output: -54.6518933902
Correct output: 82.2435662182  | Program output: 30.2435662182 
Correct output: 115.9472214055 | Program output: 26.9472214055 
Correct output: 157.0833815093 | Program output: 85.0833815093 
Correct output: -4.9643490685  | Program output: -53.9643490685
Correct output: 60.1212975555  | Program output: 25.1212975555 
Correct output: -4.3554462227  | Program output: 73.6445537773 
Correct output: -72.9278840186 | Program output: -83.9278840186
Correct output: -110.3601522223 | Program output: -72.3601522223
Correct output: 5.1784404039   | Program output: 79.1784404039 
Correct output: -95.8868459204 | Program output: -78.8868459204
Correct output: 36.6113545279  | Program output: 62.6113545279 
Correct output: -16.9310924128 | Program output: -42.9310924128
Correct output: -57.0165724778 | Program output: -18.0165724778
Correct output: -0.4292752469  | Program output: -19.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_dup_times} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_shove} {:instruction in1} {:instruction float_max} {:instruction print_float} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_inc} {:instruction float_sin} {:instruction float_dup} {:instruction float_dup} {:instruction float_flush} {:instruction float_cos} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_dec} {:instruction float_dup} {:instruction integer_pop} {:instruction float_rot} {:instruction float_mult} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_shove} {:instruction float_div} {:instruction float_rot} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_min} {:instruction integer_swap} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_swap} {:instruction tag_integer_358} {:instruction -73} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction -94})
Best program: (print_float integer_dup_times float_mult float_sub integer_dup_times integer_dup float_shove in1 float_max print_float float_yankdup float_mult float_inc float_sin float_dup float_dup float_flush float_cos float_pop float_dup_items float_cos float_dec float_dup integer_pop float_rot float_mult float_stackdepth float_rot integer_shove float_div float_rot integer_min integer_yankdup integer_add integer_min integer_swap float_frominteger integer_min float_swap tag_integer_358 -73 integer_div float_yankdup float_dup_items -94)
Errors: [47.0 2 8.0 2 36.0 11 100.0 12 72.0 2 27.0 2 2.0 1 61.0 2 93.0 1 97.0 12 87.0 2 52.0 2 89.0 3 72.0 2 49.0 2 35.0 2 78.0 11 11.0 2 38.0 3 74.0 2 17.0 2 26.0 2 26.0 2 39.0 2 19.0 2]
Total: 1343.0
Mean: 26.86
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 6286.1511809
Median total errors in population: 1738.4067
Error averages by case: (252.0231809999994 10.692 218.15984539999857 10.469 214.54211670000024 11.736 242.69405699999874 12.181 232.4779725000007 10.758 228.4248229999979 10.932 243.19952089999862 10.89 220.22600639999914 10.035 254.6290625000011 10.631 251.00883460000088 12.026 295.4432400999992 11.508 240.81469189999802 10.347 263.9372890999982 11.046 287.74602140000127 10.974 217.26354179999979 10.044 226.50837889999934 10.364 229.37704210000018 12.165 242.41515390000112 10.814 272.18662009999866 11.56 229.53641220000068 9.624 262.96137160000063 10.995 231.68585389999868 10.459 213.09495089999862 10.744 239.678386500001 10.907 204.0998064999995 10.116)
Error minima by case: (0.124 2 0.9934 2 0.3463 7 0.4567 8 0.2443 2 0.3356 2 0.2821 1 0.8219 2 1.4684 1 1.5555 7 30.3481 2 0.8168 2 2.492 2 3.9166 2 0.0357 1 2.1213 2 0.3554 7 0.9279 2 12.1808 3 0.1684 2 1.8868 2 6.6114 2 1.2833 2 0.9834 2 0.0446 1)
Average genome size in population (length): 58.038
Average program size in population (points): 59.038
Average percent parens in population: 0.023
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.524
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.29
Error (vector) diversity:			 0.304
Behavioral diversity:				 0.333
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2720100
--- Timings ---
Current time: 1529615945067 milliseconds
Total Time:           7.4 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.7 seconds, 36.3%
Fitness Testing:      4.1 seconds, 55.5%
Report:               0.5 seconds,  6.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 53712.0
Test mean error for best: 26.85600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -28.4160190901
Correct output: 26.0066432259  | Program output: 34.0066432259 
Correct output: -7.8630218821  | Program output: 28.1369781179 
Correct output: 43.0854975447  | Program output: -56.9145024553
Correct output: -19.0259005733 | Program output: -91.0259005733
Correct output: -36.5615896908 | Program output: -9.5615896908 
Correct output: -86.7179135459 | Program output: -88.7179135459
Correct output: -7.1780786915  | Program output: -68.1780786915
Correct output: 103.0257764527 | Program output: 10.0257764527 
Correct output: 70.6761243376  | Program output: -26.3238756624
Correct output: -141.6518933902 | Program output: -54.6518933902
Correct output: 82.2435662182  | Program output: 30.2435662182 
Correct output: 115.9472214055 | Program output: 26.9472214055 
Correct output: 157.0833815093 | Program output: 85.0833815093 
Correct output: -4.9643490685  | Program output: -53.9643490685
Correct output: 60.1212975555  | Program output: 25.1212975555 
Correct output: -4.3554462227  | Program output: 73.6445537773 
Correct output: -72.9278840186 | Program output: -83.9278840186
Correct output: -110.3601522223 | Program output: -72.3601522223
Correct output: 5.1784404039   | Program output: 79.1784404039 
Correct output: -95.8868459204 | Program output: -78.8868459204
Correct output: 36.6113545279  | Program output: 62.6113545279 
Correct output: -16.9310924128 | Program output: -42.9310924128
Correct output: -57.0165724778 | Program output: -18.0165724778
Correct output: -0.4292752469  | Program output: -19.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_min} {:instruction print_float} {:instruction float_inc} {:instruction integer_swap} {:instruction float_div} {:instruction float_mult} {:instruction integer_min} {:instruction integer_pop} {:instruction float_dup_items})
Best program: (in1 float_min print_float float_inc integer_swap float_div float_mult integer_min integer_pop float_dup_items)
Errors: [47.0 2 8.0 2 36.0 11 100.0 12 72.0 2 27.0 2 2.0 1 61.0 2 93.0 1 97.0 12 87.0 2 52.0 2 89.0 3 72.0 2 49.0 2 35.0 2 78.0 11 11.0 2 38.0 3 74.0 2 17.0 2 26.0 2 26.0 2 39.0 2 19.0 2]
Total: 1343.0
Mean: 26.86
Genome size: 10
Size: 11
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 4376.682233199996
Median total errors in population: 1366.0
Error averages by case: (164.56253969999966 6.324 136.07153309999967 6.247 152.85579810000002 11.723 201.4979876000002 12.56 186.4067889999998 6.304 145.16210339999984 6.372 142.00219650000017 5.818 175.04359790000012 5.912 192.86445230000044 5.754 196.3552678 12.501 198.74889379999965 6.636 167.0976510999998 5.972 193.3909837999993 6.867 192.8277437000005 6.392 164.6846509000003 5.887 153.70239249999972 6.122 187.08301710000003 11.952 146.6841367999999 6.332 166.8009462999995 7.237 185.36306090000016 5.68 152.66179299999953 6.468 152.62033129999975 5.971 147.4992664 6.311 155.77768260000042 6.381 139.1294176000002 6.065)
Error minima by case: (2.9989 2 6.9934 2 5.0761 8 34.9701 8 11.0259 2 8.5616 2 0.2821 1 0.8219 2 9.608 1 7.3794 7 53.6519 2 4.188 2 2.492 2 63.6656 2 3.0357 1 17.9343 2 2.1115 7 5.4871 2 31.9452 3 0.8216 2 16.0 2 24.3886 2 8.9311 2 17.0166 2 0.0446 1)
Average genome size in population (length): 47.823
Average program size in population (points): 48.823
Average percent parens in population: 0.032
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9435
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.1
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3918056
--- Timings ---
Current time: 1529615948019 milliseconds
Total Time:          10.5 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.0 seconds, 38.5%
Fitness Testing:      5.5 seconds, 52.2%
Report:               0.9 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 53712.0
Test mean error for best: 26.85600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -28.4160190901
Correct output: 26.0066432259  | Program output: 34.0066432259 
Correct output: -7.8630218821  | Program output: 28.1369781179 
Correct output: 43.0854975447  | Program output: -56.9145024553
Correct output: -19.0259005733 | Program output: -91.0259005733
Correct output: -36.5615896908 | Program output: -9.5615896908 
Correct output: -86.7179135459 | Program output: -88.7179135459
Correct output: -7.1780786915  | Program output: -68.1780786915
Correct output: 103.0257764527 | Program output: 10.0257764527 
Correct output: 70.6761243376  | Program output: -26.3238756624
Correct output: -141.6518933902 | Program output: -54.6518933902
Correct output: 82.2435662182  | Program output: 30.2435662182 
Correct output: 115.9472214055 | Program output: 26.9472214055 
Correct output: 157.0833815093 | Program output: 85.0833815093 
Correct output: -4.9643490685  | Program output: -53.9643490685
Correct output: 60.1212975555  | Program output: 25.1212975555 
Correct output: -4.3554462227  | Program output: 73.6445537773 
Correct output: -72.9278840186 | Program output: -83.9278840186
Correct output: -110.3601522223 | Program output: -72.3601522223
Correct output: 5.1784404039   | Program output: 79.1784404039 
Correct output: -95.8868459204 | Program output: -78.8868459204
Correct output: 36.6113545279  | Program output: 62.6113545279 
Correct output: -16.9310924128 | Program output: -42.9310924128
Correct output: -57.0165724778 | Program output: -18.0165724778
Correct output: -0.4292752469  | Program output: -19.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_dup_times} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_shove} {:instruction in1} {:instruction float_max} {:instruction print_float} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_inc} {:instruction float_sin} {:instruction float_dup} {:instruction float_dup} {:instruction float_flush} {:instruction float_cos} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_dec} {:instruction float_dup} {:instruction integer_pop} {:instruction float_rot} {:instruction float_mult} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_shove} {:instruction float_cos} {:instruction tagged_886} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_dup_items})
Best program: (print_float integer_dup_times float_mult float_sub integer_dup_times integer_dup float_shove in1 float_max print_float float_yankdup float_mult float_inc float_sin float_dup float_dup float_flush float_cos float_pop float_dup_items float_cos float_dec float_dup integer_pop float_rot float_mult float_stackdepth float_rot integer_shove float_cos tagged_886 float_dup_times float_dup_items integer_dup_items)
Errors: [47.0 2 8.0 2 36.0 11 100.0 12 72.0 2 27.0 2 2.0 1 61.0 2 93.0 1 97.0 12 87.0 2 52.0 2 89.0 3 72.0 2 49.0 2 35.0 2 78.0 11 11.0 2 38.0 3 74.0 2 17.0 2 26.0 2 26.0 2 39.0 2 19.0 2]
Total: 1343.0
Mean: 26.86
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 4029.3270599
Median total errors in population: 1343.0
Error averages by case: (153.8853434 3.511 118.47166589999999 3.397 142.98186059999998 11.493 200.46555769999995 12.443 175.6218267 3.46 136.13108069999998 3.454 114.39318810000002 2.606 165.8867366 3.411 193.85083830000002 2.572 198.02350159999997 12.36 189.5845091 3.56 157.64992580000003 3.379 190.47688459999998 4.312 175.95439430000005 3.467 155.3102594 3.399 142.49736269999997 3.423 179.98523749999998 11.509 122.21404219999998 3.48 146.2859181 4.466 176.4691058 3.333 127.71719680000001 3.498 134.4012909 3.354 135.13618130000003 3.486 146.77349440000003 3.479 128.8896574 3.418)
Error minima by case: (2.9989 2 7.0 2 6.8724 9 42.0855 10 18.0291 2 9.5616 2 1.0 1 6.881 2 10.0258 1 26.3239 9 54.6519 2 30.2436 2 26.9472 2 71.0 2 4.1156 1 25.1213 2 4.1736 10 5.4871 2 31.9452 3 3.436 2 16.0 2 25.0 2 16.634 2 18.0166 2 0.1322 1)
Average genome size in population (length): 34.547
Average program size in population (points): 35.547
Average percent parens in population: 0.047
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4555
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 145
Genome diversity (% unique Plush genomes):	 0.516
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.516
Total error diversity:				 0.036
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 4781956
--- Timings ---
Current time: 1529615951060 milliseconds
Total Time:          13.5 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.5 seconds, 41.0%
Fitness Testing:      6.7 seconds, 49.8%
Report:               1.1 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 53712.0
Test mean error for best: 26.85600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -28.4160190901
Correct output: 26.0066432259  | Program output: 34.0066432259 
Correct output: -7.8630218821  | Program output: 28.1369781179 
Correct output: 43.0854975447  | Program output: -56.9145024553
Correct output: -19.0259005733 | Program output: -91.0259005733
Correct output: -36.5615896908 | Program output: -9.5615896908 
Correct output: -86.7179135459 | Program output: -88.7179135459
Correct output: -7.1780786915  | Program output: -68.1780786915
Correct output: 103.0257764527 | Program output: 10.0257764527 
Correct output: 70.6761243376  | Program output: -26.3238756624
Correct output: -141.6518933902 | Program output: -54.6518933902
Correct output: 82.2435662182  | Program output: 30.2435662182 
Correct output: 115.9472214055 | Program output: 26.9472214055 
Correct output: 157.0833815093 | Program output: 85.0833815093 
Correct output: -4.9643490685  | Program output: -53.9643490685
Correct output: 60.1212975555  | Program output: 25.1212975555 
Correct output: -4.3554462227  | Program output: 73.6445537773 
Correct output: -72.9278840186 | Program output: -83.9278840186
Correct output: -110.3601522223 | Program output: -72.3601522223
Correct output: 5.1784404039   | Program output: 79.1784404039 
Correct output: -95.8868459204 | Program output: -78.8868459204
Correct output: 36.6113545279  | Program output: 62.6113545279 
Correct output: -16.9310924128 | Program output: -42.9310924128
Correct output: -57.0165724778 | Program output: -18.0165724778
Correct output: -0.4292752469  | Program output: -19.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_dup_times} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_shove} {:instruction in1} {:instruction float_max} {:instruction print_float} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_inc} {:instruction float_sin} {:instruction float_dup} {:instruction float_dup} {:instruction float_flush} {:instruction float_cos} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_dec} {:instruction float_dup} {:instruction integer_pop} {:instruction float_rot} {:instruction float_mult} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_shove} {:instruction float_cos} {:instruction tagged_886} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_dup_items})
Best program: (print_float integer_dup_times float_mult float_sub integer_dup_times integer_dup float_shove in1 float_max print_float float_yankdup float_mult float_inc float_sin float_dup float_dup float_flush float_cos float_pop float_dup_items float_cos float_dec float_dup integer_pop float_rot float_mult float_stackdepth float_rot integer_shove float_cos tagged_886 float_dup_times float_dup_items integer_dup_items)
Errors: [47.0 2 8.0 2 36.0 11 100.0 12 72.0 2 27.0 2 2.0 1 61.0 2 93.0 1 97.0 12 87.0 2 52.0 2 89.0 3 72.0 2 49.0 2 35.0 2 78.0 11 11.0 2 38.0 3 74.0 2 17.0 2 26.0 2 26.0 2 39.0 2 19.0 2]
Total: 1343.0
Mean: 26.86
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 3700.2955994
Median total errors in population: 1343.0
Error averages by case: (140.4714932 3.275 105.5134438 3.16 130.4578284 11.425 187.9019954 12.382 162.627156 3.224 122.42295060000001 3.209 100.3266696 2.351 152.71051859999997 3.196 182.1124556 2.291 185.4461088 12.295 176.7513632 3.295 145.27575369999997 3.131 178.6245417 4.099 163.695662 3.2 141.97357 3.193 129.9017131 3.179 168.1316258 11.437 108.295502 3.255 132.6990504 4.229 164.57052860000002 3.119 113.8092218 3.257 121.7347711 3.133 121.44092460000002 3.257 133.21954300000002 3.238 115.1432084 3.208)
Error minima by case: (2.9989 2 8.0 2 7.863 9 42.4686 9 18.9457 2 27.0 2 2.0 1 3.0588 2 93.0 1 70.6761 9 63.2369 2 52.0 2 89.0 3 72.0 2 4.3412 2 35.0 2 3.3721 11 5.4871 2 31.9452 3 3.436 2 17.0 2 26.0 2 16.9311 2 3.3818 2 0.1185 2)
Average genome size in population (length): 30.255
Average program size in population (points): 31.255
Average percent parens in population: 0.051
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.988875
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 145
Genome diversity (% unique Plush genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.02
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 5538356
--- Timings ---
Current time: 1529615953983 milliseconds
Total Time:          16.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.9 seconds, 42.3%
Fitness Testing:      7.9 seconds, 48.3%
Report:               1.4 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 53710.0
Test mean error for best: 26.85500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -27.4160190901
Correct output: 26.0066432259  | Program output: 35.0066432259 
Correct output: -7.8630218821  | Program output: 29.1369781179 
Correct output: 43.0854975447  | Program output: -55.9145024553
Correct output: -19.0259005733 | Program output: -90.0259005733
Correct output: -36.5615896908 | Program output: -8.5615896908 
Correct output: -86.7179135459 | Program output: -87.7179135459
Correct output: -7.1780786915  | Program output: -67.1780786915
Correct output: 103.0257764527 | Program output: 11.0257764527 
Correct output: 70.6761243376  | Program output: -25.3238756624
Correct output: -141.6518933902 | Program output: -53.6518933902
Correct output: 82.2435662182  | Program output: 31.2435662182 
Correct output: 115.9472214055 | Program output: 27.9472214055 
Correct output: 157.0833815093 | Program output: 86.0833815093 
Correct output: -4.9643490685  | Program output: -52.9643490685
Correct output: 60.1212975555  | Program output: 26.1212975555 
Correct output: -4.3554462227  | Program output: 74.6445537773 
Correct output: -72.9278840186 | Program output: -82.9278840186
Correct output: -110.3601522223 | Program output: -71.3601522223
Correct output: 5.1784404039   | Program output: 80.1784404039 
Correct output: -95.8868459204 | Program output: -77.8868459204
Correct output: 36.6113545279  | Program output: 63.6113545279 
Correct output: -16.9310924128 | Program output: -41.9310924128
Correct output: -57.0165724778 | Program output: -17.0165724778
Correct output: -0.4292752469  | Program output: -18.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction in1} {:instruction integer_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_max} {:instruction print_float} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_inc} {:instruction float_sin} {:instruction float_dup} {:instruction float_dup} {:instruction float_flush} {:instruction float_cos} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_dec} {:instruction float_dup} {:instruction integer_pop} {:instruction float_rot} {:instruction float_mult} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_shove} {:instruction float_cos} {:instruction tagged_886} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_dup_items})
Best program: (integer_max in1 integer_dec float_dup integer_rot integer_dup_times float_inc float_shove in1 float_max print_float float_yankdup float_mult float_inc float_sin float_dup float_dup float_flush float_cos float_pop float_dup_items float_cos float_dec float_dup integer_pop float_rot float_mult float_stackdepth float_rot integer_shove float_cos tagged_886 float_dup_times integer_yankdup integer_dup_items)
Errors: [48.0 2 9.0 2 37.0 11 99.0 12 71.0 2 28.0 2 1.0 1 60.0 1 92.0 2 96.0 13 88.0 3 51.0 2 88.0 3 71.0 3 48.0 2 34.0 2 79.0 10 10.0 1 39.0 2 75.0 2 18.0 2 27.0 2 25.0 2 40.0 1 18.0 2]
Total: 1339.0
Mean: 26.78
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 3032.0286616000003
Median total errors in population: 1343.0
Error averages by case: (114.25200500000001 2.964 77.8463066 2.879 103.61990890000001 11.3 162.5727977 12.255 136.8656802 2.926 95.5599746 2.913 72.9050442 2.017 126.66435390000002 2.886 156.30921360000002 1.992 159.83740290000003 12.208 151.6821417 2.983 118.43653910000002 2.857 152.7631802 3.838 137.53027110000002 2.914 115.59685490000001 2.889 102.7499255 2.898 142.23737800000004 11.302 81.0690915 2.944 106.27151959999999 3.924 138.5233053 2.843 86.80073229999998 2.953 94.42713539999998 2.863 94.4976188 2.941 106.75519440000001 2.923 87.93508619999999 2.908)
Error minima by case: (2.9989 2 8.0 2 7.7248 10 42.0855 8 19.0181 2 27.0 2 1.0 1 7.1677 1 14.0278 1 17.3239 10 63.2369 2 5.7564 2 26.9493 3 68.0854 2 4.9512 2 27.8787 2 4.3554 10 5.4871 1 31.9452 2 4.1784 2 17.0 2 26.0 2 16.9146 2 21.3984 1 0.3928 2)
Average genome size in population (length): 28.229
Average program size in population (points): 29.229
Average percent parens in population: 0.054
Minimum age in population: 5.25
Maximum age in population: 9.125
Average age in population: 7.5178125
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 140
Genome diversity (% unique Plush genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.017
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 6244106
--- Timings ---
Current time: 1529615956845 milliseconds
Total Time:          19.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.1 seconds, 42.3%
Fitness Testing:      9.2 seconds, 47.9%
Report:               1.8 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 53710.0
Test mean error for best: 26.85500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -27.4160190901
Correct output: 26.0066432259  | Program output: 35.0066432259 
Correct output: -7.8630218821  | Program output: 29.1369781179 
Correct output: 43.0854975447  | Program output: -55.9145024553
Correct output: -19.0259005733 | Program output: -90.0259005733
Correct output: -36.5615896908 | Program output: -8.5615896908 
Correct output: -86.7179135459 | Program output: -87.7179135459
Correct output: -7.1780786915  | Program output: -67.1780786915
Correct output: 103.0257764527 | Program output: 11.0257764527 
Correct output: 70.6761243376  | Program output: -25.3238756624
Correct output: -141.6518933902 | Program output: -53.6518933902
Correct output: 82.2435662182  | Program output: 31.2435662182 
Correct output: 115.9472214055 | Program output: 27.9472214055 
Correct output: 157.0833815093 | Program output: 86.0833815093 
Correct output: -4.9643490685  | Program output: -52.9643490685
Correct output: 60.1212975555  | Program output: 26.1212975555 
Correct output: -4.3554462227  | Program output: 74.6445537773 
Correct output: -72.9278840186 | Program output: -82.9278840186
Correct output: -110.3601522223 | Program output: -71.3601522223
Correct output: 5.1784404039   | Program output: 80.1784404039 
Correct output: -95.8868459204 | Program output: -77.8868459204
Correct output: 36.6113545279  | Program output: 63.6113545279 
Correct output: -16.9310924128 | Program output: -41.9310924128
Correct output: -57.0165724778 | Program output: -17.0165724778
Correct output: -0.4292752469  | Program output: -18.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_rot} {:instruction float_yank} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction integer_shove} {:instruction float_swap} {:instruction tagged_216} {:instruction float_yank} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_add})
Best program: (float_dup integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div integer_inc float_swap float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_shove float_rot float_yank float_swap float_swap float_inc integer_shove float_swap tagged_216 float_yank integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop float_dup_times integer_yankdup float_inc float_pop float_sin integer_mult float_pop 41 float_add)
Errors: [48.0 2 9.0 2 37.0 11 99.0 12 71.0 2 28.0 2 1.0 1 60.0 1 92.0 2 96.0 13 88.0 3 51.0 2 88.0 3 71.0 3 48.0 2 34.0 2 79.0 10 10.0 1 39.0 2 75.0 2 18.0 2 27.0 2 25.0 2 40.0 1 18.0 2]
Total: 1339.0
Mean: 26.78
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2993.7550444
Median total errors in population: 1343.0
Error averages by case: (113.1021262 2.869 75.70344880000002 2.791 101.77091419999999 11.257 161.82729120000002 12.218 136.0209549 2.852 94.40670860000002 2.828 71.42063680000001 1.934 125.78917450000003 2.795 154.39864099999997 1.907 159.04149950000001 12.176 150.44706980000004 2.906 116.37449960000001 2.777 150.74632669999997 3.753 135.1677655 2.824 114.65631949999998 2.802 100.63249959999999 2.806 140.73288390000002 11.252 79.69666079999999 2.855 104.8989028 3.833 136.9931052 2.751 85.3744814 2.869 92.3862395 2.777 93.3831866 2.857 105.6125285 2.834 86.82817929999999 2.82)
Error minima by case: (46.0 2 7.0 2 7.863 10 2.3958 10 19.0259 2 26.0 2 1.0 1 7.1781 1 7.0 1 13.3013 9 86.0 2 1.7339 2 11.0 2 28.0 2 4.9643 1 14.64 2 4.3554 10 5.4871 1 37.0 2 5.1784 2 16.0 2 8.87 2 16.9311 2 38.0 1 0.4293 1)
Average genome size in population (length): 27.032
Average program size in population (points): 28.032
Average percent parens in population: 0.056
Minimum age in population: 6.25
Maximum age in population: 10.78125
Average age in population: 8.99953125
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 148
Genome diversity (% unique Plush genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.019
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6919981
--- Timings ---
Current time: 1529615959786 milliseconds
Total Time:          22.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.5 seconds, 42.9%
Fitness Testing:     10.4 seconds, 46.9%
Report:               2.2 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 53710.0
Test mean error for best: 26.85500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -27.4160190901
Correct output: 26.0066432259  | Program output: 35.0066432259 
Correct output: -7.8630218821  | Program output: 29.1369781179 
Correct output: 43.0854975447  | Program output: -55.9145024553
Correct output: -19.0259005733 | Program output: -90.0259005733
Correct output: -36.5615896908 | Program output: -8.5615896908 
Correct output: -86.7179135459 | Program output: -87.7179135459
Correct output: -7.1780786915  | Program output: -67.1780786915
Correct output: 103.0257764527 | Program output: 11.0257764527 
Correct output: 70.6761243376  | Program output: -25.3238756624
Correct output: -141.6518933902 | Program output: -53.6518933902
Correct output: 82.2435662182  | Program output: 31.2435662182 
Correct output: 115.9472214055 | Program output: 27.9472214055 
Correct output: 157.0833815093 | Program output: 86.0833815093 
Correct output: -4.9643490685  | Program output: -52.9643490685
Correct output: 60.1212975555  | Program output: 26.1212975555 
Correct output: -4.3554462227  | Program output: 74.6445537773 
Correct output: -72.9278840186 | Program output: -82.9278840186
Correct output: -110.3601522223 | Program output: -71.3601522223
Correct output: 5.1784404039   | Program output: 80.1784404039 
Correct output: -95.8868459204 | Program output: -77.8868459204
Correct output: 36.6113545279  | Program output: 63.6113545279 
Correct output: -16.9310924128 | Program output: -41.9310924128
Correct output: -57.0165724778 | Program output: -17.0165724778
Correct output: -0.4292752469  | Program output: -18.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction print_integer} {:instruction in1} {:instruction integer_flush} {:instruction float_inc} {:instruction print_float} {:instruction in1} {:instruction float_tan} {:instruction float_shove} {:instruction tagged_769} {:instruction float_swap} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_cos} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_mult} {:instruction 42.73677503813934} {:instruction integer_sub} {:instruction integer_div} {:instruction integer_div} {:instruction float_tan} {:instruction integer_add} {:instruction float_flush})
Best program: (float_flush print_integer in1 integer_flush float_inc print_float in1 float_tan float_shove tagged_769 float_swap integer_add integer_stackdepth float_min float_cos float_flush float_frominteger integer_max integer_dec float_yankdup float_mult 42.73677503813934 integer_sub integer_div integer_div float_tan integer_add float_flush)
Errors: [48.0 2 9.0 2 37.0 11 99.0 12 71.0 2 28.0 2 1.0 1 60.0 1 92.0 2 96.0 13 88.0 3 51.0 2 88.0 3 71.0 3 48.0 2 34.0 2 79.0 10 10.0 1 39.0 2 75.0 2 18.0 2 27.0 2 25.0 2 40.0 1 18.0 2]
Total: 1339.0
Mean: 26.78
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 3392.678206
Median total errors in population: 1343.0
Error averages by case: (129.3115945 3.104 90.85789689999999 3.012 116.1971803 11.396 177.6860367 12.351 152.4454781 3.053 110.837735 3.036 89.1299169 2.158 142.172163 2.978 168.2659639 2.166 174.8098461 12.312 166.10422129999998 3.158 131.0507589 2.991 164.86117099999998 3.955 150.1420486 3.086 131.11373460000002 3.028 115.4166273 3.037 154.8442137 11.351 97.2007104 3.029 121.75998089999997 4.003 151.24132440000002 2.973 102.74426839999998 3.084 107.5626132 2.985 110.16621420000001 3.081 121.8830231 3.009 103.49248460000001 3.045)
Error minima by case: (31.415 2 8.0 2 7.7248 9 42.0855 8 19.1064 2 27.0 2 1.0 1 7.887 1 2.5001 1 69.6761 9 8.585 2 51.0 2 88.0 3 71.0 2 4.3412 2 34.0 2 0.415 10 10.0 1 38.0 2 3.436 2 17.0 2 26.0 2 17.64 2 39.0 1 0.2255 2)
Average genome size in population (length): 27.105
Average program size in population (points): 28.105
Average percent parens in population: 0.056
Minimum age in population: 7.25
Maximum age in population: 12.265625
Average age in population: 10.462859375
Median age in population: 10.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 141
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.025
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7597656
--- Timings ---
Current time: 1529615962453 milliseconds
Total Time:          24.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.7 seconds, 43.1%
Fitness Testing:     11.5 seconds, 46.4%
Report:               2.5 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 53710.0
Test mean error for best: 26.85500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -27.4160190901
Correct output: 26.0066432259  | Program output: 35.0066432259 
Correct output: -7.8630218821  | Program output: 29.1369781179 
Correct output: 43.0854975447  | Program output: -55.9145024553
Correct output: -19.0259005733 | Program output: -90.0259005733
Correct output: -36.5615896908 | Program output: -8.5615896908 
Correct output: -86.7179135459 | Program output: -87.7179135459
Correct output: -7.1780786915  | Program output: -67.1780786915
Correct output: 103.0257764527 | Program output: 11.0257764527 
Correct output: 70.6761243376  | Program output: -25.3238756624
Correct output: -141.6518933902 | Program output: -53.6518933902
Correct output: 82.2435662182  | Program output: 31.2435662182 
Correct output: 115.9472214055 | Program output: 27.9472214055 
Correct output: 157.0833815093 | Program output: 86.0833815093 
Correct output: -4.9643490685  | Program output: -52.9643490685
Correct output: 60.1212975555  | Program output: 26.1212975555 
Correct output: -4.3554462227  | Program output: 74.6445537773 
Correct output: -72.9278840186 | Program output: -82.9278840186
Correct output: -110.3601522223 | Program output: -71.3601522223
Correct output: 5.1784404039   | Program output: 80.1784404039 
Correct output: -95.8868459204 | Program output: -77.8868459204
Correct output: 36.6113545279  | Program output: 63.6113545279 
Correct output: -16.9310924128 | Program output: -41.9310924128
Correct output: -57.0165724778 | Program output: -17.0165724778
Correct output: -0.4292752469  | Program output: -18.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction in1} {:instruction integer_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_max} {:instruction print_float} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_inc} {:instruction float_sin} {:instruction float_dup} {:instruction float_dup} {:instruction integer_max} {:instruction float_cos} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_cos})
Best program: (integer_max in1 integer_dec float_dup integer_rot integer_dup_times float_inc float_shove in1 float_max print_float float_yankdup float_mult float_inc float_sin float_dup float_dup integer_max float_cos float_pop float_dup_items float_cos)
Errors: [48.0 2 9.0 2 37.0 11 99.0 12 71.0 2 28.0 2 1.0 1 60.0 1 92.0 2 96.0 13 88.0 3 51.0 2 88.0 3 71.0 3 48.0 2 34.0 2 79.0 10 10.0 1 39.0 2 75.0 2 18.0 2 27.0 2 25.0 2 40.0 1 18.0 2]
Total: 1339.0
Mean: 26.78
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 3276.3672916
Median total errors in population: 1343.0
Error averages by case: (124.4526689 3.068 87.81465999999999 2.987 113.03501889999998 11.362 172.27057239999996 12.329 146.5535333 3.053 105.2632524 3.026 83.2079927 2.148 136.46279009999998 2.766 164.47599010000002 2.341 169.3551459 12.499 161.56304809999997 3.354 127.77194610000002 2.97 161.56064569999998 3.941 146.74994420000002 3.263 125.51591280000001 3.007 111.8237026 3.003 151.4905927 11.119 91.30624049999999 2.812 116.67323119999999 3.788 147.84047769999998 2.951 97.4265688 3.067 104.3139841 2.967 104.63593830000002 3.065 116.56493820000001 2.802 97.51849590000002 3.032)
Error minima by case: (2.9989 2 8.0 2 7.8724 9 41.0855 10 19.0182 2 27.0 2 1.0 1 7.1678 1 7.5162 1 68.6761 9 63.2369 2 51.0 2 88.0 3 71.0 2 4.9515 2 34.0 2 4.3652 10 5.4871 1 31.9452 2 3.1784 2 17.0 2 26.0 2 16.915 2 21.3984 1 0.3946 2)
Average genome size in population (length): 30.09
Average program size in population (points): 31.09
Average percent parens in population: 0.049
Minimum age in population: 9.0
Maximum age in population: 13.9375
Average age in population: 11.9659609375
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 104
Genome diversity (% unique Plush genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.029
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 8349906
--- Timings ---
Current time: 1529615965154 milliseconds
Total Time:          27.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.9 seconds, 43.3%
Fitness Testing:     12.7 seconds, 46.2%
Report:               2.8 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 53727.0
Test mean error for best: 26.86350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -26.4160190901
Correct output: 26.0066432259  | Program output: 36.0066432259 
Correct output: -7.8630218821  | Program output: 30.1369781179 
Correct output: 43.0854975447  | Program output: -54.9145024553
Correct output: -19.0259005733 | Program output: -89.0259005733
Correct output: -36.5615896908 | Program output: -7.5615896908 
Correct output: -86.7179135459 | Program output: -86.7179135459
Correct output: -7.1780786915  | Program output: -66.1780786915
Correct output: 103.0257764527 | Program output: 12.0257764527 
Correct output: 70.6761243376  | Program output: -24.3238756624
Correct output: -141.6518933902 | Program output: -52.6518933902
Correct output: 82.2435662182  | Program output: 32.2435662182 
Correct output: 115.9472214055 | Program output: 28.9472214055 
Correct output: 157.0833815093 | Program output: 87.0833815093 
Correct output: -4.9643490685  | Program output: -51.9643490685
Correct output: 60.1212975555  | Program output: 27.1212975555 
Correct output: -4.3554462227  | Program output: 75.6445537773 
Correct output: -72.9278840186 | Program output: -81.9278840186
Correct output: -110.3601522223 | Program output: -70.3601522223
Correct output: 5.1784404039   | Program output: 81.1784404039 
Correct output: -95.8868459204 | Program output: -76.8868459204
Correct output: 36.6113545279  | Program output: 64.6113545279 
Correct output: -16.9310924128 | Program output: -40.9310924128
Correct output: -57.0165724778 | Program output: -16.0165724778
Correct output: -0.4292752469  | Program output: -17.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_rot} {:instruction float_yank} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction integer_shove} {:instruction float_swap} {:instruction tagged_216} {:instruction float_mod} {:instruction integer_shove} {:instruction float_rot} {:instruction float_yank} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction integer_shove} {:instruction float_swap} {:instruction tagged_216} {:instruction float_yank} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction integer_yankdup})
Best program: (float_dup integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div integer_inc float_swap float_inc float_rot float_stackdepth float_swap integer_flush integer_stackdepth float_shove float_div integer_inc float_swap float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_shove float_rot float_yank float_swap float_swap float_inc integer_shove float_swap tagged_216 float_mod integer_shove float_rot float_yank float_swap float_swap float_inc integer_shove float_swap tagged_216 float_yank integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop float_dup_times integer_yankdup)
Errors: [49.0 2 10.0 1 38.0 11 98.0 12 70.0 1 29.0 2 0.0 0 59.0 2 91.0 2 95.0 13 89.0 3 50.0 1 87.0 3 70.0 2 47.0 2 33.0 2 80.0 11 9.0 2 40.0 2 76.0 2 19.0 2 28.0 2 24.0 2 41.0 2 17.0 2]
Total: 1335.0
Mean: 26.7
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2809.6037324
Median total errors in population: 1339.0
Error averages by case: (106.1785654 2.86 69.512217 2.757 95.3892501 11.239 153.54747070000002 12.203 127.28779140000002 2.844 87.2495122 2.839 63.0760799 1.921 116.97171140000002 2.044 147.750697 2.618 151.0983228 12.922 144.0165318 3.654 109.43423460000001 2.757 144.14746739999998 3.73 128.7094978 3.555 105.8245849 2.801 93.4249792 2.767 134.4232862 10.497 71.2803786 2.094 98.21892949999999 3.076 130.7061682 2.725 78.5782834 2.858 86.34854690000002 2.749 84.62335200000001 2.848 98.5786608 2.085 77.97421320000001 2.81)
Error minima by case: (18.6777 2 7.0 1 5.8979 8 40.8998 9 17.0608 1 26.0 2 0.0 0 5.2129 1 91.0 1 68.6761 9 47.5582 2 50.0 1 87.0 2 70.0 2 2.9992 1 33.0 2 2.3903 7 9.0 1 16.2664 2 3.1784 2 1.7931 2 25.0 2 14.966 2 37.0772 1 0.5707 1)
Average genome size in population (length): 35.458
Average program size in population (points): 36.458
Average percent parens in population: 0.033
Minimum age in population: 11.0859375
Maximum age in population: 15.78515625
Average age in population: 13.54801953125
Median age in population: 13.56640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 75
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.03
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 9236381
--- Timings ---
Current time: 1529615968142 milliseconds
Total Time:          30.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.3 seconds, 43.6%
Fitness Testing:     14.0 seconds, 45.9%
Report:               3.1 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 53727.0
Test mean error for best: 26.86350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -26.4160190901
Correct output: 26.0066432259  | Program output: 36.0066432259 
Correct output: -7.8630218821  | Program output: 30.1369781179 
Correct output: 43.0854975447  | Program output: -54.9145024553
Correct output: -19.0259005733 | Program output: -89.0259005733
Correct output: -36.5615896908 | Program output: -7.5615896908 
Correct output: -86.7179135459 | Program output: -86.7179135459
Correct output: -7.1780786915  | Program output: -66.1780786915
Correct output: 103.0257764527 | Program output: 12.0257764527 
Correct output: 70.6761243376  | Program output: -24.3238756624
Correct output: -141.6518933902 | Program output: -52.6518933902
Correct output: 82.2435662182  | Program output: 32.2435662182 
Correct output: 115.9472214055 | Program output: 28.9472214055 
Correct output: 157.0833815093 | Program output: 87.0833815093 
Correct output: -4.9643490685  | Program output: -51.9643490685
Correct output: 60.1212975555  | Program output: 27.1212975555 
Correct output: -4.3554462227  | Program output: 75.6445537773 
Correct output: -72.9278840186 | Program output: -81.9278840186
Correct output: -110.3601522223 | Program output: -70.3601522223
Correct output: 5.1784404039   | Program output: 81.1784404039 
Correct output: -95.8868459204 | Program output: -76.8868459204
Correct output: 36.6113545279  | Program output: 64.6113545279 
Correct output: -16.9310924128 | Program output: -40.9310924128
Correct output: -57.0165724778 | Program output: -16.0165724778
Correct output: -0.4292752469  | Program output: -17.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_rot} {:instruction float_yank} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction integer_shove} {:instruction float_swap} {:instruction tagged_216} {:instruction float_mod} {:instruction integer_shove} {:instruction float_rot} {:instruction float_yank} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction integer_shove} {:instruction float_swap} {:instruction tagged_216} {:instruction float_yank} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction integer_yankdup})
Best program: (float_dup integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div integer_inc float_swap float_inc integer_mult float_stackdepth float_swap integer_flush integer_stackdepth float_shove float_div integer_inc float_swap float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_shove float_rot float_yank float_swap float_swap float_inc integer_shove float_swap tagged_216 float_mod integer_shove float_rot float_yank float_swap float_swap float_inc integer_shove float_swap tagged_216 float_yank integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop float_dup_times integer_yankdup)
Errors: [49.0 2 10.0 1 38.0 11 98.0 12 70.0 1 29.0 2 0.0 0 59.0 2 91.0 2 95.0 13 89.0 3 50.0 1 87.0 3 70.0 2 47.0 2 33.0 2 80.0 11 9.0 2 40.0 2 76.0 2 19.0 2 28.0 2 24.0 2 41.0 2 17.0 2]
Total: 1335.0
Mean: 26.7
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3172.0998047000003
Median total errors in population: 1339.0
Error averages by case: (120.70479379999998 3.079 84.76070639999999 2.955 109.93406669999999 11.279 166.71060779999993 12.22 140.86326909999997 3.045 102.05907509999999 3.046 78.25371000000003 2.141 130.73488030000004 2.169 161.35225820000002 2.983 164.46132920000002 13.037 158.04121169999996 4.007 123.75109560000001 2.951 157.89157849999998 3.942 143.02945810000003 3.884 119.81965320000005 3.006 107.96969809999999 2.997 148.1172285 10.447 86.23573979999998 2.222 113.06445469999996 3.175 144.48996560000003 2.936 93.77214349999996 3.074 101.31020889999999 2.98 99.11589310000002 3.074 113.21213000000002 2.219 92.55164880000001 3.025)
Error minima by case: (17.6777 2 8.0 1 6.8724 10 41.0855 10 18.0259 1 27.0 2 0.0 0 6.1781 1 81.9742 1 68.6761 8 47.5582 2 20.7564 1 61.0528 3 14.0834 2 3.9643 2 8.8787 2 3.3721 10 9.0 1 16.2664 2 3.1784 2 1.7931 2 26.0 2 15.9311 2 36.0772 1 0.1185 2)
Average genome size in population (length): 37.32
Average program size in population (points): 38.32
Average percent parens in population: 0.029
Minimum age in population: 12.3203125
Maximum age in population: 17.0078125
Average age in population: 14.99689453125
Median age in population: 15.0478515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.029
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 10169431
--- Timings ---
Current time: 1529615970946 milliseconds
Total Time:          33.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.4 seconds, 43.4%
Fitness Testing:     15.2 seconds, 45.7%
Report:               3.5 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 53787.0
Test mean error for best: 26.89350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -25.4160190901
Correct output: 26.0066432259  | Program output: 37.0066432259 
Correct output: -7.8630218821  | Program output: 31.1369781179 
Correct output: 43.0854975447  | Program output: -53.9145024553
Correct output: -19.0259005733 | Program output: -88.0259005733
Correct output: -36.5615896908 | Program output: -6.5615896908 
Correct output: -86.7179135459 | Program output: -85.7179135459
Correct output: -7.1780786915  | Program output: -65.1780786915
Correct output: 103.0257764527 | Program output: 13.0257764527 
Correct output: 70.6761243376  | Program output: -23.3238756624
Correct output: -141.6518933902 | Program output: -51.6518933902
Correct output: 82.2435662182  | Program output: 33.2435662182 
Correct output: 115.9472214055 | Program output: 29.9472214055 
Correct output: 157.0833815093 | Program output: 88.0833815093 
Correct output: -4.9643490685  | Program output: -50.9643490685
Correct output: 60.1212975555  | Program output: 28.1212975555 
Correct output: -4.3554462227  | Program output: 76.6445537773 
Correct output: -72.9278840186 | Program output: -80.9278840186
Correct output: -110.3601522223 | Program output: -69.3601522223
Correct output: 5.1784404039   | Program output: 82.1784404039 
Correct output: -95.8868459204 | Program output: -75.8868459204
Correct output: 36.6113545279  | Program output: 65.6113545279 
Correct output: -16.9310924128 | Program output: -39.9310924128
Correct output: -57.0165724778 | Program output: -15.0165724778
Correct output: -0.4292752469  | Program output: -16.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_rot} {:instruction float_yank} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction integer_shove} {:instruction float_swap} {:instruction tagged_216} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_add})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_shove float_rot float_yank float_swap float_swap float_inc integer_shove float_swap tagged_216 float_mod integer_dup_items integer_dup_items float_min integer_yank float_add float_pop integer_rot integer_yankdup float_inc float_pop float_sin integer_mult float_pop 41 float_add)
Errors: [50.0 1 11.0 2 39.0 11 97.0 11 69.0 2 30.0 1 1.0 1 58.0 2 90.0 1 94.0 13 90.0 2 49.0 2 86.0 3 69.0 3 46.0 2 32.0 2 81.0 11 8.0 2 41.0 3 77.0 2 20.0 1 29.0 2 23.0 2 42.0 2 16.0 2]
Total: 1334.0
Mean: 26.68
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2926.0717566000003
Median total errors in population: 1339.0
Error averages by case: (111.28857449999997 2.972 74.89553539999996 2.728 100.20794479999999 11.215 157.4649057 12.138 131.4573555 2.803 91.6271054 2.952 68.14977689999999 1.884 121.19102480000001 2.175 150.9954203 2.911 154.78271610000002 13.022 149.15371169999997 3.934 113.8158881 2.734 148.10578759999999 3.867 133.46743720000003 3.687 110.14081730000002 2.903 97.60168840000001 2.902 139.0101643 10.507 76.20883869999999 2.229 103.67251009999998 3.056 135.33063050000004 2.849 84.16363859999997 2.97 91.6161418 2.891 89.19456140000003 2.97 103.18458020000001 2.224 81.9160013 2.906)
Error minima by case: (17.6777 1 4.0502 1 5.0224 8 13.0286 9 18.0291 1 27.0 1 0.0 0 5.5702 1 1.5096 1 40.6192 9 48.5582 2 21.7564 1 62.0528 3 13.0834 2 3.9725 2 9.8787 2 3.3721 10 8.0 1 17.2664 2 2.1784 2 2.7931 1 6.5545 2 16.0122 2 36.0772 1 0.1185 2)
Average genome size in population (length): 38.458
Average program size in population (points): 39.458
Average percent parens in population: 0.028
Minimum age in population: 13.78125
Maximum age in population: 18.427734375
Average age in population: 16.483626953125
Median age in population: 16.546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.034
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 11130981
--- Timings ---
Current time: 1529615973849 milliseconds
Total Time:          36.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.6 seconds, 43.2%
Fitness Testing:     16.5 seconds, 45.6%
Report:               3.9 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 53787.0
Test mean error for best: 26.89350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -25.4160190901
Correct output: 26.0066432259  | Program output: 37.0066432259 
Correct output: -7.8630218821  | Program output: 31.1369781179 
Correct output: 43.0854975447  | Program output: -53.9145024553
Correct output: -19.0259005733 | Program output: -88.0259005733
Correct output: -36.5615896908 | Program output: -6.5615896908 
Correct output: -86.7179135459 | Program output: -85.7179135459
Correct output: -7.1780786915  | Program output: -65.1780786915
Correct output: 103.0257764527 | Program output: 13.0257764527 
Correct output: 70.6761243376  | Program output: -23.3238756624
Correct output: -141.6518933902 | Program output: -51.6518933902
Correct output: 82.2435662182  | Program output: 33.2435662182 
Correct output: 115.9472214055 | Program output: 29.9472214055 
Correct output: 157.0833815093 | Program output: 88.0833815093 
Correct output: -4.9643490685  | Program output: -50.9643490685
Correct output: 60.1212975555  | Program output: 28.1212975555 
Correct output: -4.3554462227  | Program output: 76.6445537773 
Correct output: -72.9278840186 | Program output: -80.9278840186
Correct output: -110.3601522223 | Program output: -69.3601522223
Correct output: 5.1784404039   | Program output: 82.1784404039 
Correct output: -95.8868459204 | Program output: -75.8868459204
Correct output: 36.6113545279  | Program output: 65.6113545279 
Correct output: -16.9310924128 | Program output: -39.9310924128
Correct output: -57.0165724778 | Program output: -15.0165724778
Correct output: -0.4292752469  | Program output: -16.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction in1} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_max} {:instruction print_float} {:instruction tag_integer_690} {:instruction float_mult} {:instruction float_inc} {:instruction float_sin} {:instruction float_dup} {:instruction float_dup} {:instruction float_yank} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction integer_shove} {:instruction float_swap} {:instruction tagged_216} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_max} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_add})
Best program: (float_pop in1 float_dup integer_rot integer_dup_times float_inc float_shove integer_dec float_inc integer_rot integer_dup_times float_inc float_shove in1 float_max print_float tag_integer_690 float_mult float_inc float_sin float_dup float_dup float_yank float_swap float_swap float_inc integer_shove float_swap tagged_216 float_mod integer_dup_items integer_dup_items integer_dec integer_yank float_max float_pop integer_rot integer_yankdup float_inc float_pop float_sin integer_mult float_pop 41 float_add)
Errors: [50.0 1 11.0 2 39.0 11 97.0 11 69.0 2 30.0 1 1.0 1 58.0 2 90.0 1 94.0 13 90.0 2 49.0 2 86.0 3 69.0 3 46.0 2 32.0 2 81.0 11 8.0 2 41.0 3 77.0 2 20.0 1 29.0 2 23.0 2 42.0 2 16.0 2]
Total: 1334.0
Mean: 26.68
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2975.1389196000005
Median total errors in population: 1335.0
Error averages by case: (113.71851799999995 3.042 77.49066510000002 2.333 102.55277439999998 11.165 158.47518400000007 12.079 132.47256939999997 2.433 94.0725764 3.036 70.2841049 1.539 122.25186560000003 2.686 152.5565943 2.978 155.9474123 12.972 151.76663289999993 4.025 115.66240050000002 2.333 149.84656719999998 3.923 135.531015 3.296 111.31296140000002 2.97 99.43408270000003 2.956 140.87308629999998 10.914 78.16591460000002 2.752 106.52511209999999 3.147 137.18865340000005 2.864 87.10051329999999 3.036 94.12349130000003 2.93 90.66527350000004 3.049 105.62040980000002 2.764 83.29854120000002 2.98)
Error minima by case: (14.3664 1 8.0 1 4.5344 8 40.0491 8 17.236 1 27.0 1 0.0 0 6.9705 1 29.5677 1 67.5939 8 49.5582 2 48.0 1 85.0 3 68.0 2 5.2355 1 31.0 2 4.6069 7 7.0 1 18.2664 2 2.1784 2 3.7931 1 26.0 1 16.8405 2 30.8545 1 0.6654 2)
Average genome size in population (length): 43.645
Average program size in population (points): 44.645
Average percent parens in population: 0.024
Minimum age in population: 15.265625
Maximum age in population: 19.935546875
Average age in population: 17.9348173828125
Median age in population: 18.045166015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 67
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.029
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 12222456
--- Timings ---
Current time: 1529615976774 milliseconds
Total Time:          39.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.9 seconds, 43.1%
Fitness Testing:     17.8 seconds, 45.5%
Report:               4.4 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 53787.0
Test mean error for best: 26.89350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -25.4160190901
Correct output: 26.0066432259  | Program output: 37.0066432259 
Correct output: -7.8630218821  | Program output: 31.1369781179 
Correct output: 43.0854975447  | Program output: -53.9145024553
Correct output: -19.0259005733 | Program output: -88.0259005733
Correct output: -36.5615896908 | Program output: -6.5615896908 
Correct output: -86.7179135459 | Program output: -85.7179135459
Correct output: -7.1780786915  | Program output: -65.1780786915
Correct output: 103.0257764527 | Program output: 13.0257764527 
Correct output: 70.6761243376  | Program output: -23.3238756624
Correct output: -141.6518933902 | Program output: -51.6518933902
Correct output: 82.2435662182  | Program output: 33.2435662182 
Correct output: 115.9472214055 | Program output: 29.9472214055 
Correct output: 157.0833815093 | Program output: 88.0833815093 
Correct output: -4.9643490685  | Program output: -50.9643490685
Correct output: 60.1212975555  | Program output: 28.1212975555 
Correct output: -4.3554462227  | Program output: 76.6445537773 
Correct output: -72.9278840186 | Program output: -80.9278840186
Correct output: -110.3601522223 | Program output: -69.3601522223
Correct output: 5.1784404039   | Program output: 82.1784404039 
Correct output: -95.8868459204 | Program output: -75.8868459204
Correct output: 36.6113545279  | Program output: 65.6113545279 
Correct output: -16.9310924128 | Program output: -39.9310924128
Correct output: -57.0165724778 | Program output: -15.0165724778
Correct output: -0.4292752469  | Program output: -16.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction in1} {:instruction integer_dec} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_rot} {:instruction float_yank} {:instruction float_swap})
Best program: (integer_max in1 integer_dec float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_div integer_inc float_swap float_inc float_rot float_stackdepth float_swap integer_flush integer_stackdepth float_shove float_div integer_inc float_swap float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_shove float_rot float_yank float_swap)
Errors: [50.0 1 11.0 2 39.0 11 97.0 11 69.0 2 30.0 1 1.0 1 58.0 2 90.0 1 94.0 13 90.0 2 49.0 2 86.0 3 69.0 3 46.0 2 32.0 2 81.0 11 8.0 2 41.0 3 77.0 2 20.0 1 29.0 2 23.0 2 42.0 2 16.0 2]
Total: 1334.0
Mean: 26.68
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 3078.485392900001
Median total errors in population: 1335.0
Error averages by case: (117.85820719999998 3.134 82.17906659999998 2.24 106.7975594 11.201 161.77716979999994 12.081 135.8353813 2.356 98.43117659999997 3.109 74.3590619 1.464 125.75391050000002 3.054 156.3218147 3.041 159.5574439 12.973 155.68503889999997 4.087 119.58474740000001 2.248 153.6166054 3.992 140.43001239999998 3.178 114.94745960000004 3.075 103.4148975 3.065 145.08834079999997 11.207 82.08479419999999 3.117 110.76306119999997 3.312 141.63750650000006 2.98 91.47456059999999 3.121 98.78171409999997 3.035 94.51458790000002 3.162 109.82969180000002 3.125 87.31458270000002 3.09)
Error minima by case: (13.3664 1 8.0 1 7.863 9 8.4431 8 19.0259 1 27.0 1 0.0 0 4.5702 1 0.5096 1 36.0337 7 47.5582 2 33.7274 1 74.3829 3 68.0 2 4.9643 1 22.1218 2 3.417 8 7.0 1 16.2664 2 1.1784 2 1.7931 1 1.9689 1 10.1759 2 29.8545 1 0.4293 2)
Average genome size in population (length): 46.47
Average program size in population (points): 47.47
Average percent parens in population: 0.022
Minimum age in population: 16.654296875
Maximum age in population: 21.499267578125
Average age in population: 19.42989965820312
Median age in population: 19.470458984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.039
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 13384906
--- Timings ---
Current time: 1529615979716 milliseconds
Total Time:          42.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.2 seconds, 43.1%
Fitness Testing:     19.1 seconds, 45.4%
Report:               4.7 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 53787.0
Test mean error for best: 26.89350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -25.4160190901
Correct output: 26.0066432259  | Program output: 37.0066432259 
Correct output: -7.8630218821  | Program output: 31.1369781179 
Correct output: 43.0854975447  | Program output: -53.9145024553
Correct output: -19.0259005733 | Program output: -88.0259005733
Correct output: -36.5615896908 | Program output: -6.5615896908 
Correct output: -86.7179135459 | Program output: -85.7179135459
Correct output: -7.1780786915  | Program output: -65.1780786915
Correct output: 103.0257764527 | Program output: 13.0257764527 
Correct output: 70.6761243376  | Program output: -23.3238756624
Correct output: -141.6518933902 | Program output: -51.6518933902
Correct output: 82.2435662182  | Program output: 33.2435662182 
Correct output: 115.9472214055 | Program output: 29.9472214055 
Correct output: 157.0833815093 | Program output: 88.0833815093 
Correct output: -4.9643490685  | Program output: -50.9643490685
Correct output: 60.1212975555  | Program output: 28.1212975555 
Correct output: -4.3554462227  | Program output: 76.6445537773 
Correct output: -72.9278840186 | Program output: -80.9278840186
Correct output: -110.3601522223 | Program output: -69.3601522223
Correct output: 5.1784404039   | Program output: 82.1784404039 
Correct output: -95.8868459204 | Program output: -75.8868459204
Correct output: 36.6113545279  | Program output: 65.6113545279 
Correct output: -16.9310924128 | Program output: -39.9310924128
Correct output: -57.0165724778 | Program output: -15.0165724778
Correct output: -0.4292752469  | Program output: -16.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_add})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div integer_inc float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop integer_rot float_frominteger float_inc float_pop float_sin integer_mult float_pop 41 float_add)
Errors: [50.0 1 11.0 2 39.0 11 97.0 11 69.0 2 30.0 1 1.0 1 58.0 2 90.0 1 94.0 13 90.0 2 49.0 2 86.0 3 69.0 3 46.0 2 32.0 2 81.0 11 8.0 2 41.0 3 77.0 2 20.0 1 29.0 2 23.0 2 42.0 2 16.0 2]
Total: 1334.0
Mean: 26.68
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3396.2889139000017
Median total errors in population: 1335.0
Error averages by case: (130.48240359999997 3.245 95.73030049999996 2.666 119.32663319999995 11.203 172.95646879999995 11.893 147.31023280000005 2.783 111.35132789999999 3.209 88.24632290000002 1.937 137.42659650000002 3.316 168.39869090000005 3.175 171.04789650000004 12.958 168.06518489999993 4.201 132.56931949999998 2.676 166.0650392 4.259 153.2254717 3.62 126.89952910000004 3.312 116.53530119999999 3.346 156.1005435 11.236 95.35315839999996 3.392 123.97186229999997 3.764 152.56785160000007 3.22 105.02146299999995 3.225 111.90476659999999 3.304 107.10188410000004 3.433 122.57655900000002 3.406 99.93110620000004 3.344)
Error minima by case: (11.0551 1 8.0 1 4.5344 8 39.0855 8 17.236 1 27.0 1 0.0 0 6.82 1 18.542 1 66.6761 8 47.5582 2 48.0 1 85.0 3 68.0 2 3.9725 1 31.0 2 4.5993 7 7.0 1 16.2664 2 1.1784 2 1.7931 1 26.0 1 16.469 2 25.6319 1 1.3422 2)
Average genome size in population (length): 47.232
Average program size in population (points): 48.232
Average percent parens in population: 0.022
Minimum age in population: 18.177001953125
Maximum age in population: 23.157470703125
Average age in population: 20.92389282226562
Median age in population: 20.964111328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.04
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 14566181
--- Timings ---
Current time: 1529615982715 milliseconds
Total Time:          45.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.4 seconds, 43.0%
Fitness Testing:     20.5 seconds, 45.5%
Report:               5.0 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 53933.0
Test mean error for best: 26.96650
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -23.4160190901
Correct output: 26.0066432259  | Program output: 39.0066432259 
Correct output: -7.8630218821  | Program output: 33.1369781179 
Correct output: 43.0854975447  | Program output: -51.9145024553
Correct output: -19.0259005733 | Program output: -86.0259005733
Correct output: -36.5615896908 | Program output: -4.5615896908 
Correct output: -86.7179135459 | Program output: -83.7179135459
Correct output: -7.1780786915  | Program output: -63.1780786915
Correct output: 103.0257764527 | Program output: 15.0257764527 
Correct output: 70.6761243376  | Program output: -21.3238756624
Correct output: -141.6518933902 | Program output: -49.6518933902
Correct output: 82.2435662182  | Program output: 35.2435662182 
Correct output: 115.9472214055 | Program output: 31.9472214055 
Correct output: 157.0833815093 | Program output: 90.0833815093 
Correct output: -4.9643490685  | Program output: -48.9643490685
Correct output: 60.1212975555  | Program output: 30.1212975555 
Correct output: -4.3554462227  | Program output: 78.6445537773 
Correct output: -72.9278840186 | Program output: -78.9278840186
Correct output: -110.3601522223 | Program output: -67.3601522223
Correct output: 5.1784404039   | Program output: 84.1784404039 
Correct output: -95.8868459204 | Program output: -73.8868459204
Correct output: 36.6113545279  | Program output: 67.6113545279 
Correct output: -16.9310924128 | Program output: -37.9310924128
Correct output: -57.0165724778 | Program output: -13.0165724778
Correct output: -0.4292752469  | Program output: -14.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction integer_mod} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_add})
Best program: (integer_mod integer_add integer_mod float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div integer_inc float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop integer_rot float_frominteger float_inc float_pop float_sin integer_mult float_pop 41 float_add)
Errors: [52.0 2 13.0 2 41.0 11 95.0 12 67.0 2 32.0 2 3.0 1 56.0 2 88.0 2 92.0 13 92.0 2 47.0 2 84.0 2 67.0 3 44.0 1 30.0 1 83.0 11 6.0 1 43.0 3 79.0 2 22.0 2 31.0 2 21.0 2 44.0 2 14.0 2]
Total: 1333.0
Mean: 26.66
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3466.7893799
Median total errors in population: 1334.0
Error averages by case: (134.12197629999997 2.766 98.7227842 3.087 122.75095729999997 11.213 175.15955430000002 11.459 149.82225809999997 3.194 115.598974 2.736 91.54088220000001 2.327 139.88221700000003 3.27 171.14470819999997 2.717 173.4536824 12.971 171.37183359999992 3.712 134.42411150000004 3.084 168.0571776 4.231 154.61230349999994 4.03 129.31119360000002 3.273 118.77844680000004 3.305 159.47107429999997 11.256 97.73826959999995 3.358 127.31687759999998 4.158 155.89430890000006 3.189 108.3960115 2.751 114.83382010000003 3.257 109.44131250000002 3.402 126.63434519999998 3.367 102.90529959999999 3.292)
Error minima by case: (13.3664 1 7.2568 1 6.3957 9 36.5852 8 19.5136 1 27.0 1 0.0 0 6.1989 1 23.3551 1 8.9946 8 49.5582 2 2.5729 1 36.2765 2 67.0 2 4.8366 1 19.5494 1 5.0602 8 6.0 1 18.2664 2 1.1784 2 3.7931 1 3.5576 1 2.7814 2 29.8545 1 0.5792 2)
Average genome size in population (length): 50.773
Average program size in population (points): 51.773
Average percent parens in population: 0.020
Minimum age in population: 19.748291015625
Maximum age in population: 24.41253662109375
Average age in population: 22.33334307861328
Median age in population: 22.35623168945312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.041
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 15835706
--- Timings ---
Current time: 1529615985775 milliseconds
Total Time:          48.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.6 seconds, 42.9%
Fitness Testing:     21.9 seconds, 45.5%
Report:               5.5 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 53990.0
Test mean error for best: 26.99500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -22.4160190901
Correct output: 26.0066432259  | Program output: 40.0066432259 
Correct output: -7.8630218821  | Program output: 34.1369781179 
Correct output: 43.0854975447  | Program output: -50.9145024553
Correct output: -19.0259005733 | Program output: -85.0259005733
Correct output: -36.5615896908 | Program output: -3.5615896908 
Correct output: -86.7179135459 | Program output: -82.7179135459
Correct output: -7.1780786915  | Program output: -62.1780786915
Correct output: 103.0257764527 | Program output: 16.0257764527 
Correct output: 70.6761243376  | Program output: -20.3238756624
Correct output: -141.6518933902 | Program output: -48.6518933902
Correct output: 82.2435662182  | Program output: 36.2435662182 
Correct output: 115.9472214055 | Program output: 32.9472214055 
Correct output: 157.0833815093 | Program output: 91.0833815093 
Correct output: -4.9643490685  | Program output: -47.9643490685
Correct output: 60.1212975555  | Program output: 31.1212975555 
Correct output: -4.3554462227  | Program output: 79.6445537773 
Correct output: -72.9278840186 | Program output: -77.9278840186
Correct output: -110.3601522223 | Program output: -66.3601522223
Correct output: 5.1784404039   | Program output: 85.1784404039 
Correct output: -95.8868459204 | Program output: -72.8868459204
Correct output: 36.6113545279  | Program output: 68.6113545279 
Correct output: -16.9310924128 | Program output: -36.9310924128
Correct output: -57.0165724778 | Program output: -12.0165724778
Correct output: -0.4292752469  | Program output: -13.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_shove float_div integer_inc float_swap float_inc float_rot float_stackdepth integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat)
Errors: [53.0 2 14.0 2 42.0 11 94.0 12 66.0 2 33.0 1 4.0 1 55.0 2 87.0 2 91.0 12 93.0 2 46.0 2 83.0 3 66.0 3 43.0 1 29.0 2 84.0 11 5.0 1 44.0 3 80.0 1 23.0 2 32.0 2 20.0 1 45.0 2 13.0 2]
Total: 1330.0
Mean: 26.6
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3423.5355129000013
Median total errors in population: 1334.0
Error averages by case: (132.34953879999998 2.653 97.15686369999999 3.303 121.05708269999997 11.244 173.11766999999995 11.326 147.5772552 3.417 113.87887349999998 2.634 89.87300390000004 2.564 137.67441640000004 3.332 169.34329639999999 2.604 171.56872270000005 13.0 169.72111369999993 3.58 132.6181152 3.323 166.32061599999997 4.251 153.6728044 4.248 127.13252960000005 3.289 116.89302400000003 3.335 158.03307029999996 11.282 95.61924959999997 3.386 125.63718469999998 4.378 154.59313950000006 3.239 106.69265429999997 2.644 113.44376459999997 3.316 107.30824550000003 3.45 124.8925778 3.415 100.78970040000002 3.358)
Error minima by case: (15.6777 1 8.0 1 5.5344 8 38.0855 8 18.236 1 27.0 1 0.0 0 6.82 1 86.0 1 64.1017 8 47.5582 2 35.201 1 75.7842 2 65.0 2 4.0608 1 23.486 1 5.0846 8 4.0 1 16.2664 2 0.1784 1 1.7931 1 26.0 1 10.8626 1 34.0772 1 1.2068 2)
Average genome size in population (length): 52.269
Average program size in population (points): 53.269
Average percent parens in population: 0.019
Minimum age in population: 21.18359375
Maximum age in population: 25.70709228515625
Average age in population: 23.77110043334961
Median age in population: 23.8260498046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.046
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 17142595
--- Timings ---
Current time: 1529615988817 milliseconds
Total Time:          51.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.8 seconds, 42.7%
Fitness Testing:     23.3 seconds, 45.6%
Report:               5.9 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 53990.0
Test mean error for best: 26.99500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -22.4160190901
Correct output: 26.0066432259  | Program output: 40.0066432259 
Correct output: -7.8630218821  | Program output: 34.1369781179 
Correct output: 43.0854975447  | Program output: -50.9145024553
Correct output: -19.0259005733 | Program output: -85.0259005733
Correct output: -36.5615896908 | Program output: -3.5615896908 
Correct output: -86.7179135459 | Program output: -82.7179135459
Correct output: -7.1780786915  | Program output: -62.1780786915
Correct output: 103.0257764527 | Program output: 16.0257764527 
Correct output: 70.6761243376  | Program output: -20.3238756624
Correct output: -141.6518933902 | Program output: -48.6518933902
Correct output: 82.2435662182  | Program output: 36.2435662182 
Correct output: 115.9472214055 | Program output: 32.9472214055 
Correct output: 157.0833815093 | Program output: 91.0833815093 
Correct output: -4.9643490685  | Program output: -47.9643490685
Correct output: 60.1212975555  | Program output: 31.1212975555 
Correct output: -4.3554462227  | Program output: 79.6445537773 
Correct output: -72.9278840186 | Program output: -77.9278840186
Correct output: -110.3601522223 | Program output: -66.3601522223
Correct output: 5.1784404039   | Program output: 85.1784404039 
Correct output: -95.8868459204 | Program output: -72.8868459204
Correct output: 36.6113545279  | Program output: 68.6113545279 
Correct output: -16.9310924128 | Program output: -36.9310924128
Correct output: -57.0165724778 | Program output: -12.0165724778
Correct output: -0.4292752469  | Program output: -13.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_shove float_div integer_inc float_swap float_inc float_rot float_stackdepth integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat)
Errors: [53.0 2 14.0 2 42.0 11 94.0 12 66.0 2 33.0 1 4.0 1 55.0 2 87.0 2 91.0 12 93.0 2 46.0 2 83.0 3 66.0 3 43.0 1 29.0 2 84.0 11 5.0 1 44.0 3 80.0 1 23.0 2 32.0 2 20.0 1 45.0 2 13.0 2]
Total: 1330.0
Mean: 26.6
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3063.3907529000007
Median total errors in population: 1334.0
Error averages by case: (119.1807327 2.657 81.85706379999998 3.252 106.16986699999995 11.203 158.80673059999998 11.377 134.71353419999994 3.338 99.36901010000004 2.638 76.48045680000001 2.48 122.79759630000005 3.271 153.691879 2.617 156.84100550000002 12.94 156.97802249999992 3.497 117.47527960000004 3.248 151.62842550000002 4.127 139.7948063 4.186 112.31460180000009 3.15 103.04681749999999 3.193 142.60366299999995 11.251 81.47914429999999 3.233 113.8212807 4.298 139.2558653 3.167 93.56312229999997 2.637 98.73860099999997 3.248 92.39648229999997 3.383 110.25128429999998 3.343 85.10348049999999 3.298)
Error minima by case: (4.9153 1 7.7639 1 6.5344 8 37.4806 8 5.3192 1 27.0 1 0.0 0 5.5702 1 27.5677 1 31.5551 8 45.3831 2 20.762 1 82.0 2 65.0 2 4.9744 1 28.0 1 4.3655 7 4.0 1 18.2664 2 0.1909 1 3.7931 1 4.0615 1 3.2754 1 20.1166 1 0.4393 2)
Average genome size in population (length): 53.922
Average program size in population (points): 54.922
Average percent parens in population: 0.019
Minimum age in population: 22.78598022460938
Maximum age in population: 26.98330688476562
Average age in population: 25.2237931060791
Median age in population: 25.24665069580078
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.778
Total error diversity:				 0.057
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 18490895
--- Timings ---
Current time: 1529615991885 milliseconds
Total Time:          54.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.1 seconds, 42.6%
Fitness Testing:     24.8 seconds, 45.7%
Report:               6.3 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_add})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_swap float_inc float_rot float_inc float_rot float_stackdepth integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop integer_rot float_frominteger float_inc float_pop float_sin integer_mult float_pop 41 float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3205.633789300001
Median total errors in population: 1334.0
Error averages by case: (125.26837429999998 2.94 88.80195250000001 3.187 113.09150619999994 11.192 163.65352689999997 11.681 138.48660950000001 3.3 106.06530500000001 2.89 82.93157020000001 2.43 128.18889670000004 3.211 159.53573840000004 2.927 161.94794869999998 12.907 163.27400949999992 3.47 122.6165083 3.212 156.5465375 3.837 143.54346529999998 4.167 117.43166700000003 2.745 106.71903570000005 2.89 150.28995649999996 11.231 86.62231819999998 2.85 118.95751679999996 4.279 146.57967430000002 3.066 99.91327820000001 2.933 105.27752740000001 3.186 97.51474450000008 3.274 117.45299419999999 3.298 90.57812750000005 3.242)
Error minima by case: (13.6777 1 1.7655 1 8.4145 8 18.8443 8 16.7975 1 17.2366 1 0.0 0 3.8002 1 29.1678 1 46.435 8 52.5582 2 43.0 1 68.1925 2 63.0 2 4.8647 1 26.0 1 1.5175 10 2.0 1 21.2664 2 0.1764 1 6.7931 1 12.3702 1 15.0934 1 32.0772 1 1.4441 1)
Average genome size in population (length): 58.104
Average program size in population (points): 59.104
Average percent parens in population: 0.018
Minimum age in population: 24.65896606445312
Maximum age in population: 28.56021881103516
Average age in population: 26.64007346343994
Median age in population: 26.67876434326172
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.05
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 19943620
--- Timings ---
Current time: 1529615995000 milliseconds
Total Time:          57.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.3 seconds, 42.4%
Fitness Testing:     26.3 seconds, 45.8%
Report:               6.6 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction tagged_216} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_add})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_shove float_div integer_inc float_swap float_inc float_rot float_stackdepth integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot integer_div integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat tagged_216 float_mod integer_dup_items integer_dup_items float_min integer_yank float_add float_pop integer_rot integer_yankdup float_inc float_pop float_sin integer_mult float_pop 41 float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3122.2523636
Median total errors in population: 1333.0
Error averages by case: (123.28450359999997 3.246 86.4676879 3.176 110.86466209999998 11.129 159.8780401 11.875 134.29154459999998 3.273 104.43626560000001 3.099 80.27123920000002 2.411 124.17439050000004 3.176 155.06169559999998 3.243 158.27144669999998 12.689 161.1927604999999 3.434 117.90699040000004 3.192 152.00963700000003 3.677 138.52716189999998 4.135 113.44444030000002 2.339 101.98036630000001 2.73 148.10430639999998 11.179 81.74080509999999 2.428 116.55329749999996 4.261 144.3453148 2.865 97.41021559999999 3.24 102.89383200000003 3.135 93.38377320000004 3.068 115.67185610000001 3.258 86.66713060000001 3.161)
Error minima by case: (12.6777 1 8.0 1 7.5766 9 35.0676 8 18.9645 1 22.4384 1 0.0 0 8.1982 1 77.9742 1 62.6366 8 37.3481 2 16.7564 1 57.0528 2 18.0834 2 4.124 1 4.8787 1 6.4621 9 0.0 0 21.2664 2 0.0199 1 6.7931 1 26.0 1 15.0 1 25.9834 1 0.4501 1)
Average genome size in population (length): 60.125
Average program size in population (points): 61.125
Average percent parens in population: 0.017
Minimum age in population: 25.70684814453125
Maximum age in population: 30.10752105712891
Average age in population: 28.06751211547852
Median age in population: 28.07704162597656
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 60
Genome diversity (% unique Plush genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.041
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 21446820
--- Timings ---
Current time: 1529615998216 milliseconds
Total Time:          60.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.5 seconds, 42.2%
Fitness Testing:     27.8 seconds, 46.0%
Report:               7.0 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction tagged_216} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_add})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_shove float_div integer_inc float_swap float_inc float_rot float_stackdepth integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot integer_div integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat tagged_216 float_mod integer_dup_items integer_dup_items float_min integer_yank float_add float_pop integer_rot integer_yankdup float_inc float_pop float_sin integer_mult float_pop 41 float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3143.020888599999
Median total errors in population: 1330.0
Error averages by case: (125.49801269999998 3.328 87.8584734 3.236 112.05431359999994 11.05 159.15866539999993 11.821 133.81892620000005 3.356 106.17973579999999 2.825 82.99220920000002 2.553 123.62785600000008 3.209 154.91154029999996 3.339 157.82295889999995 12.24 163.70653779999998 3.479 117.99584580000003 3.264 152.03994200000005 4.063 139.04118819999994 4.191 113.00787400000002 2.361 102.04657649999999 3.178 148.83100089999996 11.179 82.6931897 2.447 119.21445909999998 4.334 144.98746099999997 2.545 100.10767750000001 3.318 104.2103954 3.196 93.34053250000005 2.772 117.6449657 3.32 86.465551 3.161)
Error minima by case: (11.6777 1 9.0 1 2.2578 8 29.3277 9 13.8928 1 23.2539 1 0.0 0 4.1802 1 78.0 1 61.7141 8 54.5582 2 37.0 1 74.0 2 57.0 2 3.2949 1 20.0 1 3.4621 8 0.0 0 23.2664 2 0.0186 1 8.7931 1 26.5728 1 11.0 1 30.0772 1 0.1072 1)
Average genome size in population (length): 56.916
Average program size in population (points): 57.916
Average percent parens in population: 0.018
Minimum age in population: 26.70684814453125
Maximum age in population: 31.25749015808105
Average age in population: 29.44049559593201
Median age in population: 29.4699182510376
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 97
Genome diversity (% unique Plush genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.054
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 22869720
--- Timings ---
Current time: 1529616001548 milliseconds
Total Time:          63.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.8 seconds, 42.0%
Fitness Testing:     29.4 seconds, 46.0%
Report:               7.5 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_add})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 -48 integer_flush -94.09373270553453 integer_stackdepth float_shove float_div integer_inc float_swap float_inc float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_shove float_div float_inc float_yank float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_stackdepth float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_min integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop integer_rot float_frominteger float_inc float_pop float_sin integer_mult float_pop 41 float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2792.0255558999993
Median total errors in population: 1330.0
Error averages by case: (111.32978019999997 3.156 75.06463670000001 3.064 99.59154219999998 10.822 145.30637290000004 11.633 119.48841449999999 3.146 91.6015297 2.895 68.40951980000003 2.587 109.26947610000005 3.067 141.05601830000006 3.149 143.31422920000003 12.136 150.40073909999992 3.271 104.34764260000003 3.085 138.87141059999993 3.686 125.77009689999998 4.016 98.49664250000005 2.177 87.9621547 3.05 136.94167059999995 11.142 66.90820520000001 2.259 105.19739219999992 4.137 133.1491433 2.521 85.77076899999997 3.162 91.6126646 3.072 78.38022150000002 2.695 103.1605873 3.137 70.79569620000002 2.764)
Error minima by case: (7.6777 1 8.0 1 0.4036 9 18.5716 9 10.7593 1 27.0 1 0.0 0 1.0885 1 41.3687 1 9.019 7 52.5582 1 20.5864 1 54.2901 2 59.0 2 3.3022 1 1.5358 1 3.4621 8 0.0 0 21.2664 2 0.0186 1 6.7931 1 25.0458 1 8.6645 1 26.0772 1 0.3305 1)
Average genome size in population (length): 59.814
Average program size in population (points): 60.814
Average percent parens in population: 0.017
Minimum age in population: 28.04823303222656
Maximum age in population: 32.86447906494141
Average age in population: 30.94553061676025
Median age in population: 31.00288581848145
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.05
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 24365070
--- Timings ---
Current time: 1529616004871 milliseconds
Total Time:          67.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.1 seconds, 41.9%
Fitness Testing:     30.9 seconds, 46.1%
Report:               8.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_shove} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_swap float_inc float_rot float_inc float_rot float_stackdepth integer_flush float_shove float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_rot float_stackdepth print_float float_inc integer_fromfloat)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3050.3126143
Median total errors in population: 1327.0
Error averages by case: (123.30315639999998 3.354 86.36072659999999 3.25 110.32187099999994 10.523 153.51947019999994 11.259 128.17936369999993 3.355 103.6340603 3.829 81.45586220000006 3.158 118.07896050000005 3.227 148.92181300000001 3.388 151.79069719999993 12.155 162.15602269999994 3.481 112.87057190000009 3.267 146.93595889999995 3.59 134.54375940000003 4.18 107.52818510000009 2.369 96.67811489999995 3.281 146.8470749 11.154 77.30872210000001 2.454 117.64904759999996 4.329 143.0622426 3.06 98.50168759999995 3.353 102.64165659999999 3.258 87.98076510000001 3.268 115.19412920000005 3.322 80.38969460000004 2.595)
Error minima by case: (9.6777 1 8.0 1 6.8631 8 3.2937 8 18.0514 1 27.0 1 0.0 0 3.8456 1 16.0 1 7.7772 9 46.4058 1 3.7902 1 20.0 1 37.0 2 4.0477 1 13.7421 1 3.4621 8 0.0 0 15.1141 2 0.1903 1 0.6408 1 9.7679 1 12.9266 1 28.0772 1 0.3305 1)
Average genome size in population (length): 65.606
Average program size in population (points): 66.606
Average percent parens in population: 0.015
Minimum age in population: 29.54123687744141
Maximum age in population: 34.2687201499939
Average age in population: 32.42793046712875
Median age in population: 32.48025727272034
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.064
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 26005220
--- Timings ---
Current time: 1529616008051 milliseconds
Total Time:          70.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.3 seconds, 41.6%
Fitness Testing:     32.6 seconds, 46.2%
Report:               8.5 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_div} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_add} {:instruction float_pop})
Best program: (integer_mod integer_add float_swap float_pop in1 float_swap integer_sub integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_sub float_div float_shove float_div float_inc float_swap float_inc float_rot float_shove float_div integer_inc integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc integer_add float_stackdepth integer_inc float_swap float_inc float_swap float_inc float_rot integer_rot integer_inc float_swap float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop integer_rot float_frominteger float_inc float_add float_pop)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3004.2498845999994
Median total errors in population: 1327.0
Error averages by case: (122.29503299999996 3.166 84.53362839999998 3.078 109.38744469999997 10.43 152.89661829999997 11.164 127.38126209999999 3.157 101.83994040000002 3.91 79.45801629999997 3.053 117.18784540000001 3.071 146.1833235 3.197 150.24387849999997 12.169 160.92047849999997 3.263 109.85817330000002 3.084 144.11350480000002 3.349 130.5487076 4.001 106.4096737 2.195 93.92940999999999 3.107 146.73455889999997 11.155 74.74077920000002 2.263 116.00152139999999 4.132 142.91170629999996 2.962 96.74661729999998 3.16 101.01466410000003 3.088 86.2769335 3.16 113.7094689 3.146 78.1456965 2.321)
Error minima by case: (9.6777 1 8.0 1 7.2331 8 32.4161 9 15.6828 1 27.0 1 0.0 0 6.688 1 80.0 1 48.5261 8 56.5582 1 39.0 1 76.0 2 59.0 2 3.4668 1 22.0 2 4.3554 9 0.0 0 25.2664 2 0.1812 1 10.7931 1 22.2098 2 13.0 1 28.0772 1 0.0789 1)
Average genome size in population (length): 67.067
Average program size in population (points): 68.067
Average percent parens in population: 0.015
Minimum age in population: 31.25537109375
Maximum age in population: 35.712730884552
Average age in population: 33.85514520049095
Median age in population: 33.9145575761795
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.045
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 27681920
--- Timings ---
Current time: 1529616011378 milliseconds
Total Time:          73.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.5 seconds, 41.4%
Fitness Testing:     34.2 seconds, 46.4%
Report:               8.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction integer_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_swap} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_yankdup} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction tagged_216} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_add})
Best program: (integer_mod integer_add integer_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap integer_flush integer_stackdepth float_shove float_shove float_inc float_swap float_swap float_shove float_div integer_inc float_swap float_inc float_rot float_stackdepth integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot integer_div integer_inc integer_mod float_inc float_rot float_yankdup print_float float_inc integer_fromfloat tagged_216 float_mod integer_dup_items integer_dup_items float_min integer_yank integer_stackdepth float_pop integer_rot integer_yankdup float_inc float_pop float_sin integer_mult float_pop 41 float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2961.0796624
Median total errors in population: 1327.0
Error averages by case: (121.5956649 3.125 80.97892159999999 3.041 105.77669349999996 10.426 152.21968499999994 11.156 126.58068199999997 3.105 102.71383029999998 3.872 78.25613290000003 2.977 116.45243100000002 3.018 143.51154780000002 3.162 150.63414269999998 12.175 159.76849189999993 3.215 106.3361084 3.045 140.48211499999996 3.303 126.99145300000002 3.958 105.70401970000003 2.143 90.39716499999997 3.039 143.3882774 11.128 73.63486809999999 2.196 114.83574089999996 4.068 139.56244929999994 2.927 95.5732118 3.119 97.58342099999999 3.063 85.4989003 3.108 114.03252569999998 3.099 78.82518320000001 2.278)
Error minima by case: (0.9298 1 9.0 1 4.2578 8 26.3277 9 19.0259 1 28.0 1 0.3758 1 2.8456 1 15.0 1 58.1017 8 54.5582 1 39.0 1 19.0 1 36.0 2 4.9643 1 22.0 1 4.3554 9 0.0 0 23.2664 2 0.7006 1 8.7931 1 25.6356 1 13.0 1 19.3292 1 0.4293 1)
Average genome size in population (length): 66.243
Average program size in population (points): 67.243
Average percent parens in population: 0.015
Minimum age in population: 32.25537109375
Maximum age in population: 37.29786992073059
Average age in population: 35.23299462115765
Median age in population: 35.28447842597961
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.049
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 29338020
--- Timings ---
Current time: 1529616014840 milliseconds
Total Time:          77.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.8 seconds, 41.3%
Fitness Testing:     35.9 seconds, 46.6%
Report:               9.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_div} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_inc} {:instruction in1} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_add})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_sub float_div float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_stackdepth float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop integer_rot float_frominteger float_inc in1 float_sin integer_mult float_pop 41 float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2926.7948317000005
Median total errors in population: 1327.0
Error averages by case: (119.0085884 3.219 81.04648080000003 3.131 105.50476169999997 10.411 149.35917090000004 11.171 123.72814370000002 3.234 99.05201449999996 3.89 76.11974530000002 3.099 113.55717760000005 3.122 144.37635180000004 3.272 148.0266426 12.134 157.33534869999997 3.335 107.1002248 3.152 141.42353599999998 3.405 128.4732337 4.063 102.89028300000004 2.266 90.984991 3.161 142.72094299999998 11.127 71.55345299999999 2.333 112.50924989999997 4.18 138.93896 3.014 93.26669599999998 3.209 97.59447270000001 3.129 82.91185940000003 3.214 111.28274129999998 3.2 76.17176190000002 2.387)
Error minima by case: (8.6249 2 8.0 1 8.9502 8 31.4806 9 20.0464 1 27.0 1 0.0 0 6.8002 1 70.9742 1 59.3964 8 44.3481 2 9.7564 1 50.0528 2 25.0834 2 6.2972 1 2.1213 1 5.4621 9 0.0 0 14.7282 2 0.062 1 0.2549 2 26.0 1 12.0 1 27.0244 1 1.6695 1)
Average genome size in population (length): 66.487
Average program size in population (points): 67.487
Average percent parens in population: 0.015
Minimum age in population: 33.25537109375
Maximum age in population: 38.98761749267578
Average age in population: 36.6639518597126
Median age in population: 36.70610544085503
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.058
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 31000245
--- Timings ---
Current time: 1529616018336 milliseconds
Total Time:          80.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.1 seconds, 41.1%
Fitness Testing:     37.6 seconds, 46.7%
Report:               9.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_div} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_add})
Best program: (integer_mod integer_add integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_yankdup integer_sub float_div float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_stackdepth float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_mult float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop integer_rot float_frominteger float_inc float_pop float_sin integer_mult float_pop 41 float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3287.1502407999997
Median total errors in population: 1327.0
Error averages by case: (135.2991803999999 3.395 94.60590289999999 3.275 118.78468169999995 10.49 163.2910977 11.201 138.3177238 3.369 116.2823507 4.09 92.33555290000001 3.265 128.2472347 3.244 155.3979108 3.406 162.03448369999998 12.182 173.15164369999997 3.511 118.96206740000002 3.282 152.55439269999997 3.571 139.86814750000005 4.187 117.72916350000003 2.405 103.1815371 3.29 155.32096529999995 11.182 87.62703399999997 2.488 129.11049019999996 4.358 151.48694229999995 3.146 110.16955629999998 3.387 110.8167397 3.279 98.22545100000005 3.372 127.6141484 3.366 91.45084240000003 2.544)
Error minima by case: (10.6777 1 2.5033 1 7.33 8 8.9266 9 18.6882 1 27.0 1 0.0 0 1.8456 1 15.0 1 36.5172 8 52.5582 1 38.0 1 19.0 1 36.0 2 4.1327 1 21.0 1 4.3825 9 0.0 0 21.2664 2 0.1047 1 6.7931 1 1.1943 1 1.9655 1 29.0772 1 0.4346 1)
Average genome size in population (length): 65.744
Average program size in population (points): 66.744
Average percent parens in population: 0.015
Minimum age in population: 34.25537109375
Maximum age in population: 40.00624060630798
Average age in population: 38.03817811059952
Median age in population: 38.0865580290556
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.061
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 32643845
--- Timings ---
Current time: 1529616021862 milliseconds
Total Time:          84.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.3 seconds, 40.8%
Fitness Testing:     39.4 seconds, 46.8%
Report:              10.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction integer_min} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction integer_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction tagged_216} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_add} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_add})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add integer_min integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_mult integer_stackdepth float_shove float_div float_inc float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_shove float_div integer_inc float_swap float_inc float_rot float_stackdepth integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_yankdup float_inc float_rot float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot integer_div integer_inc float_add float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat tagged_216 float_mod integer_dup_items integer_dup_items float_frominteger integer_yank float_add float_rot integer_rot integer_yankdup float_inc float_pop float_sin integer_mult float_pop 41 float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2924.243310399999
Median total errors in population: 1327.0
Error averages by case: (119.32944629999997 3.277 80.75101769999999 3.177 105.00609339999997 10.443 148.64226120000004 11.167 123.30009419999999 3.264 99.07027099999998 3.982 76.79569250000003 3.151 113.0550063 3.155 143.8696332 3.306 147.54362719999995 12.169 158.05483869999998 3.362 106.60135250000003 3.182 141.1301663 3.441 128.4856437 4.093 102.39511400000005 2.298 90.48019309999998 3.182 142.24049819999996 11.154 72.1464072 2.377 113.23428629999998 4.21 138.1571572 3.08 94.07618229999996 3.263 97.18130569999998 3.19 82.652897 3.281 111.3962296 3.24 75.77189560000004 2.432)
Error minima by case: (5.9217 1 8.0 1 5.663 9 5.391 9 15.6828 1 26.4384 1 0.6242 1 4.8456 1 19.0 1 22.1996 8 41.3481 1 4.7083 1 23.0 2 22.0834 1 4.1327 1 0.8787 1 2.664 9 0.0 0 20.3318 2 0.2984 1 5.8585 1 11.8652 2 11.9266 1 10.0606 1 0.5672 1)
Average genome size in population (length): 65.396
Average program size in population (points): 66.396
Average percent parens in population: 0.015
Minimum age in population: 35.25537109375
Maximum age in population: 41.47450639307499
Average age in population: 39.42935330565274
Median age in population: 39.52537127584219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.064
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 34278820
--- Timings ---
Current time: 1529616025272 milliseconds
Total Time:          87.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.6 seconds, 40.7%
Fitness Testing:     41.1 seconds, 46.9%
Report:              10.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_div} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_rot})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_sub float_div float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_stackdepth float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat float_pop integer_dup_items integer_dec integer_yank float_add float_pop integer_rot float_frominteger float_inc float_pop float_sin integer_mult float_pop 41 float_rot)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3155.2019789
Median total errors in population: 1327.0
Error averages by case: (128.58226129999997 3.362 89.92995499999998 3.254 113.85313409999993 10.486 157.8415213 11.182 132.5057686 3.357 109.64714409999998 4.27 86.37896090000001 3.225 122.49914860000001 3.231 152.13458120000007 3.404 156.73789519999997 12.199 166.77569870000002 3.468 115.50204029999999 3.266 149.3191230999999 3.55 136.8168968 4.163 112.00515490000005 2.38 99.61303579999996 3.284 150.4447805 11.161 81.61513200000003 2.461 122.45786739999994 4.309 146.7097207 3.131 103.44248079999998 3.355 106.25611239999999 3.281 92.44858919999999 3.342 120.94679559999999 3.317 85.76918040000004 2.531)
Error minima by case: (9.6777 1 12.0 1 2.2578 8 3.0937 8 14.9543 1 2.5814 1 0.3758 1 2.8456 1 10.0937 2 6.0937 8 54.5582 1 37.0 1 14.0937 1 31.0937 2 4.5646 1 20.0 1 4.3554 9 0.0 0 23.2664 2 0.1784 1 8.7931 1 26.6114 1 11.0 1 23.0364 1 0.4293 1)
Average genome size in population (length): 64.922
Average program size in population (points): 65.922
Average percent parens in population: 0.016
Minimum age in population: 37.66703653335571
Maximum age in population: 42.95636228471994
Average age in population: 40.8551842090413
Median age in population: 40.86258232221007
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.064
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 35901995
--- Timings ---
Current time: 1529616028674 milliseconds
Total Time:          91.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.9 seconds, 40.5%
Fitness Testing:     42.7 seconds, 47.0%
Report:              11.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_swap} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction integer_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_dup_items})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_inc float_swap float_swap integer_stackdepth float_shove integer_inc float_inc float_swap float_div float_inc float_yank float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_min float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_dup_items)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3048.5712751999995
Median total errors in population: 1327.0
Error averages by case: (123.53077529999995 3.346 86.51775309999998 3.225 110.60930209999995 10.455 153.1123407 11.161 127.80943829999997 3.335 103.8679838 4.113 81.74814310000004 3.228 117.70308500000002 3.223 148.60952280000004 3.361 151.4167942 12.16 162.47350269999998 3.459 112.51447500000002 3.24 146.64574639999995 3.516 134.13324940000004 4.137 107.14583390000004 2.367 96.35546400000001 3.246 147.17796399999997 11.142 76.9837524 2.438 117.97291399999995 4.286 143.32363379999998 3.114 98.83437869999997 3.345 102.84330359999997 3.255 87.60447190000005 3.334 115.35814210000001 3.316 79.97230490000004 2.505)
Error minima by case: (6.6777 1 8.0 1 8.863 8 33.0491 8 20.0259 1 27.0 1 0.0 0 7.2947 1 16.0 1 60.5939 9 53.5582 1 39.0 1 20.0 1 37.0 2 5.5646 1 22.0 1 5.3554 8 0.0 0 22.2664 2 0.0199 1 7.7931 1 25.296 1 13.0 1 6.5695 1 1.4293 1)
Average genome size in population (length): 64.871
Average program size in population (points): 65.871
Average percent parens in population: 0.016
Minimum age in population: 39.64682177454233
Maximum age in population: 44.22737612947822
Average age in population: 42.32790431365371
Median age in population: 42.38460287079215
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.058
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 37523995
--- Timings ---
Current time: 1529616031980 milliseconds
Total Time:          94.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.2 seconds, 40.4%
Fitness Testing:     44.4 seconds, 47.0%
Report:              11.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_yank} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_div} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_min} {:instruction float_flush} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 40} {:instruction float_add})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_yank integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_yankdup integer_sub float_div float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_stackdepth float_yank float_inc float_rot float_stackdepth integer_inc integer_mod float_inc integer_rot float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop integer_min float_flush float_inc float_pop float_sin integer_mult float_pop 40 float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2941.557428399999
Median total errors in population: 1327.0
Error averages by case: (120.96390279999997 3.121 80.3550694 3.035 105.46521189999997 10.471 151.12777949999995 11.202 125.58696149999996 3.089 101.2121362 3.857 77.37065620000003 2.995 115.37740270000003 3.015 143.32282190000004 3.138 149.44234409999999 12.219 159.06473439999994 3.194 105.84239830000001 3.039 140.21066019999998 3.289 126.45987230000001 3.945 104.56026640000003 2.149 89.81661179999999 3.055 143.0652207 11.181 72.6729063 2.188 114.01342269999996 4.044 139.20961089999997 2.931 94.70465459999997 3.116 96.92299089999997 3.039 84.30807890000003 3.097 113.18019700000004 3.075 77.54551680000002 2.272)
Error minima by case: (9.6777 1 8.0 1 7.9502 9 31.0855 8 0.3677 1 17.168 1 0.0 0 3.8456 1 16.0 1 58.6761 9 53.5582 1 38.0 1 20.0 1 37.0 2 5.2972 1 21.0 1 3.664 10 0.0 0 22.2664 2 0.393 1 7.7931 1 22.2098 1 2.4625 1 28.0772 1 1.5672 1)
Average genome size in population (length): 64.493
Average program size in population (points): 65.493
Average percent parens in population: 0.016
Minimum age in population: 41.25644761323929
Maximum age in population: 45.83720437251031
Average age in population: 43.77389231715724
Median age in population: 43.78895922657102
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.054
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 39136670
--- Timings ---
Current time: 1529616035304 milliseconds
Total Time:          97.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.4 seconds, 40.4%
Fitness Testing:     46.0 seconds, 47.2%
Report:              12.1 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction in2} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction tagged_216} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_yank} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_add})
Best program: (integer_mod float_dup_items integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_shove float_div integer_inc float_swap float_inc float_rot float_stackdepth integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_rot float_stackdepth integer_inc in2 float_inc float_swap float_inc float_rot integer_div integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat tagged_216 float_mod integer_dup_items integer_dup_items float_min integer_yank integer_sub float_yankdup integer_rot integer_yankdup float_inc float_div float_sin integer_mult float_pop 41 float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3314.0095016
Median total errors in population: 1327.0
Error averages by case: (135.02409949999998 3.311 96.2147566 3.214 120.64846249999997 10.503 165.7017139 11.212 140.47225359999996 3.306 116.22214370000003 4.06 93.30290240000001 3.213 129.52229759999997 3.187 157.0006458 3.331 163.15156939999997 12.194 172.63154209999996 3.41 121.19252540000001 3.231 153.9743279 3.472 141.5329645 4.131 118.91733090000002 2.327 104.48840599999998 3.23 157.62637659999996 11.198 87.6507009 2.399 129.3091065 4.27 153.87205680000002 3.104 109.33004459999998 3.292 112.49955520000006 3.226 100.0059841 3.31 127.420373 3.283 92.4193621 2.464)
Error minima by case: (9.6777 1 5.0033 1 2.863 10 32.0491 9 0.0175 1 17.5532 1 1.0 1 2.1781 1 8.0 1 58.043 8 56.5582 1 38.0 1 12.0 1 29.0 2 0.0357 1 21.0 1 0.6446 9 0.0 0 25.2664 2 0.364 1 10.7931 1 1.3057 1 0.5345 1 28.0772 1 0.1072 1)
Average genome size in population (length): 64.017
Average program size in population (points): 65.017
Average percent parens in population: 0.016
Minimum age in population: 42.51970484852791
Maximum age in population: 47.0691800005734
Average age in population: 45.2235011306433
Median age in population: 45.25598878785968
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.053
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 40737495
--- Timings ---
Current time: 1529616038802 milliseconds
Total Time:         101.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.7 seconds, 40.3%
Fitness Testing:     47.7 seconds, 47.2%
Report:              12.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -95.02835022363054} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction integer_fromfloat})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -95.02835022363054 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_yank float_stackdepth print_float float_inc integer_dec float_inc integer_fromfloat)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3280.9162939000003
Median total errors in population: 1327.0
Error averages by case: (132.6523207 3.487 96.05880799999998 3.374 119.44160269999996 10.473 162.3066117 11.183 137.12892529999993 3.482 112.71861770000004 4.294 91.64904020000002 3.398 127.21254560000003 3.363 156.3594906 3.514 160.28080049999997 12.154 171.49056099999996 3.612 121.63718460000003 3.386 155.1448372 3.631 143.38336389999998 4.291 116.81648120000006 2.505 105.44061989999996 3.41 155.63071659999994 11.18 86.93106469999998 2.606 127.42110159999997 4.433 151.87419239999997 3.252 108.53338789999995 3.494 112.1825426 3.397 97.54503760000001 3.459 124.21673159999999 3.455 89.39970810000001 2.627)
Error minima by case: (8.6777 1 9.0 1 5.2578 8 26.3277 8 12.0789 1 28.0 1 0.0 0 3.8002 1 24.542 1 48.5261 8 54.5582 1 39.0 1 76.0 2 59.0 2 3.4668 1 22.0 1 0.646 9 0.0 0 23.2664 2 0.1047 1 8.7931 1 18.05 1 13.0 1 27.0772 1 1.1436 1)
Average genome size in population (length): 63.115
Average program size in population (points): 64.115
Average percent parens in population: 0.016
Minimum age in population: 44.37517683394253
Maximum age in population: 48.47871135966852
Average age in population: 46.61050200601993
Median age in population: 46.66372411861084
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.06
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 42315920
--- Timings ---
Current time: 1529616042173 milliseconds
Total Time:         104.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.9 seconds, 40.1%
Fitness Testing:     49.4 seconds, 47.2%
Report:              13.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction -82.15924020599319} {:instruction integer_fromfloat})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_div float_inc float_yank float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_stackdepth float_swap float_inc float_rot integer_yank integer_inc float_rot float_stackdepth integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth float_swap float_swap float_inc float_rot float_stackdepth print_float -82.15924020599319 integer_fromfloat)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3289.640752699999
Median total errors in population: 1327.0
Error averages by case: (134.71135589999997 3.521 94.38490819999997 3.414 118.03557819999992 10.487 162.56642609999997 11.195 137.7980161000001 3.517 114.86074520000003 4.271 93.52262990000003 3.401 127.77089460000003 3.385 156.11199709999997 3.543 161.71479790000004 12.126 173.03124799999998 3.656 120.20746369999999 3.42 153.8883357 3.717 142.00721190000004 4.326 117.39872360000004 2.549 104.34295110000002 3.427 153.90555140000004 11.167 88.76713059999994 2.667 129.18335059999993 4.485 150.05472809999998 3.258 110.32074459999995 3.508 110.46862490000001 3.419 98.4164021 3.505 126.66103129999999 3.495 91.3659059 2.685)
Error minima by case: (5.6207 1 8.0 1 6.5537 8 29.0855 9 3.5194 1 22.1449 1 0.6242 1 2.6164 1 15.3463 1 17.0034 8 55.5582 1 5.436 1 20.0 1 37.0 2 1.2767 1 21.0 1 3.6744 9 0.0 0 24.2664 2 0.0199 1 9.7931 1 13.7085 1 2.5144 1 24.0201 1 0.1072 1)
Average genome size in population (length): 62.575
Average program size in population (points): 63.575
Average percent parens in population: 0.016
Minimum age in population: 45.68535446096212
Maximum age in population: 49.82328285742551
Average age in population: 48.06834786320291
Median age in population: 48.0982893666951
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.07
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 43880945
--- Timings ---
Current time: 1529616045624 milliseconds
Total Time:         107.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.2 seconds, 40.1%
Fitness Testing:     51.1 seconds, 47.3%
Report:              13.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_shove} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_swap float_inc float_rot float_inc float_rot float_stackdepth integer_flush float_shove float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_rot float_stackdepth print_float float_inc integer_fromfloat)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3024.196369299999
Median total errors in population: 1327.0
Error averages by case: (122.58521429999993 3.332 85.65164009999995 3.228 110.03626589999993 10.462 151.7877010999999 11.166 126.5327445999999 3.307 103.83200250000002 4.152 80.20717850000005 3.241 116.30456680000007 3.218 148.69895590000007 3.36 150.55081070000003 12.155 160.86665579999993 3.437 111.5203037 3.25 145.76772659999995 3.514 132.98849760000004 4.151 105.6590501000001 2.352 95.43878329999995 3.254 146.77755470000002 11.166 75.374039 2.44 116.30420059999996 4.275 142.92727699999992 3.107 97.2625911999999 3.326 102.08403959999991 3.251 85.93746140000002 3.317 115.30245610000001 3.307 79.54765220000004 2.483)
Error minima by case: (9.6777 1 2.0033 1 1.2578 9 30.3277 8 15.6828 1 24.4384 1 0.6242 1 2.8456 1 74.9742 1 58.1017 8 39.3481 1 13.7564 1 54.0528 2 20.0834 2 4.8041 1 1.8787 1 3.192 9 0.0 0 24.2664 2 0.1047 1 9.7931 1 1.6943 1 2.4655 1 27.9834 1 0.4293 1)
Average genome size in population (length): 62.492
Average program size in population (points): 63.492
Average percent parens in population: 0.016
Minimum age in population: 46.97065143752843
Maximum age in population: 51.62281442666426
Average age in population: 49.49902174638375
Median age in population: 49.51576527039288
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.059
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 45443670
--- Timings ---
Current time: 1529616048862 milliseconds
Total Time:         111.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.5 seconds, 40.0%
Fitness Testing:     52.7 seconds, 47.4%
Report:              13.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction integer_dup} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction tagged_216} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_yank} {:instruction float_add})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth integer_dup_items float_div float_inc float_swap float_inc float_rot float_inc float_rot float_stackdepth integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot integer_shove integer_inc float_swap float_inc float_rot float_rot integer_dup integer_inc integer_yank float_inc float_swap float_inc float_rot integer_div integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat tagged_216 float_mod integer_dup_items integer_dup_items float_min integer_yank float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3156.8862902999995
Median total errors in population: 1327.0
Error averages by case: (128.49152719999998 3.307 90.23775609999997 3.205 114.6087099 10.458 158.23413159999996 11.17 133.02593699999994 3.287 109.52314860000003 3.93 85.85538990000002 3.156 122.8981602 3.181 152.664843 3.333 156.68993360000005 12.172 166.48862539999996 3.402 115.62145999999998 3.221 149.6723667 3.478 136.54280240000003 4.132 112.22878300000005 2.319 99.74143879999994 3.211 151.5792587 11.148 81.22573560000002 2.405 122.01202089999995 4.267 147.81084329999996 3.093 102.93662719999996 3.301 106.58197119999997 3.225 92.38051649999998 3.287 120.78938770000002 3.293 85.61191580000006 2.452)
Error minima by case: (7.6777 1 6.6892 1 7.33 9 23.7681 9 18.6882 1 27.0 1 1.0 1 6.688 1 16.0 1 3.1706 8 47.3481 1 6.7564 1 20.0 1 28.0834 2 4.1327 1 5.1213 1 0.5113 9 0.0 0 19.3602 2 0.8091 1 11.7931 1 17.294 1 12.0 1 7.0777 1 0.1436 1)
Average genome size in population (length): 62.161
Average program size in population (points): 63.161
Average percent parens in population: 0.016
Minimum age in population: 48.4092294536531
Maximum age in population: 53.25139695336111
Average age in population: 50.96265624537779
Median age in population: 51.00859645614401
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.834
Total error diversity:				 0.051
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 46998020
--- Timings ---
Current time: 1529616052143 milliseconds
Total Time:         114.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.7 seconds, 39.9%
Fitness Testing:     54.4 seconds, 47.5%
Report:              14.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_mod} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_div} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc})
Best program: (integer_mod integer_add float_swap float_mod in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_sub float_div float_shove float_div float_inc float_swap float_swap float_inc float_rot float_stackdepth integer_inc integer_inc float_inc float_rot float_stackdepth float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod integer_mod float_inc float_rot float_stackdepth print_float float_inc)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3034.532668799999
Median total errors in population: 1327.0
Error averages by case: (123.81130719999999 3.277 84.24762149999997 3.167 108.87172999999999 10.464 153.83616079999993 11.187 128.55729309999998 3.265 104.6874693 3.961 81.56022990000005 3.15 118.32005960000004 3.165 147.4450240000001 3.292 152.3106163 12.164 162.23184469999995 3.385 110.2887499 3.188 144.52727039999996 3.441 131.81280190000004 4.092 107.60756630000007 2.294 94.20834900000001 3.198 146.14712660000004 11.162 76.81479569999999 2.354 117.7487577 4.239 142.3422712 3.051 98.61081069999994 3.275 101.07278089999994 3.207 87.70333600000005 3.248 116.03314990000003 3.25 80.83554620000004 2.424)
Error minima by case: (0.8589 1 8.0 1 7.863 8 30.0855 9 8.8126 1 11.4384 1 0.0 0 1.5903 1 29.685 1 57.6761 6 56.5582 1 36.0 1 67.6752 2 56.0 2 2.2541 1 19.0 1 4.3554 9 0.0 0 25.2664 2 0.1784 1 10.7931 1 15.7211 1 10.0 1 9.0166 1 0.4293 1)
Average genome size in population (length): 62.423
Average program size in population (points): 63.423
Average percent parens in population: 0.016
Minimum age in population: 49.4092294536531
Maximum age in population: 54.75833406747552
Average age in population: 52.42454832369651
Median age in population: 52.46337107894942
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.057
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 48558820
--- Timings ---
Current time: 1529616055369 milliseconds
Total Time:         117.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.9 seconds, 39.9%
Fitness Testing:     55.9 seconds, 47.5%
Report:              14.7 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_div} {:instruction float_mult} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add integer_dup_items float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_inc float_yank float_inc float_rot float_stackdepth float_rot float_stackdepth float_swap float_div float_mult float_div float_inc float_div float_inc float_rot float_max float_inc float_swap float_inc float_rot float_swap float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2978.0713098
Median total errors in population: 1327.0
Error averages by case: (121.49548479999996 3.184 83.03667080000002 3.08 107.49978389999998 10.435 152.07842410000003 11.181 126.4391417 3.169 101.8504089 3.816 78.41310870000002 3.066 116.29383490000002 3.081 144.74294780000002 3.205 150.16807129999995 12.179 159.83484779999998 3.265 108.44709980000006 3.105 142.39108399999995 3.347 129.40474940000001 4.021 105.560261 2.205 92.16852779999998 3.106 145.03736819999997 11.159 73.82536100000002 2.262 114.97500949999997 4.144 141.27780099999998 2.979 95.69111039999999 3.179 99.54374620000003 3.104 85.46842110000001 3.173 113.40218880000002 3.147 78.09985690000002 2.334)
Error minima by case: (6.6777 1 8.0 1 7.33 9 28.1128 9 18.6882 1 27.0 1 0.3758 1 3.8456 1 16.0 1 59.6761 8 54.5582 1 39.0 1 20.0 1 37.0 2 4.1327 1 22.0 1 0.3731 9 0.0 0 23.2664 2 0.393 1 8.7931 1 25.6114 1 12.9266 1 25.0772 1 0.4293 1)
Average genome size in population (length): 61.785
Average program size in population (points): 62.785
Average percent parens in population: 0.016
Minimum age in population: 50.66865051793866
Maximum age in population: 56.423027925106
Average age in population: 53.80684618318574
Median age in population: 53.83781329117483
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.058
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 50103670
--- Timings ---
Current time: 1529616058643 milliseconds
Total Time:         121.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.2 seconds, 39.9%
Fitness Testing:     57.6 seconds, 47.6%
Report:              15.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction integer_add} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction tag_float_35} {:instruction integer_mult} {:instruction integer_min} {:instruction 41} {:instruction float_add})
Best program: (print_integer integer_add in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_shove float_div float_inc float_swap float_shove float_div integer_inc float_swap float_inc float_rot float_stackdepth integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop integer_dup_items integer_dup_items integer_dec integer_yank float_pop integer_rot float_frominteger float_inc integer_stackdepth tag_float_35 integer_mult integer_min 41 float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3115.8460839000004
Median total errors in population: 1327.0
Error averages by case: (126.62157259999995 3.233 89.14432619999997 3.139 113.81926589999998 10.456 156.4868540999999 11.172 131.19327079999994 3.235 107.63651590000003 3.951 83.58297950000002 3.117 121.05201630000003 3.129 151.5880578 3.27 154.8540368 12.18 164.58452640000002 3.343 114.44396379999999 3.135 148.50652409999998 3.429 135.0729568 4.07 110.32963580000006 2.262 98.5497461 3.149 151.0522833 11.156 78.9381116 2.354 119.90278509999997 4.19 147.2177026 3.012 100.70476439999999 3.231 105.52119149999996 3.138 90.33052069999998 3.238 118.93993409999999 3.209 83.58054170000001 2.394)
Error minima by case: (5.7522 1 8.0 1 7.4107 8 31.4806 9 18.5736 1 27.0 1 0.0 0 6.7258 1 16.0 1 9.5693 8 56.5582 1 1.9982 1 20.0 1 37.0 2 4.512 1 20.0 1 3.9031 9 0.0 0 25.2664 2 0.1047 1 10.7931 1 24.0565 1 11.0 1 24.1517 1 0.023 1)
Average genome size in population (length): 61.645
Average program size in population (points): 62.645
Average percent parens in population: 0.016
Minimum age in population: 52.58786690200213
Maximum age in population: 57.423027925106
Average age in population: 55.25706552016938
Median age in population: 55.29545764761497
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.048
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 51644945
--- Timings ---
Current time: 1529616061955 milliseconds
Total Time:         124.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.4 seconds, 39.8%
Fitness Testing:     59.2 seconds, 47.7%
Report:              15.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_dup_items})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_swap float_inc float_rot float_inc float_rot float_stackdepth integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop integer_rot integer_dup_items)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3134.0748426000005
Median total errors in population: 1327.0
Error averages by case: (127.25368439999995 3.306 89.65018750000002 3.202 113.98636169999997 10.484 157.45270890000003 11.182 132.1580013 3.284 107.81531729999996 4.096 84.92695549999999 3.179 122.14208389999997 3.195 151.06061490000002 3.351 155.48083169999995 12.218 165.49370889999997 3.405 115.05737360000002 3.206 148.83825949999994 3.488 136.00780170000004 4.136 111.55577250000002 2.327 98.91249039999998 3.234 150.86436729999997 11.164 80.3032987 2.403 121.10979979999996 4.238 147.1020548 3.106 102.03990100000003 3.309 105.93965980000004 3.219 91.65845630000004 3.291 119.2475227 3.271 84.2766285 2.447)
Error minima by case: (9.6777 1 2.0033 1 4.2578 8 1.6318 8 1.937 1 15.5015 1 0.0 0 3.8456 1 16.0 1 13.8903 8 1.9063 1 2.3229 1 20.0 1 37.0 2 4.9643 1 18.6676 1 3.664 8 0.0 0 20.2664 2 0.393 1 5.7931 1 1.3634 1 2.4655 1 4.9535 1 0.4293 1)
Average genome size in population (length): 61.843
Average program size in population (points): 62.843
Average percent parens in population: 0.016
Minimum age in population: 53.58786690200213
Maximum age in population: 58.61677847042301
Average age in population: 56.72778552902853
Median age in population: 56.75889338289198
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.058
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 53191270
--- Timings ---
Current time: 1529616065344 milliseconds
Total Time:         127.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.6 seconds, 39.7%
Fitness Testing:     60.9 seconds, 47.7%
Report:              15.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_860} {:instruction integer_add} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_rot} {:instruction float_div} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_div} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_tan} {:instruction integer_yank} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction tag_float_35})
Best program: (tagged_860 integer_add -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap integer_dup_items integer_stackdepth float_shove float_shove float_inc float_swap float_rot float_div float_stackdepth integer_sub float_div float_shove float_div float_inc float_inc float_rot float_stackdepth float_shove float_div float_shove float_div float_inc float_swap float_inc integer_dup float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_min print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop integer_dup_items integer_dup_items float_tan integer_yank float_pop integer_rot integer_rot float_frominteger float_inc integer_stackdepth tag_float_35)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3097.9349269999984
Median total errors in population: 1327.0
Error averages by case: (127.70349290000003 3.213 85.4670987 3.123 110.32949289999999 10.46 157.72474519999994 11.192 133.18333299999998 3.19 107.6862843 3.895 84.89728550000002 3.103 122.2038961 3.108 147.64396270000003 3.23 156.08978680000004 12.174 165.50764959999998 3.308 110.75552420000004 3.146 144.60590349999995 3.379 131.7021963 4.054 111.5466583 2.239 95.8179771 3.136 147.48455550000003 11.162 80.28556359999999 2.306 121.49526309999997 4.16 143.72619979999996 3.01 101.92788889999994 3.219 102.15453199999997 3.134 91.51308200000003 3.199 119.94321650000002 3.187 84.85833850000002 2.354)
Error minima by case: (9.6777 1 3.0033 1 8.0263 8 32.0855 8 5.6494 1 5.4384 1 0.0 0 6.3064 1 16.0 1 33.334 8 54.6235 1 36.0 1 20.0 1 37.0 2 4.977 1 19.0 1 4.9264 7 0.0 0 23.3318 2 0.1455 1 8.8585 1 0.6943 1 1.4655 1 15.0166 1 0.0648 1)
Average genome size in population (length): 61.78
Average program size in population (points): 62.78
Average percent parens in population: 0.016
Minimum age in population: 55.49325070230407
Maximum age in population: 60.03545002459759
Average age in population: 58.17390861604548
Median age in population: 58.23274527843114
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.061
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 54735920
--- Timings ---
Current time: 1529616068803 milliseconds
Total Time:         131.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.9 seconds, 39.7%
Fitness Testing:     62.5 seconds, 47.7%
Report:              16.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -95.02835022363054} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_min} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc})
Best program: (integer_mod integer_add float_swap integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -95.02835022363054 float_rot float_pop in1 float_swap integer_flush float_div float_inc integer_dup_items integer_stackdepth float_shove float_div float_inc float_swap float_shove float_div integer_inc float_swap float_inc float_rot float_max integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_rot float_stackdepth integer_min integer_mod float_inc float_swap float_inc float_rot integer_div integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3221.6124187999994
Median total errors in population: 1327.0
Error averages by case: (130.10817199999997 3.399 94.15648859999999 3.287 118.24994000000001 10.47 159.58510950000004 11.19 134.60482549999998 3.4 108.95982490000002 3.912 88.51667540000004 3.279 124.50681519999998 3.269 155.73042379999998 3.416 157.5239484 12.175 168.82841109999998 3.516 119.8086031 3.295 153.6815526 3.562 140.96181520000005 4.22 113.96805580000003 2.41 103.95912870000001 3.3 154.71769020000005 11.171 83.9125361 2.501 124.55528829999997 4.363 150.92034140000004 3.164 105.51831449999996 3.386 110.385657 3.294 94.43584659999999 3.367 121.99447759999998 3.371 86.74047730000001 2.565)
Error minima by case: (7.6777 1 9.0 1 7.863 8 9.1714 9 8.9102 1 8.6255 1 0.0 0 6.3064 1 21.4031 1 10.9466 9 56.5582 1 0.6209 1 34.3245 2 58.0 2 4.9643 1 21.0 1 0.8689 9 0.0 0 25.2664 2 0.1047 1 10.7931 1 24.5954 1 11.005 1 26.0772 1 0.1072 1)
Average genome size in population (length): 61.668
Average program size in population (points): 62.668
Average percent parens in population: 0.016
Minimum age in population: 56.73646948442911
Maximum age in population: 61.75447876270482
Average age in population: 59.62900875832129
Median age in population: 59.68141363677569
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.06
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 56277745
--- Timings ---
Current time: 1529616072048 milliseconds
Total Time:         134.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.2 seconds, 39.6%
Fitness Testing:     64.1 seconds, 47.7%
Report:              17.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_div} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_dec} {:instruction 25} {:instruction float_frominteger} {:instruction float_yank} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_sin} {:instruction float_swap} {:instruction tagged_216} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_min} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_yankdup integer_sub float_div float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_stackdepth float_swap float_inc float_inc integer_add float_stackdepth integer_inc float_mult float_inc integer_dup_times float_inc float_rot integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_dec 25 float_frominteger float_yank float_swap float_swap float_inc float_sin float_swap tagged_216 float_mod integer_dup_items integer_dup_items float_min integer_yank float_add float_pop integer_rot)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3294.768924199999
Median total errors in population: 1327.0
Error averages by case: (134.20472119999994 3.415 95.20060639999994 3.289 119.24020349999996 10.489 163.61280259999995 11.205 138.51918969999994 3.393 113.60331269999999 4.026 92.06036290000002 3.271 128.68448190000007 3.272 157.63620330000003 3.431 162.34895550000007 12.199 172.05020379999996 3.504 120.88122630000002 3.302 154.77093169999992 3.565 142.08155910000005 4.205 117.92700950000007 2.427 105.00549699999999 3.308 155.938235 11.182 87.88058010000002 2.517 128.0576107999999 4.353 152.06873860000002 3.164 109.14234149999997 3.41 111.4737127 3.308 98.77455880000001 3.368 126.4206213 3.376 91.63525830000002 2.571)
Error minima by case: (9.6777 1 8.0 1 6.8631 9 30.5488 9 18.0514 1 27.0 1 0.3758 1 3.1252 1 16.0 1 58.6761 8 1.9063 1 36.1705 1 20.0 1 37.0 2 4.0477 1 21.0 1 4.3186 9 0.0 0 23.2664 2 0.1047 1 8.7931 1 23.8701 1 12.0 1 2.6996 1 0.1072 1)
Average genome size in population (length): 61.013
Average program size in population (points): 62.013
Average percent parens in population: 0.017
Minimum age in population: 57.76606372917013
Maximum age in population: 63.4371617553038
Average age in population: 61.07124279119395
Median age in population: 61.09793722148152
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.061
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 57803220
--- Timings ---
Current time: 1529616075355 milliseconds
Total Time:         137.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.4 seconds, 39.5%
Fitness Testing:     65.8 seconds, 47.8%
Report:              17.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_add} {:instruction integer_add} {:instruction float_swap} {:instruction integer_add} {:instruction float_swap} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_div} {:instruction float_shove} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction integer_inc} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat})
Best program: (integer_rot integer_add integer_add float_swap integer_add float_swap float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_sub float_div float_shove float_dup_items float_inc float_rot float_inc integer_inc float_stackdepth integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_rot float_stackdepth print_float float_inc integer_fromfloat)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3386.8241228999996
Median total errors in population: 1327.0
Error averages by case: (137.52546589999997 3.558 99.41268559999995 3.436 122.97221869999997 10.511 166.5527851999999 11.197 141.69611220000002 3.526 117.46708370000003 4.34 96.93648190000005 3.435 131.73832680000004 3.415 159.7646066 3.588 164.36899470000003 12.173 176.18788859999995 3.667 125.12649460000002 3.454 158.44978239999995 3.738 146.75887700000004 4.33 121.38558210000008 2.588 109.00517089999998 3.47 158.65721770000002 11.2 92.25965149999998 2.687 132.45313019999995 4.5 154.89607389999998 3.305 113.70640989999994 3.549 115.43991979999997 3.444 102.32287610000002 3.532 128.90862509999997 3.528 93.94566180000004 2.715)
Error minima by case: (8.6777 1 8.0 1 7.863 9 28.8603 8 15.6828 1 17.6896 1 0.0 0 7.1781 1 16.0 1 56.451 8 53.6235 1 36.0 1 20.0 1 37.0 2 4.9643 1 19.0 1 4.3554 9 0.0 0 22.3318 2 0.1784 1 7.8585 1 22.2098 1 10.0 1 27.0772 1 0.4293 1)
Average genome size in population (length): 61.172
Average program size in population (points): 62.172
Average percent parens in population: 0.017
Minimum age in population: 60.0526717593475
Maximum age in population: 64.49206762104768
Average age in population: 62.4755809054661
Median age in population: 62.55217425297667
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.069
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 59332770
--- Timings ---
Current time: 1529616078645 milliseconds
Total Time:         141.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.7 seconds, 39.5%
Fitness Testing:     67.4 seconds, 47.8%
Report:              17.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_swap} {:instruction float_dup_items} {:instruction in2} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_div} {:instruction float_mult} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_swap float_dup_items in2 integer_dup_items float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_inc float_yank float_inc float_rot float_stackdepth float_rot float_stackdepth float_rot float_stackdepth float_swap float_div float_mult float_div float_inc float_div float_inc float_rot float_max float_inc float_swap float_inc float_rot float_swap float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2977.2038519000002
Median total errors in population: 1327.0
Error averages by case: (121.26564589999994 3.322 82.83624950000002 3.22 107.06053299999996 10.468 150.74776949999998 11.19 125.51890449999996 3.294 101.90126020000001 4.109 79.21938850000002 3.206 115.22640930000004 3.194 145.58068480000006 3.337 149.3883419 12.202 159.935635 3.417 108.58167370000004 3.217 142.77352159999998 3.485 130.3670266 4.116 104.52397060000003 2.353 92.50757030000001 3.199 144.16436009999995 11.164 74.3521872 2.409 115.42060879999997 4.269 140.40345270000003 3.102 96.2784757 3.307 99.38566350000002 3.222 84.7676738 3.297 113.3384063 3.28 77.81443890000003 2.465)
Error minima by case: (9.6777 1 8.0 1 6.8631 8 31.2337 9 6.2295 1 11.3062 1 0.0 0 2.1781 1 7.8067 1 24.543 9 51.6235 1 12.9755 1 20.7281 2 58.0 2 0.0357 1 21.0 1 4.3186 8 0.0 0 20.3318 2 0.1047 1 5.8585 1 23.1943 1 8.3243 1 0.1234 1 0.1072 1)
Average genome size in population (length): 61.263
Average program size in population (points): 62.263
Average percent parens in population: 0.017
Minimum age in population: 61.4193653930497
Maximum age in population: 66.28495981930746
Average age in population: 63.97856672398657
Median age in population: 63.99302112296004
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.07
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 60864795
--- Timings ---
Current time: 1529616081863 milliseconds
Total Time:         144.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.9 seconds, 39.5%
Fitness Testing:     68.9 seconds, 47.8%
Report:              18.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction integer_mod} {:instruction integer_add} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_integer} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction tagged_609} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_swap} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction tagged_216} {:instruction float_mod})
Best program: (integer_mod integer_add float_swap integer_mod integer_add float_div float_dup_items integer_add -48 integer_dup_items float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc print_integer float_stackdepth integer_dup_times float_shove float_shove float_div float_inc float_yank float_inc float_rot tagged_609 integer_inc float_swap float_inc float_rot float_stackdepth float_swap float_inc float_rot float_inc float_swap float_inc float_rot integer_div integer_inc integer_mod float_inc float_rot float_swap print_float float_inc integer_fromfloat tagged_216 float_mod)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2970.5523722999997
Median total errors in population: 1327.0
Error averages by case: (120.92922359999997 3.136 83.23905199999999 3.056 107.94659139999997 10.469 151.0280275 11.193 125.40678959999994 3.132 101.2180615 3.888 77.61051180000001 3.018 115.21881960000003 3.039 146.26236530000003 3.161 149.45417000000003 12.205 159.1642149 3.232 108.8108279 3.059 143.18679210000002 3.327 129.59034850000003 3.977 104.4640433 2.162 92.784532 3.061 145.38832420000003 11.147 72.96569640000001 2.22 114.20283789999996 4.09 141.58319709999992 2.942 94.89701629999999 3.137 99.7408138 3.066 84.37996020000001 3.13 113.17140930000001 3.121 77.62374610000005 2.317)
Error minima by case: (11.6123 1 7.9934 1 6.8631 9 31.4323 9 10.1645 1 1.5669 1 0.3104 1 0.8355 1 31.1645 1 35.1645 8 43.2752 1 9.8355 1 27.1645 2 10.1645 2 4.0477 1 20.0 1 3.6744 9 0.0 0 11.9835 2 0.3395 1 2.4898 1 25.3886 1 11.0 1 22.0218 1 0.4293 1)
Average genome size in population (length): 60.744
Average program size in population (points): 61.744
Average percent parens in population: 0.017
Minimum age in population: 62.69667103833126
Maximum age in population: 67.39502671401158
Average age in population: 65.4120552492795
Median age in population: 65.43646660247828
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.057
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 62383920
--- Timings ---
Current time: 1529616085258 milliseconds
Total Time:         147.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.2 seconds, 39.4%
Fitness Testing:     70.6 seconds, 47.9%
Report:              18.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_mult} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction tagged_496} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_max} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_rot} {:instruction float_yank} {:instruction float_swap} {:instruction tagged_838} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_yank} {:instruction float_mult} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_mult} {:instruction float_pop} {:instruction 42} {:instruction float_dup_items})
Best program: (integer_mod integer_stackdepth float_rot float_pop in1 float_swap integer_flush integer_mult float_shove float_div float_inc float_swap float_inc float_swap float_inc float_rot float_inc tagged_496 float_stackdepth integer_flush integer_stackdepth float_rot float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_max integer_mod float_inc float_rot float_stackdepth print_float float_stackdepth print_float float_inc integer_fromfloat float_swap float_rot float_yank float_swap tagged_838 float_swap float_inc float_rot float_stackdepth integer_yank float_mult float_inc float_rot float_stackdepth print_float float_inc integer_mult float_pop 42 float_dup_items)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3036.0013651999993
Median total errors in population: 1327.0
Error averages by case: (124.16081679999996 3.306 85.44243320000001 3.215 110.04809309999997 10.476 152.6408684 11.178 128.49946499999996 3.297 104.7969704 4.037 81.24257020000002 3.202 117.26759310000008 3.191 147.10082300000005 3.326 151.0647603 12.171 162.50388739999988 3.403 110.17457620000003 3.228 144.24674879999995 3.496 132.08316619999997 4.131 106.55975580000005 2.347 95.06170820000001 3.226 147.05677579999997 11.165 76.47088930000001 2.413 118.56697739999996 4.264 143.3145682 3.094 99.01422859999997 3.293 102.21639430000005 3.214 86.74626500000002 3.296 116.23638229999999 3.283 79.76864820000004 2.464)
Error minima by case: (8.6594 1 4.6711 1 7.8121 8 31.0855 8 1.3161 1 16.7539 1 0.7768 1 5.5479 1 8.339 1 24.0107 9 54.1572 1 12.4432 1 20.0 1 37.0 2 3.0238 1 20.0 1 3.4621 8 0.0 0 22.8654 2 0.0199 1 8.3921 1 5.7409 1 11.0 1 27.0588 1 0.3305 1)
Average genome size in population (length): 61.163
Average program size in population (points): 62.163
Average percent parens in population: 0.017
Minimum age in population: 64.02301954216
Maximum age in population: 69.21429372432311
Average age in population: 66.8777144595864
Median age in population: 66.93446194667901
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.061
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 63913695
--- Timings ---
Current time: 1529616088667 milliseconds
Total Time:         150.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.5 seconds, 39.4%
Fitness Testing:     72.3 seconds, 47.9%
Report:              19.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction integer_add} {:instruction float_swap} {:instruction integer_div} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_yankdup} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction integer_flush} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_div} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_max} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction tagged_216} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_dup_items})
Best program: (integer_yank integer_add float_swap integer_div integer_add -48 integer_flush -94.09373270553453 float_rot float_yankdup float_pop in1 float_swap integer_flush integer_stackdepth float_shove integer_flush float_div float_inc float_swap float_inc float_rot float_stackdepth integer_sub float_div float_shove float_div float_inc float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_stackdepth float_swap float_inc float_rot float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_inc float_rot integer_div integer_inc integer_mod float_max float_rot float_stackdepth print_float float_inc integer_fromfloat tagged_216 float_mod integer_dup_items integer_dup_items)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3368.1029770999994
Median total errors in population: 1327.0
Error averages by case: (137.20232879999995 3.533 98.93481259999997 3.396 122.88544909999997 10.504 165.42270719999996 11.202 141.24900149999996 3.482 118.38637790000001 4.198 94.49371210000002 3.397 130.43897630000006 3.381 159.6410681 3.526 164.19136730000005 12.168 175.03451649999997 3.633 123.18460940000006 3.385 156.9241609 3.683 145.43728009999998 4.276 120.05172190000006 2.541 108.36016550000001 3.413 159.43833769999998 11.203 89.98336409999999 2.622 131.6224928999999 4.491 155.68559109999995 3.286 112.36977749999996 3.512 115.33621039999997 3.403 100.55884190000005 3.494 129.4304152 3.479 93.97669110000001 2.655)
Error minima by case: (5.7419 1 8.0 1 7.4158 8 24.1691 9 14.6828 1 2.9526 1 0.0 0 3.8456 1 3.2061 1 3.4216 8 53.6235 1 4.7083 1 16.1275 1 37.0 2 3.8477 1 7.1333 1 3.3713 9 0.0 0 22.3318 2 0.141 1 7.8585 1 23.2098 1 4.6404 1 8.8511 1 0.1148 1)
Average genome size in population (length): 61.065
Average program size in population (points): 62.065
Average percent parens in population: 0.017
Minimum age in population: 65.62665129105426
Maximum age in population: 70.34061964938451
Average age in population: 68.28407312491434
Median age in population: 68.35532430871908
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.072
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 65440820
--- Timings ---
Current time: 1529616092192 milliseconds
Total Time:         154.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.9 seconds, 39.4%
Fitness Testing:     73.9 seconds, 47.8%
Report:              19.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_yank} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_div} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_dup_items} {:instruction integer_inc} {:instruction float_inc} {:instruction in2} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot} {:instruction float_div} {:instruction float_inc} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41} {:instruction float_add})
Best program: (integer_sub integer_add float_swap float_dup_items integer_dup_items float_pop float_rot float_pop in1 float_yank integer_yankdup integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_yankdup integer_sub float_div float_shove float_div float_inc float_swap float_inc float_rot float_dup_items integer_inc float_inc in2 float_stackdepth float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop integer_rot float_div float_inc integer_rot float_sin integer_mult float_pop 41 float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3013.899283499999
Median total errors in population: 1327.0
Error averages by case: (122.35233469999999 3.25 85.18300339999999 3.158 109.65771679999997 10.446 152.5819010999999 11.184 127.13458539999998 3.252 100.95001679999999 3.941 79.96871189999999 3.128 116.94713390000001 3.139 147.14626520000002 3.273 150.3992624 12.182 161.1922794 3.34 110.9382669 3.19 145.1339703 3.428 132.00682040000004 4.084 106.24361260000002 2.28 94.91427699999997 3.172 146.7259801 11.156 75.2766243 2.35 116.43021799999995 4.211 142.8637023 3.036 97.21105809999996 3.249 101.60767870000001 3.191 86.32867510000003 3.229 113.85706160000004 3.215 78.36312710000001 2.401)
Error minima by case: (7.6777 1 1.0033 1 5.2578 8 26.3277 8 18.487 1 27.0 1 1.6242 1 6.3064 1 18.0 1 58.1017 9 56.5582 1 37.0 1 22.0 2 39.0 2 4.977 1 20.0 1 4.9264 8 0.0 0 25.2664 2 0.0889 1 10.7931 1 2.6943 1 3.4655 1 26.0772 1 0.1072 1)
Average genome size in population (length): 61.334
Average program size in population (points): 62.334
Average percent parens in population: 0.017
Minimum age in population: 67.06493406192328
Maximum age in population: 71.89069204465781
Average age in population: 69.74291197898354
Median age in population: 69.78742913327898
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.06
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 66974620
--- Timings ---
Current time: 1529616095477 milliseconds
Total Time:         157.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.1 seconds, 39.4%
Fitness Testing:     75.5 seconds, 47.8%
Report:              20.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_swap} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_add} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_min} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction tagged_216} {:instruction float_mod} {:instruction integer_dup_items} {:instruction tag_float_125} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_pop})
Best program: (integer_mod integer_add float_yankdup float_swap integer_dup_items float_pop float_rot float_pop in1 integer_dup_items integer_flush integer_stackdepth float_shove float_div float_inc integer_flush float_yankdup float_shove float_div float_inc float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_div float_inc float_yank float_inc float_rot float_stackdepth float_rot float_div float_inc float_swap float_swap float_rot float_stackdepth integer_inc float_add float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot integer_div integer_inc integer_mod float_inc integer_min float_stackdepth print_float float_inc integer_fromfloat tagged_216 float_mod integer_dup_items tag_float_125 integer_stackdepth integer_rot float_frominteger float_inc float_pop)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3008.2957347
Median total errors in population: 1327.0
Error averages by case: (124.04611349999998 3.253 82.39084760000001 3.14 106.86954599999997 10.442 153.1596835 11.151 127.87360249999996 3.245 103.81429690000003 4.071 81.43180890000002 3.15 117.67984070000003 3.138 145.2838616 3.277 151.90055740000003 12.14 162.447525 3.377 108.1186887 3.151 142.3735036 3.422 129.34150000000002 4.062 107.03765850000003 2.286 92.0599702 3.162 143.94185419999994 11.135 76.6620628 2.354 117.81643009999998 4.202 140.07378539999996 3.018 98.63584109999996 3.25 98.84182559999999 3.157 87.34704360000003 3.238 116.20246209999999 3.235 80.47942520000004 2.41)
Error minima by case: (9.6777 1 8.0 1 6.5524 8 32.4323 5 17.7153 1 27.0 1 0.0 0 5.8675 1 15.0 1 58.1017 6 54.3532 1 37.0 1 19.0 1 36.0 2 3.6537 1 20.0 1 3.0448 8 0.0 0 23.0614 2 0.1047 1 8.5881 1 26.0 1 11.0 1 28.0772 1 0.1072 1)
Average genome size in population (length): 60.719
Average program size in population (points): 61.719
Average percent parens in population: 0.017
Minimum age in population: 68.75767277228528
Maximum age in population: 73.14674382024332
Average age in population: 71.1888521535999
Median age in population: 71.23919167055391
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.056
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 68493170
--- Timings ---
Current time: 1529616098925 milliseconds
Total Time:         161.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.3 seconds, 39.3%
Fitness Testing:     77.2 seconds, 47.9%
Report:              20.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction -48} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_sub} {:instruction float_inc} {:instruction float_swap} {:instruction integer_inc} {:instruction float_div} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc})
Best program: (integer_mod integer_flush -48 float_swap float_dup_items integer_add float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_swap float_inc float_yank float_stackdepth integer_sub float_stackdepth float_shove float_sub float_inc float_swap integer_inc float_div integer_inc float_inc float_inc float_rot float_stackdepth float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc integer_yank float_inc float_rot float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3125.0402271000007
Median total errors in population: 1327.0
Error averages by case: (128.89278349999998 3.296 86.3543784 3.199 110.77155689999996 10.467 158.5430744 11.17 133.49099389999998 3.277 109.76091799999999 3.989 86.88495549999999 3.16 123.27699820000002 3.176 148.08635680000003 3.323 156.94340829999996 12.19 166.9178815 3.401 111.55691039999999 3.207 145.27586419999994 3.487 132.9198312 4.111 112.63625400000002 2.318 95.72144349999996 3.218 147.87664130000002 11.153 82.24467090000003 2.393 122.7635789 4.267 144.0856777 3.085 103.78128380000003 3.289 102.92028080000001 3.213 92.88028430000001 3.282 121.06185219999999 3.264 85.99634850000002 2.461)
Error minima by case: (8.6123 1 9.0 1 7.863 9 17.4711 8 14.6828 1 21.8017 1 0.0 0 6.6475 1 15.0 1 0.942 8 54.458 1 10.6254 1 19.0 1 36.0 2 4.9643 1 0.4353 1 4.3186 8 0.0 0 23.1662 2 0.1663 1 8.6929 1 23.2098 1 10.0 1 27.0118 1 0.4293 1)
Average genome size in population (length): 60.542
Average program size in population (points): 61.542
Average percent parens in population: 0.017
Minimum age in population: 70.05913698631795
Maximum age in population: 74.51911559553965
Average age in population: 72.57315894986311
Median age in population: 72.63231053848469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.061
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 70007320
--- Timings ---
Current time: 1529616102173 milliseconds
Total Time:         164.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.6 seconds, 39.3%
Fitness Testing:     78.8 seconds, 47.9%
Report:              21.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_swap} {:instruction float_dup_times} {:instruction -48} {:instruction integer_rot} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_rot} {:instruction integer_flush} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction print_float} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat})
Best program: (integer_mod integer_mod integer_add float_swap float_swap float_dup_times -48 integer_rot integer_add -48 integer_flush integer_pop float_rot integer_flush float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_yank float_stackdepth print_float print_float float_inc integer_fromfloat)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3160.1610037
Median total errors in population: 1327.0
Error averages by case: (128.53337339999996 3.275 90.55868889999999 3.166 115.93636739999998 10.493 158.29632829999997 11.204 132.97261779999997 3.247 109.5275291 4.03 85.5695436 3.14 122.8702769 3.146 152.948031 3.299 156.7509131 12.201 166.41389889999994 3.361 116.11254490000002 3.162 150.6497941 3.436 136.3391147 4.087 112.2063049 2.287 100.7484013 3.182 152.0000017 11.18 80.9604673 2.347 121.82321479999999 4.202 148.18816290000004 3.051 102.70146030000001 3.256 106.65503460000002 3.173 92.25239900000001 3.246 120.7515192 3.233 85.56701560000002 2.424)
Error minima by case: (9.53 1 8.0 1 7.8631 8 2.0855 8 5.0039 1 25.8126 1 0.0 0 6.6475 1 62.0258 1 29.6761 9 53.5582 1 34.0 1 71.0 2 54.0 2 5.0477 1 17.0 1 4.3186 9 0.0 0 22.2664 2 0.1784 1 7.7931 1 4.3886 1 8.0 1 8.0117 1 1.0 1)
Average genome size in population (length): 60.582
Average program size in population (points): 61.582
Average percent parens in population: 0.017
Minimum age in population: 71.69439669156301
Maximum age in population: 76.04377426929948
Average age in population: 74.0046425831596
Median age in population: 74.02349398456133
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.055
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 71522470
--- Timings ---
Current time: 1529616105336 milliseconds
Total Time:         167.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.8 seconds, 39.2%
Fitness Testing:     80.4 seconds, 47.9%
Report:              21.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction -48} {:instruction integer_mod} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_swap} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_min} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_mod} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot})
Best program: (float_dup_items -48 integer_mod integer_add float_dup_items integer_flush -94.09373270553453 float_swap float_pop in1 float_swap integer_flush integer_stackdepth integer_dup_items float_div float_inc float_swap integer_flush integer_min float_shove float_frominteger float_inc float_swap float_div float_inc float_yank float_inc float_rot float_stackdepth integer_inc integer_flush float_inc float_rot float_stackdepth integer_mod float_rot float_stackdepth float_swap float_inc float_rot float_mod float_stackdepth integer_inc integer_mod float_inc float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop integer_rot)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3077.086406899999
Median total errors in population: 1327.0
Error averages by case: (125.81739419999995 3.344 86.10262639999998 3.232 110.25200669999998 10.446 155.05170369999996 11.201 129.82921059999995 3.33 106.74220440000005 3.907 83.73669160000001 3.228 119.73300110000005 3.219 148.7593521 3.348 153.9577704 12.145 164.17420319999994 3.455 111.93297880000003 3.238 145.98481519999999 3.482 133.40350440000003 4.142 109.18000110000001 2.378 95.93269499999997 3.239 146.86193049999997 11.163 79.0267403 2.446 119.81872079999995 4.307 143.0057718 3.091 100.76645599999996 3.325 102.44004950000001 3.25 89.62962240000002 3.318 118.0737289 3.32 82.82222780000001 2.497)
Error minima by case: (1.6679 1 9.0 1 5.2578 8 7.8281 9 17.0259 1 28.0 1 0.0 0 5.1781 1 67.7683 1 35.4187 9 1.0937 1 36.0 1 73.0 2 56.0 2 2.9643 1 19.0 1 4.9264 9 0.0 0 23.3318 2 0.0199 1 8.8585 1 1.3539 1 10.0 1 16.7316 1 0.1072 1)
Average genome size in population (length): 59.94
Average program size in population (points): 60.94
Average percent parens in population: 0.017
Minimum age in population: 72.80317707940193
Maximum age in population: 77.8271887279603
Average age in population: 75.44760913520707
Median age in population: 75.48022621196542
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.065
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 73021320
--- Timings ---
Current time: 1529616108595 milliseconds
Total Time:         170.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.0 seconds, 39.2%
Fitness Testing:     81.9 seconds, 48.0%
Report:              21.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_860} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_sub} {:instruction float_dup_items} {:instruction -48} {:instruction integer_flush} {:instruction -95.02835022363054} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_div} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_cos})
Best program: (tagged_860 integer_add integer_mod integer_add float_swap float_sub float_dup_items -48 integer_flush -95.02835022363054 float_rot float_pop in1 float_shove float_div float_inc integer_mult float_inc float_rot integer_yankdup integer_sub float_div integer_max float_div float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_stackdepth float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_cos)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3180.632429399999
Median total errors in population: 1327.0
Error averages by case: (129.44454079999997 3.296 91.40484099999996 3.189 115.70944799999998 10.488 159.06392639999993 11.207 133.79074029999995 3.274 109.81292300000003 4.05 86.79521890000002 3.157 123.69308260000007 3.163 153.53955740000004 3.327 157.6514663000001 12.195 167.4204758 3.395 116.83974150000003 3.194 150.77642459999996 3.463 137.66789590000002 4.115 113.07198120000005 2.317 100.95989189999997 3.206 152.60051389999998 11.16 82.17540889999998 2.393 122.97062869999993 4.215 148.8219698 3.067 103.89618439999995 3.297 107.74337639999996 3.211 93.28238160000001 3.254 121.61822010000002 3.257 86.54759000000004 2.444)
Error minima by case: (11.6123 1 8.0 1 4.2578 9 27.3277 7 18.1417 1 27.0 1 0.0 0 6.2947 1 15.0 1 58.1017 9 52.5324 1 37.0 1 19.0 2 36.0 2 4.3244 1 20.0 1 3.6744 9 0.0 0 21.2406 2 0.029 1 6.7673 1 24.6114 1 11.0 1 30.0118 1 0.6347 1)
Average genome size in population (length): 59.92
Average program size in population (points): 60.92
Average percent parens in population: 0.017
Minimum age in population: 73.96240211683127
Maximum age in population: 78.73398062932083
Average age in population: 76.88004547717304
Median age in population: 76.97100994236963
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.055
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 74519520
--- Timings ---
Current time: 1529616111839 milliseconds
Total Time:         174.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.3 seconds, 39.2%
Fitness Testing:     83.4 seconds, 47.9%
Report:              22.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_mult} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_div} {:instruction float_div} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction float_shove} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction tagged_216} {:instruction float_mod} {:instruction integer_dup_items} {:instruction tag_float_226} {:instruction float_pop} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_pop} {:instruction float_mod} {:instruction float_pop} {:instruction integer_rot} {:instruction float_div} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_pop} {:instruction 41})
Best program: (integer_mod integer_add float_swap float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_mult float_stackdepth float_rot float_stackdepth integer_sub float_div float_div float_shove float_div float_inc integer_div float_inc float_rot float_stackdepth integer_inc float_swap integer_flush float_shove float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc integer_div integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat tagged_216 float_mod integer_dup_items tag_float_226 float_pop integer_rot float_frominteger float_inc float_pop float_mod float_pop integer_rot float_div float_inc float_pop float_sin integer_mult float_pop 41)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3361.8174396999993
Median total errors in population: 1327.0
Error averages by case: (137.78092009999997 3.464 97.56080619999999 3.353 121.41078469999997 10.498 165.8811328 11.223 141.04465689999995 3.447 118.28870660000004 4.058 96.55070950000004 3.365 131.9816069 3.359 157.63154570000003 3.468 164.14692050000005 12.195 176.00743349999993 3.578 122.1827731 3.373 155.64122059999997 3.605 143.50626800000006 4.253 120.63449700000007 2.486 106.17217349999999 3.373 157.55082560000002 11.228 92.0337542 2.604 132.20118389999993 4.411 153.7517899 3.229 113.34935589999992 3.452 113.6843817 3.383 102.35651050000001 3.457 129.73046820000002 3.432 93.8350142 2.608)
Error minima by case: (9.6777 1 8.0 1 7.0263 8 30.5647 8 18.3271 1 27.0 1 0.0 0 2.8456 1 15.0 1 2.974 8 54.5582 1 8.5934 1 19.0 2 36.0 2 3.977 1 13.5289 1 4.3554 9 0.0 0 23.2664 2 0.2011 1 8.7931 1 26.0 1 11.0 1 28.0772 1 0.1072 1)
Average genome size in population (length): 59.253
Average program size in population (points): 60.253
Average percent parens in population: 0.017
Minimum age in population: 74.96240211683127
Maximum age in population: 80.07664099456963
Average age in population: 78.33673381582157
Median age in population: 78.37746934412284
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.067
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 76001070
--- Timings ---
Current time: 1529616115066 milliseconds
Total Time:         177.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.5 seconds, 39.2%
Fitness Testing:     85.0 seconds, 47.9%
Report:              22.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_yank} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_div} {:instruction float_shove} {:instruction in2} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_max} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction tag_float_521} {:instruction float_sin} {:instruction integer_sub} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_flush} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_fromfloat})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 in1 float_swap integer_flush integer_stackdepth float_shove float_div float_yank integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_yankdup integer_sub float_div float_shove in2 float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_stackdepth float_swap float_inc float_max float_stackdepth integer_inc integer_mod float_inc integer_rot float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop integer_rot float_frominteger float_yankdup tag_float_521 float_sin integer_sub integer_dup_items integer_dec integer_yank float_flush integer_flush integer_rot float_frominteger float_inc float_pop float_sin integer_fromfloat)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3054.1006295000007
Median total errors in population: 1327.0
Error averages by case: (124.79871419999998 3.25 86.65724719999999 3.14 111.28408149999997 10.519 154.1220483 11.234 128.92557209999998 3.202 104.66982479999997 3.935 81.25120550000005 3.077 118.6804143 3.119 147.9943156 3.252 152.28325489999997 12.228 162.997021 3.334 110.92425490000001 3.136 145.03276579999994 3.417 131.9330664 4.036 107.87599920000001 2.28 95.0908958 3.14 148.8062024 11.19 76.70325190000001 2.327 118.4183056 4.175 145.05952570000002 3.038 99.31234169999996 3.253 103.23954050000005 3.148 87.797475 3.21 117.0706618 3.193 80.92964340000006 2.41)
Error minima by case: (11.6123 1 4.6048 1 5.2578 9 26.3277 8 8.6181 1 15.016 1 0.0 0 2.8456 1 18.0 1 0.942 8 49.5582 1 3.6695 1 22.0 2 39.0 2 4.9643 1 11.4968 1 3.3713 8 0.0 0 18.2664 2 0.1784 1 3.7931 1 25.6114 1 9.0 1 1.6429 1 0.1072 1)
Average genome size in population (length): 59.369
Average program size in population (points): 60.369
Average percent parens in population: 0.017
Minimum age in population: 75.96240211683127
Maximum age in population: 81.65306932063625
Average age in population: 79.79637684528663
Median age in population: 79.84540473524125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.067
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 77485520
--- Timings ---
Current time: 1529616118409 milliseconds
Total Time:         180.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.8 seconds, 39.2%
Fitness Testing:     86.6 seconds, 48.0%
Report:              23.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction in1} {:instruction integer_div} {:instruction float_swap} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_mult} {:instruction float_sin} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add})
Best program: (integer_mod integer_mod integer_add float_swap in1 integer_div float_swap float_pop in1 float_swap integer_flush integer_stackdepth integer_flush float_div float_inc float_swap float_inc float_dup_items float_inc float_rot float_inc integer_inc float_mod integer_flush integer_stackdepth float_shove float_div float_inc float_swap integer_swap float_inc float_rot float_rot float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_inc print_float float_inc float_mult float_sin integer_dup_items integer_dec integer_yank float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3261.5892978999996
Median total errors in population: 1327.0
Error averages by case: (132.69068399999995 3.261 94.14427279999998 3.161 118.92340689999997 10.507 163.13969709999995 11.229 138.10093709999998 3.254 113.4334064 4.037 90.59300240000002 3.157 127.94881250000002 3.18 155.04040280000004 3.294 160.76731850000004 12.224 170.82660589999998 3.366 118.98680170000003 3.172 152.66774269999993 3.451 138.91332070000004 4.094 117.23617430000004 2.307 103.0755643 3.182 157.1901524 11.212 86.11556149999998 2.362 126.41716889999998 4.218 152.60002849999998 3.065 107.46151649999997 3.278 110.56760879999999 3.183 97.19762930000002 3.254 124.77832579999996 3.247 89.65215610000001 2.426)
Error minima by case: (9.6777 1 3.3157 1 4.2578 9 23.9424 9 18.6671 1 26.4384 1 0.0 0 7.7403 1 15.0 1 0.942 8 41.3481 1 10.6254 1 19.0 2 22.0834 2 3.4668 1 0.8787 1 1.9388 9 0.0 0 25.2664 2 0.6466 1 10.7931 1 24.6114 1 0.949 1 28.0772 1 0.4248 1)
Average genome size in population (length): 59.04
Average program size in population (points): 60.04
Average percent parens in population: 0.017
Minimum age in population: 76.96240211683127
Maximum age in population: 83.24331162318848
Average age in population: 81.24238234754104
Median age in population: 81.35669126047601
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.052
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 78961720
--- Timings ---
Current time: 1529616121768 milliseconds
Total Time:         184.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.0 seconds, 39.1%
Fitness Testing:     88.3 seconds, 48.0%
Report:              23.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_rot} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction integer_flush} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction in2} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_sub} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_mod})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add float_rot -48 integer_flush -94.09373270553453 integer_flush integer_pop integer_dup_items float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap integer_flush integer_stackdepth float_rot float_div float_inc float_inc float_yank float_inc float_rot float_stackdepth float_rot float_stackdepth integer_inc float_swap in2 float_stackdepth integer_flush integer_stackdepth float_shove float_sub integer_inc float_swap float_inc float_rot float_stackdepth float_swap float_inc float_rot float_stackdepth integer_inc float_rot float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc float_pop integer_rot integer_mod)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3218.2428931
Median total errors in population: 1327.0
Error averages by case: (131.14790809999997 3.316 93.12779520000001 3.191 117.66681059999996 10.508 160.4402412 11.219 135.94907049999998 3.271 112.27587409999998 4.016 88.4804137 3.165 124.93828370000001 3.194 154.64995810000005 3.314 158.73914069999995 12.229 168.7944704 3.4 117.59185260000001 3.186 151.5628995 3.485 138.55043260000002 4.104 114.29539400000002 2.319 102.6057209 3.213 154.5398453 11.211 82.89765279999997 2.396 124.91463529999999 4.25 150.88093880000002 3.091 105.45793059999998 3.3 109.74425969999999 3.213 94.23770880000004 3.281 123.5261802 3.287 87.60547570000003 2.463)
Error minima by case: (7.6777 1 8.0 1 5.2578 8 26.3277 7 7.4121 1 10.1236 1 0.0 0 3.8456 1 65.9742 1 31.334 8 49.3481 1 4.7564 1 45.0528 2 30.0834 2 4.9643 1 7.1213 1 3.664 9 0.0 0 17.3602 2 0.1784 1 8.7931 1 22.6114 1 9.5069 1 26.0772 1 0.4293 1)
Average genome size in population (length): 58.941
Average program size in population (points): 59.941
Average percent parens in population: 0.017
Minimum age in population: 77.96240211683127
Maximum age in population: 84.63746449612027
Average age in population: 82.65231821112745
Median age in population: 82.7162283667477
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.06
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 80435470
--- Timings ---
Current time: 1529616124934 milliseconds
Total Time:         187.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.2 seconds, 39.1%
Fitness Testing:     89.8 seconds, 48.0%
Report:              24.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction integer_shove} {:instruction float_dup_times} {:instruction -49} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_div} {:instruction float_pop} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_inc} {:instruction tagged_496} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_swap} {:instruction float_shove} {:instruction float_sub} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction -20} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items})
Best program: (integer_mod integer_mod integer_add float_swap integer_shove float_dup_times -49 integer_rot integer_add integer_div float_pop integer_flush float_swap integer_flush integer_dup float_shove float_div float_inc float_swap float_inc float_swap integer_fromfloat integer_add float_inc tagged_496 float_stackdepth integer_flush float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_yankdup float_inc float_swap float_shove float_sub integer_inc float_swap float_inc float_rot float_yank integer_stackdepth float_shove float_div float_inc float_div float_inc -20 float_inc float_rot float_stackdepth integer_inc integer_stackdepth float_shove float_swap float_inc float_rot float_stackdepth integer_inc integer_rot float_inc integer_rot float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3018.066051099999
Median total errors in population: 1327.0
Error averages by case: (122.3581094 3.21 85.4179378 3.124 110.03024469999997 10.443 152.8946482 11.196 127.41228099999996 3.187 102.79272520000002 3.902 79.62875730000002 3.106 117.24407690000001 3.118 147.36737540000001 3.243 150.62823659999998 12.179 160.97386849999998 3.32 110.9374894 3.132 145.1800094 3.379 131.76000120000003 4.055 106.49942280000002 2.25 94.89341099999999 3.132 147.30733899999998 11.168 75.0346989 2.316 116.13610869999998 4.169 143.5103582 3.017 96.8730695 3.206 101.84977040000001 3.142 86.45198500000001 3.201 114.27663619999997 3.205 78.85049040000001 2.357)
Error minima by case: (9.6777 1 8.0 1 6.8631 8 28.5326 7 18.0514 1 27.0 1 0.0 0 6.2947 1 31.4077 1 0.942 8 50.6235 1 10.6254 1 44.3291 2 58.0 2 4.0477 1 11.4968 1 4.3186 9 0.0 0 19.3318 2 0.2028 1 4.8585 1 24.2839 1 12.0 1 28.0772 1 0.1072 1)
Average genome size in population (length): 58.329
Average program size in population (points): 59.329
Average percent parens in population: 0.017
Minimum age in population: 80.99812308524244
Maximum age in population: 86.16897754364064
Average age in population: 84.06934881399808
Median age in population: 84.12052641664847
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.055
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 81893920
--- Timings ---
Current time: 1529616128169 milliseconds
Total Time:         190.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.4 seconds, 39.1%
Fitness Testing:     91.4 seconds, 48.0%
Report:              24.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_tan} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction float_dup} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction float_swap} {:instruction integer_flush} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction tagged_496} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction print_float})
Best program: (integer_mod integer_add float_swap float_tan integer_add -48 integer_flush float_dup float_rot float_pop in1 float_swap float_swap integer_flush float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_swap float_inc float_rot float_inc tagged_496 float_inc float_rot float_stackdepth float_inc float_div float_inc integer_mod float_inc float_rot float_stackdepth integer_inc float_swap float_inc float_rot print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2792.089817299999
Median total errors in population: 1327.0
Error averages by case: (113.70198779999997 2.955 75.84954319999997 2.87 101.50586939999998 10.44 145.31922279999998 11.174 119.42975059999999 2.947 93.93441530000003 3.703 69.7270947 2.812 109.12146910000001 2.88 138.66285230000003 2.979 142.721256 12.223 152.2117284 3.036 101.5608439 2.875 136.07017100000002 3.16 121.82206380000002 3.81 98.12900100000003 1.981 85.23618379999998 2.886 139.8300889 11.129 65.144157 2.039 106.73104080000002 3.926 136.02020199999998 2.796 87.22655449999998 2.959 92.85577329999998 2.889 77.38364940000002 2.94 105.53356090000004 2.942 69.88433740000002 2.126)
Error minima by case: (16.6777 1 8.0 1 7.8717 9 8.1645 9 6.1337 1 11.402 1 0.0 0 6.2947 1 68.1048 1 35.7552 9 42.3481 1 11.7564 1 52.0528 2 23.0834 2 4.5646 1 0.1213 1 5.3548 9 0.0 0 18.2664 2 0.0911 1 3.7931 1 1.6904 1 8.2285 1 9.0166 1 0.8495 1)
Average genome size in population (length): 58.786
Average program size in population (points): 59.786
Average percent parens in population: 0.017
Minimum age in population: 82.27563008710212
Maximum age in population: 87.69009655951642
Average age in population: 85.53338712538395
Median age in population: 85.59618949211657
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.046
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 83363770
--- Timings ---
Current time: 1529616131371 milliseconds
Total Time:         193.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.6 seconds, 39.0%
Fitness Testing:     93.0 seconds, 48.0%
Report:              25.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_rot} {:instruction float_dup_items} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_pop} {:instruction float_mod} {:instruction float_swap} {:instruction integer_flush} {:instruction float_pop} {:instruction in1} {:instruction integer_add} {:instruction float_pop} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_rot} {:instruction float_flush} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_mult} {:instruction float_inc} {:instruction float_pop} {:instruction 93.03035738133414} {:instruction integer_rot} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_pop} {:instruction float_sin} {:instruction integer_fromfloat})
Best program: (integer_mod integer_add float_rot float_dup_items integer_add integer_mod integer_stackdepth float_rot float_pop float_mod float_swap integer_flush float_pop in1 integer_add float_pop -94.09373270553453 float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc integer_yank float_inc float_rot float_stackdepth integer_inc integer_inc float_inc integer_dup_times float_stackdepth float_swap float_inc float_rot integer_swap integer_inc float_swap float_inc float_rot float_stackdepth float_swap float_inc float_rot float_stackdepth float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_yank float_add float_pop integer_rot float_flush float_inc float_pop float_sin integer_mult float_inc float_pop 93.03035738133414 integer_rot float_frominteger float_inc float_pop float_sin integer_fromfloat)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3180.6114077
Median total errors in population: 1327.0
Error averages by case: (129.19267229999997 3.322 92.33724249999996 3.223 116.73369799999996 10.478 158.63271430000003 11.203 133.29929689999994 3.296 110.3077936 3.891 85.93404310000003 3.19 123.09235990000003 3.211 153.69952610000004 3.339 157.29757549999994 12.198 167.02901880000002 3.449 116.85656250000001 3.23 150.6359031 3.486 137.21500990000004 4.15 112.37963170000008 2.342 100.71941389999998 3.214 154.83413369999997 11.191 81.5297529 2.412 122.61543399999995 4.289 150.32345880000005 3.126 103.70425489999998 3.331 108.79295319999997 3.234 92.37816510000002 3.293 121.53423779999996 3.301 85.64655520000004 2.491)
Error minima by case: (8.6777 1 2.0033 1 7.863 9 32.0855 9 2.7185 1 19.8139 1 0.0 0 6.3064 1 66.9742 1 59.6761 8 41.3481 1 5.7564 1 46.0528 2 22.0834 2 4.9643 1 0.8787 1 4.3554 9 0.0 0 18.3602 2 0.0186 1 8.7931 1 1.6943 1 0.6237 1 0.641 1 0.1072 1)
Average genome size in population (length): 58.522
Average program size in population (points): 59.522
Average percent parens in population: 0.017
Minimum age in population: 84.61029160953498
Maximum age in population: 88.93202208041971
Average age in population: 86.9410728161463
Median age in population: 87.00671085191237
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.063
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 84827195
--- Timings ---
Current time: 1529616134762 milliseconds
Total Time:         197.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.8 seconds, 39.0%
Fitness Testing:     94.7 seconds, 48.1%
Report:              25.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_inc} {:instruction float_cos} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_min} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_dup_items})
Best program: (integer_max float_inc float_cos integer_inc float_dup integer_add -48 integer_flush float_swap integer_dup_items float_pop in1 float_swap float_swap integer_flush integer_stackdepth float_shove float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_min float_shove float_div float_inc float_swap float_shove float_div integer_inc float_swap float_inc float_stackdepth integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_swap float_inc integer_mult float_rot float_stackdepth integer_inc integer_mod float_inc integer_div float_inc float_rot integer_div integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_dup_items integer_dec integer_dup_items)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3170.408885
Median total errors in population: 1327.0
Error averages by case: (130.44628149999997 3.27 88.77942019999999 3.171 113.24923449999996 10.467 159.98915229999994 11.212 134.86027339999998 3.26 111.50107179999998 3.815 87.87044630000003 3.142 124.75550290000002 3.169 150.89252460000003 3.308 158.48550349999996 12.206 168.42209720000002 3.38 114.04133640000002 3.182 147.92997019999996 3.42 134.89998230000003 4.123 114.15431120000002 2.289 98.20050539999998 3.199 150.31450430000004 11.197 83.26502370000003 2.377 124.01652489999994 4.24 146.51654419999997 3.078 104.95460229999999 3.278 105.17541649999998 3.196 94.36010069999998 3.261 122.75660529999998 3.243 87.66094940000002 2.428)
Error minima by case: (9.6777 1 8.0 1 3.2578 8 13.9262 9 18.0259 1 27.0 1 0.0 0 6.1781 1 16.0 1 4.942 8 54.5582 1 6.6254 1 20.0 1 37.0 2 3.9643 1 3.1096 1 3.3554 9 0.0 0 23.2664 2 0.1784 1 8.7931 1 20.4004 1 13.0 1 10.0606 1 0.5707 1)
Average genome size in population (length): 58.152
Average program size in population (points): 59.152
Average percent parens in population: 0.017
Minimum age in population: 85.61029160953498
Maximum age in population: 90.3282815858713
Average age in population: 88.39809738328283
Median age in population: 88.45529781565531
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.063
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 86281145
--- Timings ---
Current time: 1529616137957 milliseconds
Total Time:         200.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.0 seconds, 39.0%
Fitness Testing:     96.2 seconds, 48.0%
Report:              25.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc})
Best program: (integer_mod float_sin float_yankdup float_dup_items integer_add -48 integer_flush float_pop in1 float_swap integer_flush integer_stackdepth integer_div float_div float_inc float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_inc integer_max float_inc float_rot float_stackdepth float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_stackdepth float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc integer_yank float_inc integer_sub float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2961.078817999999
Median total errors in population: 1327.0
Error averages by case: (121.7041944 3.15 81.23338229999997 3.04 106.02057239999999 10.435 151.99815819999998 11.179 126.44688809999998 3.134 100.84270290000002 3.835 78.69285110000003 3.024 116.2056141 3.058 143.30056430000005 3.197 149.99780400000006 12.174 159.97290589999997 3.241 106.72136160000004 3.073 140.8295593 3.326 127.68625910000004 3.987 105.42233940000001 2.173 90.45038829999997 3.088 143.7921465 11.17 73.90009380000002 2.24 115.07722439999998 4.106 139.9885274 2.963 95.8083787 3.142 98.03823829999999 3.077 85.26276030000002 3.132 113.4291937 3.124 77.88770950000004 2.301)
Error minima by case: (10.6777 1 9.0 1 7.863 8 32.1517 9 3.0259 1 13.8303 1 0.6242 1 6.1781 1 6.4904 2 60.3055 8 41.3481 1 12.7564 1 20.0 1 22.0834 2 3.9643 1 0.8787 1 4.1751 9 0.0 0 24.2664 2 0.2714 1 9.7931 1 25.6356 1 0.9311 1 1.1228 1 0.4293 1)
Average genome size in population (length): 57.857
Average program size in population (points): 58.857
Average percent parens in population: 0.018
Minimum age in population: 87.14789899464648
Maximum age in population: 91.7664008041093
Average age in population: 89.7929129755254
Median age in population: 89.82252500899509
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.819
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.061
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 87727795
--- Timings ---
Current time: 1529616141133 milliseconds
Total Time:         203.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.3 seconds, 39.0%
Fitness Testing:     97.7 seconds, 48.0%
Report:              26.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_flush} {:instruction float_swap} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_mod} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_div} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_mult} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction tagged_180} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_cos} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_dup} {:instruction integer_dec} {:instruction integer_yank})
Best program: (integer_mod float_flush float_swap -94.09373270553453 float_rot float_pop in1 float_mod integer_flush integer_stackdepth float_shove float_div float_inc float_rot float_inc float_rot float_stackdepth integer_sub float_div float_shove float_div float_inc float_swap float_inc float_rot float_swap float_swap float_inc float_inc float_rot float_stackdepth float_mult integer_mod float_inc float_swap float_inc tagged_180 float_stackdepth integer_inc integer_flush float_inc float_rot float_stackdepth print_float integer_dup integer_fromfloat integer_dup float_swap print_float float_rot float_stackdepth integer_inc integer_mod float_inc float_cos float_stackdepth print_float float_inc integer_fromfloat integer_dup_items float_add integer_dec integer_yank float_add float_pop integer_dup_items float_dup integer_dec integer_yank)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3119.672113699999
Median total errors in population: 1327.0
Error averages by case: (126.85478239999999 3.277 89.24902589999998 3.183 113.78270549999998 10.501 156.17268439999998 11.231 131.00090259999993 3.271 107.67425250000002 3.954 84.18414140000003 3.165 120.8901103 3.17 151.69065120000005 3.293 154.66273099999995 12.238 164.93631009999996 3.365 114.69541800000003 3.192 148.6848681 3.45 135.63042100000007 4.089 110.19326000000007 2.329 98.76981699999997 3.199 150.76869489999999 11.216 79.4684834 2.372 120.42151819999997 4.241 146.9026041 3.065 101.25948129999998 3.281 105.56258399999999 3.188 90.35005030000002 3.271 119.06860400000002 3.242 83.56001210000002 2.455)
Error minima by case: (12.6777 1 9.0 1 9.1065 8 28.5326 2 1.5194 1 28.0 1 0.0 0 4.6164 1 25.353 1 0.942 2 53.5582 1 4.5708 1 38.2745 2 56.0 2 3.2767 1 11.4968 1 2.2 8 0.0 0 22.2664 2 0.1664 1 7.7931 1 15.7085 1 0.9739 1 16.0606 1 0.822 1)
Average genome size in population (length): 57.561
Average program size in population (points): 58.561
Average percent parens in population: 0.018
Minimum age in population: 88.74463882522328
Maximum age in population: 93.42846074279441
Average age in population: 91.22469077754864
Median age in population: 91.256176642596
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.819
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.06
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 89166970
--- Timings ---
Current time: 1529616144354 milliseconds
Total Time:         206.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.5 seconds, 38.9%
Fitness Testing:     99.3 seconds, 48.1%
Report:              26.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_sin} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_min} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_rot} {:instruction 71.61811866364366} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_dup_items} {:instruction float_pop} {:instruction integer_rot})
Best program: (integer_mod float_sin float_swap float_dup_items integer_add -48 integer_flush -94.09373270553453 float_rot float_pop in1 integer_pop integer_flush integer_stackdepth float_shove float_div float_inc float_swap integer_min float_shove float_shove float_inc float_swap float_div float_inc integer_add float_inc float_rot float_stackdepth integer_inc integer_flush float_inc float_rot 71.61811866364366 float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc integer_shove float_inc integer_add integer_inc integer_rot float_inc float_rot float_stackdepth print_float integer_rot integer_fromfloat float_add integer_dup_items integer_dec integer_yank float_dup_items float_pop integer_rot)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3028.5828079
Median total errors in population: 1327.0
Error averages by case: (123.3087958 3.354 85.43659099999996 3.245 109.96338539999995 10.477 152.17957249999995 11.202 127.10118429999994 3.345 103.20564710000001 4.067 81.30235680000004 3.228 116.85862550000007 3.244 147.66331660000006 3.388 150.8408393 12.175 161.70189609999997 3.475 111.19506890000001 3.256 145.38669269999997 3.521 132.89801540000002 4.165 106.25773510000002 2.393 95.10223329999997 3.271 146.35893539999998 11.174 76.5045056 2.469 117.16959649999994 4.322 142.5402186 3.138 98.25975199999998 3.37 101.81538599999998 3.26 86.6736123 3.349 114.7701253 3.33 79.34172040000003 2.529)
Error minima by case: (9.6777 1 3.2272 1 7.8717 8 20.3061 1 7.5374 1 9.9983 1 0.0 0 6.2947 1 27.4077 1 0.942 2 41.3481 1 6.6254 1 40.3291 2 22.0834 2 4.5646 1 0.0262 1 4.3186 9 0.0 0 24.3033 2 0.1047 1 10.7931 1 13.832 1 9.6322 1 9.0606 1 0.8495 1)
Average genome size in population (length): 57.844
Average program size in population (points): 58.844
Average percent parens in population: 0.018
Minimum age in population: 90.3126753333152
Maximum age in population: 94.66167822914169
Average age in population: 92.71649961160391
Median age in population: 92.78314407085222
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.071
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 90613170
--- Timings ---
Current time: 1529616147645 milliseconds
Total Time:         210.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.7 seconds, 38.9%
Fitness Testing:    100.9 seconds, 48.1%
Report:              27.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_rot} {:instruction float_mod} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction tagged_264} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction print_float})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add float_rot float_pop in1 float_swap integer_div integer_stackdepth float_shove float_div float_inc integer_swap float_inc float_swap float_inc float_rot float_inc float_rot float_stackdepth integer_flush float_rot float_mod integer_inc float_div float_mult float_div float_inc float_div float_inc float_rot tagged_264 float_inc float_swap float_inc float_rot float_swap float_inc float_rot integer_dup_items print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3250.7435676999994
Median total errors in population: 1327.0
Error averages by case: (132.33235299999996 3.274 95.4225967 3.18 119.82040339999999 10.491 161.77907510000003 11.223 136.68448109999997 3.258 112.37638040000003 4.059 89.01784350000001 3.166 126.63044640000003 3.157 154.73688070000003 3.29 159.07604940000002 12.198 170.52283309999993 3.391 118.86243190000002 3.177 152.7043548 3.439 140.02014330000006 4.083 115.86750130000003 2.312 102.8437525 3.176 157.7454599 11.197 84.5603477 2.383 126.25532559999999 4.241 153.70105500000003 3.086 107.2470634 3.287 111.88641919999999 3.179 95.65159570000002 3.273 123.88863120000003 3.253 87.93114340000002 2.406)
Error minima by case: (9.7035 1 2.5033 1 7.33 9 28.5326 8 14.6828 1 23.1674 1 1.0 1 6.6475 1 1.8562 1 0.942 8 53.6235 1 2.7083 1 14.7777 2 55.9138 2 4.1327 1 11.4968 1 3.7301 9 0.0 0 22.3318 2 0.364 1 7.8585 1 1.1943 1 1.9655 1 2.7125 1 0.5321 1)
Average genome size in population (length): 58.297
Average program size in population (points): 59.297
Average percent parens in population: 0.017
Minimum age in population: 91.52996214209497
Maximum age in population: 96.28234371061922
Average age in population: 94.12104114997364
Median age in population: 94.13541405303621
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.062
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 92070620
--- Timings ---
Current time: 1529616150770 milliseconds
Total Time:         213.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.0 seconds, 38.9%
Fitness Testing:    102.5 seconds, 48.1%
Report:              27.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_max} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_div} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction tagged_180} {:instruction integer_shove} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction 21} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_shove} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_dec})
Best program: (integer_mod float_flush float_swap float_dup_items integer_add float_max float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div integer_dup_items float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_inc float_yank float_inc float_rot float_inc float_swap float_inc float_rot float_div integer_inc integer_mod float_inc float_swap float_inc tagged_180 integer_shove integer_inc integer_mod float_inc float_rot 21 float_stackdepth print_float float_inc integer_shove float_rot float_stackdepth print_float integer_dec)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3257.4029144
Median total errors in population: 1327.0
Error averages by case: (132.23224399999998 3.381 94.77882319999998 3.275 118.70747669999999 10.487 162.06990159999992 11.202 137.37440249999995 3.365 111.89436990000002 4.11 91.04690430000002 3.271 127.2316035 3.279 154.2989267 3.421 159.42063140000005 12.172 170.65386759999987 3.508 119.4484327 3.295 152.80799919999998 3.552 140.97656280000004 4.192 116.60654800000007 2.434 103.18639759999996 3.292 155.78838640000004 11.199 86.35626090000001 2.501 126.72619019999998 4.357 152.059661 3.17 107.90196199999998 3.399 111.11002909999998 3.292 96.9319181 3.388 123.58944270000002 3.367 88.74197230000006 2.553)
Error minima by case: (9.6777 1 8.0 1 7.33 8 28.5326 9 6.6494 1 1.1376 1 0.3104 1 6.688 1 6.4904 1 0.942 8 41.3481 1 6.6254 1 19.0 2 22.0834 2 4.1327 1 0.8787 1 4.3554 9 0.0 0 21.3602 2 0.1784 1 8.8585 1 11.0742 1 7.2874 1 5.8172 1 0.4293 1)
Average genome size in population (length): 58.775
Average program size in population (points): 59.775
Average percent parens in population: 0.017
Minimum age in population: 92.99967824533522
Maximum age in population: 97.46464387316638
Average age in population: 95.58987259107711
Median age in population: 95.63040373894036
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.072
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 93540045
--- Timings ---
Current time: 1529616153984 milliseconds
Total Time:         216.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.2 seconds, 38.9%
Fitness Testing:    104.0 seconds, 48.1%
Report:              28.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction in1} {:instruction float_swap} {:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction -48} {:instruction float_mult} {:instruction -94.09373270553453} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc})
Best program: (integer_mod integer_add float_swap in1 float_swap integer_mod integer_add float_swap float_dup_items float_dup_items -48 float_mult -94.09373270553453 integer_dec float_pop integer_stackdepth integer_div float_div float_inc float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_inc integer_max float_inc float_rot float_stackdepth float_rot float_stackdepth integer_inc float_swap float_inc integer_rot float_stackdepth float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc integer_yank float_inc integer_sub float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3222.8594359
Median total errors in population: 1327.0
Error averages by case: (132.58292609999998 3.343 92.34143629999996 3.241 116.89233349999998 10.484 160.7799971 11.22 135.9328325 3.316 113.4504834 4.126 89.32519430000004 3.21 125.7756341 3.225 153.20060400000003 3.359 159.12588140000008 12.169 170.36244280000003 3.467 116.39961040000001 3.237 150.18635469999998 3.512 137.21125220000005 4.143 115.1335373 2.363 100.61234180000001 3.248 153.71465380000006 11.177 84.64303849999999 2.447 126.18477139999999 4.308 149.9077967 3.132 107.28799179999999 3.351 108.66428249999998 3.245 95.39024819999999 3.316 124.75707910000001 3.323 88.550712 2.484)
Error minima by case: (11.6777 1 6.1614 1 6.8631 9 10.9175 9 15.6828 1 11.4384 1 0.0 1 7.5702 1 7.0258 1 0.3467 8 41.3481 1 10.6254 1 20.0 1 22.0834 2 4.0477 1 0.8787 1 4.3186 9 0.0 0 23.2664 2 0.2714 1 8.7931 1 4.4433 1 11.1255 1 9.0166 1 1.2059 1)
Average genome size in population (length): 58.981
Average program size in population (points): 59.981
Average percent parens in population: 0.017
Minimum age in population: 94.57738381616257
Maximum age in population: 98.95962720123742
Average age in population: 97.08812537034098
Median age in population: 97.13583024071771
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.071
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 95014695
--- Timings ---
Current time: 1529616157280 milliseconds
Total Time:         219.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.5 seconds, 38.9%
Fitness Testing:    105.6 seconds, 48.1%
Report:              28.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction in1} {:instruction float_swap} {:instruction float_swap} {:instruction float_pop} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_div} {:instruction float_shove} {:instruction float_dup_items} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_mod} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction tagged_264} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_yankdup})
Best program: (integer_mod integer_add float_swap in1 float_swap float_swap float_pop in1 float_yankdup float_max integer_swap float_shove integer_inc float_inc float_swap float_inc float_rot float_stackdepth integer_sub float_div float_shove float_dup_items float_shove float_div float_inc float_swap float_inc float_rot float_mod integer_inc float_div float_mult float_div float_inc float_div float_inc float_rot tagged_264 float_inc float_swap float_inc float_rot float_swap float_inc float_rot integer_dup_items print_float float_inc integer_fromfloat integer_dup_items integer_yankdup)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3083.9254322999996
Median total errors in population: 1327.0
Error averages by case: (126.05285249999994 3.307 86.80634729999997 3.209 111.54496569999998 10.455 154.95095690000002 11.186 129.86943899999994 3.293 105.85764790000003 3.897 83.66879540000002 3.205 119.67182070000004 3.21 149.68708050000004 3.313 153.54867689999998 12.163 164.3684608999999 3.409 112.5435664 3.208 146.7160175 3.438 133.65250080000004 4.115 108.98971290000003 2.348 96.6275358 3.193 148.50804079999997 11.191 78.9250276 2.427 119.80218539999994 4.276 144.6326538 3.066 100.68997469999996 3.308 103.43131329999997 3.195 89.33970390000003 3.292 118.18115550000002 3.298 82.39900020000003 2.458)
Error minima by case: (9.6777 1 4.6048 1 6.8631 9 3.674 8 10.6181 1 26.4384 1 1.0 1 6.1781 1 16.0 1 0.942 8 41.3481 1 10.6254 1 20.0 1 22.0834 2 3.9643 1 0.8787 1 3.9731 9 0.0 0 25.2664 2 0.095 1 10.7931 1 25.6114 1 11.0 1 28.0772 1 0.1436 1)
Average genome size in population (length): 58.575
Average program size in population (points): 59.575
Average percent parens in population: 0.017
Minimum age in population: 95.92078772113005
Maximum age in population: 100.3255052466282
Average age in population: 98.53726120773854
Median age in population: 98.58234984154467
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.069
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 96479120
--- Timings ---
Current time: 1529616160527 milliseconds
Total Time:         222.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.7 seconds, 38.9%
Fitness Testing:    107.2 seconds, 48.1%
Report:              28.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_156} {:instruction integer_yank} {:instruction integer_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction integer_add} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction print_float} {:instruction integer_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_add} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_pop})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add float_rot float_pop in1 float_swap integer_div integer_stackdepth float_shove float_div float_inc integer_swap float_inc float_swap float_inc float_rot float_inc float_rot float_stackdepth integer_flush integer_stackdepth float_shove float_div float_inc float_inc tag_integer_156 integer_yank integer_inc float_yank float_inc float_mod float_inc integer_add float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_rot float_stackdepth integer_inc integer_mod print_float integer_yank float_inc float_rot float_rot float_stackdepth integer_inc integer_fromfloat integer_dup_items float_swap integer_dec integer_yank float_add float_pop integer_dup_items float_dup_items integer_pop integer_yank float_pop)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3368.994001599999
Median total errors in population: 1327.0
Error averages by case: (138.28607369999997 3.341 97.6052736 3.238 122.26384229999996 10.477 167.29618539999998 11.196 142.36224189999996 3.324 119.3408743 4.097 95.67468950000004 3.252 132.32499900000002 3.227 158.61398390000002 3.374 165.63790539999994 12.187 175.62340619999995 3.455 122.15027820000002 3.252 155.633869 3.519 142.47110760000004 4.158 121.7795119 2.382 106.5807225 3.255 158.90138570000002 11.189 90.96767119999997 2.464 131.5252357 4.311 155.13484269999998 3.113 112.6477364 3.347 113.7663989 3.231 102.0359256 3.338 130.4752344 3.315 95.36460660000004 2.488)
Error minima by case: (9.6777 1 8.0151 1 1.7002 9 32.4806 9 12.8631 1 28.0 1 0.6896 1 1.0153 1 13.0 1 4.942 8 55.6235 1 6.6254 1 17.0 1 34.0 2 1.1985 1 15.4968 1 1.8074 9 0.0 0 24.3318 2 0.1047 1 9.8585 1 3.583 1 9.0 1 28.0772 1 1.2609 1)
Average genome size in population (length): 58.453
Average program size in population (points): 59.453
Average percent parens in population: 0.017
Minimum age in population: 97.53920666187952
Maximum age in population: 101.9374931047409
Average age in population: 99.97929088610763
Median age in population: 100.0016735197309
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.051
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 97940545
--- Timings ---
Current time: 1529616163717 milliseconds
Total Time:         226.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        87.9 seconds, 38.9%
Fitness Testing:    108.7 seconds, 48.1%
Report:              29.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_860} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_mod} {:instruction -48} {:instruction integer_flush} {:instruction -95.02835022363054} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction in1} {:instruction float_swap} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction tagged_496} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_dup} {:instruction integer_inc} {:instruction float_swap} {:instruction float_rot} {:instruction float_max} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction in1} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction float_mult} {:instruction float_swap})
Best program: (tagged_860 integer_add float_swap float_dup_items integer_mod -48 integer_flush -95.02835022363054 float_rot integer_fromfloat in1 float_swap float_rot float_pop in1 float_swap integer_flush float_inc float_swap float_inc float_swap float_inc float_rot float_inc tagged_496 float_inc float_rot float_stackdepth float_swap float_inc float_rot float_dup integer_inc float_swap float_rot float_max float_inc integer_inc float_inc in1 float_swap float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat float_dup_times float_stackdepth print_float float_inc float_mult float_swap)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3048.8688484999993
Median total errors in population: 1327.0
Error averages by case: (123.88976439999999 3.165 86.25850289999998 3.082 111.18218859999998 10.446 155.04780549999998 11.199 129.67944409999993 3.159 103.76294560000001 3.846 81.31476060000003 3.07 119.47909260000003 3.064 147.04506870000003 3.207 151.99521740000003 12.201 162.43099469999996 3.259 111.45030259999999 3.095 145.41959309999996 3.34 131.93944360000006 4.016 108.66768210000005 2.201 95.21598949999999 3.09 148.65952310000003 11.176 76.69196349999999 2.269 117.7094619 4.126 144.8736076 2.994 98.60275829999998 3.174 102.77356029999997 3.101 88.4015641 3.168 115.40211579999999 3.13 80.08349790000003 2.314)
Error minima by case: (10.6777 1 8.0 1 6.863 9 8.3139 9 14.6828 1 9.5616 1 0.0 0 3.8456 1 10.0258 1 19.2767 9 40.3481 1 10.7564 1 20.0 1 21.0834 2 3.9643 1 1.1213 1 3.3554 9 0.0 0 21.2664 2 0.2031 1 6.7931 1 14.7881 1 10.0 1 18.0166 1 0.5707 1)
Average genome size in population (length): 57.409
Average program size in population (points): 58.409
Average percent parens in population: 0.018
Minimum age in population: 99.00470953926799
Maximum age in population: 103.4233464026297
Average age in population: 101.4323837254216
Median age in population: 101.4889184797748
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.809
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.058
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 99375895
--- Timings ---
Current time: 1529616166894 milliseconds
Total Time:         229.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        89.1 seconds, 38.9%
Fitness Testing:    110.3 seconds, 48.1%
Report:              29.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction -70} {:instruction -48} {:instruction integer_flush} {:instruction float_max} {:instruction in1} {:instruction float_frominteger} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction tagged_496} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_swap} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_pop} {:instruction float_div} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction float_swap} {:instruction float_swap})
Best program: (integer_mod -70 -48 integer_flush float_max in1 float_frominteger integer_shove integer_shove float_stackdepth in2 integer_stackdepth float_shove float_div float_inc float_swap float_inc float_swap float_inc float_rot float_inc tagged_496 float_stackdepth integer_flush integer_stackdepth float_rot float_div float_inc float_swap float_inc integer_shove float_stackdepth integer_inc float_max float_inc float_swap float_inc float_rot float_swap float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items integer_inc integer_pop float_div float_swap float_inc float_rot integer_div float_swap float_swap)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3086.964047699998
Median total errors in population: 1327.0
Error averages by case: (126.04842729999999 3.248 85.68591029999997 3.129 110.26638919999996 10.522 157.44071029999998 11.252 132.16515919999992 3.23 104.94324999999999 3.984 84.84449230000004 3.119 122.06376960000006 3.155 147.02712980000004 3.261 154.81334259999997 12.236 164.64989449999993 3.347 111.90626830000001 3.158 145.50320519999997 3.427 132.59673470000004 4.047 111.42420570000006 2.301 95.59837509999998 3.162 147.5825945 11.206 80.32161519999998 2.367 120.06928399999993 4.174 143.77811019999996 3.042 100.95261889999993 3.241 102.14121639999998 3.148 91.56290290000001 3.24 117.57373310000004 3.198 83.36670840000005 2.444)
Error minima by case: (9.6777 1 8.0 1 8.863 9 19.3819 8 8.6181 1 27.0 1 0.0 0 3.8456 1 1.0637 1 16.3819 8 44.3481 1 9.7564 1 8.3819 1 8.6181 2 2.9643 1 2.1213 1 3.664 10 0.0 0 14.1594 2 0.364 1 0.3139 1 25.6114 1 9.0 1 28.0772 1 0.4716 1)
Average genome size in population (length): 56.608
Average program size in population (points): 57.608
Average percent parens in population: 0.018
Minimum age in population: 100.1152134310832
Maximum age in population: 104.7696167231933
Average age in population: 102.8753526090906
Median age in population: 102.9300249851768
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.064
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 100791220
--- Timings ---
Current time: 1529616170071 milliseconds
Total Time:         232.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.4 seconds, 38.9%
Fitness Testing:    111.9 seconds, 48.1%
Report:              30.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction float_pop} {:instruction in1} {:instruction float_div} {:instruction float_shove} {:instruction integer_swap} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_div} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_inc} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_max} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_rot})
Best program: (integer_flush integer_stackdepth integer_inc float_rot float_pop in1 float_pop in1 float_swap float_pop in1 float_div float_shove integer_swap float_rot float_pop in1 integer_div integer_flush float_dup_times float_inc integer_flush integer_stackdepth float_shove float_div float_inc float_inc float_dup_items float_inc float_rot float_stackdepth float_rot float_stackdepth integer_inc float_swap float_inc float_rot float_yank float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc integer_yank float_inc float_sub float_rot float_stackdepth float_max integer_mod float_inc float_rot float_stackdepth print_float integer_rot)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3213.7993056999994
Median total errors in population: 1327.0
Error averages by case: (130.52706619999995 3.355 92.68952159999995 3.23 117.16985269999996 10.512 159.94922609999992 11.254 134.92277519999993 3.329 111.29382050000002 3.874 87.96594490000005 3.23 124.95391180000003 3.23 155.26319550000008 3.345 158.37214650000004 12.242 168.54033629999998 3.461 118.12961759999999 3.229 152.2488062 3.499 139.0031499 4.152 114.07107780000004 2.407 102.32346349999999 3.228 154.4520098 11.228 83.91674479999998 2.477 124.17549409999995 4.288 150.4879748 3.107 105.15072869999993 3.348 108.97570529999994 3.227 94.69806090000003 3.338 122.67092210000003 3.314 87.42475290000003 2.519)
Error minima by case: (34.416 1 8.0 1 7.0392 7 28.5326 8 17.0259 1 4.4384 1 0.0 0 3.8456 1 31.4077 1 0.942 8 51.3481 1 2.7564 1 43.0528 2 32.0834 2 2.9643 1 9.1213 1 3.356 8 0.0 0 15.3602 2 0.1047 1 17.0 1 13.0 1 10.8622 1 6.6996 1 0.13 1)
Average genome size in population (length): 56.473
Average program size in population (points): 57.473
Average percent parens in population: 0.018
Minimum age in population: 101.4472651676488
Maximum age in population: 106.2597192349669
Average age in population: 104.2944183202349
Median age in population: 104.3477851637817
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.061
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 102203220
--- Timings ---
Current time: 1529616173242 milliseconds
Total Time:         235.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.6 seconds, 38.9%
Fitness Testing:    113.4 seconds, 48.1%
Report:              30.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_flush} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_mult} {:instruction float_shove} {:instruction float_sub} {:instruction float_div} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction tagged_35} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 integer_flush in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_sub float_mult float_shove float_sub float_div float_shove float_div float_inc tagged_35 float_inc float_rot float_stackdepth float_yank float_div float_mult float_div float_inc float_div float_inc float_rot float_max float_inc float_swap float_inc integer_inc integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_dup_items float_rot float_stackdepth float_swap float_inc float_rot float_inc)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3416.7772563999984
Median total errors in population: 1327.0
Error averages by case: (140.75944229999996 3.414 99.67705679999996 3.297 123.98097599999998 10.548 168.89311459999996 11.219 144.19480299999998 3.389 120.25627020000002 4.068 98.22073570000003 3.278 134.16044250000002 3.306 158.78552150000007 3.407 166.87135969999997 12.219 178.5655624 3.536 123.42873440000001 3.287 156.6057465 3.563 143.94807690000002 4.199 123.67847940000004 2.448 107.62005479999999 3.277 160.57645860000005 11.232 93.68755230000001 2.534 134.77623419999998 4.393 156.75117609999998 3.174 115.99670469999995 3.43 115.80658999999999 3.308 104.21794820000002 3.404 132.6479576 3.411 96.73325800000003 2.596)
Error minima by case: (9.6777 1 8.0 1 7.954 9 29.5326 1 6.6494 1 27.0 1 1.0 1 7.2042 1 16.0 1 1.942 2 45.3481 1 8.6254 1 20.0 1 26.0834 2 4.9871 1 3.1213 1 4.4133 9 0.0 0 21.3602 2 0.1047 1 7.8585 1 3.5176 1 7.2874 1 28.0772 1 0.4326 1)
Average genome size in population (length): 55.608
Average program size in population (points): 56.608
Average percent parens in population: 0.018
Minimum age in population: 102.935480073305
Maximum age in population: 107.4842864350561
Average age in population: 105.7817266170096
Median age in population: 105.8329980828951
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.064
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 103593770
--- Timings ---
Current time: 1529616176367 milliseconds
Total Time:         238.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        92.8 seconds, 38.9%
Fitness Testing:    114.9 seconds, 48.2%
Report:              30.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_yank} {:instruction integer_div} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_mult} {:instruction float_shove} {:instruction float_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction integer_inc} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_mod})
Best program: (in1 float_swap integer_flush float_inc integer_dup_items integer_swap float_rot float_pop in1 float_yank integer_div float_swap integer_flush integer_stackdepth float_shove integer_dup_items float_inc float_swap float_inc float_rot float_stackdepth integer_sub float_mult float_shove float_rot float_inc float_rot float_inc integer_inc float_stackdepth integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_stackdepth integer_inc integer_mod float_inc integer_min float_inc float_rot float_stackdepth integer_flush integer_mod float_inc float_rot float_stackdepth print_float float_rot integer_add integer_inc integer_mod)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3057.3683830999985
Median total errors in population: 1327.0
Error averages by case: (124.92026339999995 3.333 86.0540279 3.22 110.47718349999998 10.484 153.7188664 11.238 128.69866559999997 3.313 104.84104660000001 4.018 82.98558010000004 3.228 118.4129933 3.218 147.80071810000007 3.345 151.81264169999997 12.211 163.73376309999995 3.451 111.70133210000004 3.234 145.66535689999995 3.485 133.02342270000005 4.13 107.81318800000003 2.373 95.58354540000002 3.228 147.2856317 11.214 78.15762760000001 2.451 119.1876856 4.285 143.39816479999996 3.104 100.03530299999997 3.34 102.4200311 3.24 88.27242849999999 3.314 116.5687592 3.31 80.52915680000001 2.504)
Error minima by case: (48.0 1 9.0 1 5.2578 9 11.4604 9 6.6494 1 28.0 1 0.0 0 6.1781 1 16.0 1 0.942 8 88.0 1 10.6254 1 20.0 1 37.0 2 3.9643 1 11.4968 1 3.3554 9 0.0 0 39.0 2 0.1535 1 18.0 1 11.0742 1 7.2874 1 40.0 1 0.1072 1)
Average genome size in population (length): 56.072
Average program size in population (points): 57.072
Average percent parens in population: 0.018
Minimum age in population: 104.5874315313827
Maximum age in population: 108.9833727880938
Average age in population: 107.2275008498227
Median age in population: 107.2886008099767
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.064
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 104995895
--- Timings ---
Current time: 1529616179485 milliseconds
Total Time:         241.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        94.0 seconds, 38.9%
Fitness Testing:    116.4 seconds, 48.2%
Report:              31.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_add} {:instruction float_swap} {:instruction in1} {:instruction integer_dup_items} {:instruction float_swap} {:instruction float_inc} {:instruction float_max} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction -42} {:instruction float_shove} {:instruction float_div} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_max} {:instruction integer_add} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc})
Best program: (integer_sub integer_add float_swap in1 integer_dup_items float_swap float_inc float_max float_stackdepth integer_flush float_pop in1 float_swap integer_flush float_pop in1 float_swap integer_flush -42 float_shove float_div float_div float_inc float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_inc integer_max float_inc float_rot float_stackdepth float_rot float_stackdepth integer_inc float_swap float_inc integer_max integer_add float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc integer_yank float_inc float_sub float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3331.5974784
Median total errors in population: 1327.0
Error averages by case: (135.34006199999993 3.361 96.97377890000001 3.24 121.78200579999996 10.515 164.56496190000001 11.265 141.225013 3.346 116.272851 3.978 92.87306140000001 3.239 129.4879764 3.234 159.7342829 3.368 162.7509994 12.223 173.05950479999993 3.459 122.054997 3.241 155.74564130000005 3.491 143.595902 4.161 119.00202640000003 2.388 107.16621320000002 3.239 158.5633441 11.237 89.2614013 2.47 129.41967699999998 4.314 155.65252509999993 3.134 109.87976239999999 3.356 113.37707150000003 3.24 99.11234540000004 3.343 127.5959271 3.333 92.42614710000004 2.505)
Error minima by case: (9.6777 1 1.5347 1 7.863 8 15.0855 9 18.0259 1 2.7351 1 1.0 1 6.1781 1 28.4077 1 3.942 7 56.5582 1 7.6254 1 41.3291 2 57.0 2 3.9643 1 14.4968 1 4.3554 10 0.0 0 25.2664 2 0.5776 1 10.7931 1 1.6456 1 0.1778 1 28.0772 1 0.4293 1)
Average genome size in population (length): 55.742
Average program size in population (points): 56.742
Average percent parens in population: 0.018
Minimum age in population: 105.5874315313827
Maximum age in population: 110.5114257472292
Average age in population: 108.6578523883451
Median age in population: 108.7437007989466
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.063
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 106389720
--- Timings ---
Current time: 1529616182642 milliseconds
Total Time:         244.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.2 seconds, 38.9%
Fitness Testing:    118.0 seconds, 48.2%
Report:              31.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_pop} {:instruction in1} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_shove} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_add})
Best program: (integer_mod integer_add float_swap integer_div integer_fromfloat integer_add float_dup float_dup_items float_mod float_dup_items integer_add -49 float_frominteger integer_swap float_pop in1 float_pop in1 float_inc integer_stackdepth integer_flush integer_dec float_shove integer_yank float_inc float_inc float_inc float_stackdepth integer_inc float_swap float_inc integer_mult float_inc float_swap float_inc integer_stackdepth float_inc float_inc float_rot float_stackdepth print_float float_rot float_stackdepth float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3247.3937626
Median total errors in population: 1327.0
Error averages by case: (132.47281879999997 3.392 95.21374089999999 3.287 119.49324649999998 10.501 160.591681 11.217 135.57300289999992 3.362 112.68678479999998 4.202 89.5028268 3.279 125.5056148 3.264 155.21924800000005 3.39 158.61944619999997 12.209 170.6495151999999 3.491 119.26679980000004 3.277 152.95867719999998 3.531 140.2807203 4.17 114.95965560000008 2.412 103.25078909999996 3.277 156.1090456 11.21 84.62437400000002 2.502 126.37187199999997 4.345 152.32831879999995 3.177 107.39643879999998 3.384 111.41316239999998 3.298 95.34078680000002 3.385 124.19754019999998 3.38 87.9036561 2.522)
Error minima by case: (5.6777 1 8.0 1 5.2578 8 26.3277 7 15.6828 1 5.9633 1 0.0 0 5.3394 1 16.0 1 3.942 8 54.5582 1 7.6254 1 20.0 1 37.0 2 3.1257 1 14.4968 1 4.3186 8 0.0 0 23.2664 2 0.1784 1 8.7931 1 22.2098 1 11.0 1 14.4917 1 1.1436 1)
Average genome size in population (length): 56.302
Average program size in population (points): 57.302
Average percent parens in population: 0.018
Minimum age in population: 106.5874315313827
Maximum age in population: 111.9299595663524
Average age in population: 110.0639463012593
Median age in population: 110.1232412497456
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.065
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 107797470
--- Timings ---
Current time: 1529616185710 milliseconds
Total Time:         248.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.4 seconds, 38.9%
Fitness Testing:    119.5 seconds, 48.2%
Report:              32.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_add} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_dup_times} {:instruction tagged_616} {:instruction float_div} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction print_float})
Best program: (float_add integer_add float_pop in1 float_swap float_inc float_swap float_inc float_rot float_dup_times tagged_616 float_div float_shove integer_pop float_inc float_yank float_inc float_rot float_mod integer_inc float_swap float_inc float_rot float_stackdepth float_swap float_inc float_rot float_stackdepth integer_inc integer_mult float_inc float_swap float_inc float_rot float_rot float_swap float_inc float_rot print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 3148.5421513
Median total errors in population: 1327.0
Error averages by case: (127.67275679999999 3.256 90.14983389999999 3.154 114.63082969999996 10.515 158.07113640000006 11.245 133.19760419999997 3.252 108.5872815 4.043 85.41551820000004 3.131 122.81397190000003 3.148 152.12985180000007 3.276 156.03314970000008 12.215 165.80186729999997 3.356 115.23475030000002 3.156 149.23770259999995 3.455 136.3459063 4.061 111.96467470000003 2.292 99.32945699999998 3.186 152.32276640000003 11.191 80.7777264 2.356 121.39483769999997 4.222 148.62304220000001 3.041 102.38946559999998 3.254 106.8784449 3.178 91.79955800000003 3.239 120.0285627 3.215 84.83745510000003 2.437)
Error minima by case: (8.6777 1 9.0 1 5.2578 8 23.9498 9 20.2503 1 24.7844 1 0.0 0 2.8456 1 35.6471 1 3.2975 8 42.0 1 11.7564 1 48.5685 2 22.0 2 5.5646 1 0.1213 1 0.2403 8 0.0 0 16.2664 2 0.1047 1 1.7931 1 24.0648 1 11.0 1 27.0772 1 1.5672 1)
Average genome size in population (length): 55.91
Average program size in population (points): 56.91
Average percent parens in population: 0.018
Minimum age in population: 107.5874315313827
Maximum age in population: 113.5743875866523
Average age in population: 111.5052303332316
Median age in population: 111.5346567990254
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.058
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 109195295
--- Timings ---
Current time: 1529616188808 milliseconds
Total Time:         251.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        97.6 seconds, 38.9%
Fitness Testing:    121.0 seconds, 48.2%
Report:              32.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_mod} {:instruction float_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction -49} {:instruction float_mod} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_sub})
Best program: (integer_mod integer_mod integer_add integer_mod float_add float_swap float_dup_items integer_yank -49 float_mod -94.09373270553453 float_rot float_rot float_pop in1 float_swap integer_flush integer_stackdepth integer_mod float_inc float_swap float_inc float_swap float_inc float_rot float_inc float_swap float_inc float_swap float_inc float_swap float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth float_stackdepth integer_mod float_inc float_rot integer_mult float_stackdepth print_float float_inc integer_sub)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3475.604021899999
Median total errors in population: 1327.0
Error averages by case: (140.24213709999995 3.465 104.15602709999995 3.369 127.97267869999996 10.492 171.06492189999994 11.232 146.93987459999997 3.455 118.38924420000001 4.02 99.91393020000007 3.367 136.10237999999998 3.352 161.2274261 3.499 166.88849770000007 12.197 179.06840459999995 3.579 129.3555168 3.386 161.91532519999996 3.612 150.44499160000004 4.285 125.70462490000006 2.503 113.40904859999999 3.387 164.278717 11.229 95.3279829 2.597 135.7872343 4.419 160.70941080000003 3.254 116.54339389999996 3.451 120.51688719999996 3.391 106.14380110000003 3.456 130.50603370000002 3.434 95.94153170000001 2.623)
Error minima by case: (8.2529 1 8.0 1 4.863 8 26.3277 8 13.9741 1 3.5616 1 0.0 0 2.8456 1 14.0 1 16.7998 9 50.5582 1 35.0 1 18.0 2 35.0 2 1.9643 1 18.0 1 1.3554 8 0.0 0 19.2664 2 0.1584 1 4.7931 1 26.0 1 9.0 1 24.0166 1 0.4293 1)
Average genome size in population (length): 55.943
Average program size in population (points): 56.943
Average percent parens in population: 0.018
Minimum age in population: 110.5561689787681
Maximum age in population: 114.8562848775422
Average age in population: 112.9936141449506
Median age in population: 113.0643823048653
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.067
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 110593920
--- Timings ---
Current time: 1529616191858 milliseconds
Total Time:         254.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        98.8 seconds, 38.9%
Fitness Testing:    122.5 seconds, 48.2%
Report:              32.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_mod} {:instruction float_swap} {:instruction float_yank} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_mod} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_pop})
Best program: (integer_mod integer_sub integer_mod integer_add float_dup_items integer_add -48 integer_mod float_swap float_yank in1 float_swap integer_flush integer_stackdepth float_shove float_inc float_swap float_inc float_rot float_stackdepth float_sub float_div float_inc float_swap float_inc integer_stackdepth float_stackdepth integer_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_stackdepth integer_flush integer_mod float_inc float_min float_inc float_rot float_stackdepth integer_inc integer_mod float_inc integer_mult float_stackdepth print_float float_inc in2 float_inc float_pop)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3435.3510025000005
Median total errors in population: 1327.0
Error averages by case: (140.13104320000002 3.407 100.93346639999999 3.288 125.164967 10.543 169.1224116 11.284 144.38650239999998 3.383 121.22325920000002 4.041 98.08095110000002 3.289 134.39110629999996 3.269 162.42646649999998 3.438 167.39190089999997 12.241 177.633514 3.494 125.7695197 3.295 159.45739980000002 3.552 146.34339970000005 4.212 123.8563124 2.425 110.13933229999999 3.302 161.72588510000003 11.233 93.4533883 2.499 133.70642310000002 4.331 158.05665660000003 3.193 114.94507049999997 3.424 117.00406679999999 3.295 104.24349120000002 3.389 132.49612199999999 3.348 97.53934640000003 2.554)
Error minima by case: (12.6777 1 8.0 1 0.25 8 31.5326 8 9.2118 1 4.4384 1 0.0 0 0.4349 1 2.1167 1 3.942 8 41.3481 1 6.6254 1 15.0382 2 22.0834 2 2.6486 1 0.8787 1 2.3554 9 0.0 0 22.2664 2 0.1784 1 7.7931 1 26.0 1 9.3181 1 16.0166 1 0.1148 1)
Average genome size in population (length): 55.906
Average program size in population (points): 56.906
Average percent parens in population: 0.018
Minimum age in population: 111.6415308724144
Maximum age in population: 116.3132922850497
Average age in population: 114.4425270800778
Median age in population: 114.4822811351853
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.062
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 111991595
--- Timings ---
Current time: 1529616194988 milliseconds
Total Time:         257.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.1 seconds, 38.9%
Fitness Testing:    124.0 seconds, 48.2%
Report:              33.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_yank} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction integer_min} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_shove} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_max} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction float_rot})
Best program: (float_stackdepth integer_add integer_yankdup integer_flush float_yank float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc integer_min float_shove float_div float_inc float_rot float_shove float_div integer_inc float_yankdup integer_inc float_inc float_yank float_inc float_rot float_shove integer_yankdup float_inc float_swap float_inc float_rot float_stackdepth float_shove integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_max float_inc float_swap float_inc integer_inc float_rot float_stackdepth print_float float_inc float_rot)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3429.3442648000005
Median total errors in population: 1327.0
Error averages by case: (139.80161599999997 3.381 100.9639634 3.274 125.63232169999999 10.539 169.3582053 11.271 144.61709309999998 3.381 119.41423109999998 4.052 97.73496420000002 3.263 134.59939630000005 3.264 161.3590585 3.423 166.91356080000003 12.27 177.4899151 3.493 125.54250190000003 3.294 159.0868892 3.542 145.8214331 4.217 123.99406560000004 2.418 109.72374429999999 3.276 162.35157640000003 11.257 93.00918479999999 2.496 133.46987529999998 4.339 158.57547839999998 3.171 114.6391691 3.395 117.09730019999996 3.281 104.18200719999999 3.376 131.67261590000004 3.35 96.73809790000003 2.533)
Error minima by case: (6.7219 1 0.4611 1 8.8361 9 16.6178 8 14.6828 1 5.4384 1 0.0 0 6.6475 1 16.0 1 2.942 8 41.3481 1 7.6254 1 20.0 1 22.0834 2 5.9643 1 0.5344 1 4.3186 10 0.0 0 25.3602 2 0.1784 1 17.0 1 10.1436 1 9.0 1 3.1487 1 1.4293 1)
Average genome size in population (length): 55.581
Average program size in population (points): 56.581
Average percent parens in population: 0.018
Minimum age in population: 113.3268917721241
Maximum age in population: 117.8665292460008
Average age in population: 115.9241260326423
Median age in population: 115.9597949922117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.063
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 113381170
--- Timings ---
Current time: 1529616198096 milliseconds
Total Time:         260.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.3 seconds, 38.9%
Fitness Testing:    125.5 seconds, 48.2%
Report:              33.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_yank} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction integer_min} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction integer_mult} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_shove} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_max} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction float_rot})
Best program: (float_stackdepth integer_add integer_yankdup integer_flush float_yank float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc integer_min float_shove float_div float_inc integer_mult float_shove float_div integer_inc float_yankdup integer_inc float_inc float_yank float_inc float_rot float_shove integer_yankdup float_inc float_swap float_inc float_rot float_stackdepth float_shove integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_max float_inc float_swap float_inc integer_inc float_rot float_stackdepth print_float float_inc float_rot)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2992.6631125999997
Median total errors in population: 1327.0
Error averages by case: (121.47413409999997 3.157 84.41222609999998 3.071 109.24831219999997 10.479 152.2036579 11.196 126.68994769999998 3.116 101.69624480000002 3.82 78.41990660000002 3.002 116.43807129999999 3.041 146.38831630000004 3.204 149.86826129999997 12.232 160.0064912 3.243 109.85361769999999 3.077 144.02578089999994 3.337 130.43199820000004 3.993 105.59413610000001 2.177 93.73547709999998 3.089 146.77863209999998 11.19 73.86135579999998 2.232 115.00101850000001 4.09 142.9470555 2.987 95.71219369999997 3.14 100.92785419999996 3.083 85.36568099999998 3.131 113.29119850000001 3.13 77.76854380000003 2.306)
Error minima by case: (10.6777 1 4.0156 1 7.2331 9 21.0945 9 18.6671 1 11.4384 1 0.6242 1 7.1781 1 16.0 1 48.5261 8 41.3481 1 12.7564 1 20.0 1 22.0834 2 3.4668 1 0.8787 1 4.3554 9 0.0 0 24.2664 2 0.1279 1 9.7931 1 14.6203 1 12.0 1 9.0166 1 0.4293 1)
Average genome size in population (length): 54.433
Average program size in population (points): 55.433
Average percent parens in population: 0.019
Minimum age in population: 114.8790800025697
Maximum age in population: 119.206900675103
Average age in population: 117.3647332028182
Median age in population: 117.4110634924322
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.054
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 114742020
--- Timings ---
Current time: 1529616201179 milliseconds
Total Time:         263.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.5 seconds, 38.9%
Fitness Testing:    127.0 seconds, 48.2%
Report:              33.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction -95.02835022363054} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction float_add} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat})
Best program: (integer_mod -95.02835022363054 float_rot float_pop in1 float_swap integer_flush float_add float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth float_inc float_rot integer_dup_items integer_inc integer_dec float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_yank float_stackdepth integer_swap print_float float_inc integer_fromfloat)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2955.580702699999
Median total errors in population: 1327.0
Error averages by case: (119.7719229 3.238 83.21268309999999 3.138 107.90570129999998 10.478 150.01484750000003 11.205 124.58229869999997 3.228 99.90743600000005 3.88 77.12718080000005 3.113 114.29745220000001 3.138 145.291251 3.268 147.77783299999996 12.217 158.4261839 3.328 108.77150990000001 3.154 143.1117425 3.416 129.82504060000002 4.056 103.52774080000005 2.274 92.61846200000001 3.155 145.10640700000002 11.207 72.45242890000003 2.332 113.51581839999999 4.194 141.3023562 3.057 94.31793169999995 3.217 99.7215985 3.149 83.46110400000002 3.227 111.4681975 3.205 75.78957430000004 2.402)
Error minima by case: (9.6777 1 8.0 1 5.863 8 30.5326 9 14.6828 1 3.4384 1 1.0 1 5.1781 1 29.4077 1 2.942 8 41.3481 1 7.7564 1 42.3291 2 22.0834 2 2.9643 1 0.8787 1 2.3554 9 0.0 0 20.3602 2 0.1661 1 7.8585 1 23.2098 1 10.0 1 17.0166 1 0.1072 1)
Average genome size in population (length): 53.982
Average program size in population (points): 54.982
Average percent parens in population: 0.019
Minimum age in population: 116.2031337355871
Maximum age in population: 121.0499255751351
Average age in population: 118.8139442334205
Median age in population: 118.8821075486239
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.061
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 116091620
--- Timings ---
Current time: 1529616204177 milliseconds
Total Time:         266.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.6 seconds, 38.9%
Fitness Testing:    128.5 seconds, 48.2%
Report:              34.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_yank} {:instruction float_swap} {:instruction print_float} {:instruction float_swap} {:instruction float_swap} {:instruction float_pop} {:instruction in1} {:instruction in2} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction in2} {:instruction float_inc} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction print_float})
Best program: (integer_mod integer_sub integer_mod float_yank float_swap print_float float_swap float_swap float_pop in1 in2 integer_flush integer_stackdepth float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc in2 float_inc float_rot integer_shove float_inc float_div float_inc integer_mult float_inc float_rot integer_dup integer_inc float_swap float_inc float_rot print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 3357.6570691999996
Median total errors in population: 1327.0
Error averages by case: (137.32886159999995 3.433 97.39214539999999 3.31 121.35723919999995 10.514 166.0651563 11.256 141.1907267 3.403 117.39206499999997 4.003 95.59592740000004 3.318 131.22869199999997 3.32 159.03582200000002 3.443 164.70374799999993 12.228 175.05189609999996 3.513 122.53872690000003 3.317 156.10662210000004 3.583 143.55091410000003 4.238 120.77406179999998 2.464 106.87209489999998 3.336 157.67413059999998 11.232 90.84560739999999 2.544 131.2726296 4.382 153.92876680000003 3.2 112.4265477 3.431 113.45010050000002 3.328 101.34436030000002 3.432 129.62732899999997 3.418 94.67589780000002 2.581)
Error minima by case: (9.6777 1 2.5033 1 7.863 8 31.5326 9 19.0259 1 3.4384 1 1.6242 1 3.8456 1 15.0 1 3.942 8 0.9716 1 7.6254 1 19.0 1 37.0 2 4.9643 1 14.4968 1 3.664 9 0.0 0 18.3318 2 0.364 1 3.8585 1 1.1943 1 1.9655 1 13.0166 1 0.1072 1)
Average genome size in population (length): 53.527
Average program size in population (points): 54.527
Average percent parens in population: 0.019
Minimum age in population: 117.9192534689183
Maximum age in population: 122.2288409144774
Average age in population: 120.2674161179756
Median age in population: 120.3134501836937
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.076
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 117429820
--- Timings ---
Current time: 1529616207272 milliseconds
Total Time:         269.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.9 seconds, 38.9%
Fitness Testing:    130.0 seconds, 48.2%
Report:              34.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_860} {:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_max} {:instruction float_yankdup} {:instruction float_yank} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_min} {:instruction float_div} {:instruction float_shove} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction integer_inc} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float})
Best program: (tagged_860 integer_mod integer_add float_swap float_div float_inc float_swap float_div float_inc integer_div float_pop in1 float_swap integer_flush integer_max float_yankdup float_yank integer_flush float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc integer_dup float_stackdepth float_min float_div float_shove float_dup_items float_inc float_rot float_inc integer_inc float_stackdepth integer_flush integer_stackdepth float_shove float_div float_inc float_swap float_inc float_rot float_stackdepth integer_inc float_stackdepth integer_inc integer_mod float_inc integer_min float_inc float_rot float_stackdepth integer_flush integer_mod float_inc float_rot float_stackdepth print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3084.838315300001
Median total errors in population: 1327.0
Error averages by case: (125.83717729999996 3.312 87.21210789999998 3.206 111.96063519999994 10.52 155.36123139999998 11.235 130.37203159999993 3.281 106.00927670000002 4.053 83.61685650000004 3.188 120.14578600000002 3.213 148.60596170000002 3.31 153.16232949999994 12.228 164.2272199 3.411 112.39988840000001 3.197 146.27816819999995 3.462 133.31639950000002 4.106 109.46557900000006 2.345 96.34138779999996 3.197 149.01019329999997 11.222 78.86716860000001 2.409 119.74698349999994 4.267 145.18176289999994 3.103 100.71878329999996 3.315 103.75313849999999 3.213 89.63543430000003 3.295 117.68943990000001 3.289 82.06637440000003 2.48)
Error minima by case: (6.7287 1 7.3378 1 7.8631 9 29.5326 9 3.9827 1 27.0 1 1.0 1 2.8456 1 16.0 1 1.942 8 8.6057 1 1.7303 1 20.0 1 25.0834 2 5.0477 1 2.1213 1 0.3943 9 0.0 0 21.3602 2 0.1784 1 7.7931 1 8.4076 1 0.0345 1 25.1282 1 1.2862 1)
Average genome size in population (length): 53.401
Average program size in population (points): 54.401
Average percent parens in population: 0.019
Minimum age in population: 119.0669863286973
Maximum age in population: 123.7622701840463
Average age in population: 121.760269060115
Median age in population: 121.8187200651392
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.075
Error (vector) diversity:			 0.079
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 118764945
--- Timings ---
Current time: 1529616210466 milliseconds
Total Time:         272.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       106.1 seconds, 38.9%
Fitness Testing:    131.5 seconds, 48.2%
Report:              35.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_inc} {:instruction print_float} {:instruction integer_mod} {:instruction integer_add} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_inc})
Best program: (integer_mod integer_add float_pop in1 float_swap integer_fromfloat integer_inc print_float integer_mod integer_add float_pop in1 float_swap integer_stackdepth integer_inc float_div float_inc float_swap float_inc float_swap float_inc float_rot float_inc integer_mod integer_stackdepth float_shove float_div float_inc float_min float_inc integer_shove float_stackdepth float_stackdepth integer_inc integer_mod float_inc float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_inc)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2987.4773336999997
Median total errors in population: 1327.0
Error averages by case: (122.58830079999997 3.25 82.6433246 3.121 107.17713559999999 10.452 152.4587352 11.213 127.28064969999994 3.222 102.0142353 3.792 80.55307030000003 3.141 116.98665880000004 3.158 143.17086250000003 3.255 149.868861 12.179 161.48252689999993 3.342 107.8281472 3.144 141.62342109999994 3.368 128.74000520000004 4.045 106.29502290000006 2.282 91.375453 3.156 144.63923820000002 11.206 75.7156729 2.336 116.80699609999999 4.213 140.80200509999995 3.052 97.66501509999996 3.239 99.16325999999998 3.147 86.44898660000001 3.243 113.8857309 3.217 78.09401870000005 2.397)
Error minima by case: (7.953 1 10.0 1 7.863 7 28.5326 9 6.979 1 25.4384 1 0.0 0 2.8456 1 14.0 1 0.942 8 40.3481 1 7.6254 1 18.0 1 21.0834 2 4.9643 1 0.8787 1 4.3554 9 0.0 0 23.3318 2 0.141 1 8.8585 1 26.6114 1 10.6893 1 10.4465 1 0.4293 1)
Average genome size in population (length): 53.06
Average program size in population (points): 54.06
Average percent parens in population: 0.019
Minimum age in population: 120.5291304223881
Maximum age in population: 125.0813443468769
Average age in population: 123.1579957817731
Median age in population: 123.183278728815
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.822
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.069
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 120091445
--- Timings ---
Current time: 1529616213568 milliseconds
Total Time:         275.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.3 seconds, 38.9%
Fitness Testing:    133.0 seconds, 48.2%
Report:              35.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction float_yankdup} {:instruction -95.02835022363054} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction 71.61811866364366} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_rot})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 float_yankdup -95.02835022363054 float_rot float_pop in1 float_swap float_rot float_pop in1 integer_stackdepth integer_flush float_swap integer_flush integer_mod integer_swap integer_dup_times float_inc float_swap float_inc float_yank float_stackdepth integer_sub float_frominteger float_dup_times float_div float_inc float_swap float_inc float_rot integer_swap integer_inc float_swap float_inc float_rot integer_inc integer_mod float_rot 71.61811866364366 float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc integer_shove float_inc integer_add integer_yankdup integer_div float_inc float_rot float_stackdepth print_float integer_rot integer_fromfloat integer_dup_items integer_dup_items float_rot)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2942.4681946
Median total errors in population: 1327.0
Error averages by case: (120.40361399999999 3.318 81.44298810000001 3.219 105.72974399999998 10.474 149.07420599999998 11.231 123.96991869999995 3.301 99.99610490000002 4.04 78.37160460000004 3.2 113.78705500000005 3.199 143.32317910000003 3.344 147.32532169999996 12.178 159.41929909999996 3.409 107.18795289999998 3.227 141.19621319999996 3.471 128.88160929999998 4.12 103.1954595 2.364 90.88340710000001 3.247 142.502533 11.195 73.51693110000002 2.419 114.74707689999997 4.263 138.62630620000004 3.112 95.56490900000003 3.317 97.78344020000002 3.23 83.647889 3.297 111.9556587 3.277 76.02277330000007 2.461)
Error minima by case: (9.6777 1 4.0033 1 3.2578 8 18.864 8 6.6181 1 4.4384 1 0.0 0 5.8002 1 14.3819 1 3.942 8 56.5582 1 5.6254 1 10.3819 1 6.6181 2 4.1156 1 1.8282 1 4.1736 9 0.0 0 25.2664 2 0.0222 1 10.7931 1 0.3057 1 0.4655 1 12.0166 1 0.4293 1)
Average genome size in population (length): 53.347
Average program size in population (points): 54.347
Average percent parens in population: 0.019
Minimum age in population: 121.7293266912958
Maximum age in population: 126.4488116918483
Average age in population: 124.5843684484386
Median age in population: 124.6549902654068
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.078
Error (vector) diversity:			 0.086
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 121425145
--- Timings ---
Current time: 1529616216696 milliseconds
Total Time:         279.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.5 seconds, 38.9%
Fitness Testing:    134.5 seconds, 48.2%
Report:              35.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_rot} {:instruction float_inc} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction float_inc} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_div} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_dup_items})
Best program: (float_swap float_dup_items integer_add float_rot float_inc in1 float_swap integer_flush float_inc float_swap integer_sub integer_mod float_pop in1 float_swap integer_flush integer_stackdepth integer_div float_div float_inc float_swap integer_flush float_inc float_mult integer_dup float_swap float_div float_shove float_stackdepth float_inc float_swap float_inc integer_dec float_stackdepth integer_inc float_stackdepth float_swap float_inc integer_mult float_inc float_swap float_inc integer_stackdepth float_inc float_inc float_rot float_stackdepth print_float integer_fromfloat integer_dup_items integer_inc integer_dup_items)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3144.8938961000003
Median total errors in population: 1327.0
Error averages by case: (127.47405969999996 3.304 90.29906809999993 3.184 114.7474413 10.491 157.43715790000002 11.213 132.16790899999992 3.308 108.49530509999997 4.08 85.12798230000007 3.211 122.06237350000006 3.221 152.7045980000001 3.347 155.83552559999995 12.193 165.44648999999998 3.419 115.56441559999998 3.226 149.69805359999992 3.469 136.44535300000007 4.118 111.40401960000005 2.349 99.66112779999997 3.221 151.9290705 11.181 80.53657200000002 2.442 120.99897699999995 4.269 148.16839360000003 3.083 102.00383999999998 3.318 106.68258579999998 3.21 91.51663550000002 3.299 119.82341800000002 3.273 84.75552360000005 2.479)
Error minima by case: (10.6777 1 8.0 1 6.8631 9 28.5326 9 5.9827 1 3.4384 1 0.0 0 1.8456 1 28.4077 1 0.942 8 40.3481 1 7.6254 1 41.3291 2 21.0834 2 4.0477 1 0.8787 1 4.3186 9 0.0 0 22.2664 2 0.0355 1 7.7931 1 10.4076 1 7.9541 1 13.0166 1 0.7138 1)
Average genome size in population (length): 53.158
Average program size in population (points): 54.158
Average percent parens in population: 0.019
Minimum age in population: 123.8137183053566
Maximum age in population: 127.8656108344829
Average age in population: 126.0138892687723
Median age in population: 126.0887597279032
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.064
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 122754095
--- Timings ---
Current time: 1529616219753 milliseconds
Total Time:         282.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       109.7 seconds, 38.9%
Fitness Testing:    135.9 seconds, 48.2%
Report:              36.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_add} {:instruction float_mult} {:instruction integer_pop} {:instruction float_rot} {:instruction float_rot} {:instruction float_pop} {:instruction -49} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction tagged_740} {:instruction integer_dec} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction 25} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_swap} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_add})
Best program: (integer_sub integer_add float_mult integer_pop float_rot float_rot float_pop -49 float_frominteger float_rot float_pop in1 float_pop in1 float_inc integer_stackdepth tagged_740 integer_dec float_shove float_div float_inc float_inc float_inc float_stackdepth integer_inc 25 float_inc integer_mult float_inc float_swap float_inc integer_stackdepth float_inc float_swap float_stackdepth integer_add integer_inc integer_rot float_inc float_rot float_stackdepth print_float integer_rot integer_fromfloat float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3198.9605905000008
Median total errors in population: 1327.0
Error averages by case: (129.572452 3.285 92.42291709999999 3.201 117.02334729999998 10.491 160.73771759999997 11.221 135.71635119999996 3.254 108.52118949999999 3.946 87.78289739999998 3.138 125.46414409999997 3.164 152.80563780000003 3.307 157.66327189999998 12.221 167.89419639999997 3.362 117.55680140000004 3.184 151.1645789 3.453 138.2262071 4.107 114.67131600000003 2.306 101.41615129999998 3.196 154.22740660000002 11.194 83.3144833 2.385 123.69773419999999 4.23 150.50343869999998 3.091 104.77916510000001 3.267 108.8673985 3.189 94.5724644 3.261 121.00029139999998 3.26 86.2000313 2.446)
Error minima by case: (9.5459 1 8.0 1 5.2578 2 26.3277 2 15.6828 1 1.2771 1 0.0 0 7.1781 1 30.4077 1 1.942 2 3.5543 1 9.6254 1 11.3832 2 58.0 2 4.9643 1 12.4968 1 4.3554 2 0.0 0 22.2664 2 0.1784 1 7.7931 1 22.2098 1 12.0 1 1.1773 1 0.4293 1)
Average genome size in population (length): 53.367
Average program size in population (points): 54.367
Average percent parens in population: 0.019
Minimum age in population: 124.8137183053566
Maximum age in population: 129.6528752200555
Average age in population: 127.4444516359208
Median age in population: 127.5185186460312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.065
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 124088270
--- Timings ---
Current time: 1529616222765 milliseconds
Total Time:         285.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.9 seconds, 38.9%
Fitness Testing:    137.4 seconds, 48.2%
Report:              36.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction float_rot} {:instruction -95.02835022363054} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mod} {:instruction float_rot} {:instruction 71.61811866364366} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_rot})
Best program: (integer_mod integer_add float_swap float_dup_items integer_add -48 float_rot -95.02835022363054 float_rot float_pop in1 float_swap float_rot float_pop in1 integer_stackdepth integer_flush float_swap integer_flush integer_mod integer_swap integer_dup_times float_inc float_swap float_inc float_yank float_stackdepth integer_sub float_frominteger float_dup_times float_div float_inc float_swap float_inc float_rot integer_swap integer_inc float_swap float_inc float_rot integer_mult integer_mod float_rot 71.61811866364366 float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc integer_shove float_inc integer_add integer_yankdup integer_div float_inc float_rot float_stackdepth print_float integer_rot integer_fromfloat integer_dup_items integer_dup_items float_rot)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3317.1041056000004
Median total errors in population: 1327.0
Error averages by case: (133.8696741 3.42 97.83286659999996 3.3 122.1128831 10.501 164.43936279999994 11.249 139.77081249999995 3.407 112.1975664 4.106 93.60371440000003 3.316 129.6537927 3.306 155.70038550000004 3.431 160.49823940000005 12.213 173.21065219999997 3.511 122.46283890000002 3.305 155.602824 3.56 143.6098139 4.21 119.04875920000005 2.445 106.1939168 3.331 159.2876187 11.227 88.83116949999997 2.52 129.3256937 4.373 155.53665300000003 3.193 110.48947779999995 3.438 114.42211549999999 3.293 99.24881220000003 3.416 124.61288670000002 3.388 89.51457600000005 2.568)
Error minima by case: (9.6777 1 9.505 1 3.2578 8 9.8285 7 4.2694 1 5.4384 1 0.0 0 1.8664 1 14.0 2 0.942 8 41.3481 1 1.4803 1 11.3832 2 22.0834 2 0.5267 1 0.8787 1 4.3554 7 0.0 0 25.2664 2 0.1661 1 10.7931 1 12.9585 1 12.0 1 2.1237 1 0.4293 1)
Average genome size in population (length): 53.813
Average program size in population (points): 54.813
Average percent parens in population: 0.019
Minimum age in population: 125.9169839738285
Maximum age in population: 130.9625706541196
Average age in population: 128.9183226077972
Median age in population: 128.977564861532
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.073
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 125433595
--- Timings ---
Current time: 1529616225923 milliseconds
Total Time:         288.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.1 seconds, 38.9%
Fitness Testing:    139.0 seconds, 48.2%
Report:              37.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_div} {:instruction float_swap} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_pop} {:instruction float_swap} {:instruction float_dup_times} {:instruction -48} {:instruction integer_rot} {:instruction integer_dec} {:instruction -50} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_pop} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup} {:instruction float_swap} {:instruction print_integer} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_min} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_mult} {:instruction float_yank} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_div} {:instruction integer_swap} {:instruction integer_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction float_inc})
Best program: (float_sin integer_div float_swap integer_flush float_frominteger float_rot float_pop in1 float_pop float_swap float_dup_times -48 integer_rot integer_dec -50 integer_flush -94.09373270553453 float_rot float_pop in1 integer_pop integer_div float_inc float_inc float_rot integer_dup float_swap print_integer float_shove float_stackdepth float_inc float_swap float_inc float_min float_div float_inc float_swap float_inc float_rot float_mult float_yank integer_mult float_inc integer_dup_times float_inc float_div integer_swap integer_inc integer_min float_inc float_rot float_stackdepth print_float float_inc float_inc)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3527.6290954000006
Median total errors in population: 1327.0
Error averages by case: (143.6304773 3.371 104.77147639999998 3.276 129.32356139999996 10.566 174.03956129999997 11.279 149.4125161 3.362 122.16075110000001 4.059 102.23626550000003 3.239 139.4401891 3.27 163.05478330000008 3.408 170.30134730000003 12.253 181.73708309999998 3.475 129.06851880000002 3.274 162.20703940000004 3.557 149.63144259999999 4.193 128.84977270000002 2.408 113.0096384 3.301 166.50814929999999 11.258 97.73421339999999 2.491 137.91159670000002 4.338 162.97759329999994 3.178 119.11922609999999 3.384 120.99506940000002 3.266 108.9926141 3.363 134.86515519999998 3.346 100.18405410000004 2.552)
Error minima by case: (19.2299 1 9.0 1 7.33 7 17.0464 9 5.0383 1 5.4384 1 1.0 1 6.2947 1 17.0 1 0.942 8 33.1739 1 7.6254 1 21.0 2 22.095 2 4.1327 1 0.8404 1 3.9388 9 0.0 0 33.4899 2 0.1812 1 18.0 1 19.6366 1 0.9739 1 15.0166 1 0.8495 1)
Average genome size in population (length): 53.827
Average program size in population (points): 54.827
Average percent parens in population: 0.019
Minimum age in population: 126.9169839738285
Maximum age in population: 132.1828952833196
Average age in population: 130.3539286245874
Median age in population: 130.3907621626451
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.062
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 126779320
--- Timings ---
Current time: 1529616229101 milliseconds
Total Time:         291.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.4 seconds, 38.9%
Fitness Testing:    140.4 seconds, 48.2%
Report:              37.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction integer_div} {:instruction float_pop} {:instruction float_flush} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_min} {:instruction float_mult} {:instruction float_swap} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction print_float} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_flush})
Best program: (integer_mod integer_add float_swap integer_div float_pop float_flush float_dup float_dup_items float_mod float_dup_items integer_add -49 float_frominteger integer_swap float_pop integer_dup_times float_pop in1 float_inc integer_stackdepth integer_flush integer_dec float_shove float_div float_inc float_inc float_inc float_stackdepth integer_inc float_inc float_rot float_stackdepth float_inc integer_min float_mult float_swap float_rot float_stackdepth float_swap float_inc float_rot float_stackdepth integer_stackdepth float_inc integer_stackdepth float_stackdepth integer_inc integer_mod float_inc float_rot print_float integer_add float_stackdepth float_flush)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3703.9081017999993
Median total errors in population: 1327.0
Error averages by case: (152.06344579999995 3.516 110.30020519999997 3.396 134.70154150000002 10.531 180.77706529999998 11.289 157.28934939999996 3.513 129.87746860000001 4.035 111.22094990000004 3.419 146.4310388 3.406 168.70325969999996 3.541 177.4453827 12.203 188.72955989999997 3.63 135.65376469999998 3.405 168.08388810000002 3.657 156.52921320000002 4.308 136.2069704 2.561 120.42564929999999 3.413 170.40657199999998 11.261 106.38444619999999 2.662 146.21417729999993 4.458 166.76747999999995 3.28 127.65815369999997 3.516 126.57149159999996 3.4 116.8538531 3.512 142.4867271 3.493 108.05444830000005 2.667)
Error minima by case: (34.416 1 6.1162 1 5.2578 8 26.3277 9 15.6828 1 4.4384 1 0.0 0 3.8002 1 16.0 1 1.942 8 87.0 1 7.6254 1 20.0 1 37.0 2 1.9643 1 12.4968 1 4.1075 10 0.0 0 38.0 2 0.1784 1 17.0 1 16.7209 1 9.0 1 16.0166 1 0.8928 1)
Average genome size in population (length): 53.312
Average program size in population (points): 54.312
Average percent parens in population: 0.019
Minimum age in population: 129.0685728244339
Maximum age in population: 133.5464534829693
Average age in population: 131.7307687492241
Median age in population: 131.7868410977711
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.076
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 128112145
--- Timings ---
Current time: 1529616232216 milliseconds
Total Time:         294.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.6 seconds, 38.9%
Fitness Testing:    141.9 seconds, 48.2%
Report:              37.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_add} {:instruction float_swap} {:instruction in1} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_add} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction -77} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_inc})
Best program: (integer_sub integer_add float_swap in1 integer_dup_items float_pop in1 float_div float_inc integer_mod integer_add float_pop in1 float_swap integer_stackdepth integer_inc float_div float_inc float_swap float_inc float_swap float_inc float_rot float_inc integer_mod integer_stackdepth float_shove float_div float_inc float_min float_inc -77 float_stackdepth float_stackdepth integer_inc integer_mod float_inc float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_fromfloat integer_inc)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3055.0338704000005
Median total errors in population: 1327.0
Error averages by case: (123.7068119 3.146 87.30179770000001 3.086 112.314773 10.513 155.24560499999998 11.239 129.88328969999998 3.16 103.00730570000002 3.637 81.0550472 3.018 119.7387172 3.077 146.91084450000002 3.183 151.42772899999997 12.254 162.489949 3.23 112.30802239999997 3.1 146.07423300000002 3.352 132.66415130000001 4.023 108.95163050000002 2.195 95.9993297 3.11 149.80048400000004 11.235 76.6842771 2.268 117.57881880000001 4.138 146.06445209999998 3.003 98.3271751 3.154 103.66048719999999 3.084 88.623584 3.149 114.7421845 3.122 79.65517080000001 2.342)
Error minima by case: (9.6777 1 4.8209 1 8.7091 9 28.5326 6 14.6828 1 8.4384 1 0.0 0 6.3064 1 7.0392 1 0.942 8 44.6519 1 7.6254 1 19.9606 1 37.0 2 5.5197 1 11.4968 1 4.3186 10 0.0 0 13.3602 2 0.1661 1 1.1132 1 14.9528 1 8.0165 1 12.0166 1 0.1072 1)
Average genome size in population (length): 53.535
Average program size in population (points): 54.535
Average percent parens in population: 0.019
Minimum age in population: 130.8114008928089
Maximum age in population: 135.3953715711523
Average age in population: 133.2044427543716
Median age in population: 133.2112841639232
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.06
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 129450520
--- Timings ---
Current time: 1529616235382 milliseconds
Total Time:         297.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.8 seconds, 38.9%
Fitness Testing:    143.5 seconds, 48.2%
Report:              38.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_add} {:instruction float_rot} {:instruction float_rot} {:instruction float_pop} {:instruction -49} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_swap} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_rot} {:instruction float_swap} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_sub})
Best program: (integer_mod integer_add float_pop in1 float_swap integer_fromfloat float_pop in1 integer_add float_rot float_rot float_pop -49 float_frominteger float_rot float_pop in1 float_pop in1 float_inc integer_stackdepth integer_flush integer_dec float_shove float_div float_inc float_inc float_inc float_stackdepth integer_inc float_swap float_inc integer_mult float_inc float_swap float_inc integer_stackdepth float_inc float_swap float_stackdepth integer_add integer_inc integer_rot float_inc float_rot float_stackdepth print_float integer_rot float_swap float_stackdepth float_rot float_dec float_stackdepth print_float float_inc integer_sub)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3592.3498758
Median total errors in population: 1327.0
Error averages by case: (144.31577379999996 3.519 109.64204219999995 3.401 133.53223549999998 10.489 175.42739519999998 11.213 150.63972649999997 3.511 122.02990739999998 4.031 104.76544130000005 3.429 140.71949130000002 3.409 165.67990050000006 3.545 170.43934090000005 12.175 183.70344699999998 3.666 134.6826082 3.412 167.28964899999997 3.663 155.04906500000004 4.361 130.28256170000006 2.559 118.05623899999996 3.413 169.74591679999997 11.21 100.26163919999998 2.671 140.15539419999993 4.492 166.03598540000004 3.279 121.47849189999997 3.528 125.62560239999996 3.415 110.87374659999999 3.516 134.2403995 3.512 99.58987530000006 2.669)
Error minima by case: (11.6777 1 2.0033 1 6.8631 9 33.0855 9 18.0464 1 3.4384 1 0.0 0 6.2947 1 16.0 1 60.6761 8 41.3481 1 12.7564 1 20.0 1 22.0834 2 4.0477 1 0.8787 1 3.9061 9 0.0 0 23.2664 2 0.1047 1 8.7931 1 0.3057 1 0.4655 1 17.0166 1 0.4293 1)
Average genome size in population (length): 52.697
Average program size in population (points): 53.697
Average percent parens in population: 0.019
Minimum age in population: 131.8114008928089
Maximum age in population: 136.6117266245608
Average age in population: 134.6604427465759
Median age in population: 134.7200435676133
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.057
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 130768045
--- Timings ---
Current time: 1529616238666 milliseconds
Total Time:         300.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.2 seconds, 38.9%
Fitness Testing:    144.9 seconds, 48.2%
Report:              38.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction print_float} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_shove} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_sub})
Best program: (integer_mod float_dup_items integer_add float_swap float_dup_items print_float float_pop in1 float_swap integer_flush integer_stackdepth float_rot float_div float_inc float_swap integer_stackdepth integer_flush integer_dec float_shove integer_yank float_inc float_inc float_inc float_stackdepth float_inc float_swap float_inc float_swap float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth float_stackdepth integer_mod float_inc float_rot integer_mult float_stackdepth print_float float_inc integer_sub)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3042.7641267
Median total errors in population: 1327.0
Error averages by case: (125.6514126 3.182 83.52678429999999 3.08 108.24225879999999 10.483 155.64893089999998 11.227 130.26564799999997 3.169 104.73899500000005 3.789 82.51144570000004 3.045 120.11362079999999 3.071 146.166383 3.196 153.9722823 12.206 163.68924829999997 3.263 108.89230029999997 3.089 143.10402599999995 3.331 129.65760780000002 4.004 109.37522850000002 2.217 92.91319299999998 3.094 145.64564650000003 11.206 77.85758379999999 2.268 118.96224980000002 4.14 141.81470599999997 2.995 99.73352829999997 3.167 99.99200479999996 3.087 89.3148257 3.168 117.60644820000003 3.152 82.40676830000005 2.332)
Error minima by case: (0.8183 1 9.0 1 7.33 9 11.5227 2 18.0159 1 3.6009 1 0.6242 1 6.1681 1 19.0 1 3.942 2 55.5582 1 7.6254 1 23.0 2 40.0 1 3.9543 1 5.5131 1 4.4946 9 0.0 0 24.2664 2 0.0 0 9.7931 1 17.9968 1 10.0 1 16.8541 1 0.1072 1)
Average genome size in population (length): 52.591
Average program size in population (points): 53.591
Average percent parens in population: 0.019
Minimum age in population: 133.3356944103997
Maximum age in population: 137.8780690815147
Average age in population: 136.0987209975754
Median age in population: 136.1604897621968
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.071
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 132082870
--- Timings ---
Current time: 1529616241772 milliseconds
Total Time:         304.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.4 seconds, 38.9%
Fitness Testing:    146.4 seconds, 48.1%
Report:              39.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction integer_add} {:instruction float_swap} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in1} {:instruction float_pop} {:instruction float_swap} {:instruction float_dup_times} {:instruction -48} {:instruction integer_rot} {:instruction integer_add} {:instruction -50} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup} {:instruction float_swap} {:instruction float_div} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_mult} {:instruction float_yank} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_div} {:instruction integer_swap} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction float_inc})
Best program: (integer_mod integer_add integer_add float_swap integer_flush float_frominteger float_rot integer_yankdup in1 float_pop float_swap float_dup_times -48 integer_rot integer_add -50 integer_flush -94.09373270553453 float_rot float_pop in1 integer_sub integer_div float_inc float_inc float_rot integer_dup float_swap float_div float_dup_times float_stackdepth float_inc float_swap float_inc float_min integer_dup float_inc float_swap float_inc float_rot float_mult float_yank integer_mult float_inc integer_mod float_inc float_div integer_swap integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc float_inc)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3259.6338744
Median total errors in population: 1327.0
Error averages by case: (132.6622693 3.299 94.67991079999996 3.201 119.36159039999998 10.527 162.7343882 11.268 137.75375159999996 3.274 110.85443370000002 3.883 90.83564770000002 3.186 127.61771499999999 3.204 154.15083900000002 3.287 159.6271757 12.222 171.10819940000002 3.378 119.95620939999998 3.186 153.1147653 3.427 140.58741570000004 4.1 116.98120990000002 2.334 103.43976119999996 3.211 156.55307959999993 11.249 86.264891 2.403 126.82900179999997 4.261 152.73299979999996 3.115 107.82018319999996 3.298 111.35673849999999 3.198 97.20016300000002 3.271 123.585587 3.279 88.32194820000004 2.443)
Error minima by case: (8.5459 1 8.0 1 7.8717 8 30.0855 9 19.0464 1 25.4384 1 0.0 0 6.2947 1 15.5162 1 3.942 8 40.3481 1 7.6254 1 20.0 1 21.0834 2 4.5646 1 1.8787 1 4.9061 9 0.0 0 26.3602 2 0.1661 1 11.9249 1 23.6114 1 10.0 1 26.9453 1 0.8495 1)
Average genome size in population (length): 52.699
Average program size in population (points): 53.699
Average percent parens in population: 0.019
Minimum age in population: 134.8883009636507
Maximum age in population: 139.6188878919911
Average age in population: 137.5436354636893
Median age in population: 137.6165154702583
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.066
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 133400395
--- Timings ---
Current time: 1529616244831 milliseconds
Total Time:         307.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.6 seconds, 38.9%
Fitness Testing:    147.9 seconds, 48.1%
Report:              39.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_sin} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_yank} {:instruction -48} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_add} {:instruction float_inc} {:instruction float_swap} {:instruction integer_dec} {:instruction float_shove} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction float_mult} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_mult})
Best program: (integer_mod float_sin float_pop float_dup_items float_yank -48 integer_flush integer_dup_items float_pop in1 float_add float_inc float_swap integer_dec float_shove integer_yankdup float_inc float_inc float_inc integer_shove float_swap float_inc integer_mult float_inc float_swap float_inc integer_stackdepth float_inc float_inc float_rot float_stackdepth print_float integer_inc integer_mod float_inc float_dup_items float_stackdepth print_float float_stackdepth print_float float_inc float_mult float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float float_inc float_pop integer_rot integer_mod float_inc float_rot float_stackdepth print_float float_mult)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3254.4872958
Median total errors in population: 1327.0
Error averages by case: (133.94595729999998 3.262 92.37228579999997 3.165 117.50528029999997 10.486 163.7688516 11.21 139.66412079999995 3.266 113.6033334 3.874 91.6926413 3.16 128.62971790000006 3.168 152.044577 3.299 160.6326544 12.21 172.06611969999997 3.371 117.02455150000002 3.187 150.53021119999997 3.423 137.24204520000006 4.098 118.05180080000002 2.31 102.11794799999996 3.179 154.2398977 11.2 86.92795339999996 2.398 128.32400529999995 4.238 150.5524726 3.058 108.89837819999998 3.27 108.87302699999996 3.164 98.06702130000001 3.263 125.0324662 3.233 89.76697790000004 2.421)
Error minima by case: (36.416 1 2.5033 1 7.863 9 6.5619 9 14.6828 1 2.4384 1 0.0 0 6.6475 1 6.1691 1 3.942 8 87.0 1 7.6254 1 18.0 1 35.0 2 4.9643 1 14.4968 1 4.3186 9 0.0 0 38.0 2 0.09 1 17.0 1 1.1943 1 0.9457 1 18.0166 1 0.4293 1)
Average genome size in population (length): 52.319
Average program size in population (points): 53.319
Average percent parens in population: 0.019
Minimum age in population: 136.29790279508
Maximum age in population: 140.9932429577955
Average age in population: 138.9826460545355
Median age in population: 139.0137503138926
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.056
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 134708370
--- Timings ---
Current time: 1529616247954 milliseconds
Total Time:         310.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.8 seconds, 38.9%
Fitness Testing:    149.3 seconds, 48.1%
Report:              40.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_mod} {:instruction float_pop} {:instruction float_flush} {:instruction in1} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_swap} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_add})
Best program: (in1 float_swap integer_flush integer_flush integer_dup float_pop integer_mod float_pop float_flush in1 float_pop in1 float_inc integer_stackdepth integer_flush integer_dup float_shove float_div float_inc float_inc float_inc float_stackdepth integer_inc float_swap float_inc integer_mult float_inc float_swap float_inc integer_stackdepth float_inc float_swap float_stackdepth float_dup_items integer_inc integer_yankdup float_inc float_rot float_stackdepth print_float integer_rot integer_fromfloat float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3214.3472587
Median total errors in population: 1327.0
Error averages by case: (131.62354299999998 3.258 92.44136449999999 3.148 116.9400272 10.491 161.4116033 11.23 136.0338493 3.223 112.30007309999999 3.934 88.38935060000001 3.139 125.96904070000002 3.148 152.7467209 3.257 159.07420350000004 12.217 169.64104079999996 3.343 116.5460784 3.137 150.41301610000002 3.38 136.95832910000001 4.068 115.27442589999998 2.266 100.59463969999997 3.15 154.21810180000003 11.205 83.7607419 2.344 125.28497619999999 4.222 150.44900610000002 3.047 106.29280199999997 3.266 108.86143349999998 3.172 95.240085 3.222 123.63977969999999 3.221 87.76402640000003 2.391)
Error minima by case: (9.6777 1 8.0 1 8.5711 8 28.6658 8 1.0194 1 6.4384 1 0.0 0 5.1164 1 15.0 1 56.2564 8 40.3481 1 4.7564 1 19.0 2 21.0834 2 3.7767 1 1.8787 1 4.3867 9 0.0 0 17.3602 2 0.0222 1 7.7931 1 16.2085 1 9.0 1 13.0166 1 0.322 1)
Average genome size in population (length): 52.57
Average program size in population (points): 53.57
Average percent parens in population: 0.019
Minimum age in population: 137.29790279508
Maximum age in population: 142.6137198715706
Average age in population: 140.4412393283019
Median age in population: 140.4973507284465
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.067
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 136022645
--- Timings ---
Current time: 1529616251176 milliseconds
Total Time:         313.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       122.1 seconds, 38.9%
Fitness Testing:    150.9 seconds, 48.1%
Report:              40.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction integer_rot} {:instruction print_float} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_shove} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction tagged_496} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction in2} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_max} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction print_float})
Best program: (integer_mod integer_mod integer_rot print_float float_pop in1 float_swap integer_flush integer_shove float_shove float_div float_inc float_swap float_div float_inc float_inc float_rot float_inc tagged_496 float_stackdepth integer_flush integer_stackdepth integer_dup_items float_div float_inc float_swap float_inc float_inc integer_pop float_inc in2 float_stackdepth integer_max float_swap float_inc float_rot float_stackdepth print_float float_stackdepth print_float float_stackdepth integer_inc integer_mod float_swap float_inc integer_stackdepth float_inc float_max float_stackdepth integer_inc integer_mod float_inc float_rot print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3017.1476003000002
Median total errors in population: 1327.0
Error averages by case: (122.7006498 3.064 84.1361448 2.998 109.07635029999997 10.399 155.00767560000003 11.169 129.50754599999996 3.057 101.32039580000001 3.684 80.84823950000002 2.975 119.29392060000002 3.001 144.94640090000004 3.125 151.4616429 12.182 161.518918 3.158 110.23636529999999 3.016 143.92441200000002 3.238 130.47330530000002 3.943 108.4547079 2.11 93.6783825 3.023 146.92969320000003 11.156 76.2021933 2.19 116.53223910000001 4.032 143.0881665 2.919 97.23332040000001 3.074 100.6962412 3.011 88.0961081 3.086 113.79489279999996 3.055 79.12068850000001 2.204)
Error minima by case: (9.6777 1 8.0 1 6.2578 8 25.3277 9 19.9085 1 27.0 1 0.0 0 2.8456 1 16.0 1 56.8281 9 56.5582 1 35.0 1 20.0 1 37.0 2 5.847 1 18.0 1 4.664 8 0.0 0 25.2664 2 0.1286 1 10.7931 1 22.5475 1 9.0 1 28.0772 1 1.3119 1)
Average genome size in population (length): 51.627
Average program size in population (points): 52.627
Average percent parens in population: 0.020
Minimum age in population: 139.2644998712006
Maximum age in population: 143.9369052800045
Average age in population: 141.8441754540907
Median age in population: 141.8775440475335
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.054
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 137313345
--- Timings ---
Current time: 1529616254266 milliseconds
Total Time:         316.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.3 seconds, 39.0%
Fitness Testing:    152.3 seconds, 48.1%
Report:              40.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction in1} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction tagged_496} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction in2} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_sub} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction in1} {:instruction float_inc})
Best program: (integer_mod integer_add float_swap in1 integer_dup_items float_pop in1 float_div float_inc float_swap float_div float_inc float_inc float_rot float_inc tagged_496 float_stackdepth integer_flush integer_stackdepth float_rot float_shove float_inc float_swap float_inc float_inc float_swap float_inc in2 float_stackdepth integer_max float_swap float_inc float_rot float_stackdepth print_float float_stackdepth print_float float_stackdepth integer_inc integer_mod float_inc float_yankdup float_inc integer_sub float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth in1 float_inc)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3110.4686956
Median total errors in population: 1327.0
Error averages by case: (126.5394854 3.294 88.5204455 3.22 112.63904369999997 10.464 157.1980521999999 11.212 131.90064779999997 3.283 104.7514287 3.849 85.04156200000003 3.181 121.75478690000006 3.204 147.78904 3.33 153.8836974 12.206 165.65660389999996 3.414 113.8963597 3.224 147.54228149999994 3.461 135.45851590000004 4.147 111.09437300000003 2.351 97.4503012 3.228 150.21545090000006 11.196 80.42015609999996 2.424 121.14302979999994 4.271 146.4737412 3.112 102.09249829999996 3.288 105.14717549999999 3.221 91.24680620000001 3.286 117.16079189999999 3.279 81.84642090000003 2.461)
Error minima by case: (13.6777 1 8.0 1 5.2578 8 26.3277 8 1.1885 1 1.2401 1 1.0 1 6.8002 1 6.8835 1 58.7141 9 41.3481 1 12.7564 1 53.0528 2 22.0834 2 4.9643 1 0.8787 1 4.3554 9 0.0 0 12.2401 2 0.1664 1 6.7931 1 0.2401 1 3.2833 1 13.0166 1 0.4293 1)
Average genome size in population (length): 51.563
Average program size in population (points): 52.563
Average percent parens in population: 0.020
Minimum age in population: 140.7606757637829
Maximum age in population: 145.2618264658236
Average age in population: 143.3039958434415
Median age in population: 143.3668790967945
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.072
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 138602445
--- Timings ---
Current time: 1529616257395 milliseconds
Total Time:         319.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.6 seconds, 39.0%
Fitness Testing:    153.8 seconds, 48.1%
Report:              41.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_add} {:instruction in1} {:instruction float_swap} {:instruction 5} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_flush} {:instruction integer_div} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_min} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_flush} {:instruction float_mod} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction integer_dec} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_pop} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float})
Best program: (float_add integer_add in1 float_swap 5 integer_flush float_pop integer_flush integer_div float_rot float_pop in1 float_swap integer_min integer_stackdepth float_inc float_flush float_mod float_pop in1 float_inc integer_stackdepth float_shove integer_dec float_shove float_div float_inc float_inc float_inc float_stackdepth in2 integer_pop float_inc float_stackdepth float_swap float_inc float_rot integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth integer_inc integer_mod float_inc float_rot float_stackdepth print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2908.4791736
Median total errors in population: 1327.0
Error averages by case: (117.64800839999998 3.106 82.01791859999999 3.025 107.28368319999998 10.465 148.53136109999997 11.212 122.80193019999994 3.099 97.91293200000001 3.633 74.28172820000005 3.004 112.51675110000004 3.024 143.46985380000004 3.117 145.92445289999995 12.218 156.1879703 3.197 107.39605360000002 3.021 141.69562619999994 3.26 127.90104410000002 3.965 101.62177439999999 2.146 91.18661499999997 3.041 144.7925677 11.202 69.64841659999999 2.202 110.88828369999996 4.075 141.0136374 2.939 91.59929400000001 3.1 98.57016639999999 3.019 81.2446828 3.087 109.34240150000001 3.075 73.51002040000004 2.26)
Error minima by case: (13.0689 1 1.0033 1 7.863 9 27.0477 9 14.6828 1 28.0 1 1.0 1 6.6475 1 69.9742 1 40.5261 8 45.3481 1 8.7564 1 49.0528 2 26.0834 2 4.9643 1 3.1213 1 4.3186 9 0.0 0 21.3602 2 0.1784 1 7.402 1 2.6943 1 3.4655 1 31.4683 1 0.4293 1)
Average genome size in population (length): 51.857
Average program size in population (points): 52.857
Average percent parens in population: 0.019
Minimum age in population: 142.1769791730264
Maximum age in population: 146.8461906423494
Average age in population: 144.7626561416235
Median age in population: 144.8017318798664
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.056
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 139898870
--- Timings ---
Current time: 1529616260549 milliseconds
Total Time:         322.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.9 seconds, 39.0%
Fitness Testing:    155.3 seconds, 48.1%
Report:              41.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction float_dup} {:instruction print_float} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup_items} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_rot} {:instruction float_pop} {:instruction float_rot} {:instruction float_pop} {:instruction float_div} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_inc} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_sub})
Best program: (integer_mod integer_mod float_dup print_float float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_dup_items float_cos integer_stackdepth float_rot float_rot float_pop float_rot float_pop float_div float_rot float_pop in1 float_swap integer_flush integer_stackdepth float_inc float_div float_inc integer_dup_times float_div float_inc float_swap float_inc integer_inc float_stackdepth integer_inc float_swap float_inc integer_mult float_stackdepth float_inc float_rot integer_dup_times integer_shove integer_dec float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot integer_mult float_stackdepth print_float float_inc integer_sub)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2886.4891301000002
Median total errors in population: 1327.0
Error averages by case: (116.93416629999999 3.168 78.78681049999999 3.056 103.5483725 10.414 148.74546189999998 11.185 122.90880359999997 3.162 96.8172736 3.775 74.80600800000005 3.077 112.7210479 3.092 143.03065669999998 3.19 146.4276903 12.159 154.99933 3.277 106.3277283 3.082 140.7319693999999 3.314 127.17895110000003 4.003 101.93273849999997 2.212 90.2660747 3.078 140.9766378 11.136 70.18274090000003 2.293 110.08353229999997 4.134 137.27722609999998 2.971 91.01403729999998 3.177 95.4086013 3.084 81.63185589999999 3.161 109.04359679999999 3.135 74.05981839999998 2.313)
Error minima by case: (9.6777 1 9.0 1 5.2578 8 26.3277 1 7.9827 1 2.5616 1 0.0 0 5.1781 1 10.0258 1 26.3239 2 0.9716 1 6.7564 1 26.9472 2 26.0834 2 2.9643 1 3.1213 1 2.5228 8 0.0 0 18.3602 2 0.1286 1 3.8868 1 12.4076 1 5.9541 1 3.9495 1 0.1072 1)
Average genome size in population (length): 51.383
Average program size in population (points): 52.383
Average percent parens in population: 0.020
Minimum age in population: 143.2486200421529
Maximum age in population: 148.1681930416866
Average age in population: 146.204254686784
Median age in population: 146.2585899017541
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.066
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 141183470
--- Timings ---
Current time: 1529616263604 milliseconds
Total Time:         325.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.1 seconds, 39.0%
Fitness Testing:    156.7 seconds, 48.1%
Report:              42.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_swap} {:instruction integer_swap} {:instruction integer_flush} {:instruction -94.09373270553453} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_pop} {:instruction float_pop} {:instruction in1} {:instruction float_pop} {:instruction in1} {:instruction 34} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_div} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_rot} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction tagged_496} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_add})
Best program: (integer_sub float_swap integer_swap integer_flush -94.09373270553453 float_rot float_pop in1 integer_pop float_pop in1 float_pop in1 34 float_pop integer_dup_items float_pop in1 float_div float_inc print_integer float_inc float_rot float_yankdup float_swap float_inc float_rot float_inc tagged_496 float_stackdepth integer_flush integer_stackdepth float_rot float_div float_inc integer_inc float_inc integer_swap float_stackdepth integer_pop integer_mod float_swap float_inc integer_stackdepth float_inc float_inc float_rot float_stackdepth print_float integer_shove float_stackdepth float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3226.3754343
Median total errors in population: 1327.0
Error averages by case: (130.71872439999999 3.25 93.84096009999996 3.16 118.3513043 10.477 162.03084739999994 11.223 136.68775589999998 3.243 110.0850485 3.922 88.86046890000006 3.157 126.56033750000002 3.169 153.16269210000004 3.285 158.479962 12.211 169.3120332 3.353 118.7253726 3.173 152.16497339999998 3.408 138.96201510000006 4.098 115.82818830000004 2.297 102.39415989999999 3.176 155.7609617 11.2 84.24672809999998 2.374 124.89967749999997 4.223 152.0326594 3.075 105.90625809999993 3.264 110.26117229999997 3.184 95.73291200000001 3.252 121.8424787 3.23 86.72174290000004 2.402)
Error minima by case: (19.935 1 9.0 1 2.2788 9 33.0855 9 8.8841 1 5.4384 1 0.0 0 2.9637 1 16.0 1 60.6761 8 40.3481 1 3.7564 1 20.0 1 21.0834 2 4.0477 1 1.8787 1 4.3186 9 0.0 0 16.3602 2 0.141 1 18.0 1 26.6114 1 6.7893 1 1.5356 1 1.3367 1)
Average genome size in population (length): 51.497
Average program size in population (points): 52.497
Average percent parens in population: 0.020
Minimum age in population: 144.2486200421529
Maximum age in population: 149.510727761229
Average age in population: 147.5912837229241
Median age in population: 147.5902962570554
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.053
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 142470920
--- Timings ---
Current time: 1529616266611 milliseconds
Total Time:         328.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.3 seconds, 39.0%
Fitness Testing:    158.1 seconds, 48.1%
Report:              42.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_rot} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_swap} {:instruction float_dup_items} {:instruction print_float} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_shove} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_sub})
Best program: (float_dec float_dup_items integer_add float_swap float_dup_items float_swap float_dup_items float_dec float_rot float_pop integer_dup_times integer_add float_swap float_dup_items print_float float_pop in1 float_swap integer_flush integer_stackdepth float_rot float_div float_inc float_swap integer_stackdepth integer_flush integer_dec float_shove integer_yank float_inc float_inc float_inc float_stackdepth float_inc float_swap float_inc float_swap float_stackdepth integer_inc integer_mod float_inc integer_dup_items float_inc float_rot float_stackdepth float_stackdepth integer_mult float_inc float_rot integer_mult float_stackdepth print_float float_inc integer_sub)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3351.8647277
Median total errors in population: 1327.0
Error averages by case: (136.9315444 3.241 98.03030989999998 3.127 121.76337539999996 10.48 167.90047829999992 11.233 141.7592237 3.215 114.5497254 3.857 94.7729953 3.115 132.67060680000006 3.147 157.08798290000001 3.269 164.7625505 12.242 174.00624019999998 3.321 122.78240000000002 3.149 156.39229050000003 3.412 141.72598449999998 4.073 122.0007411 2.283 106.86523129999999 3.158 159.03771769999997 11.192 90.29566509999998 2.359 130.70681709999997 4.186 156.236129 3.048 111.73344189999999 3.238 114.27831180000001 3.132 101.93182279999999 3.239 127.59862229999999 3.19 93.74951980000003 2.389)
Error minima by case: (33.416 1 8.0 1 7.2331 8 3.2794 9 5.3161 1 4.4384 1 0.0 0 7.2947 1 16.0 1 24.3112 9 0.9716 1 35.0 1 20.0 1 37.0 2 3.4668 1 13.7564 1 5.3554 9 0.0 0 38.0 2 0.1047 1 17.0 1 9.7409 1 8.6207 1 15.0166 1 0.0471 1)
Average genome size in population (length): 51.049
Average program size in population (points): 52.049
Average percent parens in population: 0.020
Minimum age in population: 145.2486200421529
Maximum age in population: 151.0427588461962
Average age in population: 148.9981549474307
Median age in population: 149.0398629196807
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.058
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 143747145
--- Timings ---
Current time: 1529616269638 milliseconds
Total Time:         332.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       129.5 seconds, 39.0%
Fitness Testing:    159.6 seconds, 48.1%
Report:              42.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_add} {:instruction float_swap} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_div} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_pop} {:instruction in1} {:instruction float_pop} {:instruction in1} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_add} {:instruction -48} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_max} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction print_float})
Best program: (integer_sub integer_add float_swap integer_pop integer_dup_items float_pop in1 float_div float_inc float_frominteger integer_swap float_pop in1 float_pop in1 float_mod float_dup_items integer_add -48 integer_yankdup float_inc float_inc float_inc float_pop in1 float_inc integer_min integer_flush integer_dec float_shove float_div float_inc float_inc float_inc float_stackdepth integer_inc integer_swap float_inc float_div float_inc float_swap float_inc integer_stackdepth float_inc float_max float_stackdepth integer_inc integer_mod float_inc float_rot print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2788.9623557
Median total errors in population: 1327.0
Error averages by case: (113.89463359999999 3.067 75.18714059999999 2.976 100.18648019999999 10.381 144.72908990000002 11.159 119.20387729999999 3.045 93.99783470000001 3.612 70.750163 2.924 108.86256449999996 2.973 138.0555728 3.09 142.3655536 12.157 152.81687059999996 3.159 101.0395294 2.989 135.73860739999998 3.218 121.97061210000004 3.917 97.95363540000001 2.082 84.79337129999999 2.983 138.04637509999998 11.133 66.1240766 2.161 107.572893 4.031 134.23471360000002 2.887 88.18975510000001 3.062 91.8410657 2.985 77.57943490000001 3.036 105.6841918 3.042 69.87531349999999 2.2)
Error minima by case: (9.6777 1 8.0 1 4.2578 8 0.9615 9 9.9226 1 7.6131 1 0.0 0 6.2947 1 58.9787 1 26.6291 9 0.9716 1 38.0 1 71.9002 2 58.0 2 4.1327 1 16.0743 1 4.4946 9 0.0 0 25.2664 2 0.0186 1 10.7931 1 2.6502 1 12.0 1 28.068 1 0.8495 1)
Average genome size in population (length): 50.837
Average program size in population (points): 51.837
Average percent parens in population: 0.020
Minimum age in population: 147.366080334408
Maximum age in population: 152.5489954239078
Average age in population: 150.4822173405734
Median age in population: 150.5358621410326
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.798
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.056
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 145018070
--- Timings ---
Current time: 1529616272785 milliseconds
Total Time:         335.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.8 seconds, 39.0%
Fitness Testing:    161.0 seconds, 48.0%
Report:              43.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_rot} {:instruction float_inc} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction float_inc} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_pop} {:instruction in1} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_shove} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_dup} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_add})
Best program: (float_swap float_dup_items integer_add float_rot float_inc in1 float_swap integer_flush float_inc float_swap integer_sub integer_mod float_inc float_swap float_inc float_swap float_inc float_rot float_inc float_rot float_stackdepth integer_mod integer_stackdepth float_shove float_div float_pop in1 float_pop in1 float_inc integer_stackdepth integer_flush integer_dec float_shove integer_yank float_inc float_inc float_inc float_stackdepth integer_inc float_swap float_inc integer_mult float_inc float_swap float_inc integer_stackdepth float_inc float_inc integer_dup_times float_dup print_float float_rot float_stackdepth float_add)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3497.8681672000002
Median total errors in population: 1327.0
Error averages by case: (141.21573940000002 3.427 105.55490149999997 3.316 129.75949839999998 10.523 171.12096499999996 11.26 146.3927388 3.409 121.1459955 3.855 99.43473110000004 3.309 136.3543899 3.331 165.17257770000006 3.44 168.23923780000004 12.257 179.1041635 3.536 130.11911460000005 3.312 163.4838084 3.564 150.3909058 4.261 125.77155990000006 2.458 114.25506919999998 3.317 166.611339 11.244 94.96075619999999 2.56 135.14943819999993 4.385 162.86324649999997 3.203 116.33750249999999 3.422 121.67367209999996 3.32 106.0287335 3.413 132.73035489999998 3.407 97.88172780000004 2.587)
Error minima by case: (27.584 1 9.0 1 5.2578 9 26.3277 9 18.1417 1 4.4384 1 0.0 0 7.7403 1 15.5162 1 1.8202 8 41.3481 1 0.4492 1 34.1529 2 22.0834 2 3.4668 1 0.8787 1 3.6744 7 0.0 0 25.3602 2 0.1153 1 18.0 1 24.6231 1 10.0 1 16.0166 1 0.8413 1)
Average genome size in population (length): 51.022
Average program size in population (points): 52.022
Average percent parens in population: 0.020
Minimum age in population: 148.366080334408
Maximum age in population: 153.8038948071975
Average age in population: 151.9375626575025
Median age in population: 152.01713035558
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.055
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 146293645
--- Timings ---
Current time: 1529616275814 milliseconds
Total Time:         338.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.0 seconds, 39.0%
Fitness Testing:    162.4 seconds, 48.0%
Report:              43.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_sin} {:instruction float_pop} {:instruction float_dup_items} {:instruction integer_pop} {:instruction -48} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_div} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_shove} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction print_float})
Best program: (integer_mod float_sin float_pop float_dup_items integer_pop -48 integer_flush integer_dup_items float_pop in1 float_div integer_flush integer_dec float_shove integer_yank float_inc float_inc float_inc float_stackdepth float_inc float_swap float_inc float_swap float_stackdepth integer_inc integer_mod float_inc float_swap float_inc float_rot float_stackdepth float_stackdepth integer_mod float_inc float_rot integer_mult integer_inc integer_mod float_inc float_rot print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 3141.0534789
Median total errors in population: 1327.0
Error averages by case: (128.6164405 3.198 89.1791593 3.069 114.1109688 10.482 158.3648379 11.227 133.0589078 3.175 109.53657009999999 3.796 85.29641930000003 3.066 122.8885974 3.088 151.15261640000003 3.202 156.49810629999996 12.232 166.4311173 3.268 114.01929780000002 3.077 147.99505339999993 3.32 134.12392499999999 3.994 112.16394840000002 2.216 98.23895539999998 3.093 151.65304999999998 11.209 80.6023829 2.287 121.70902479999998 4.149 147.86149469999998 2.99 102.5170994 3.179 105.65622049999999 3.095 92.05141180000004 3.172 120.94446400000001 3.145 85.32640970000003 2.328)
Error minima by case: (48.0 1 9.0 1 5.2578 9 9.6825 9 15.0259 1 28.0 1 0.0 0 3.1781 1 2.6825 2 3.5848 8 88.0 1 7.9826 1 1.3175 1 18.3175 2 0.9643 1 14.1397 1 3.3554 9 0.0 0 39.0 2 0.1661 1 18.0 1 24.5603 1 9.0 1 40.0 1 0.4293 1)
Average genome size in population (length): 50.777
Average program size in population (points): 51.777
Average percent parens in population: 0.020
Minimum age in population: 150.2382839569921
Maximum age in population: 155.3464952852118
Average age in population: 153.3780109579527
Median age in population: 153.4036302880725
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.057
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 147563095
--- Timings ---
Current time: 1529616278865 milliseconds
Total Time:         341.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.2 seconds, 39.0%
Fitness Testing:    163.9 seconds, 48.0%
Report:              44.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_add} {:instruction integer_add} {:instruction float_pop} {:instruction in1} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_dup_times} {:instruction print_integer} {:instruction float_div} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction 25} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction print_float})
Best program: (integer_sub float_add integer_add float_pop in1 integer_dec float_inc float_swap float_inc float_rot float_dup_times print_integer float_div float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap float_inc float_rot float_stackdepth float_swap float_inc float_rot float_stackdepth integer_inc 25 float_inc float_swap float_inc float_rot float_rot float_swap float_inc float_rot print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 3347.3174167999996
Median total errors in population: 1327.0
Error averages by case: (136.04259569999996 3.207 97.972672 3.109 122.81098009999998 10.48 167.0943078 11.233 141.7911775 3.202 115.22603520000003 3.748 93.40669450000003 3.091 131.70640980000002 3.1 158.66126890000004 3.225 163.86479359999998 12.216 173.95053919999998 3.304 123.45944689999997 3.108 156.93527799999995 3.348 143.0698234 4.035 120.99752340000002 2.242 107.50496689999997 3.12 160.27609570000004 11.196 88.90229120000002 2.315 129.61008 4.182 156.530506 3.007 110.55161549999998 3.202 114.3171824 3.112 100.7890124 3.184 127.73300739999998 3.158 92.64411330000003 2.345)
Error minima by case: (47.0 1 4.0066 1 6.8631 9 28.6961 9 0.0654 1 27.0 1 0.0 0 2.8456 1 16.0 1 25.6961 3 87.0 1 35.0 1 20.0 1 37.0 2 3.9647 1 18.0 1 4.3186 9 0.0 0 38.0 2 0.1047 1 17.0 1 12.0 1 2.1602 1 39.0 1 1.2132 1)
Average genome size in population (length): 50.219
Average program size in population (points): 51.219
Average percent parens in population: 0.020
Minimum age in population: 151.2382839569921
Maximum age in population: 156.6950803279647
Average age in population: 154.8040094011269
Median age in population: 154.8698262650518
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.05
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 148818595
--- Timings ---
Current time: 1529616281856 milliseconds
Total Time:         344.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.4 seconds, 39.1%
Fitness Testing:    165.3 seconds, 48.0%
Report:              44.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction float_tan} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_swap} {:instruction -48} {:instruction float_swap} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction integer_inc} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_sub})
Best program: (float_pop integer_mod integer_add float_swap float_tan integer_dup_items integer_mod integer_add integer_sub integer_mod float_swap -48 float_swap in1 integer_stackdepth integer_flush float_inc float_swap float_div float_inc float_inc float_yank float_inc float_rot integer_mult float_rot float_stackdepth integer_inc float_swap float_inc integer_stackdepth float_stackdepth float_swap float_inc float_rot float_max float_inc float_swap float_inc float_swap integer_inc float_inc float_rot integer_mult float_stackdepth print_float float_inc integer_sub)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3310.2401573999996
Median total errors in population: 1327.0
Error averages by case: (135.6435471 3.231 95.24417719999997 3.14 119.89027779999998 10.478 166.12155970000003 11.245 140.9674415 3.242 116.15390330000001 3.761 92.88871460000001 3.132 130.87005650000003 3.158 155.9733818 3.249 163.69735179999995 12.229 173.18446939999998 3.329 119.81473600000001 3.153 153.42310929999996 3.378 139.81206580000003 4.081 120.14093810000004 2.274 103.87353519999996 3.165 157.46469079999997 11.206 88.40106479999999 2.362 128.8491609 4.213 153.73696520000001 3.031 109.89966049999997 3.22 111.6418662 3.145 100.01861319999998 3.247 127.567624 3.215 92.68124670000005 2.396)
Error minima by case: (30.0497 1 8.0 1 6.8631 9 32.0676 9 18.0514 1 7.4384 1 0.0 0 7.6468 1 15.0 1 7.8991 8 44.3481 1 0.7564 1 19.0 2 25.0834 2 4.0477 1 2.1213 1 4.3186 7 0.0 0 13.3602 2 0.093 1 17.0 1 25.6271 1 8.0 1 11.6502 1 0.4293 1)
Average genome size in population (length): 50.279
Average program size in population (points): 51.279
Average percent parens in population: 0.020
Minimum age in population: 153.7065220804279
Maximum age in population: 158.2544223666535
Average age in population: 156.2504107237925
Median age in population: 156.3171762839092
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.056
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 150075620
--- Timings ---
Current time: 1529616284892 milliseconds
Total Time:         347.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       135.7 seconds, 39.1%
Fitness Testing:    166.8 seconds, 48.0%
Report:              44.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction float_sin} {:instruction float_pop} {:instruction float_dup_items} {:instruction integer_pop} {:instruction -48} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction in1} {:instruction float_inc} {:instruction integer_min} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_max} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction print_float})
Best program: (float_tan float_sin float_pop float_dup_items integer_pop -48 integer_flush integer_dup_items float_pop float_dup_times integer_flush float_inc float_swap float_div in1 float_inc integer_min integer_flush integer_dec float_shove float_div float_inc float_inc float_inc integer_div integer_inc integer_swap float_inc integer_mult float_inc float_swap float_inc integer_stackdepth float_inc float_max float_stackdepth integer_inc integer_mod float_inc float_rot print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 3480.215598600001
Median total errors in population: 1327.0
Error averages by case: (141.63475739999998 3.296 103.41275909999996 3.187 128.37733719999997 10.522 171.62494999999996 11.281 146.73419829999995 3.271 121.4938569 3.673 98.48644060000004 3.156 136.68001020000003 3.182 164.6493185 3.305 169.57118740000004 12.263 178.6075853 3.386 128.15568299999998 3.184 161.73368050000002 3.432 147.76829350000003 4.124 126.02775450000003 2.323 112.60621359999999 3.198 165.38904589999999 11.247 94.12375639999999 2.392 134.44350290000003 4.248 161.7021894 3.092 115.5238528 3.284 119.70245849999998 3.185 105.9531386 3.266 133.57955100000004 3.259 99.03007710000003 2.448)
Error minima by case: (47.0 1 6.6767 1 7.863 9 10.4022 8 15.6828 1 27.0 1 0.0 0 2.8456 1 15.0 1 7.3365 9 87.0 1 3.1298 1 19.0 2 36.0 2 4.9643 1 3.2183 1 4.3554 10 0.0 0 38.0 2 0.2031 1 17.0 1 3.928 1 10.0 1 39.0 1 0.4293 1)
Average genome size in population (length): 50.293
Average program size in population (points): 51.293
Average percent parens in population: 0.020
Minimum age in population: 155.1265467477837
Maximum age in population: 159.6164525632748
Average age in population: 157.6948530226673
Median age in population: 157.7768242475984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.052
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 151332970
--- Timings ---
Current time: 1529616287852 milliseconds
Total Time:         350.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.9 seconds, 39.1%
Fitness Testing:    168.2 seconds, 48.0%
Report:              45.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_add} {:instruction float_swap} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_add} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_dec} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float})
Best program: (float_sin integer_add float_swap integer_flush float_frominteger float_rot float_pop in1 float_swap integer_dup_items float_pop in1 float_add float_inc float_swap float_div float_inc integer_dup_times integer_mod integer_flush integer_add float_yankdup float_div float_inc float_swap float_inc float_rot integer_inc float_swap float_inc integer_mult float_inc float_inc integer_stackdepth float_inc float_inc float_rot float_stackdepth print_float float_dec float_add integer_dup_times float_inc integer_yank float_stackdepth integer_shove float_mult integer_fromfloat integer_dec float_swap float_inc float_rot float_stackdepth print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2919.6340328
Median total errors in population: 1327.0
Error averages by case: (118.89543929999998 3.049 81.2834722 2.954 106.62378779999997 10.409 149.80175269999998 11.166 124.21833669999998 3.053 99.76561060000002 3.667 74.98924250000002 2.956 113.87950100000002 2.954 143.94095910000001 3.069 147.69265069999997 12.188 156.93219720000002 3.127 106.20980469999999 2.955 140.5682707 3.178 126.36161390000001 3.9 102.89013320000001 2.072 90.2353571 2.975 144.90448349999997 11.152 70.2624761 2.138 111.78211569999999 4.016 141.11056559999997 2.867 92.39870810000001 3.043 97.9927784 2.956 82.2585767 3.031 111.1402936 3.021 75.43890569999999 2.161)
Error minima by case: (21.2481 1 9.0 1 7.319 8 6.8469 8 18.4819 1 11.4384 1 1.0 1 6.6341 1 45.9227 1 20.7437 8 59.9557 1 32.3112 1 8.8417 2 56.0 2 4.4203 1 10.1889 1 3.8114 9 0.0 0 39.0 2 0.1658 1 18.0 1 13.321 1 10.0 1 1.9503 1 0.1147 1)
Average genome size in population (length): 50.255
Average program size in population (points): 51.255
Average percent parens in population: 0.020
Minimum age in population: 156.3751011085594
Maximum age in population: 161.1075616033013
Average age in population: 159.1161393335633
Median age in population: 159.1469999632229
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.046
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 152589345
--- Timings ---
Current time: 1529616290871 milliseconds
Total Time:         353.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.1 seconds, 39.1%
Fitness Testing:    169.6 seconds, 48.0%
Report:              45.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_rot} {:instruction float_pop} {:instruction -49} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_pop} {:instruction float_add} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_swap} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_rot} {:instruction float_swap} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction float_pop} {:instruction float_inc} {:instruction float_frominteger})
Best program: (float_dup float_dup_items integer_dup_items float_pop float_rot float_pop -49 float_frominteger float_rot float_pop float_add float_pop in1 float_inc integer_stackdepth integer_flush integer_dec float_shove float_div float_inc float_inc float_inc float_stackdepth integer_inc float_swap float_inc integer_mult float_inc float_swap float_inc integer_stackdepth float_inc float_swap float_stackdepth integer_add integer_inc integer_rot float_inc float_rot float_stackdepth print_float integer_rot float_swap float_stackdepth integer_add integer_inc float_pop float_inc float_frominteger)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3109.0416812000003
Median total errors in population: 1327.0
Error averages by case: (126.46678189999996 3.12 89.07203889999998 3.034 114.12530769999998 10.411 156.99392909999997 11.173 131.4068699 3.118 107.41312950000001 3.675 81.93475780000003 3.014 121.2540498 3.02 151.47233150000002 3.147 155.11331479999996 12.186 164.08665379999997 3.226 114.11191860000001 3.04 148.25418679999996 3.268 134.19804480000002 3.975 110.43759639999999 2.159 98.25861929999998 3.042 151.61589410000005 11.161 78.2692266 2.231 119.22955619999998 4.097 147.87893699999998 2.942 100.0839847 3.119 105.5454331 3.029 90.10413199999999 3.124 118.6374957 3.089 83.41849120000003 2.259)
Error minima by case: (8.9599 1 8.0 1 7.863 9 33.0176 9 14.6828 1 2.4384 1 0.0 0 6.2947 1 16.0 1 60.6083 9 43.3481 1 10.7564 1 20.0 1 24.0834 2 4.5646 1 1.1213 1 4.3186 9 0.0 0 23.3602 2 0.1784 1 11.511 1 22.2098 1 9.0 1 11.0166 1 0.4293 1)
Average genome size in population (length): 49.919
Average program size in population (points): 50.919
Average percent parens in population: 0.020
Minimum age in population: 157.7195110507342
Maximum age in population: 162.6189274997424
Average age in population: 160.5153245035947
Median age in population: 160.5727313761578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.052
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 153837320
--- Timings ---
Current time: 1529616293829 milliseconds
Total Time:         356.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       139.3 seconds, 39.1%
Fitness Testing:    171.1 seconds, 48.0%
Report:              45.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_sin} {:instruction float_cos} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_pop} {:instruction in1} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_pop} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction integer_dec} {:instruction integer_add} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction integer_dec} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction print_float} {:instruction -84} {:instruction float_stackdepth})
Best program: (integer_mod float_sin float_cos float_swap float_dup_items float_pop in1 float_swap integer_flush integer_stackdepth float_shove float_div float_inc float_inc integer_div float_pop in1 integer_swap integer_flush integer_max integer_pop float_div float_inc float_swap float_inc float_swap float_inc float_rot float_inc integer_dec integer_add float_mult integer_stackdepth integer_pop float_div float_inc float_swap float_inc float_inc float_swap float_inc float_rot integer_div integer_dec float_swap float_inc float_rot float_rot print_float -84 float_stackdepth)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3114.0634075
Median total errors in population: 1327.0
Error averages by case: (126.9325155 2.996 88.9196403 2.906 114.24929799999998 10.39 158.4736796 11.171 132.8840292 3.006 107.42705700000002 3.502 82.7781921 2.905 122.97305750000004 2.928 150.01304240000005 3.014 155.7759508 12.178 164.40976980000002 3.105 113.21133759999998 2.914 147.1325177 3.139 132.69648599999996 3.866 111.68887850000002 2.038 97.2714555 2.919 153.05455069999996 11.16 78.6491845 2.101 119.46366879999997 3.991 149.16764849999998 2.834 100.1885564 3.008 105.57037559999999 2.91 91.41647999999999 2.998 118.9437876 2.981 83.68624790000001 2.126)
Error minima by case: (29.584 1 8.0 1 2.9073 9 25.0669 8 6.651 1 27.0 1 0.0 0 6.1781 1 15.0 1 48.5261 8 43.3481 1 10.7564 1 19.0 1 24.0834 2 3.4668 1 1.1213 1 2.6065 10 0.0 0 23.3602 2 1.8216 1 17.0 1 18.6266 1 8.7458 1 31.9834 1 0.5707 1)
Average genome size in population (length): 49.485
Average program size in population (points): 50.485
Average percent parens in population: 0.020
Minimum age in population: 158.8366412073765
Maximum age in population: 163.8052883941333
Average age in population: 161.979320857284
Median age in population: 162.0240297751849
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.036
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 155074445
--- Timings ---
Current time: 1529616296877 milliseconds
Total Time:         359.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.4 seconds, 39.1%
Fitness Testing:    172.5 seconds, 48.0%
Report:              46.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction -95.02835022363054} {:instruction integer_shove} {:instruction float_pop} {:instruction float_dup} {:instruction float_yank} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction print_float})
Best program: (integer_mod -95.02835022363054 integer_shove float_pop float_dup float_yank float_dup_items float_mod float_dup_items integer_add -49 float_frominteger integer_swap float_pop float_dup_items float_pop in1 float_inc integer_stackdepth integer_flush integer_dec float_shove float_div float_inc float_inc float_inc integer_min integer_inc integer_swap float_inc float_rot float_inc float_swap float_inc integer_stackdepth float_inc integer_dup_times float_stackdepth integer_inc integer_mod float_inc float_rot print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3438.9676594000002
Median total errors in population: 1327.0
Error averages by case: (140.7049399 3.368 101.82522489999998 3.246 126.31519349999999 10.541 169.34960680000003 11.28 144.32920689999997 3.34 120.94389929999998 3.941 97.18515730000004 3.242 134.31249450000004 3.257 162.30239100000006 3.369 167.61862079999995 12.245 178.01712139999995 3.485 125.65080920000001 3.242 159.2549591 3.483 145.70278500000006 4.161 123.72793020000005 2.415 110.01338389999998 3.254 163.2421379 11.242 92.66740409999998 2.5 133.9777823 4.343 159.55185590000005 3.144 115.06367509999995 3.365 117.99270219999997 3.25 103.89737360000001 3.366 133.10185560000005 3.341 97.28314900000004 2.516)
Error minima by case: (24.0018 1 2.0033 1 3.863 8 27.4927 9 15.0259 1 5.4384 1 0.0 0 2.8456 1 16.0 1 3.2718 9 88.0 1 8.2957 1 20.0 1 37.0 2 0.9643 1 13.8266 1 0.3554 9 0.0 0 39.0 2 0.1784 1 18.0 1 1.6943 1 2.4655 1 5.6024 1 0.4293 1)
Average genome size in population (length): 48.79
Average program size in population (points): 49.79
Average percent parens in population: 0.021
Minimum age in population: 161.1215283432136
Maximum age in population: 165.440068612235
Average age in population: 163.4582258470676
Median age in population: 163.4890138226994
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.059
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 156294220
--- Timings ---
Current time: 1529616299810 milliseconds
Total Time:         362.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.7 seconds, 39.1%
Fitness Testing:    173.9 seconds, 48.0%
Report:              46.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 5} {:instruction float_swap} {:instruction -48} {:instruction integer_mod} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_shove} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_max} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_yank} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth})
Best program: (integer_mod 5 float_swap -48 integer_mod in1 integer_stackdepth integer_flush float_inc float_swap float_div float_shove integer_yankdup float_inc float_inc float_inc integer_shove float_max float_inc integer_mult float_inc float_swap float_inc integer_stackdepth float_inc float_inc float_rot float_stackdepth print_float integer_yank float_div float_inc float_inc float_inc float_stackdepth integer_inc float_swap float_inc float_rot float_inc float_swap float_inc integer_stackdepth float_inc float_inc float_rot float_stackdepth)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3188.1324334999995
Median total errors in population: 1327.0
Error averages by case: (128.98330569999996 3.092 92.714992 3.003 117.8487593 10.453 160.2788551 11.235 134.86438209999997 3.075 110.17499620000001 3.64 85.19252540000002 2.971 124.6187485 3.004 154.92222670000004 3.133 158.00022499999997 12.23 166.3975323 3.189 117.54146950000002 3.015 151.54502689999998 3.263 137.21943120000003 3.954 113.69322170000002 2.127 101.76373479999998 3.02 155.84689619999997 11.193 80.7935866 2.194 121.6594367 4.062 152.11485769999996 2.917 102.461241 3.086 109.26187489999998 3.008 93.0876007 3.079 121.48755090000003 3.077 86.39195640000004 2.248)
Error minima by case: (19.2481 1 8.0 1 7.7111 8 33.0855 9 19.0259 1 17.3152 1 0.0 0 2.8456 1 43.9227 1 59.8527 9 57.9557 1 36.0 1 10.8417 2 56.0 2 4.9643 1 19.0 1 2.664 9 0.0 0 38.0 2 0.607 1 17.0 1 26.0 1 10.0 1 3.9503 1 0.4293 1)
Average genome size in population (length): 48.427
Average program size in population (points): 49.427
Average percent parens in population: 0.021
Minimum age in population: 162.2817576584597
Maximum age in population: 166.7468240765112
Average age in population: 164.8985175195866
Median age in population: 164.9382808061624
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.041
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 157504920
--- Timings ---
Current time: 1529616302853 milliseconds
Total Time:         365.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       142.9 seconds, 39.1%
Fitness Testing:    175.4 seconds, 48.0%
Report:              46.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_frominteger} {:instruction float_swap} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction tagged_860} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_dup_items} {:instruction float_swap} {:instruction -48} {:instruction float_swap} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_swap} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction integer_inc} {:instruction integer_dup_items})
Best program: (integer_mod float_frominteger float_swap integer_flush float_frominteger float_dup_items tagged_860 float_yankdup integer_add float_dup_items float_swap -48 float_swap in1 integer_stackdepth integer_flush float_inc float_swap float_div float_inc float_inc float_yank float_inc float_rot float_stackdepth integer_dec float_pop float_dup_items float_pop in1 float_inc integer_stackdepth integer_flush integer_dec float_shove float_div float_inc float_inc float_inc integer_div integer_inc integer_swap float_inc integer_mult float_inc float_swap float_inc float_shove float_inc float_max float_stackdepth float_stackdepth float_swap integer_mod float_inc float_rot float_stackdepth print_float float_inc integer_inc integer_mod float_inc float_inc float_rot float_stackdepth print_float integer_min integer_fromfloat integer_inc integer_dup_items)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3111.8615068999993
Median total errors in population: 1327.0
Error averages by case: (126.03312640000001 3.095 89.78055769999999 3.006 114.76390469999998 10.424 157.42284909999995 11.216 131.89957879999997 3.106 106.47981779999999 3.606 81.3777143 2.978 121.68210830000001 3.019 151.4786409 3.119 154.92324379999997 12.198 163.69542289999995 3.193 114.7317506 3.012 148.6931726 3.253 134.56685700000006 3.959 110.79579280000002 2.141 98.6125828 3.004 152.77772190000002 11.165 78.01290970000001 2.207 118.85952950000001 4.071 149.0356439 2.9 99.65357650000001 3.087 106.28561479999998 3.005 90.2582367 3.084 117.94391139999999 3.072 82.934242 2.243)
Error minima by case: (5.6123 1 7.4832 1 8.7091 8 25.4432 9 19.9671 1 27.0 1 1.0 1 6.3064 1 15.5162 1 53.6049 8 0.9716 1 11.7564 1 52.0528 2 23.0834 2 5.5197 1 0.1213 1 4.9264 9 0.0 0 24.3602 2 0.1905 1 14.8585 1 18.8301 1 9.0 1 24.0118 1 0.1072 1)
Average genome size in population (length): 48.866
Average program size in population (points): 49.866
Average percent parens in population: 0.021
Minimum age in population: 164.0309263974473
Maximum age in population: 168.1432824643193
Average age in population: 166.3743854299626
Median age in population: 166.4125707878317
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.041
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 158726620
--- Timings ---
Current time: 1529616305882 milliseconds
Total Time:         368.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.1 seconds, 39.1%
Fitness Testing:    176.7 seconds, 48.0%
Report:              47.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_860} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_dup_items} {:instruction float_swap} {:instruction -48} {:instruction float_swap} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_min} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_max} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction print_float})
Best program: (tagged_860 float_yankdup integer_add float_dup_items float_swap -48 float_swap in1 integer_stackdepth integer_flush float_inc float_swap float_div float_inc float_inc float_yank float_inc float_rot float_stackdepth integer_dec float_pop float_dup_items float_min in1 float_inc integer_stackdepth integer_flush integer_dec float_shove float_div float_inc float_inc float_inc integer_div integer_inc integer_swap float_inc integer_dup_items float_inc float_swap float_inc float_shove float_inc float_max float_stackdepth integer_inc integer_mod float_inc float_rot print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3203.7759237
Median total errors in population: 1327.0
Error averages by case: (130.43192659999994 3.258 91.98184529999997 3.151 116.9678702 10.456 160.67769229999996 11.229 135.37695909999997 3.256 111.41766689999999 3.761 87.47287350000002 3.169 125.25955659999998 3.166 154.45747420000004 3.278 158.82190689999996 12.193 167.95607139999996 3.357 117.1812197 3.167 151.29124269999997 3.406 137.49561360000004 4.11 114.52551800000002 2.302 101.37307309999998 3.184 154.14611820000002 11.192 82.88834780000002 2.37 123.40203679999999 4.219 150.43453960000002 3.065 104.49835559999997 3.257 108.48189799999999 3.156 94.37228740000002 3.263 122.60892870000004 3.218 87.68090150000002 2.391)
Error minima by case: (10.6123 1 0.0033 1 5.2578 8 26.3277 9 15.6828 1 3.4384 1 0.0 0 6.8002 1 15.3702 1 3.5842 7 0.9716 1 5.412 1 28.2917 2 24.0834 2 4.9643 1 1.1213 1 4.3554 9 0.0 0 2.6398 2 0.1286 1 9.8585 1 3.6943 1 4.4655 1 17.0166 1 0.2854 1)
Average genome size in population (length): 49.145
Average program size in population (points): 50.145
Average percent parens in population: 0.021
Minimum age in population: 165.0309263974473
Maximum age in population: 169.6390298616396
Average age in population: 167.846750832271
Median age in population: 167.9093074837787
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.059
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 159955270
--- Timings ---
Current time: 1529616308811 milliseconds
Total Time:         371.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.3 seconds, 39.2%
Fitness Testing:    178.1 seconds, 48.0%
Report:              47.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_swap} {:instruction float_rot} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_flush} {:instruction integer_max} {:instruction float_swap} {:instruction float_rot} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_dup} {:instruction float_div} {:instruction float_inc} {:instruction integer_swap} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction in2} {:instruction integer_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction print_float})
Best program: (integer_mod integer_max float_swap float_rot integer_flush float_pop integer_flush integer_max float_swap float_rot integer_flush float_inc integer_dup float_div float_inc integer_swap float_pop float_dup_items float_pop in1 float_inc integer_stackdepth integer_flush integer_dec float_shove float_div float_inc float_inc float_inc integer_div in2 integer_swap float_inc integer_mult float_inc float_swap float_inc integer_stackdepth float_inc float_max float_stackdepth float_stackdepth integer_mod float_inc float_rot print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3084.9600062999993
Median total errors in population: 1327.0
Error averages by case: (125.03790419999999 3.122 87.09388079999998 3.045 112.08583209999999 10.434 156.94690350000002 11.22 131.6370202 3.113 105.45598820000001 3.62 81.98113860000002 3.014 121.36528400000003 3.059 149.536721 3.186 154.3685541 12.209 163.19583859999995 3.224 113.03821210000002 3.061 147.06690019999994 3.299 133.19701310000005 4.011 110.48974310000004 2.179 97.05809830000001 3.087 149.9324577 11.18 78.4367794 2.263 118.3290117 4.1 146.16146169999996 2.965 99.14149839999999 3.126 103.68596829999998 3.067 90.1249145 3.133 116.95947589999999 3.102 82.5234066 2.291)
Error minima by case: (27.584 1 9.0 1 3.804 8 6.4017 9 7.3589 1 24.8946 1 0.0 0 4.4889 1 16.0 1 59.6408 8 41.3481 1 8.7564 1 20.0 1 22.0834 2 6.2972 1 0.8787 1 4.7301 9 0.0 0 21.3602 2 0.1047 1 18.0 1 25.6148 1 5.2641 1 29.9834 1 0.3722 1)
Average genome size in population (length): 48.883
Average program size in population (points): 49.883
Average percent parens in population: 0.021
Minimum age in population: 166.0309263974473
Maximum age in population: 171.2914372152637
Average age in population: 169.2607301647101
Median age in population: 169.2826974373604
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.05
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 161177395
--- Timings ---
Current time: 1529616311759 milliseconds
Total Time:         374.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.5 seconds, 39.2%
Fitness Testing:    179.5 seconds, 48.0%
Report:              48.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_add} {:instruction float_swap} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_add} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction print_float})
Best program: (integer_pop integer_add float_swap integer_div float_pop integer_add float_dup_items integer_add -49 float_frominteger float_rot float_pop in1 float_pop in1 float_inc integer_stackdepth integer_flush integer_add float_mult integer_yankdup float_inc float_inc float_inc integer_div integer_inc integer_swap float_inc integer_mult float_inc float_swap float_inc integer_stackdepth float_inc integer_dup_times float_stackdepth integer_inc integer_mod float_inc float_rot print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 3462.7227261000007
Median total errors in population: 1327.0
Error averages by case: (139.46053929999997 3.324 103.97674799999999 3.225 128.44884869999999 10.536 170.38614629999995 11.297 145.41326399999997 3.334 120.8340322 3.801 97.15058390000002 3.225 135.28486600000005 3.24 165.1174074 3.356 168.15050290000002 12.269 176.53567989999996 3.43 128.41324759999998 3.241 161.92524499999996 3.488 148.28352060000003 4.179 124.51435110000001 2.374 112.84975649999997 3.247 165.8371647 11.255 92.7388172 2.455 132.6979802 4.311 162.19309249999998 3.116 113.96288419999998 3.34 120.34282730000001 3.229 104.3081117 3.325 131.90770669999998 3.296 97.61040220000001 2.486)
Error minima by case: (14.4543 1 9.0 1 7.8631 8 32.924 9 10.7722 1 3.4384 1 0.0 0 1.0756 1 7.0258 1 24.6128 8 0.9716 1 10.7564 1 20.6583 2 23.0834 2 3.2893 1 0.1213 1 4.9264 8 0.0 0 23.3602 2 0.1761 1 18.0 1 27.0 1 8.6774 1 3.9452 1 0.1072 1)
Average genome size in population (length): 48.723
Average program size in population (points): 49.723
Average percent parens in population: 0.021
Minimum age in population: 167.3880613275337
Maximum age in population: 172.722545850438
Average age in population: 170.7220356830653
Median age in population: 170.758601134874
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.057
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 162395545
--- Timings ---
Current time: 1529616314841 milliseconds
Total Time:         377.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.8 seconds, 39.2%
Fitness Testing:    180.9 seconds, 48.0%
Report:              48.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_add} {:instruction integer_rot} {:instruction float_inc} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction float_inc} {:instruction float_swap} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_yankdup} {:instruction -97} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction float_div} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction print_float})
Best program: (integer_mod float_inc float_frominteger integer_swap integer_rot float_dup_items integer_add integer_rot float_inc in1 float_swap integer_flush float_inc float_swap integer_swap float_div float_inc float_swap float_inc float_swap float_inc float_rot float_inc float_rot float_stackdepth integer_mod integer_stackdepth float_shove float_div integer_yankdup -97 float_inc float_inc float_inc float_swap float_stackdepth integer_add integer_inc float_div integer_inc integer_mod float_inc float_rot print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3369.2107891
Median total errors in population: 1327.0
Error averages by case: (136.75701970000003 3.304 98.99357479999993 3.193 123.72299069999995 10.501 167.19750649999995 11.281 142.16727070000002 3.299 118.1422467 3.721 93.77163220000003 3.184 132.16801380000004 3.2 160.49489780000002 3.301 165.18361679999998 12.251 173.9049989 3.416 123.78436839999998 3.204 157.3305116 3.439 143.51593900000003 4.121 121.48939610000004 2.352 108.20771389999997 3.207 160.92121280000006 11.237 89.58977029999998 2.437 129.7157491 4.273 157.19076330000001 3.101 110.7501139 3.291 115.20972659999997 3.195 101.41656589999998 3.292 129.23897799999995 3.266 94.82621160000001 2.454)
Error minima by case: (20.5323 1 0.0033 1 10.7133 8 9.1597 9 16.2495 1 10.5616 1 0.0 0 7.8002 1 2.1597 1 6.1597 9 0.9716 1 14.5164 1 1.8403 1 18.8403 2 7.9643 1 2.6878 1 6.3609 9 0.0 0 14.3602 2 0.7972 1 0.0615 1 3.6943 1 4.4655 1 19.0166 1 0.2854 1)
Average genome size in population (length): 48.396
Average program size in population (points): 49.396
Average percent parens in population: 0.021
Minimum age in population: 168.3880613275337
Maximum age in population: 174.2720797838425
Average age in population: 172.1861780665487
Median age in population: 172.2096669485092
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.054
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 163605570
--- Timings ---
Current time: 1529616317885 milliseconds
Total Time:         380.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       149.1 seconds, 39.2%
Fitness Testing:    182.3 seconds, 47.9%
Report:              48.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_swap} {:instruction integer_div} {:instruction integer_yankdup} {:instruction float_flush} {:instruction integer_dup} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_min} {:instruction float_mult} {:instruction float_swap} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_swap} {:instruction float_stackdepth} {:instruction float_min} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction print_float} {:instruction integer_add} {:instruction float_sin})
Best program: (integer_mod integer_add float_swap integer_div integer_yankdup float_flush integer_dup float_dup_items float_mod float_dup_items integer_add -49 float_frominteger integer_pop float_pop integer_dup_times float_pop in1 float_inc integer_stackdepth integer_flush integer_dec float_shove float_div float_inc float_inc float_inc float_stackdepth integer_inc float_inc float_rot float_stackdepth float_inc integer_min float_mult float_swap float_rot float_stackdepth float_swap float_inc float_rot float_stackdepth integer_stackdepth float_inc float_swap float_stackdepth float_min integer_mod float_inc float_rot print_float integer_add float_sin)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3473.8666494000004
Median total errors in population: 1327.0
Error averages by case: (140.22719610000001 3.321 104.70268569999999 3.206 129.039099 10.495 170.77535719999997 11.268 145.6397293 3.297 119.95505239999996 3.697 97.52347350000001 3.205 135.69103259999997 3.225 165.2353798 3.32 168.48283729999994 12.245 177.50390259999998 3.426 129.2557344 3.193 162.6566739 3.437 149.09118180000004 4.145 125.0386375 2.365 113.37319229999999 3.215 166.3276707 11.242 93.1371449 2.451 133.38579810000002 4.274 162.68344610000003 3.12 114.50852499999999 3.327 120.921109 3.214 104.93422650000001 3.315 132.2163447 3.295 97.80321900000001 2.46)
Error minima by case: (10.6123 1 9.0 1 5.2578 9 0.6059 8 1.9329 1 3.4384 1 0.0 0 6.2032 1 13.5162 1 26.9847 8 42.3481 1 11.7564 1 52.0528 2 23.0834 2 4.0477 1 0.1213 1 4.3186 9 0.0 0 24.3318 2 0.8216 1 9.8585 1 7.0801 1 0.1619 1 10.0166 1 0.1542 1)
Average genome size in population (length): 47.978
Average program size in population (points): 48.978
Average percent parens in population: 0.021
Minimum age in population: 171.1283906130792
Maximum age in population: 175.4425965992796
Average age in population: 173.6441262252584
Median age in population: 173.6847462773803
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.053
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 164805120
--- Timings ---
Current time: 1529616320873 milliseconds
Total Time:         383.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.3 seconds, 39.2%
Fitness Testing:    183.7 seconds, 47.9%
Report:              49.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction -95.02835022363054} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction float_add} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction integer_dup} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction float_inc} {:instruction float_stackdepth})
Best program: (integer_mod -95.02835022363054 float_rot float_pop in1 float_swap integer_flush float_add float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_rot float_stackdepth integer_dec integer_dup float_div float_inc float_inc float_inc float_stackdepth integer_min float_swap float_inc integer_inc integer_mod float_inc float_max integer_dup print_float float_inc float_stackdepth)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 3444.6732804
Median total errors in population: 1327.0
Error averages by case: (139.52050099999997 3.327 102.5943513 3.184 127.29288729999999 10.441 169.7768142 11.213 145.48463689999997 3.317 120.0474174 3.743 96.96353680000001 3.241 134.5229706 3.219 163.35532020000008 3.304 167.45614680000003 12.205 176.70592439999996 3.431 127.33581919999999 3.185 160.71173789999997 3.41 147.4406949 4.137 123.90222140000003 2.365 112.32198609999998 3.196 164.3810886 11.205 92.43921959999999 2.445 133.17963500000002 4.298 160.7681406 3.086 113.83172209999995 3.313 119.1878526 3.192 103.87324600000001 3.32 131.416581 3.305 96.64582850000002 2.435)
Error minima by case: (16.6123 1 8.0 1 7.863 8 33.1031 8 18.0259 1 17.2134 1 0.0 0 6.1781 1 15.5162 1 34.4107 9 0.9716 1 35.0 1 72.0 2 55.0 2 3.9643 1 18.0 1 4.3554 9 0.0 0 18.3318 2 0.1047 1 3.8585 1 26.0 1 9.0 1 35.0118 1 0.1072 1)
Average genome size in population (length): 48.269
Average program size in population (points): 49.269
Average percent parens in population: 0.021
Minimum age in population: 172.2221693215123
Maximum age in population: 177.2349060386431
Average age in population: 175.0572523731136
Median age in population: 175.0961670692258
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.763
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.763
Total error diversity:				 0.054
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 166011945
--- Timings ---
Current time: 1529616323741 milliseconds
Total Time:         386.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.5 seconds, 39.2%
Fitness Testing:    185.1 seconds, 47.9%
Report:              49.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_swap} {:instruction integer_div} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_pop} {:instruction float_add} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_swap} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_rot} {:instruction float_swap} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction float_pop} {:instruction float_inc} {:instruction float_frominteger})
Best program: (integer_mod integer_max float_swap integer_div float_frominteger float_rot float_pop float_add float_pop in1 float_inc integer_stackdepth integer_flush integer_dec float_shove float_div float_inc float_inc float_inc float_stackdepth integer_inc float_swap float_inc integer_mult float_inc float_swap float_inc integer_stackdepth float_inc float_swap float_stackdepth integer_add integer_inc integer_rot float_inc float_rot float_stackdepth print_float integer_rot float_swap float_stackdepth integer_add integer_inc float_pop float_inc float_frominteger)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3278.9072413
Median total errors in population: 1327.0
Error averages by case: (133.2961257 3.176 95.7917581 3.06 120.6438424 10.473 164.5672338 11.241 139.15233390000003 3.168 113.23739860000005 3.67 90.22704460000001 3.071 129.03839920000001 3.081 155.753716 3.182 161.44191389999995 12.237 171.06279439999994 3.271 120.20024849999999 3.067 153.78651149999996 3.292 139.8118692 4.024 118.2269204 2.198 104.08980229999996 3.066 158.5958045 11.211 85.74219919999999 2.268 126.48974230000002 4.142 154.87796469999998 2.98 107.40316119999999 3.171 112.2299385 3.06 97.85000310000001 3.169 124.8382421 3.151 89.82927320000003 2.294)
Error minima by case: (28.584 1 9.0 1 7.2331 9 33.493 9 14.0259 1 3.4384 1 0.0 0 2.1781 1 15.0 1 48.5261 9 42.3481 1 11.7564 1 19.0 2 23.0834 2 0.0357 1 0.1213 1 4.9731 9 0.0 0 24.3602 2 0.1541 1 18.0 1 26.9084 1 10.0 1 17.0166 1 0.4293 1)
Average genome size in population (length): 48.463
Average program size in population (points): 49.463
Average percent parens in population: 0.021
Minimum age in population: 173.9530756540526
Maximum age in population: 178.3651955028473
Average age in population: 176.5205385546254
Median age in population: 176.5883140587893
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.05
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 167223720
--- Timings ---
Current time: 1529616326824 milliseconds
Total Time:         389.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.8 seconds, 39.3%
Fitness Testing:    186.5 seconds, 47.9%
Report:              49.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction -95.02835022363054} {:instruction float_rot} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction integer_flush} {:instruction float_add} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_rot} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_rot} {:instruction float_rot} {:instruction 10.028338956725747} {:instruction integer_dup})
Best program: (integer_mod -95.02835022363054 float_rot float_pop in1 float_swap integer_flush float_add float_inc float_div float_inc float_swap float_div float_inc integer_add float_inc float_rot float_stackdepth integer_dec float_rot float_div float_inc float_inc float_inc float_stackdepth integer_min float_swap float_inc float_swap float_stackdepth float_dup_items integer_inc integer_yankdup float_inc float_rot float_stackdepth print_float integer_rot float_rot 10.028338956725747 integer_dup)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 3027.3007846999994
Median total errors in population: 1327.0
Error averages by case: (123.4493769 3.122 85.0311871 2.983 110.2368629 10.434 154.3459236 11.242 128.64575259999998 3.107 104.3825771 3.456 79.72872660000002 2.998 118.41201410000004 3.025 147.7875937 3.073 152.36421139999996 12.214 161.32884120000003 3.198 110.0750473 2.98 144.40459869999998 3.187 129.94030440000003 3.923 107.53564329999999 2.145 94.20468660000002 2.995 148.3410548 11.204 75.25291 2.219 116.32692949999996 4.089 144.5912547 2.906 97.04886699999999 3.11 101.64946920000001 2.986 87.09547020000001 3.084 115.73755770000002 3.079 80.38192410000002 2.243)
Error minima by case: (27.584 1 8.0 1 7.2331 9 31.6499 9 6.0259 1 1.4384 1 0.0 0 1.1781 1 66.2671 1 48.5261 8 41.3481 1 12.7564 1 53.0528 2 22.0834 2 1.0357 1 0.8787 1 4.9264 9 0.0 0 25.3602 2 0.1047 1 17.0 1 26.0 1 0.7329 1 19.0166 1 0.1072 1)
Average genome size in population (length): 48.288
Average program size in population (points): 49.288
Average percent parens in population: 0.021
Minimum age in population: 175.2601498836963
Maximum age in population: 179.7193883746445
Average age in population: 177.9390599797798
Median age in population: 177.9689348782019
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.797
Total error diversity:				 0.057
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 168431070
--- Timings ---
Current time: 1529616329908 milliseconds
Total Time:         392.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.1 seconds, 39.3%
Fitness Testing:    187.8 seconds, 47.9%
Report:              50.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction integer_add} {:instruction float_tan} {:instruction float_dup_items} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_div} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction in2} {:instruction integer_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_max} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_div} {:instruction float_inc} {:instruction integer_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction print_float})
Best program: (integer_mod integer_mod integer_add float_tan float_dup_items float_pop in1 float_inc integer_stackdepth integer_flush float_div float_shove float_div float_inc float_inc float_inc integer_div in2 integer_swap float_inc float_swap float_inc float_rot float_max float_inc float_yank float_inc integer_stackdepth integer_sub integer_inc float_swap float_swap float_inc float_rot float_stackdepth print_float integer_div float_inc integer_inc float_swap float_inc float_rot float_stackdepth integer_dec float_swap float_inc float_rot float_stackdepth print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3382.0078521999994
Median total errors in population: 1327.0
Error averages by case: (136.9119776 3.248 100.02803959999997 3.127 124.92337999999998 10.532 168.27454999999998 11.294 142.8872634 3.223 116.11526229999997 3.775 94.07280530000004 3.144 132.92333770000002 3.164 160.78090650000004 3.23 165.4850455 12.279 174.58715929999997 3.326 124.4863957 3.106 158.16159649999994 3.333 144.7717631 4.031 122.21836750000003 2.291 108.87160640000002 3.141 162.46348310000002 11.282 89.6070967 2.352 130.22935089999996 4.21 158.7942515 3.051 111.19111139999998 3.238 116.35979499999998 3.126 101.91108430000001 3.23 129.1310165 3.193 94.54520640000003 2.35)
Error minima by case: (8.5661 1 8.0 1 8.8132 8 25.0676 8 13.0224 1 6.4384 1 0.0 0 8.2137 1 19.0 1 52.6366 8 50.6235 1 36.0 1 23.0 2 40.0 1 6.012 1 19.0 1 5.3321 9 0.0 0 19.3318 2 0.8091 1 4.8585 1 18.6271 1 10.0 1 9.8333 1 1.6985 1)
Average genome size in population (length): 48.217
Average program size in population (points): 49.217
Average percent parens in population: 0.021
Minimum age in population: 176.5677487675018
Maximum age in population: 181.1787931633286
Average age in population: 179.4010269754865
Median age in population: 179.4446552530835
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.05
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 169636570
--- Timings ---
Current time: 1529616332895 milliseconds
Total Time:         395.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.4 seconds, 39.3%
Fitness Testing:    189.2 seconds, 47.9%
Report:              50.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 54166.0
Test mean error for best: 27.08300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 43.0066432259 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 82.6445537773 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 88.1784404039 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 71.6113545279 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_swap} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_inc} {:instruction float_max} {:instruction float_rot} {:instruction float_pop} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_shove} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_max} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction print_float})
Best program: (integer_mod integer_max float_swap integer_div float_pop integer_add float_dup float_dup_items float_mod float_dup_items integer_add -49 float_yank integer_stackdepth float_rot integer_inc float_max float_rot float_pop integer_sub float_inc integer_stackdepth integer_flush float_div float_inc float_inc float_inc integer_div integer_inc integer_shove float_pop in1 float_inc integer_stackdepth integer_flush integer_dup float_shove float_div float_inc float_inc float_inc integer_div integer_inc integer_swap float_inc float_frominteger float_inc float_swap float_inc integer_stackdepth float_inc float_max float_stackdepth integer_inc integer_mod float_inc float_rot print_float)
Errors: [56.0 2 17.0 2 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 87.0 11 2.0 1 47.0 3 83.0 2 26.0 2 35.0 2 17.0 2 48.0 2 10.0 1]
Total: 1327.0
Mean: 26.54
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3225.9349995999996
Median total errors in population: 1327.0
Error averages by case: (130.63239619999996 3.2 94.02050549999994 3.086 118.85841539999997 10.434 161.68280729999998 11.216 136.32349969999996 3.175 111.01867610000001 3.683 87.87571130000003 3.098 126.1484421 3.106 155.02592520000007 3.207 159.08842200000004 12.191 168.50094839999997 3.312 118.71314709999999 3.091 152.58656139999994 3.329 138.5990638 4.02 115.37168110000005 2.249 102.8428037 3.088 156.51014950000004 11.182 83.41314919999994 2.314 123.9438837 4.162 152.78887940000004 2.996 104.92733729999995 3.191 110.51743319999999 3.1 95.08244159999998 3.193 122.67442599999998 3.189 87.62129340000004 2.355)
Error minima by case: (11.6123 1 9.0 1 7.4627 8 34.0676 9 3.7002 1 20.4384 1 0.0 0 2.8456 1 16.0 1 61.6366 9 42.3481 1 0.7564 1 20.0 1 23.0834 2 3.9643 1 0.1213 1 3.9731 9 0.0 0 13.3602 2 0.1661 1 8.8585 1 27.0 1 1.6054 1 0.0166 1 0.5707 1)
Average genome size in population (length): 47.303
Average program size in population (points): 48.303
Average percent parens in population: 0.022
Minimum age in population: 178.2985661282753
Maximum age in population: 182.8822951513977
Average age in population: 180.8689120539292
Median age in population: 180.910343596537
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.054
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 170819270
--- Timings ---
Current time: 1529616335987 milliseconds
Total Time:         398.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.6 seconds, 39.3%
Fitness Testing:    190.7 seconds, 47.9%
Report:              50.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 58604.098799999956
Test mean error for best: 29.30205
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -21.4160190901
Correct output: 26.0066432259  | Program output: 37.9117690623 
Correct output: -7.8630218821  | Program output: 35.1369781179 
Correct output: 43.0854975447  | Program output: -49.9145024553
Correct output: -19.0259005733 | Program output: -84.0259005733
Correct output: -36.5615896908 | Program output: -2.5615896908 
Correct output: -86.7179135459 | Program output: -81.7179135459
Correct output: -7.1780786915  | Program output: -61.1780786915
Correct output: 103.0257764527 | Program output: 17.0257764527 
Correct output: 70.6761243376  | Program output: -19.3238756624
Correct output: -141.6518933902 | Program output: -47.6518933902
Correct output: 82.2435662182  | Program output: 37.2435662182 
Correct output: 115.9472214055 | Program output: 33.9472214055 
Correct output: 157.0833815093 | Program output: 37.9117690623 
Correct output: -4.9643490685  | Program output: -46.9643490685
Correct output: 60.1212975555  | Program output: 32.1212975555 
Correct output: -4.3554462227  | Program output: 37.9117690623 
Correct output: -72.9278840186 | Program output: -76.9278840186
Correct output: -110.3601522223 | Program output: -65.3601522223
Correct output: 5.1784404039   | Program output: 37.9117690623 
Correct output: -95.8868459204 | Program output: -71.8868459204
Correct output: 36.6113545279  | Program output: 37.9117690623 
Correct output: -16.9310924128 | Program output: -35.9310924128
Correct output: -57.0165724778 | Program output: -11.0165724778
Correct output: -0.4292752469  | Program output: -12.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_swap} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_swap integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items integer_add -49 float_frominteger integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 integer_stackdepth float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_div float_inc float_rot integer_dup_times integer_shove integer_dec float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_stackdepth print_float integer_flush)
Errors: [54.0 2 11.9051 11 43.0 11 93.0 11 65.0 2 34.0 2 5.0 1 54.0 2 86.0 2 90.0 13 94.0 2 45.0 2 82.0 3 119.1716 11 42.0 1 28.0 2 42.2672 11 4.0 1 45.0 3 32.7333 10 24.0 2 1.3004 9 19.0 2 46.0 2 12.0 2]
Total: 1292.3776000000003
Mean: 25.847551
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3062.2845466999997
Median total errors in population: 1327.0
Error averages by case: (125.1933323 3.024 86.05533109999999 2.946 111.53812659999998 10.469 156.6717059 11.249 130.94911299999998 3.012 105.36670319999999 3.556 80.8972574 2.91 120.76571890000001 2.947 148.4406496 3.024 154.41128120000002 12.251 162.6364334 3.098 110.82531080000003 2.941 145.02449179999996 3.157 131.27015430000003 3.884 109.81190120000001 2.052 95.00148779999999 2.957 149.70267969999998 11.21 76.4666327 2.109 117.5646376 3.984 145.95513290000002 2.878 98.27393249999999 3.017 102.65123270000001 2.946 89.06240910000001 3.014 117.5249974 2.987 82.44789360000001 2.154)
Error minima by case: (26.584 1 8.0 1 7.863 9 30.4686 8 15.6828 1 7.4384 1 0.0 0 7.1781 1 16.0 1 59.6366 8 40.3481 1 13.7564 1 20.0 1 21.0834 2 4.9643 1 1.8787 1 3.6612 8 0.0 0 26.3602 2 0.0935 1 17.0 1 1.3004 1 9.0 1 13.0166 1 0.4293 1)
Average genome size in population (length): 46.879
Average program size in population (points): 47.879
Average percent parens in population: 0.022
Minimum age in population: 179.5688449796666
Maximum age in population: 184.3419975890102
Average age in population: 182.3049858026545
Median age in population: 182.366584664288
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.046
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 171991445
--- Timings ---
Current time: 1529616338964 milliseconds
Total Time:         401.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.8 seconds, 39.3%
Fitness Testing:    192.0 seconds, 47.9%
Report:              51.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 58604.098799999956
Test mean error for best: 29.30205
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -21.4160190901
Correct output: 26.0066432259  | Program output: 37.9117690623 
Correct output: -7.8630218821  | Program output: 35.1369781179 
Correct output: 43.0854975447  | Program output: -49.9145024553
Correct output: -19.0259005733 | Program output: -84.0259005733
Correct output: -36.5615896908 | Program output: -2.5615896908 
Correct output: -86.7179135459 | Program output: -81.7179135459
Correct output: -7.1780786915  | Program output: -61.1780786915
Correct output: 103.0257764527 | Program output: 17.0257764527 
Correct output: 70.6761243376  | Program output: -19.3238756624
Correct output: -141.6518933902 | Program output: -47.6518933902
Correct output: 82.2435662182  | Program output: 37.2435662182 
Correct output: 115.9472214055 | Program output: 33.9472214055 
Correct output: 157.0833815093 | Program output: 37.9117690623 
Correct output: -4.9643490685  | Program output: -46.9643490685
Correct output: 60.1212975555  | Program output: 32.1212975555 
Correct output: -4.3554462227  | Program output: 37.9117690623 
Correct output: -72.9278840186 | Program output: -76.9278840186
Correct output: -110.3601522223 | Program output: -65.3601522223
Correct output: 5.1784404039   | Program output: 37.9117690623 
Correct output: -95.8868459204 | Program output: -71.8868459204
Correct output: 36.6113545279  | Program output: 37.9117690623 
Correct output: -16.9310924128 | Program output: -35.9310924128
Correct output: -57.0165724778 | Program output: -11.0165724778
Correct output: -0.4292752469  | Program output: -12.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_swap} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_swap integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items integer_add -49 float_frominteger integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 integer_stackdepth float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_div float_inc float_rot integer_dup_times integer_shove integer_dec float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_stackdepth print_float integer_flush)
Errors: [54.0 2 11.9051 11 43.0 11 93.0 11 65.0 2 34.0 2 5.0 1 54.0 2 86.0 2 90.0 13 94.0 2 45.0 2 82.0 3 119.1716 11 42.0 1 28.0 2 42.2672 11 4.0 1 45.0 3 32.7333 10 24.0 2 1.3004 9 19.0 2 46.0 2 12.0 2]
Total: 1292.3776000000003
Mean: 25.847551
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3513.4679923999997
Median total errors in population: 1327.0
Error averages by case: (142.30844119999998 3.343 105.72843669999999 3.32 130.20442239999997 10.485 172.52536319999996 11.234 147.6298403 3.311 122.96935080000006 3.883 99.61462620000003 3.223 137.6099047 3.227 165.94818780000006 3.383 170.12262060000006 12.21 179.3993258 3.453 130.09204069999996 3.264 163.3927278 3.496 150.40813480000003 4.279 126.95106450000007 2.368 114.2582844 3.263 166.89213070000002 11.22 95.16464769999997 2.439 135.33725049999998 4.289 163.17165320000007 3.248 116.53053499999994 3.329 121.62465399999994 3.319 106.90695390000002 3.333 134.233002 3.327 99.72739350000003 2.471)
Error minima by case: (11.9368 1 6.0574 1 7.0463 8 4.1737 9 4.1166 1 5.2863 1 0.0 0 7.1781 1 13.0158 1 17.0158 9 41.3481 1 11.7564 1 9.0158 2 7.9842 2 4.9643 1 0.1213 1 4.3554 9 0.0 0 24.3602 2 0.0718 1 15.0574 1 1.2251 1 2.0218 1 6.4627 1 0.4293 1)
Average genome size in population (length): 47.261
Average program size in population (points): 48.261
Average percent parens in population: 0.022
Minimum age in population: 180.5688449796666
Maximum age in population: 185.8658933710609
Average age in population: 183.7390203436348
Median age in population: 183.7369839492849
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.061
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 173173045
--- Timings ---
Current time: 1529616341952 milliseconds
Total Time:         404.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.0 seconds, 39.3%
Fitness Testing:    193.4 seconds, 47.8%
Report:              51.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 58604.098799999956
Test mean error for best: 29.30205
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -21.4160190901
Correct output: 26.0066432259  | Program output: 37.9117690623 
Correct output: -7.8630218821  | Program output: 35.1369781179 
Correct output: 43.0854975447  | Program output: -49.9145024553
Correct output: -19.0259005733 | Program output: -84.0259005733
Correct output: -36.5615896908 | Program output: -2.5615896908 
Correct output: -86.7179135459 | Program output: -81.7179135459
Correct output: -7.1780786915  | Program output: -61.1780786915
Correct output: 103.0257764527 | Program output: 17.0257764527 
Correct output: 70.6761243376  | Program output: -19.3238756624
Correct output: -141.6518933902 | Program output: -47.6518933902
Correct output: 82.2435662182  | Program output: 37.2435662182 
Correct output: 115.9472214055 | Program output: 33.9472214055 
Correct output: 157.0833815093 | Program output: 37.9117690623 
Correct output: -4.9643490685  | Program output: -46.9643490685
Correct output: 60.1212975555  | Program output: 32.1212975555 
Correct output: -4.3554462227  | Program output: 37.9117690623 
Correct output: -72.9278840186 | Program output: -76.9278840186
Correct output: -110.3601522223 | Program output: -65.3601522223
Correct output: 5.1784404039   | Program output: 37.9117690623 
Correct output: -95.8868459204 | Program output: -71.8868459204
Correct output: 36.6113545279  | Program output: 37.9117690623 
Correct output: -16.9310924128 | Program output: -35.9310924128
Correct output: -57.0165724778 | Program output: -11.0165724778
Correct output: -0.4292752469  | Program output: -12.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 5} {:instruction integer_mod} {:instruction -95.02835022363054} {:instruction float_rot} {:instruction float_pop} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_flush})
Best program: (5 integer_mod -95.02835022363054 float_rot float_pop float_dup_items integer_add -49 float_frominteger integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 integer_stackdepth float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_div float_inc float_rot integer_dup_times integer_shove integer_dec float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_stackdepth print_float integer_flush)
Errors: [54.0 2 11.9051 11 43.0 11 93.0 11 65.0 2 34.0 2 5.0 1 54.0 2 86.0 2 90.0 13 94.0 2 45.0 2 82.0 3 119.1716 11 42.0 1 28.0 2 42.2672 11 4.0 1 45.0 3 32.7333 10 24.0 2 1.3004 9 19.0 2 46.0 2 12.0 2]
Total: 1292.3776000000003
Mean: 25.847551
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3484.9740954999997
Median total errors in population: 1327.0
Error averages by case: (141.4843708 3.241 103.54351930000009 3.494 128.6244613 10.574 171.8975807 11.329 147.88352799999998 3.237 120.9978029 3.753 97.88517230000004 3.115 137.08137299999999 3.17 165.12955410000004 3.242 169.71223600000002 12.307 178.6371161 3.327 128.41347330000002 3.17 162.1011255 3.411 150.6176085000001 4.424 126.37162459999996 2.287 112.8236265 3.148 164.52724530000006 11.274 94.20370589999999 2.353 134.6440283 4.198 160.39136640000004 3.415 115.64110769999998 3.235 118.74579909999983 3.425 106.18962810000001 3.23 133.8328999 3.209 99.60714189999999 2.419)
Error minima by case: (27.584 1 8.0 1 8.4209 9 4.876 9 17.0239 1 1.4384 1 0.0 0 4.8002 1 42.3961 1 9.7295 9 41.3481 1 12.7564 1 53.0528 2 22.0834 2 6.9282 1 0.8787 1 1.3664 9 0.0 0 25.3602 2 0.1661 1 17.0 1 0.3004 1 9.0 1 11.0166 1 0.4716 1)
Average genome size in population (length): 47.967
Average program size in population (points): 48.967
Average percent parens in population: 0.021
Minimum age in population: 182.617373827042
Maximum age in population: 187.3475832753528
Average age in population: 185.1983754986766
Median age in population: 185.2694569535249
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.072
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 174372245
--- Timings ---
Current time: 1529616344998 milliseconds
Total Time:         407.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.2 seconds, 39.3%
Fitness Testing:    194.8 seconds, 47.8%
Report:              52.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 51585.94789999998
Test mean error for best: 25.79297
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -21.4160190901
Correct output: 26.0066432259  | Program output: 37.9117690623 
Correct output: -7.8630218821  | Program output: 35.1369781179 
Correct output: 43.0854975447  | Program output: -49.9145024553
Correct output: -19.0259005733 | Program output: -84.0259005733
Correct output: -36.5615896908 | Program output: -2.5615896908 
Correct output: -86.7179135459 | Program output: -81.7179135459
Correct output: -7.1780786915  | Program output: -61.1780786915
Correct output: 103.0257764527 | Program output: 17.0257764527 
Correct output: 70.6761243376  | Program output: -19.3238756624
Correct output: -141.6518933902 | Program output: -47.6518933902
Correct output: 82.2435662182  | Program output: 37.2435662182 
Correct output: 115.9472214055 | Program output: 33.9472214055 
Correct output: 157.0833815093 | Program output: 92.0833815093 
Correct output: -4.9643490685  | Program output: -46.9643490685
Correct output: 60.1212975555  | Program output: 32.1212975555 
Correct output: -4.3554462227  | Program output: 37.9117690623 
Correct output: -72.9278840186 | Program output: -76.9278840186
Correct output: -110.3601522223 | Program output: -65.3601522223
Correct output: 5.1784404039   | Program output: 37.9117690623 
Correct output: -95.8868459204 | Program output: -71.8868459204
Correct output: 36.6113545279  | Program output: 37.9117690623 
Correct output: -16.9310924128 | Program output: -35.9310924128
Correct output: -57.0165724778 | Program output: -11.0165724778
Correct output: -0.4292752469  | Program output: -12.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_swap} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_swap integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items integer_add -49 float_frominteger integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 integer_stackdepth float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_div float_inc float_dup_items integer_dup_times integer_shove integer_dec float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_stackdepth print_float integer_flush)
Errors: [54.0 2 11.9051 11 43.0 11 93.0 11 65.0 2 34.0 2 5.0 1 54.0 2 86.0 2 90.0 13 94.0 2 45.0 2 82.0 3 65.0 3 42.0 1 28.0 2 42.2672 11 4.0 1 45.0 3 32.7333 10 24.0 2 1.3004 9 19.0 2 46.0 2 12.0 2]
Total: 1230.2060000000001
Mean: 24.60412
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3266.8080409000013
Median total errors in population: 1327.0
Error averages by case: (131.98667939999993 3.354 94.62642900000036 5.146 119.26343750000001 10.648 163.39513399999996 11.294 138.17046489999998 3.361 111.73796779999998 3.767 90.34596900000008 3.115 128.3248177 3.288 156.47833640000002 3.423 161.2311697 12.378 170.40900459999995 3.48 121.32860470000001 3.614 154.79850269999994 3.817 153.70726570000028 5.996 117.78020259999995 2.4 105.16771219999997 3.34 146.91065020000028 11.229 86.47484149999998 2.489 126.1842125 4.341 142.10850590000052 4.934 107.26977429999991 3.385 104.6347472999995 4.825 97.80079130000001 3.334 123.46024040000002 3.351 90.22157959999997 2.682)
Error minima by case: (17.3371 1 8.0 1 4.2578 8 0.1737 8 5.1963 1 0.0882 1 0.0 0 3.8456 1 13.0 1 6.0508 8 48.8987 1 5.5166 1 17.0 1 19.1716 2 6.1109 1 12.1598 1 3.664 9 0.0 0 11.0882 2 0.1538 1 3.1337 1 0.3004 1 3.1015 1 9.9936 1 1.0 1)
Average genome size in population (length): 50.16
Average program size in population (points): 51.16
Average percent parens in population: 0.020
Minimum age in population: 183.617373827042
Maximum age in population: 188.6856734780223
Average age in population: 186.5313802794897
Median age in population: 186.5445835209221
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 76
Genome diversity (% unique Plush genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.095
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 175626245
--- Timings ---
Current time: 1529616348140 milliseconds
Total Time:         410.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.6 seconds, 39.4%
Fitness Testing:    196.2 seconds, 47.8%
Report:              52.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 51585.94789999998
Test mean error for best: 25.79297
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -21.4160190901
Correct output: 26.0066432259  | Program output: 37.9117690623 
Correct output: -7.8630218821  | Program output: 35.1369781179 
Correct output: 43.0854975447  | Program output: -49.9145024553
Correct output: -19.0259005733 | Program output: -84.0259005733
Correct output: -36.5615896908 | Program output: -2.5615896908 
Correct output: -86.7179135459 | Program output: -81.7179135459
Correct output: -7.1780786915  | Program output: -61.1780786915
Correct output: 103.0257764527 | Program output: 17.0257764527 
Correct output: 70.6761243376  | Program output: -19.3238756624
Correct output: -141.6518933902 | Program output: -47.6518933902
Correct output: 82.2435662182  | Program output: 37.2435662182 
Correct output: 115.9472214055 | Program output: 33.9472214055 
Correct output: 157.0833815093 | Program output: 92.0833815093 
Correct output: -4.9643490685  | Program output: -46.9643490685
Correct output: 60.1212975555  | Program output: 32.1212975555 
Correct output: -4.3554462227  | Program output: 37.9117690623 
Correct output: -72.9278840186 | Program output: -76.9278840186
Correct output: -110.3601522223 | Program output: -65.3601522223
Correct output: 5.1784404039   | Program output: 37.9117690623 
Correct output: -95.8868459204 | Program output: -71.8868459204
Correct output: 36.6113545279  | Program output: 37.9117690623 
Correct output: -16.9310924128 | Program output: -35.9310924128
Correct output: -57.0165724778 | Program output: -11.0165724778
Correct output: -0.4292752469  | Program output: -12.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_swap} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_swap integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items integer_add -49 float_frominteger integer_swap float_shove integer_pop float_inc integer_min float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 integer_stackdepth float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_div float_inc float_dup_items integer_dup_times integer_shove integer_dec float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_stackdepth print_float integer_flush)
Errors: [54.0 2 11.9051 11 43.0 11 93.0 11 65.0 2 34.0 2 5.0 1 54.0 2 86.0 2 90.0 13 94.0 2 45.0 2 82.0 3 65.0 3 42.0 1 28.0 2 42.2672 11 4.0 1 45.0 3 32.7333 10 24.0 2 1.3004 9 19.0 2 46.0 2 12.0 2]
Total: 1230.2060000000001
Mean: 24.60412
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2792.203900600005
Median total errors in population: 1294.3776000000003
Error averages by case: (115.69142459999998 3.449 69.83271890000098 9.279 96.93928899999997 10.895 144.11346970000002 11.298 120.21035799999994 3.481 95.54752300000004 3.758 74.85711980000004 2.889 110.15466230000001 3.408 138.3916442 3.585 143.7439266 12.574 155.33136479999993 3.635 101.8109022 4.512 136.0972794999999 4.483 159.53007020000086 9.704 99.76072999999998 2.484 85.27397829999997 3.474 103.57665410000068 11.149 72.10249779999998 2.605 110.97784040000002 4.485 96.03357810000102 8.622 91.90491309999994 3.578 66.83113880000005 8.0 80.84849430000004 3.35 107.32974839999997 3.508 73.9555745 3.152)
Error minima by case: (27.584 1 3.9118 1 7.3155 8 2.1737 8 14.0203 1 1.4384 1 1.0 1 5.485 1 0.443 1 22.7146 7 0.9716 2 8.0882 1 12.4785 2 19.1716 2 3.0882 1 0.8787 1 4.5665 9 0.0 0 25.3602 2 0.1003 1 17.0 1 0.1732 1 11.0 1 10.0166 1 0.0532 1)
Average genome size in population (length): 57.9
Average program size in population (points): 58.9
Average percent parens in population: 0.017
Minimum age in population: 184.995227884092
Maximum age in population: 189.83860777452
Average age in population: 187.7666706750867
Median age in population: 187.7695912254402
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 171
Genome diversity (% unique Plush genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.127
Error (vector) diversity:			 0.132
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 177073745
--- Timings ---
Current time: 1529616351343 milliseconds
Total Time:         413.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.8 seconds, 39.4%
Fitness Testing:    197.7 seconds, 47.8%
Report:              53.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 51523.74139999998
Test mean error for best: 25.76187
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -21.4160190901
Correct output: 26.0066432259  | Program output: 36.9117690623 
Correct output: -7.8630218821  | Program output: 35.1369781179 
Correct output: 43.0854975447  | Program output: -49.9145024553
Correct output: -19.0259005733 | Program output: -84.0259005733
Correct output: -36.5615896908 | Program output: -2.5615896908 
Correct output: -86.7179135459 | Program output: -81.7179135459
Correct output: -7.1780786915  | Program output: -61.1780786915
Correct output: 103.0257764527 | Program output: 17.0257764527 
Correct output: 70.6761243376  | Program output: -19.3238756624
Correct output: -141.6518933902 | Program output: -47.6518933902
Correct output: 82.2435662182  | Program output: 37.2435662182 
Correct output: 115.9472214055 | Program output: 33.9472214055 
Correct output: 157.0833815093 | Program output: 92.0833815093 
Correct output: -4.9643490685  | Program output: -46.9643490685
Correct output: 60.1212975555  | Program output: 32.1212975555 
Correct output: -4.3554462227  | Program output: 36.9117690623 
Correct output: -72.9278840186 | Program output: -76.9278840186
Correct output: -110.3601522223 | Program output: -65.3601522223
Correct output: 5.1784404039   | Program output: 36.9117690623 
Correct output: -95.8868459204 | Program output: -71.8868459204
Correct output: 36.6113545279  | Program output: 36.9117690623 
Correct output: -16.9310924128 | Program output: -35.9310924128
Correct output: -57.0165724778 | Program output: -11.0165724778
Correct output: -0.4292752469  | Program output: -12.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_swap} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction integer_shove} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_swap integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items integer_add -49 float_frominteger integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 integer_stackdepth float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_div float_inc float_dup_items integer_dup_times integer_shove integer_dec float_inc float_swap integer_shove float_rot float_stackdepth float_inc float_rot float_min float_stackdepth print_float integer_flush)
Errors: [54.0 2 10.9051 10 43.0 11 93.0 11 65.0 2 34.0 2 5.0 1 54.0 2 86.0 2 90.0 13 94.0 2 45.0 2 82.0 3 65.0 3 42.0 1 28.0 2 41.2672 11 4.0 1 45.0 3 31.7333 10 24.0 2 0.3004 8 19.0 2 46.0 2 12.0 2]
Total: 1224.2060000000001
Mean: 24.48412
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2531.4621304000048
Median total errors in population: 1292.3776000000003
Error averages by case: (104.66208829999997 3.328 60.30561540000149 10.68 87.5634906 10.917 133.4569284999999 11.319 109.85883279999997 3.397 82.15325670000006 3.377 64.26486110000002 2.71 99.61916140000001 3.311 128.73807900000014 3.459 132.82587849999996 12.502 145.70378899999992 3.476 93.69307179999997 4.875 128.12838689999992 4.18 159.538893200001 10.694 89.15257769999994 2.366 76.93800559999994 3.359 87.84830710000082 11.073 61.94703289999997 2.508 100.78888490000007 4.379 79.30091780000116 9.831 81.43617789999992 3.473 52.57982400000011 8.981 70.29288170000002 3.177 95.06503440000004 3.412 61.710153199999986 3.106)
Error minima by case: (32.416 1 9.1286 2 8.0789 8 0.1737 9 18.9741 1 1.4384 1 1.0 1 5.8002 1 15.0 1 27.7644 8 90.0 2 7.7248 2 19.0 1 19.1716 2 4.0882 1 8.9118 1 4.3609 9 0.0 0 41.0 2 0.1003 1 20.0 1 0.1732 1 11.0 1 14.0166 1 0.2609 1)
Average genome size in population (length): 61.946
Average program size in population (points): 62.946
Average percent parens in population: 0.016
Minimum age in population: 186.3238462235655
Maximum age in population: 191.454639322458
Average age in population: 189.1690683369674
Median age in population: 189.2210734827517
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 103
Genome diversity (% unique Plush genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.133
Error (vector) diversity:			 0.136
Behavioral diversity:				 0.136
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 178622395
--- Timings ---
Current time: 1529616354712 milliseconds
Total Time:         416.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.0 seconds, 39.3%
Fitness Testing:    199.4 seconds, 47.8%
Report:              53.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 51360.03739999998
Test mean error for best: 25.68002
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -19.4160190901
Correct output: 26.0066432259  | Program output: 37.9117690623 
Correct output: -7.8630218821  | Program output: 37.1369781179 
Correct output: 43.0854975447  | Program output: -47.9145024553
Correct output: -19.0259005733 | Program output: -82.0259005733
Correct output: -36.5615896908 | Program output: -0.5615896908 
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -59.1780786915
Correct output: 103.0257764527 | Program output: 19.0257764527 
Correct output: 70.6761243376  | Program output: -17.3238756624
Correct output: -141.6518933902 | Program output: -45.6518933902
Correct output: 82.2435662182  | Program output: 39.2435662182 
Correct output: 115.9472214055 | Program output: 35.9472214055 
Correct output: 157.0833815093 | Program output: 94.0833815093 
Correct output: -4.9643490685  | Program output: -44.9643490685
Correct output: 60.1212975555  | Program output: 34.1212975555 
Correct output: -4.3554462227  | Program output: 37.9117690623 
Correct output: -72.9278840186 | Program output: -74.9278840186
Correct output: -110.3601522223 | Program output: -63.3601522223
Correct output: 5.1784404039   | Program output: 37.9117690623 
Correct output: -95.8868459204 | Program output: -69.8868459204
Correct output: 36.6113545279  | Program output: 37.9117690623 
Correct output: -16.9310924128 | Program output: -33.9310924128
Correct output: -57.0165724778 | Program output: -9.0165724778 
Correct output: -0.4292752469  | Program output: -10.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction 5} {:instruction integer_sub} {:instruction print_float} {:instruction float_swap} {:instruction float_swap} {:instruction float_pop} {:instruction integer_max} {:instruction -13.79385572954024} {:instruction integer_div} {:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_rot} {:instruction float_tan} {:instruction in1} {:instruction float_yank} {:instruction integer_flush} {:instruction float_swap} {:instruction integer_swap} {:instruction integer_flush} {:instruction float_max} {:instruction float_pop} {:instruction print_float} {:instruction integer_inc} {:instruction float_swap} {:instruction tag_float_424} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_flush})
Best program: (5 integer_sub print_float float_swap float_swap float_pop integer_max -13.79385572954024 integer_div float_stackdepth integer_dup_items float_mult float_rot float_tan in1 float_yank integer_flush float_swap integer_swap integer_flush float_max float_pop print_float integer_inc float_swap tag_float_424 float_shove float_pop in1 float_swap in2 integer_stackdepth float_inc float_div float_inc float_swap float_inc float_div float_inc float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_dup_items float_inc float_dup_items integer_dup_times integer_shove integer_dec float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_stackdepth print_float integer_flush)
Errors: [56.0 2 11.9051 11 45.0 10 91.0 11 63.0 2 36.0 2 7.0 2 52.0 2 84.0 2 88.0 12 96.0 2 43.0 2 80.0 2 63.0 3 40.0 1 26.0 2 42.2672 11 2.0 1 47.0 3 32.7333 10 26.0 2 1.3004 9 17.0 2 48.0 2 10.0 1]
Total: 1217.2060000000001
Mean: 24.34412
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2695.80086900001
Median total errors in population: 1290.5435000000002
Error averages by case: (112.26648539999992 3.492 66.63262390000159 10.41 93.53056279999994 10.915 140.60462579999998 11.485 117.5761846999999 3.523 89.23137960000007 3.571 73.05603110000004 2.962 107.25870370000003 3.44 133.5692144000001 3.613 139.8171543999999 12.302 153.30178129999982 3.653 98.46945119999998 5.2 132.7308043999999 4.274 155.51325500000087 9.621 96.87519359999996 2.492 81.6891018999999 3.513 94.10427720000104 11.149 70.57001399999996 2.64 108.9952391000001 4.513 85.68773620000128 9.765 89.92056849999989 3.621 59.6128543000001 8.802 78.33549590000004 3.197 102.40902490000005 3.553 69.15210570000004 3.185)
Error minima by case: (4.451 1 9.0 1 7.0829 8 0.1737 1 18.9741 1 1.4384 1 1.0 1 3.8456 1 26.2627 1 6.087 2 2.2198 2 5.4804 1 39.1841 2 27.9762 2 4.9643 1 6.9118 1 3.4041 8 0.0 0 9.0882 2 0.1003 1 2.8443 1 0.1732 2 12.0 1 9.2487 1 0.4293 1)
Average genome size in population (length): 63.139
Average program size in population (points): 64.139
Average percent parens in population: 0.016
Minimum age in population: 187.3238462235655
Maximum age in population: 192.7685975991497
Average age in population: 190.4602870932136
Median age in population: 190.5345159988344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.17
Error (vector) diversity:			 0.182
Behavioral diversity:				 0.184
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 180200870
--- Timings ---
Current time: 1529616358232 milliseconds
Total Time:         420.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.4 seconds, 39.3%
Fitness Testing:    201.1 seconds, 47.8%
Report:              53.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 51012.62789999997
Test mean error for best: 25.50631
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -14.4160190901
Correct output: 26.0066432259  | Program output: 37.9117690623 
Correct output: -7.8630218821  | Program output: 37.9117690623 
Correct output: 43.0854975447  | Program output: -42.9145024553
Correct output: -19.0259005733 | Program output: -77.0259005733
Correct output: -36.5615896908 | Program output: 4.4384103092  
Correct output: -86.7179135459 | Program output: -74.7179135459
Correct output: -7.1780786915  | Program output: -54.1780786915
Correct output: 103.0257764527 | Program output: 24.0257764527 
Correct output: 70.6761243376  | Program output: -12.3238756624
Correct output: -141.6518933902 | Program output: -40.6518933902
Correct output: 82.2435662182  | Program output: 44.2435662182 
Correct output: 115.9472214055 | Program output: 40.9472214055 
Correct output: 157.0833815093 | Program output: 99.0833815093 
Correct output: -4.9643490685  | Program output: -39.9643490685
Correct output: 60.1212975555  | Program output: 39.1212975555 
Correct output: -4.3554462227  | Program output: 37.9117690623 
Correct output: -72.9278840186 | Program output: -69.9278840186
Correct output: -110.3601522223 | Program output: -58.3601522223
Correct output: 5.1784404039   | Program output: 37.9117690623 
Correct output: -95.8868459204 | Program output: -64.8868459204
Correct output: 36.6113545279  | Program output: 37.9117690623 
Correct output: -16.9310924128 | Program output: -28.9310924128
Correct output: -57.0165724778 | Program output: -4.0165724778 
Correct output: -0.4292752469  | Program output: -5.4292752469 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_dup} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_dup integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items integer_add -49 float_frominteger integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 integer_stackdepth float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_yank float_stackdepth integer_stackdepth float_inc float_div float_inc float_swap in2 integer_stackdepth float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot float_inc float_rot integer_div float_inc float_dup_items integer_dup_times integer_shove integer_dec float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_stackdepth print_float integer_flush)
Errors: [61.0 2 11.9051 11 45.7748 10 86.0 11 58.0 2 41.0 12 12.0 2 47.0 2 79.0 3 83.0 13 101.0 2 38.0 2 75.0 3 58.0 3 35.0 2 21.0 2 42.2672 11 3.0 2 52.0 3 32.7333 10 31.0 2 1.3004 9 12.0 2 53.0 2 5.0 1]
Total: 1208.9808
Mean: 24.179617
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2288.3108648000043
Median total errors in population: 1233.2060000000001
Error averages by case: (94.32627969999997 3.279 49.53560700000087 10.71 76.39275619999997 10.93 126.85462739999994 11.343 102.8274428 3.437 72.1674649 3.574 57.73106130000003 2.739 92.58881769999998 3.365 122.83679890000006 3.503 126.71183199999994 12.562 135.8063078999999 3.448 86.42604050000003 4.079 121.32293239999991 4.252 124.85595300000038 6.536 82.12873369999996 2.424 69.61705109999998 3.406 76.65303890000051 11.081 55.408951600000016 2.565 90.37137590000003 4.325 68.07387760000016 9.834 70.85428519999998 3.427 41.642813000000096 8.964 63.38735269999999 3.25 84.95815590000001 3.382 55.22630749999997 3.19)
Error minima by case: (16.0882 1 1.4755 1 3.2578 9 0.1737 9 10.4179 1 1.4384 1 1.0 1 2.2367 1 14.0 1 27.7644 7 56.0882 2 8.0882 2 18.0 2 16.1716 2 2.0882 1 8.9118 1 3.647 9 0.0 0 7.0882 2 0.0198 1 13.9118 1 0.2746 2 2.9411 1 8.0882 1 0.0532 1)
Average genome size in population (length): 62.549
Average program size in population (points): 63.549
Average percent parens in population: 0.016
Minimum age in population: 188.3238462235655
Maximum age in population: 194.1547556662586
Average age in population: 191.5084234013941
Median age in population: 191.5763199174645
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 61
Genome diversity (% unique Plush genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.188
Error (vector) diversity:			 0.202
Behavioral diversity:				 0.204
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 181764595
--- Timings ---
Current time: 1529616361587 milliseconds
Total Time:         423.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.6 seconds, 39.3%
Fitness Testing:    202.8 seconds, 47.8%
Report:              54.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 50364.24739999998
Test mean error for best: 25.18212
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -21.4160190901
Correct output: 26.0066432259  | Program output: 0.7851419784  
Correct output: -7.8630218821  | Program output: 0.7851419784  
Correct output: 43.0854975447  | Program output: -49.9145024553
Correct output: -19.0259005733 | Program output: -84.0259005733
Correct output: -36.5615896908 | Program output: -2.5615896908 
Correct output: -86.7179135459 | Program output: -81.7179135459
Correct output: -7.1780786915  | Program output: -61.1780786915
Correct output: 103.0257764527 | Program output: 17.0257764527 
Correct output: 70.6761243376  | Program output: -19.3238756624
Correct output: -141.6518933902 | Program output: -47.6518933902
Correct output: 82.2435662182  | Program output: 37.2435662182 
Correct output: 115.9472214055 | Program output: 33.9472214055 
Correct output: 157.0833815093 | Program output: 92.0833815093 
Correct output: -4.9643490685  | Program output: -46.9643490685
Correct output: 60.1212975555  | Program output: 32.1212975555 
Correct output: -4.3554462227  | Program output: 0.7851419784  
Correct output: -72.9278840186 | Program output: -76.9278840186
Correct output: -110.3601522223 | Program output: -65.3601522223
Correct output: 5.1784404039   | Program output: 0.7851419784  
Correct output: -95.8868459204 | Program output: -71.8868459204
Correct output: 36.6113545279  | Program output: 0.7851419784  
Correct output: -16.9310924128 | Program output: -35.9310924128
Correct output: -57.0165724778 | Program output: -11.0165724778
Correct output: -0.4292752469  | Program output: -12.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_swap} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_cos} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_swap integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items integer_add -49 float_frominteger integer_swap float_shove integer_pop float_inc integer_min float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 integer_stackdepth float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_div float_inc float_dup_items integer_dup_times integer_shove integer_dec float_inc float_swap float_cos float_rot float_stackdepth float_inc float_rot float_min float_stackdepth print_float integer_flush)
Errors: [54.0 2 25.2215 11 8.6482 11 93.0 11 65.0 2 34.0 2 5.0 1 54.0 2 86.0 2 90.0 13 94.0 2 45.0 2 82.0 3 65.0 3 42.0 1 28.0 2 5.1406 10 4.0 1 45.0 3 4.3933 9 24.0 2 35.8262 11 19.0 2 46.0 2 12.0 2]
Total: 1178.2297999999998
Mean: 23.564596
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2620.2761200000036
Median total errors in population: 1230.2060000000001
Error averages by case: (109.29694989999996 3.352 62.40865950000151 10.632 90.11661159999993 10.957 140.88394570000008 11.303 117.70318969999995 3.438 87.16865950000005 4.229 72.3455398 2.708 107.31244040000006 3.337 133.9534139000001 3.483 140.2436207999999 12.674 149.78793839999994 3.515 97.38583419999999 3.966 131.66253139999995 4.33 126.86130120000027 5.164 96.82052779999994 2.422 80.91588399999995 3.375 90.31215190000093 11.147 69.76387209999993 2.554 105.14568190000006 4.391 81.71542670000113 9.794 85.90583359999998 3.473 54.949562800000095 8.956 77.96019950000004 3.302 100.4543041 3.417 70.10603959999999 3.177)
Error minima by case: (34.416 1 9.0 2 6.8591 8 1.1737 8 17.9741 1 0.4384 1 1.0 1 6.5683 1 13.0 1 28.7644 9 88.0 2 35.0 1 17.0 2 19.1716 2 4.1739 1 18.0 1 3.3515 9 0.0 0 39.0 2 0.0198 1 18.0 1 0.2311 1 9.0 1 16.0166 1 1.4293 1)
Average genome size in population (length): 61.959
Average program size in population (points): 62.959
Average percent parens in population: 0.016
Minimum age in population: 190.118966444614
Maximum age in population: 194.9207727573561
Average age in population: 192.9748574439642
Median age in population: 193.0043897510239
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.194
Error (vector) diversity:			 0.2
Behavioral diversity:				 0.202
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 183313570
--- Timings ---
Current time: 1529616365017 milliseconds
Total Time:         427.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.8 seconds, 39.3%
Fitness Testing:    204.5 seconds, 47.9%
Report:              54.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 50364.24739999998
Test mean error for best: 25.18212
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -21.4160190901
Correct output: 26.0066432259  | Program output: 0.7851419784  
Correct output: -7.8630218821  | Program output: 0.7851419784  
Correct output: 43.0854975447  | Program output: -49.9145024553
Correct output: -19.0259005733 | Program output: -84.0259005733
Correct output: -36.5615896908 | Program output: -2.5615896908 
Correct output: -86.7179135459 | Program output: -81.7179135459
Correct output: -7.1780786915  | Program output: -61.1780786915
Correct output: 103.0257764527 | Program output: 17.0257764527 
Correct output: 70.6761243376  | Program output: -19.3238756624
Correct output: -141.6518933902 | Program output: -47.6518933902
Correct output: 82.2435662182  | Program output: 37.2435662182 
Correct output: 115.9472214055 | Program output: 33.9472214055 
Correct output: 157.0833815093 | Program output: 92.0833815093 
Correct output: -4.9643490685  | Program output: -46.9643490685
Correct output: 60.1212975555  | Program output: 32.1212975555 
Correct output: -4.3554462227  | Program output: 0.7851419784  
Correct output: -72.9278840186 | Program output: -76.9278840186
Correct output: -110.3601522223 | Program output: -65.3601522223
Correct output: 5.1784404039   | Program output: 0.7851419784  
Correct output: -95.8868459204 | Program output: -71.8868459204
Correct output: 36.6113545279  | Program output: 0.7851419784  
Correct output: -16.9310924128 | Program output: -35.9310924128
Correct output: -57.0165724778 | Program output: -11.0165724778
Correct output: -0.4292752469  | Program output: -12.4292752469
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_swap} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_cos} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_swap integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items integer_add -49 float_frominteger integer_swap float_shove integer_pop float_inc integer_min float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 integer_stackdepth float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_div float_inc float_dup_items integer_dup_times integer_shove integer_dec float_inc float_swap float_cos float_rot float_stackdepth float_inc float_rot float_min float_stackdepth print_float integer_flush)
Errors: [54.0 2 25.2215 11 8.6482 11 93.0 11 65.0 2 34.0 2 5.0 1 54.0 2 86.0 2 90.0 13 94.0 2 45.0 2 82.0 3 65.0 3 42.0 1 28.0 2 5.1406 10 4.0 1 45.0 3 4.3933 9 24.0 2 35.8262 11 19.0 2 46.0 2 12.0 2]
Total: 1178.2297999999998
Mean: 23.564596
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2617.4003039000045
Median total errors in population: 1225.2060000000001
Error averages by case: (110.79966679999997 3.49 65.53621430000116 10.472 93.60252789999987 10.74 136.11199719999996 11.238 113.7167193999999 3.554 87.97721840000007 5.866 71.90480280000001 3.095 103.37960090000006 3.453 132.49811630000013 3.668 135.93147889999995 12.444 151.58182029999995 3.672 96.9176468 4.391 131.1484915999999 4.557 128.2450584000003 5.334 93.0002249 2.554 80.11814509999995 3.598 93.42719140000078 11.142 67.56374249999993 2.738 107.17509150000014 4.497 85.01101200000113 9.706 88.07657849999997 3.639 58.56894020000009 8.85 74.59271500000006 3.457 101.41055709999998 3.561 66.3307457 3.058)
Error minima by case: (13.3733 1 9.2897 1 5.4236 8 0.8263 9 4.8545 1 0.1476 1 2.0 1 6.5647 1 13.0 2 26.7644 9 52.8626 1 35.0 1 17.0 2 18.1716 2 2.0882 1 16.2095 1 3.3788 8 0.0 0 21.5709 2 0.062 1 7.0976 1 0.2746 1 9.0 1 13.0166 1 0.4716 1)
Average genome size in population (length): 64.143
Average program size in population (points): 65.143
Average percent parens in population: 0.016
Minimum age in population: 192.3710718512629
Maximum age in population: 196.5296397057491
Average age in population: 194.4712542171785
Median age in population: 194.5049642781721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.213
Error (vector) diversity:			 0.22
Behavioral diversity:				 0.222
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 184917170
--- Timings ---
Current time: 1529616368495 milliseconds
Total Time:         430.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.0 seconds, 39.2%
Fitness Testing:    206.2 seconds, 47.9%
Report:              55.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 49583.910399999986
Test mean error for best: 24.79196
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -17.4160190901
Correct output: 26.0066432259  | Program output: 0.7851419784  
Correct output: -7.8630218821  | Program output: 0.7851419784  
Correct output: 43.0854975447  | Program output: -45.9145024553
Correct output: -19.0259005733 | Program output: -80.0259005733
Correct output: -36.5615896908 | Program output: 0.7851419784  
Correct output: -86.7179135459 | Program output: -77.7179135459
Correct output: -7.1780786915  | Program output: -57.1780786915
Correct output: 103.0257764527 | Program output: 21.0257764527 
Correct output: 70.6761243376  | Program output: -15.3238756624
Correct output: -141.6518933902 | Program output: -43.6518933902
Correct output: 82.2435662182  | Program output: 41.2435662182 
Correct output: 115.9472214055 | Program output: 37.9472214055 
Correct output: 157.0833815093 | Program output: 96.0833815093 
Correct output: -4.9643490685  | Program output: -42.9643490685
Correct output: 60.1212975555  | Program output: 36.1212975555 
Correct output: -4.3554462227  | Program output: 0.7851419784  
Correct output: -72.9278840186 | Program output: -72.9278840186
Correct output: -110.3601522223 | Program output: -61.3601522223
Correct output: 5.1784404039   | Program output: 0.7851419784  
Correct output: -95.8868459204 | Program output: -67.8868459204
Correct output: 36.6113545279  | Program output: 0.7851419784  
Correct output: -16.9310924128 | Program output: -31.9310924128
Correct output: -57.0165724778 | Program output: -7.0165724778 
Correct output: -0.4292752469  | Program output: -8.4292752469 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_cos} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max integer_dup_items float_dup_items integer_add -49 float_frominteger integer_swap float_shove integer_pop float_inc integer_min float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 integer_stackdepth float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_inc float_div float_inc float_swap float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_div float_inc float_dup_items integer_dup_times integer_shove integer_dec float_inc float_swap float_cos float_rot float_stackdepth float_inc float_rot float_min float_stackdepth print_float integer_flush)
Errors: [58.0 2 25.2215 11 8.6482 11 89.0 11 61.0 2 37.3467 11 9.0 2 50.0 1 82.0 3 86.0 13 98.0 2 41.0 2 78.0 3 61.0 3 38.0 1 24.0 2 5.1406 10 0.0 0 49.0 2 4.3933 9 28.0 2 35.8262 11 15.0 2 50.0 1 8.0 1]
Total: 1159.5765
Mean: 23.19153
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3037.8686017000023
Median total errors in population: 1219.2060000000001
Error averages by case: (126.6618274 3.888 78.0362766000016 10.798 105.20546549999975 10.585 150.07360510000004 11.35 130.00722379999993 4.065 105.44216450000006 7.682 94.68056270000002 4.002 119.7877861000001 3.958 150.2173657000001 4.357 151.33632059999982 12.393 167.50164769999992 4.133 115.00799269999996 4.926 148.7507462999999 5.06 146.88860620000025 5.703 109.91052749999986 3.18 98.2386392999999 4.218 104.27138700000094 11.232 89.33828509999992 3.389 123.77780770000008 4.858 96.03497980000145 9.919 104.9175449999999 4.095 71.41704419999968 9.203 92.91969780000012 3.992 117.7657916 3.958 85.43130579999999 3.304)
Error minima by case: (29.416 1 3.9967 1 1.7907 8 1.1737 7 3.295 1 1.4384 1 1.0 1 0.8893 1 46.0882 1 24.5949 8 56.6519 1 5.0882 1 42.0882 2 25.0882 2 0.9118 1 11.9118 1 3.647 9 0.0 0 39.0 2 0.062 1 18.0 1 0.2746 1 1.458 1 11.0166 1 0.3761 1)
Average genome size in population (length): 68.821
Average program size in population (points): 69.821
Average percent parens in population: 0.015
Minimum age in population: 193.7428861191725
Maximum age in population: 197.738626568742
Average age in population: 195.8536221754476
Median age in population: 195.8694619990255
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.242
Error (vector) diversity:			 0.261
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 186637695
--- Timings ---
Current time: 1529616371998 milliseconds
Total Time:         434.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.3 seconds, 39.2%
Fitness Testing:    208.0 seconds, 47.9%
Report:              55.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 46893.20989999994
Test mean error for best: 23.44660
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -18.4160190901
Correct output: 26.0066432259  | Program output: 37.9117690623 
Correct output: -7.8630218821  | Program output: 37.9117690623 
Correct output: 43.0854975447  | Program output: -10.002733393 
Correct output: -19.0259005733 | Program output: -44.114131511 
Correct output: -36.5615896908 | Program output: 0.4384103092  
Correct output: -86.7179135459 | Program output: -41.8061444836
Correct output: -7.1780786915  | Program output: -21.2663096292
Correct output: 103.0257764527 | Program output: 56.937545515  
Correct output: 70.6761243376  | Program output: 20.5878933999 
Correct output: -141.6518933902 | Program output: -44.6518933902
Correct output: 82.2435662182  | Program output: 77.1553352805 
Correct output: 115.9472214055 | Program output: 73.8589904677 
Correct output: 157.0833815093 | Program output: 131.9951505715
Correct output: -4.9643490685  | Program output: -7.0525800062 
Correct output: 60.1212975555  | Program output: 72.0330666178 
Correct output: -4.3554462227  | Program output: 37.9117690623 
Correct output: -72.9278840186 | Program output: -37.0161149563
Correct output: -110.3601522223 | Program output: -62.3601522223
Correct output: 5.1784404039   | Program output: 37.9117690623 
Correct output: -95.8868459204 | Program output: -68.8868459204
Correct output: 36.6113545279  | Program output: 37.9117690623 
Correct output: -16.9310924128 | Program output: 3.9806766495  
Correct output: -57.0165724778 | Program output: -8.0165724778 
Correct output: -0.4292752469  | Program output: 27.4824938154 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_dup} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction float_swap} {:instruction float_max} {:instruction float_div} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_add} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_dup integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items float_dup_items -49 float_frominteger integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 float_swap float_max float_div in2 integer_stackdepth float_inc float_div float_inc float_inc float_swap float_inc float_yank float_stackdepth float_div float_inc float_swap float_div float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_dup_items float_inc float_dup_items integer_dup_times integer_shove integer_dec float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_add print_float integer_flush)
Errors: [57.0 2 11.9051 11 45.7748 10 53.0882 12 25.0882 11 37.0 12 44.9118 11 14.0882 11 46.0882 11 50.0882 10 97.0 2 5.0882 11 42.0882 12 25.0882 11 2.0882 10 11.9118 12 42.2672 11 35.9118 11 48.0 3 32.7333 10 27.0 2 1.3004 9 20.9118 12 49.0 2 27.9118 10]
Total: 1082.3336000000002
Mean: 21.646671
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2734.689723900003
Median total errors in population: 1214.9808
Error averages by case: (119.12363519999995 3.632 72.83230890000114 10.575 95.79670129999943 10.462 137.84739180000003 11.105 115.35452299999997 3.609 94.90308580000003 9.072 80.2824088 3.579 105.09378100000004 3.486 134.88673160000008 4.17 137.72944479999995 12.496 159.90972969999996 3.917 99.13861019999999 4.484 133.16917729999986 4.92 129.6944983000002 5.295 94.85762659999993 2.955 82.43941409999995 4.077 95.21675730000045 11.008 72.91077439999991 3.088 115.80050480000014 4.563 87.79945140000117 9.658 96.78984999999992 3.744 68.27385449999989 9.235 76.77795250000004 3.542 110.05571010000003 3.654 68.82280050000001 2.857)
Error minima by case: (20.0882 1 5.2215 1 3.6378 8 1.1737 8 4.5299 1 0.0882 1 0.0 0 0.1336 1 3.905 1 20.4405 8 60.0882 1 5.0882 1 9.0164 1 20.1716 2 1.4733 1 8.6389 1 4.3609 8 0.0 0 11.0882 2 0.0387 1 9.9118 1 0.0276 1 7.0 1 12.0882 1 0.0 0)
Average genome size in population (length): 73.192
Average program size in population (points): 74.192
Average percent parens in population: 0.014
Minimum age in population: 195.02300287644
Maximum age in population: 199.1724699029065
Average age in population: 197.2486559510421
Median age in population: 197.2869146930253
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.234
Error (vector) diversity:			 0.259
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 188467520
--- Timings ---
Current time: 1529616375589 milliseconds
Total Time:         437.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.5 seconds, 39.2%
Fitness Testing:    209.9 seconds, 47.9%
Report:              56.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 46060.758299999914
Test mean error for best: 23.03038
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -21.4160190901
Correct output: 26.0066432259  | Program output: 37.9117690623 
Correct output: -7.8630218821  | Program output: 35.1369781179 
Correct output: 43.0854975447  | Program output: -13.002733393 
Correct output: -19.0259005733 | Program output: -47.114131511 
Correct output: -36.5615896908 | Program output: -2.5615896908 
Correct output: -86.7179135459 | Program output: -44.8061444836
Correct output: -7.1780786915  | Program output: -24.2663096292
Correct output: 103.0257764527 | Program output: 53.937545515  
Correct output: 70.6761243376  | Program output: 17.5878933999 
Correct output: -141.6518933902 | Program output: -47.6518933902
Correct output: 82.2435662182  | Program output: 74.1553352805 
Correct output: 115.9472214055 | Program output: 70.8589904677 
Correct output: 157.0833815093 | Program output: 128.9951505715
Correct output: -4.9643490685  | Program output: -10.0525800062
Correct output: 60.1212975555  | Program output: 69.0330666178 
Correct output: -4.3554462227  | Program output: 37.9117690623 
Correct output: -72.9278840186 | Program output: -40.0161149563
Correct output: -110.3601522223 | Program output: -65.3601522223
Correct output: 5.1784404039   | Program output: 37.9117690623 
Correct output: -95.8868459204 | Program output: -71.8868459204
Correct output: 36.6113545279  | Program output: 37.9117690623 
Correct output: -16.9310924128 | Program output: 0.9806766495  
Correct output: -57.0165724778 | Program output: -11.0165724778
Correct output: -0.4292752469  | Program output: 24.4824938154 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_dup} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction float_swap} {:instruction float_max} {:instruction float_div} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_add} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_dup integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items float_dup_items -49 float_frominteger integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 float_swap float_max float_div in2 integer_stackdepth float_inc float_yank float_stackdepth float_inc float_swap float_div float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_dup_items float_inc float_dup_items integer_dup_times integer_shove integer_dec float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_add print_float integer_flush)
Errors: [54.0 2 11.9051 11 43.0 11 56.0882 11 28.0882 11 34.0 2 41.9118 11 17.0882 11 49.0882 10 53.0882 11 94.0 2 8.0882 11 45.0882 12 28.0882 11 5.0882 11 8.9118 11 42.2672 11 32.9118 11 45.0 3 32.7333 10 24.0 2 1.3004 9 17.9118 12 46.0 2 24.9118 10]
Total: 1063.5588
Mean: 21.271175
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3251.0680069000014
Median total errors in population: 1204.9808
Error averages by case: (137.54960070000004 4.223 95.06014690000062 10.684 102.03191699999945 10.793 158.75097250000002 11.261 136.92204439999992 4.235 114.19364289999989 8.061 103.85610740000006 3.88 126.78914610000005 4.076 156.10704580000004 4.831 159.1831270999999 12.505 178.66026610000003 4.579 122.84653390000007 4.889 155.90446849999978 5.562 153.69200370000019 5.677 117.01220299999996 3.491 106.56256169999989 4.696 100.905081 10.771 98.61896739999993 3.65 136.18953480000002 5.178 96.29522370000062 9.499 117.93594179999997 4.274 96.99824389999904 9.937 100.61115870000006 4.058 127.98181149999999 4.273 91.66825640000003 3.659)
Error minima by case: (26.0882 1 8.0068 1 6.8655 8 1.1737 8 0.1519 1 0.5616 1 0.0 0 5.68 1 7.2686 2 18.4405 8 52.3481 1 3.0882 1 17.0 2 23.0882 1 0.9118 1 8.9118 1 3.358 7 0.0 0 10.3602 2 0.1003 1 3.9118 1 0.0276 1 1.6747 1 16.0166 1 0.0 0)
Average genome size in population (length): 71.244
Average program size in population (points): 72.244
Average percent parens in population: 0.014
Minimum age in population: 196.5026476801069
Maximum age in population: 200.4185047450235
Average age in population: 198.6183490208469
Median age in population: 198.6575550003211
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 57
Genome diversity (% unique Plush genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.269
Error (vector) diversity:			 0.287
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 190248620
--- Timings ---
Current time: 1529616379209 milliseconds
Total Time:         441.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.8 seconds, 39.1%
Fitness Testing:    211.8 seconds, 48.0%
Report:              56.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 46060.758299999914
Test mean error for best: 23.03038
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -21.4160190901
Correct output: 26.0066432259  | Program output: 37.9117690623 
Correct output: -7.8630218821  | Program output: 35.1369781179 
Correct output: 43.0854975447  | Program output: -13.002733393 
Correct output: -19.0259005733 | Program output: -47.114131511 
Correct output: -36.5615896908 | Program output: -2.5615896908 
Correct output: -86.7179135459 | Program output: -44.8061444836
Correct output: -7.1780786915  | Program output: -24.2663096292
Correct output: 103.0257764527 | Program output: 53.937545515  
Correct output: 70.6761243376  | Program output: 17.5878933999 
Correct output: -141.6518933902 | Program output: -47.6518933902
Correct output: 82.2435662182  | Program output: 74.1553352805 
Correct output: 115.9472214055 | Program output: 70.8589904677 
Correct output: 157.0833815093 | Program output: 128.9951505715
Correct output: -4.9643490685  | Program output: -10.0525800062
Correct output: 60.1212975555  | Program output: 69.0330666178 
Correct output: -4.3554462227  | Program output: 37.9117690623 
Correct output: -72.9278840186 | Program output: -40.0161149563
Correct output: -110.3601522223 | Program output: -65.3601522223
Correct output: 5.1784404039   | Program output: 37.9117690623 
Correct output: -95.8868459204 | Program output: -71.8868459204
Correct output: 36.6113545279  | Program output: 37.9117690623 
Correct output: -16.9310924128 | Program output: 0.9806766495  
Correct output: -57.0165724778 | Program output: -11.0165724778
Correct output: -0.4292752469  | Program output: 24.4824938154 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_dup} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction float_swap} {:instruction float_max} {:instruction float_div} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_add} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_dup integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items float_dup_items -49 float_frominteger integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 float_swap float_max float_div in2 integer_stackdepth float_inc float_yank float_stackdepth float_inc float_swap float_div float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_dup_items float_inc float_dup_items integer_dup_times integer_shove integer_dec float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_add print_float integer_flush)
Errors: [54.0 2 11.9051 11 43.0 11 56.0882 11 28.0882 11 34.0 2 41.9118 11 17.0882 11 49.0882 10 53.0882 11 94.0 2 8.0882 11 45.0882 12 28.0882 11 5.0882 11 8.9118 11 42.2672 11 32.9118 11 45.0 3 32.7333 10 24.0 2 1.3004 9 17.9118 12 46.0 2 24.9118 10]
Total: 1063.5588
Mean: 21.271175
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2488.5872181999916
Median total errors in population: 1178.2297999999998
Error averages by case: (105.4471462 3.817 68.74605730000002 10.773 60.688628900000715 10.929 132.83396979999984 11.222 108.45170909999995 3.879 82.25914209999988 6.255 70.13162510000002 3.409 98.07338899999996 3.709 131.71265230000006 4.535 132.4884777999999 12.574 147.44298490000006 4.02 96.64509470000009 4.681 131.3931364999999 5.377 129.5481058000002 5.592 87.79491789999992 2.964 80.10737839999992 4.379 58.79427519999947 10.347 65.69976390000004 3.04 103.249225 4.659 56.827280500000604 9.202 84.42082019999997 3.822 76.3949262000002 10.524 69.76733290000007 3.788 96.09304930000006 3.784 62.797129200000015 3.498)
Error minima by case: (32.416 1 5.2215 1 1.5284 9 4.1737 7 4.2694 1 0.4384 1 0.0 0 1.8664 1 13.0 2 31.7644 8 52.3481 1 1.9118 1 17.0 2 18.0882 2 0.5267 1 8.9118 1 3.3609 8 0.0 0 10.3602 2 0.1652 1 4.3278 1 0.3004 1 6.0 1 14.0166 1 0.0 0)
Average genome size in population (length): 63.898
Average program size in population (points): 64.898
Average percent parens in population: 0.016
Minimum age in population: 197.6424977737734
Maximum age in population: 202.0313778905232
Average age in population: 200.096129364262
Median age in population: 200.1478975804446
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.729
Total error diversity:				 0.211
Error (vector) diversity:			 0.223
Behavioral diversity:				 0.224
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 191846070
--- Timings ---
Current time: 1529616382555 milliseconds
Total Time:         444.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.0 seconds, 39.1%
Fitness Testing:    213.5 seconds, 48.0%
Report:              57.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 19978.433799999955
Test mean error for best: 9.98922
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -64.4160190901
Correct output: 26.0066432259  | Program output: 37.0066432259 
Correct output: -7.8630218821  | Program output: 3.1369781179  
Correct output: 43.0854975447  | Program output: -10.002733393 
Correct output: -19.0259005733 | Program output: -44.114131511 
Correct output: -36.5615896908 | Program output: -25.5615896908
Correct output: -86.7179135459 | Program output: -75.7179135459
Correct output: -7.1780786915  | Program output: -21.2663096292
Correct output: 103.0257764527 | Program output: 56.937545515  
Correct output: 70.6761243376  | Program output: 20.5878933999 
Correct output: -141.6518933902 | Program output: -130.6518933902
Correct output: 82.2435662182  | Program output: 77.1553352805 
Correct output: 115.9472214055 | Program output: 73.8589904677 
Correct output: 157.0833815093 | Program output: 131.9951505715
Correct output: -4.9643490685  | Program output: -7.0525800062 
Correct output: 60.1212975555  | Program output: 71.1212975555 
Correct output: -4.3554462227  | Program output: 6.6445537773  
Correct output: -72.9278840186 | Program output: -61.9278840186
Correct output: -110.3601522223 | Program output: -99.3601522223
Correct output: 5.1784404039   | Program output: 16.1784404039 
Correct output: -95.8868459204 | Program output: -84.8868459204
Correct output: 36.6113545279  | Program output: 47.6113545279 
Correct output: -16.9310924128 | Program output: -5.9310924128 
Correct output: -57.0165724778 | Program output: -46.0165724778
Correct output: -0.4292752469  | Program output: 10.5707247531 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_dup} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction float_swap} {:instruction float_max} {:instruction float_div} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_add} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_dup integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items float_dup_items -49 float_frominteger integer_swap float_shove integer_pop integer_dup_times float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 float_swap float_max float_div in2 integer_stackdepth float_inc float_div float_inc float_inc float_swap float_inc integer_yankdup float_stackdepth float_div float_inc float_swap float_div float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_dup_items float_inc float_frominteger integer_dup_times integer_shove integer_dec float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_add print_float integer_flush)
Errors: [11.0 2 11.0 2 11.0 11 53.0882 12 25.0882 11 11.0 2 11.0 2 14.0882 11 46.0882 11 50.0882 10 11.0 2 5.0882 11 42.0882 12 25.0882 11 2.0882 10 11.0 2 11.0 11 11.0 2 11.0 3 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 10]
Total: 596.7937999999999
Mean: 11.935876
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2736.666738199998
Median total errors in population: 1172.2297999999998
Error averages by case: (117.5738365 4.222 77.6495503000002 10.701 73.54694400000035 10.934 138.59873169999983 11.194 115.19090669999977 5.001 88.71945069999958 9.188 88.29763920000018 4.901 104.96935509999992 4.814 133.15884479999994 5.731 137.84651929999973 12.338 160.3467494 4.433 98.61187929999991 5.807 132.3515444999996 6.588 131.9355011 6.556 94.9890568999998 4.16 84.65516920000006 5.616 73.25726529999964 10.451 81.13762060000006 4.255 117.22594569999998 4.895 70.76090820000059 9.351 98.94030729999997 4.253 84.67458499999991 10.368 80.34089950000023 5.091 107.7592498 4.035 74.86127810000008 4.384)
Error minima by case: (4.2766 1 5.2215 1 4.7748 7 0.0954 6 4.7959 1 0.4384 1 1.0 1 0.5643 1 17.0 2 24.5852 9 11.0 1 1.0882 1 20.9645 2 18.0882 2 0.0882 1 4.8787 1 1.2672 8 0.0 0 0.3602 2 0.121 1 11.0 1 0.3004 2 1.7185 1 11.0 1 0.1072 1)
Average genome size in population (length): 66.518
Average program size in population (points): 67.518
Average percent parens in population: 0.015
Minimum age in population: 199.5317689429813
Maximum age in population: 203.3280920590398
Average age in population: 201.5065030323921
Median age in population: 201.5341585573561
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.272
Error (vector) diversity:			 0.279
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 193509020
--- Timings ---
Current time: 1529616386026 milliseconds
Total Time:         448.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       175.2 seconds, 39.1%
Fitness Testing:    215.2 seconds, 48.0%
Report:              57.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 18730.179199999977
Test mean error for best: 9.36509
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -67.4160190901
Correct output: 26.0066432259  | Program output: 34.0066432259 
Correct output: -7.8630218821  | Program output: 0.1369781179  
Correct output: 43.0854975447  | Program output: -13.002733393 
Correct output: -19.0259005733 | Program output: -47.114131511 
Correct output: -36.5615896908 | Program output: -28.5615896908
Correct output: -86.7179135459 | Program output: -78.7179135459
Correct output: -7.1780786915  | Program output: -24.2663096292
Correct output: 103.0257764527 | Program output: 53.937545515  
Correct output: 70.6761243376  | Program output: 17.5878933999 
Correct output: -141.6518933902 | Program output: -133.6518933902
Correct output: 82.2435662182  | Program output: 74.1553352805 
Correct output: 115.9472214055 | Program output: 70.8589904677 
Correct output: 157.0833815093 | Program output: 128.9951505715
Correct output: -4.9643490685  | Program output: -10.0525800062
Correct output: 60.1212975555  | Program output: 68.1212975555 
Correct output: -4.3554462227  | Program output: 3.6445537773  
Correct output: -72.9278840186 | Program output: -64.9278840186
Correct output: -110.3601522223 | Program output: -102.3601522223
Correct output: 5.1784404039   | Program output: 13.1784404039 
Correct output: -95.8868459204 | Program output: -87.8868459204
Correct output: 36.6113545279  | Program output: 44.6113545279 
Correct output: -16.9310924128 | Program output: -8.9310924128 
Correct output: -57.0165724778 | Program output: -49.0165724778
Correct output: -0.4292752469  | Program output: 7.5707247531  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_dup} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction float_swap} {:instruction float_max} {:instruction float_div} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_add} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_dup integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items float_dup_items -49 float_frominteger integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 float_swap float_max float_div in2 integer_stackdepth float_inc float_yank float_stackdepth float_inc integer_dec integer_dup_items float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_dup_items float_inc float_dup_items integer_dup_times integer_shove float_frominteger float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_add print_float integer_flush)
Errors: [8.0 2 8.0 2 8.0 11 56.0882 11 28.0882 11 8.0 2 8.0 2 17.0882 11 49.0882 10 53.0882 11 8.0 2 8.0882 11 45.0882 12 28.0882 11 5.0882 11 8.0 1 8.0 11 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 11]
Total: 574.7938000000001
Mean: 11.495876
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2809.5125606999964
Median total errors in population: 1153.5765
Error averages by case: (122.36868950000004 3.934 78.97342990000092 10.788 90.4071295999998 10.813 133.34314089999938 11.345 111.95894589999929 7.602 98.08329169999956 9.859 102.72461870000078 7.674 100.89599799999948 7.577 125.54526559999937 7.925 127.46642669999949 11.666 162.29127870000002 4.229 89.58108969999948 8.076 123.20488739999935 8.838 121.85944519999954 8.599 90.42796019999959 6.859 83.00989370000045 8.083 90.46797810000021 10.83 95.85661880000052 7.265 119.10387780000002 4.819 85.3326812000007 9.695 101.39629359999995 4.074 79.49855199999986 9.866 82.76670490000062 7.958 113.11794270000001 3.916 80.69242020000061 6.848)
Error minima by case: (2.451 1 7.0427 1 7.6482 8 0.8263 8 1.0363 1 0.5616 1 0.0 0 2.0898 1 10.1765 1 11.4405 8 4.2198 1 0.0882 1 6.1765 2 10.8235 1 0.0882 1 0.8787 1 4.1406 8 0.0 0 0.3602 2 0.6255 2 8.0 1 0.3004 1 1.9807 1 8.0 1 0.0 0)
Average genome size in population (length): 69.796
Average program size in population (points): 70.796
Average percent parens in population: 0.014
Minimum age in population: 200.6186370355556
Maximum age in population: 204.5923901629955
Average age in population: 202.8527448499823
Median age in population: 202.8851154258735
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.271
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 195253920
--- Timings ---
Current time: 1529616389653 milliseconds
Total Time:         451.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.4 seconds, 39.0%
Fitness Testing:    217.1 seconds, 48.0%
Report:              58.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 17851.256200000003
Test mean error for best: 8.92563
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -68.4160190901
Correct output: 26.0066432259  | Program output: 33.0066432259 
Correct output: -7.8630218821  | Program output: -0.8630218821 
Correct output: 43.0854975447  | Program output: -14.002733393 
Correct output: -19.0259005733 | Program output: -48.114131511 
Correct output: -36.5615896908 | Program output: -29.5615896908
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -25.2663096292
Correct output: 103.0257764527 | Program output: 52.937545515  
Correct output: 70.6761243376  | Program output: 16.5878933999 
Correct output: -141.6518933902 | Program output: -134.6518933902
Correct output: 82.2435662182  | Program output: 73.1553352805 
Correct output: 115.9472214055 | Program output: 69.8589904677 
Correct output: 157.0833815093 | Program output: 127.9951505715
Correct output: -4.9643490685  | Program output: -11.0525800062
Correct output: 60.1212975555  | Program output: 67.1212975555 
Correct output: -4.3554462227  | Program output: 2.6445537773  
Correct output: -72.9278840186 | Program output: -65.9278840186
Correct output: -110.3601522223 | Program output: -103.3601522223
Correct output: 5.1784404039   | Program output: 12.1784404039 
Correct output: -95.8868459204 | Program output: -88.8868459204
Correct output: 36.6113545279  | Program output: 43.6113545279 
Correct output: -16.9310924128 | Program output: -9.9310924128 
Correct output: -57.0165724778 | Program output: -50.0165724778
Correct output: -0.4292752469  | Program output: 6.5707247531  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_dup} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction -49} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction float_swap} {:instruction float_max} {:instruction float_div} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_add} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_dup integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items float_dup_items -49 integer_yankdup integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot -49 float_frominteger integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 float_swap float_max float_div in2 integer_stackdepth float_inc float_yank float_stackdepth float_swap float_div float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_dup_items float_inc float_frominteger integer_dup_times integer_shove integer_dec float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_add print_float integer_flush)
Errors: [7.0 2 7.0 2 7.0 1 57.0882 12 29.0882 11 7.0 2 7.0 2 18.0882 11 50.0882 11 54.0882 11 7.0 2 9.0882 11 46.0882 12 29.0882 10 6.0882 11 7.0 1 7.0 11 7.0 2 7.0 2 7.0 2 7.0 2 7.0 2 7.0 2 7.0 1 7.0 11]
Total: 557.7938000000001
Mean: 11.155876
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2624.129598600001
Median total errors in population: 1082.3336000000002
Error averages by case: (111.53854310000007 3.882 72.6598673000013 10.376 98.63842729999989 10.766 118.55359399999897 11.576 97.79202129999908 10.115 90.18920570000004 6.814 103.86185790000108 10.186 86.36685159999924 10.17 110.15723669999899 9.919 114.59832929999915 11.132 151.07651909999998 4.223 72.24518149999918 10.269 106.67110429999899 10.998 99.06786429999917 10.527 75.28769399999928 9.474 71.01494270000067 10.246 101.70335030000092 11.115 95.89465000000074 9.99 107.64590740000006 4.997 94.07058560000134 9.688 90.12300299999995 4.163 67.59738380000012 9.011 80.70756070000095 10.505 102.53062510000004 3.945 80.76129260000091 9.289)
Error minima by case: (3.3832 1 6.9051 1 3.7748 1 0.1737 8 11.9377 1 0.4384 1 0.0 0 0.0898 1 27.2022 1 1.1474 8 7.0 1 0.2436 1 10.1603 2 16.0882 2 0.0882 1 0.1213 1 0.2672 9 0.0 0 3.3602 2 0.1003 1 7.0 1 0.3004 2 7.0 1 7.0 1 0.341 1)
Average genome size in population (length): 67.334
Average program size in population (points): 68.334
Average percent parens in population: 0.015
Minimum age in population: 202.0974423727598
Maximum age in population: 206.1615887298616
Average age in population: 204.2565490803111
Median age in population: 204.3148806775598
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.263
Error (vector) diversity:			 0.274
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 196937295
--- Timings ---
Current time: 1529616393219 milliseconds
Total Time:         455.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.7 seconds, 39.0%
Fitness Testing:    218.9 seconds, 48.1%
Report:              58.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 16025.6452
Test mean error for best: 8.01282
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -65.4160190901
Correct output: 26.0066432259  | Program output: 36.0066432259 
Correct output: -7.8630218821  | Program output: 2.1369781179  
Correct output: 43.0854975447  | Program output: 53.0854975447 
Correct output: -19.0259005733 | Program output: -9.0259005733 
Correct output: -36.5615896908 | Program output: -26.5615896908
Correct output: -86.7179135459 | Program output: -76.7179135459
Correct output: -7.1780786915  | Program output: 2.8219213085  
Correct output: 103.0257764527 | Program output: 113.0257764527
Correct output: 70.6761243376  | Program output: 80.6761243376 
Correct output: -141.6518933902 | Program output: -131.6518933902
Correct output: 82.2435662182  | Program output: 90.9117690623 
Correct output: 115.9472214055 | Program output: 125.9472214055
Correct output: 157.0833815093 | Program output: 110.9117690623
Correct output: -4.9643490685  | Program output: 5.0356509315  
Correct output: 60.1212975555  | Program output: 70.1212975555 
Correct output: -4.3554462227  | Program output: 5.6445537773  
Correct output: -72.9278840186 | Program output: -62.9278840186
Correct output: -110.3601522223 | Program output: -100.3601522223
Correct output: 5.1784404039   | Program output: 15.1784404039 
Correct output: -95.8868459204 | Program output: -85.8868459204
Correct output: 36.6113545279  | Program output: 46.6113545279 
Correct output: -16.9310924128 | Program output: -6.9310924128 
Correct output: -57.0165724778 | Program output: -47.0165724778
Correct output: -0.4292752469  | Program output: 9.5707247531  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_dup} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction float_swap} {:instruction float_max} {:instruction float_div} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_frominteger} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_add} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_dup integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items float_dup_items -49 float_frominteger integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 float_swap float_max float_div in2 integer_stackdepth float_inc float_inc float_div float_inc float_swap float_inc float_swap float_inc float_yank float_frominteger float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_dup_items float_inc float_dup_items integer_mult integer_shove integer_dec float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_add print_float integer_flush)
Errors: [10.0 1 10.0 1 10.0 11 10.0 1 10.0 1 10.0 1 10.0 1 10.0 11 10.0 1 10.0 1 10.0 1 8.6682 11 10.0 1 46.1716 11 10.0 11 10.0 1 10.0 11 10.0 1 10.0 1 10.0 1 10.0 1 10.0 1 10.0 1 10.0 1 10.0 11]
Total: 379.8398
Mean: 7.596796
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2446.5174988999993
Median total errors in population: 1063.5588
Error averages by case: (104.90573959999999 3.625 62.93225110000117 10.178 88.47551000000004 10.931 111.7635414999989 11.54 90.67392669999903 10.392 85.57470850000011 3.776 97.08338820000107 10.133 79.67043909999914 10.466 104.74440679999897 10.075 107.03811099999903 11.199 143.18648699999997 3.965 67.26140849999912 10.465 101.74496309999893 11.278 95.80752689999908 10.752 68.79123519999912 10.104 64.31621210000081 10.098 90.94897560000078 11.105 89.96354220000083 10.049 100.96931440000012 4.802 83.55368850000102 9.608 83.26190259999998 3.924 56.3663720000001 8.845 74.33069880000099 10.488 96.898138 3.777 75.00901150000092 9.671)
Error minima by case: (2.9857 1 3.9051 1 2.7748 1 0.0159 1 7.8235 1 0.5616 1 0.0 0 1.0898 1 8.0 1 3.7162 1 6.0 1 1.42 1 8.0 1 7.8235 2 0.0882 1 0.1213 1 0.7328 7 0.0 0 6.0 1 0.2533 1 6.0 1 0.0882 1 6.0 1 5.0143 1 0.4293 1)
Average genome size in population (length): 64.009
Average program size in population (points): 65.009
Average percent parens in population: 0.016
Minimum age in population: 203.2698237928215
Maximum age in population: 207.7575259253614
Average age in population: 205.6270994619035
Median age in population: 205.6755819459985
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.231
Error (vector) diversity:			 0.244
Behavioral diversity:				 0.244
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 198537595
--- Timings ---
Current time: 1529616396637 milliseconds
Total Time:         458.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.9 seconds, 39.0%
Fitness Testing:    220.6 seconds, 48.1%
Report:              59.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 15902.2415
Test mean error for best: 7.95112
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -65.4160190901
Correct output: 26.0066432259  | Program output: 36.0066432259 
Correct output: -7.8630218821  | Program output: 2.1369781179  
Correct output: 43.0854975447  | Program output: 53.0854975447 
Correct output: -19.0259005733 | Program output: -9.0259005733 
Correct output: -36.5615896908 | Program output: -26.5615896908
Correct output: -86.7179135459 | Program output: -76.7179135459
Correct output: -7.1780786915  | Program output: 2.8219213085  
Correct output: 103.0257764527 | Program output: 113.0257764527
Correct output: 70.6761243376  | Program output: 80.6761243376 
Correct output: -141.6518933902 | Program output: -131.6518933902
Correct output: 82.2435662182  | Program output: 91.9117690623 
Correct output: 115.9472214055 | Program output: 125.9472214055
Correct output: 157.0833815093 | Program output: 111.9117690623
Correct output: -4.9643490685  | Program output: 5.0356509315  
Correct output: 60.1212975555  | Program output: 70.1212975555 
Correct output: -4.3554462227  | Program output: 5.6445537773  
Correct output: -72.9278840186 | Program output: -62.9278840186
Correct output: -110.3601522223 | Program output: -100.3601522223
Correct output: 5.1784404039   | Program output: 15.1784404039 
Correct output: -95.8868459204 | Program output: -85.8868459204
Correct output: 36.6113545279  | Program output: 46.6113545279 
Correct output: -16.9310924128 | Program output: -6.9310924128 
Correct output: -57.0165724778 | Program output: -47.0165724778
Correct output: -0.4292752469  | Program output: 9.5707247531  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_dup} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction float_swap} {:instruction float_max} {:instruction float_div} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_frominteger} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_add} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_dup integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items float_dup_items -49 float_frominteger integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 float_swap float_max float_div in2 integer_stackdepth float_inc float_inc float_div float_inc float_swap float_inc float_swap float_inc float_yank float_frominteger float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_inc float_swap float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_add print_float integer_flush)
Errors: [10.0 1 10.0 1 10.0 11 10.0 1 10.0 1 10.0 1 10.0 1 10.0 11 10.0 1 10.0 1 10.0 1 9.6682 11 10.0 1 45.1716 11 10.0 11 10.0 1 10.0 11 10.0 1 10.0 1 10.0 1 10.0 1 10.0 1 10.0 1 10.0 1 10.0 11]
Total: 379.8398
Mean: 7.596796
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2674.9034528
Median total errors in population: 1059.5588
Error averages by case: (108.0995713 3.729 76.06070790000118 8.331 97.01070740000007 10.615 123.02225279999897 11.672 102.693121499999 10.019 90.3068024000001 3.656 101.98727640000092 8.831 91.92859299999913 10.244 116.76965509999903 10.071 120.20065239999904 11.118 141.0605147999999 4.163 81.55798649999903 10.177 114.91767009999901 11.046 108.11320979999917 10.64 81.23395639999907 9.866 77.00674360000068 8.972 102.03843690000075 11.094 96.39929380000065 8.752 105.8148056000001 4.856 95.68969190000138 8.676 91.04922439999994 3.959 72.1225332999997 8.115 84.36797920000082 8.795 100.53550220000005 3.919 84.06056410000082 9.54)
Error minima by case: (5.0 1 2.9051 1 4.0882 1 0.0372 1 7.0 1 0.4384 1 0.0 0 0.0898 1 1.8835 1 4.1474 1 5.0 1 1.0882 1 7.0 1 9.0834 2 0.0882 1 0.1213 1 4.3728 9 0.0 0 5.0 1 0.0401 1 5.0 1 0.0861 1 2.0 1 5.0 1 0.3688 1)
Average genome size in population (length): 62.599
Average program size in population (points): 63.599
Average percent parens in population: 0.016
Minimum age in population: 204.5964493340316
Maximum age in population: 209.3150919049821
Average age in population: 207.1121695903405
Median age in population: 207.1452097886719
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.242
Error (vector) diversity:			 0.256
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 200102570
--- Timings ---
Current time: 1529616400023 milliseconds
Total Time:         462.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.1 seconds, 39.0%
Fitness Testing:    222.4 seconds, 48.1%
Report:              59.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 9004.0
Test mean error for best: 4.50200
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -68.4160190901
Correct output: 26.0066432259  | Program output: 33.0066432259 
Correct output: -7.8630218821  | Program output: -0.8630218821 
Correct output: 43.0854975447  | Program output: 50.0854975447 
Correct output: -19.0259005733 | Program output: -12.0259005733
Correct output: -36.5615896908 | Program output: -29.5615896908
Correct output: -86.7179135459 | Program output: -79.7179135459
Correct output: -7.1780786915  | Program output: -0.1780786915 
Correct output: 103.0257764527 | Program output: 110.0257764527
Correct output: 70.6761243376  | Program output: 77.6761243376 
Correct output: -141.6518933902 | Program output: -134.6518933902
Correct output: 82.2435662182  | Program output: 89.2435662182 
Correct output: 115.9472214055 | Program output: 122.9472214055
Correct output: 157.0833815093 | Program output: 164.0833815093
Correct output: -4.9643490685  | Program output: 2.0356509315  
Correct output: 60.1212975555  | Program output: 67.1212975555 
Correct output: -4.3554462227  | Program output: 2.6445537773  
Correct output: -72.9278840186 | Program output: -65.9278840186
Correct output: -110.3601522223 | Program output: -103.3601522223
Correct output: 5.1784404039   | Program output: 12.1784404039 
Correct output: -95.8868459204 | Program output: -88.8868459204
Correct output: 36.6113545279  | Program output: 43.6113545279 
Correct output: -16.9310924128 | Program output: -9.9310924128 
Correct output: -57.0165724778 | Program output: -50.0165724778
Correct output: -0.4292752469  | Program output: 6.5707247531  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_dup} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction -49} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction float_swap} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_add} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_dup integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items float_dup_items -49 integer_yankdup integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot -49 float_frominteger integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 float_swap float_stackdepth float_inc float_swap float_div float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_dup_items float_inc float_frominteger integer_dup_times integer_shove integer_dec float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_dup_items float_inc float_frominteger integer_dup_times integer_shove integer_dec float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_add print_float integer_flush)
Errors: [7.0 2 7.0 2 7.0 1 7.0 2 7.0 1 7.0 2 7.0 2 7.0 1 7.0 2 7.0 1 7.0 2 7.0 1 7.0 2 7.0 2 7.0 11 7.0 1 7.0 11 7.0 2 7.0 2 7.0 2 7.0 2 7.0 2 7.0 2 7.0 1 7.0 11]
Total: 245.0
Mean: 4.9
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2552.9915304000046
Median total errors in population: 1021.7938000000001
Error averages by case: (94.97729899999999 3.856 74.97722960000047 5.615 84.70157929999999 9.121 121.9283268999991 10.908 103.3340818999991 9.465 84.39243700000006 3.949 94.16350210000039 5.929 93.71373249999924 10.128 114.27425929999912 9.633 118.17737889999914 10.439 114.38686789999996 4.314 82.40118349999922 10.071 112.86959379999912 10.606 110.55077079999941 10.618 84.27378329999922 9.801 78.81353290000031 6.145 92.83516490000017 11.076 91.6770625000002 5.856 97.5376208 4.742 90.76643890000025 6.456 90.25943139999994 3.984 77.92466029999994 6.269 84.39204910000035 5.756 90.18719240000006 3.831 81.08035140000032 9.828)
Error minima by case: (4.0 1 1.9051 1 4.0 1 0.1416 1 2.4635 1 0.4384 1 0.0 0 1.0898 1 0.9605 1 1.1474 1 5.0 1 0.58 1 6.0 1 3.0 2 0.0882 1 0.1213 1 1.9388 8 0.0 0 2.0 1 0.1784 1 5.0 1 0.3004 1 1.0261 1 0.9659 1 0.3217 1)
Average genome size in population (length): 67.194
Average program size in population (points): 68.194
Average percent parens in population: 0.015
Minimum age in population: 205.9200953795592
Maximum age in population: 210.3397796381238
Average age in population: 208.5212492223858
Median age in population: 208.5806071983669
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.731
Total error diversity:				 0.289
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.304
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 201782420
--- Timings ---
Current time: 1529616403582 milliseconds
Total Time:         465.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.4 seconds, 38.9%
Fitness Testing:    224.2 seconds, 48.1%
Report:              60.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 3247.0
Test mean error for best: 1.62350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -73.4160190901
Correct output: 26.0066432259  | Program output: 28.0066432259 
Correct output: -7.8630218821  | Program output: -5.8630218821 
Correct output: 43.0854975447  | Program output: 45.0854975447 
Correct output: -19.0259005733 | Program output: -17.0259005733
Correct output: -36.5615896908 | Program output: -34.5615896908
Correct output: -86.7179135459 | Program output: -84.7179135459
Correct output: -7.1780786915  | Program output: -5.1780786915 
Correct output: 103.0257764527 | Program output: 105.0257764527
Correct output: 70.6761243376  | Program output: 72.6761243376 
Correct output: -141.6518933902 | Program output: -139.6518933902
Correct output: 82.2435662182  | Program output: 84.2435662182 
Correct output: 115.9472214055 | Program output: 117.9472214055
Correct output: 157.0833815093 | Program output: 159.0833815093
Correct output: -4.9643490685  | Program output: -2.9643490685 
Correct output: 60.1212975555  | Program output: 62.1212975555 
Correct output: -4.3554462227  | Program output: -2.3554462227 
Correct output: -72.9278840186 | Program output: -70.9278840186
Correct output: -110.3601522223 | Program output: -108.3601522223
Correct output: 5.1784404039   | Program output: 7.1784404039  
Correct output: -95.8868459204 | Program output: -93.8868459204
Correct output: 36.6113545279  | Program output: 38.6113545279 
Correct output: -16.9310924128 | Program output: -14.9310924128
Correct output: -57.0165724778 | Program output: -55.0165724778
Correct output: -0.4292752469  | Program output: 1.5707247531  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_dup} {:instruction integer_div} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction integer_div} {:instruction float_swap} {:instruction in2} {:instruction float_swap} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction float_swap} {:instruction in2} {:instruction float_swap} {:instruction float_max} {:instruction float_div} {:instruction in2} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction in1} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_add} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_dup integer_div float_pop integer_add float_dup float_dup_items integer_dup_items float_dup_items float_dup_items -49 float_frominteger integer_swap float_shove integer_pop float_dup_items float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop integer_div float_swap in2 float_swap float_pop in1 float_swap in2 float_swap in2 float_swap float_max float_div in2 float_inc float_swap float_inc float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_dup_items float_inc float_frominteger integer_dup_times integer_shove in1 float_inc float_swap float_inc float_rot float_stackdepth float_inc float_rot float_min float_add print_float integer_flush)
Errors: [2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 11]
Total: 87.0
Mean: 1.74
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2096.826833900001
Median total errors in population: 557.7938000000001
Error averages by case: (74.31631059999994 3.705 60.76943050000049 5.898 67.61173859999998 6.969 101.50946919999939 9.118 86.45032759999933 7.488 66.28816860000006 3.773 71.81615670000016 3.71 78.59166549999945 9.515 94.53452859999945 7.793 99.34223529999934 8.679 84.64907699999993 4.025 68.17924379999944 9.164 93.62618879999938 8.842 100.30573719999992 10.373 69.98472669999944 9.861 64.04969990000005 3.663 77.69199149999982 10.918 72.03024790000005 3.771 77.76326260000005 4.133 78.53904699999981 5.925 74.62848189999998 3.754 69.43851830000011 5.868 69.13073130000012 3.574 70.23118270000009 3.376 61.381666100000075 10.072)
Error minima by case: (2.0 1 1.9051 1 2.0 1 0.1737 1 2.0 1 2.0 1 0.0 0 1.9102 1 2.0 1 2.0 1 2.0 1 1.0882 1 2.0 1 2.0 1 0.0882 1 0.1213 1 2.0 1 0.0 0 2.0 1 0.1377 1 2.0 1 0.3004 1 2.0 1 1.0 1 0.1014 1)
Average genome size in population (length): 70.559
Average program size in population (points): 71.559
Average percent parens in population: 0.014
Minimum age in population: 207.7582723567954
Maximum age in population: 211.8717507488388
Average age in population: 209.9037626431831
Median age in population: 209.9167404160221
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.279
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 203546395
--- Timings ---
Current time: 1529616407195 milliseconds
Total Time:         469.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.6 seconds, 38.9%
Fitness Testing:    226.1 seconds, 48.2%
Report:              60.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 3090.0
Test mean error for best: 1.54500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: 
-74.4160190901
Correct output: 26.0066432259  | Program output: 
27.0066432259
Correct output: -7.8630218821  | Program output: 
-6.8630218821
Correct output: 43.0854975447  | Program output: 
44.0854975447
Correct output: -19.0259005733 | Program output: 
-18.0259005733
Correct output: -36.5615896908 | Program output: 
-35.5615896908
Correct output: -86.7179135459 | Program output: 
-85.7179135459
Correct output: -7.1780786915  | Program output: 
-6.1780786915
Correct output: 103.0257764527 | Program output: 
104.0257764527
Correct output: 70.6761243376  | Program output: 
71.6761243376
Correct output: -141.6518933902 | Program output: 
-140.6518933902
Correct output: 82.2435662182  | Program output: 
83.2435662182
Correct output: 115.9472214055 | Program output: 
116.9472214055
Correct output: 157.0833815093 | Program output: 
158.0833815093
Correct output: -4.9643490685  | Program output: 
-3.9643490685
Correct output: 60.1212975555  | Program output: 
61.1212975555
Correct output: -4.3554462227  | Program output: 
-3.3554462227
Correct output: -72.9278840186 | Program output: 
-71.9278840186
Correct output: -110.3601522223 | Program output: 
-109.3601522223
Correct output: 5.1784404039   | Program output: 
6.1784404039 
Correct output: -95.8868459204 | Program output: 
-94.8868459204
Correct output: 36.6113545279  | Program output: 
37.6113545279
Correct output: -16.9310924128 | Program output: 
-15.9310924128
Correct output: -57.0165724778 | Program output: 
-56.0165724778
Correct output: -0.4292752469  | Program output: 
0.5707247531 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_newline} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_add} {:instruction print_float} {:instruction integer_flush})
Best program: (print_newline integer_max integer_dup_items float_dup_items integer_add -49 float_frominteger integer_swap float_shove integer_pop float_inc integer_min float_inc float_rot integer_mod integer_inc float_shove integer_pop float_inc integer_min float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 integer_stackdepth float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_inc float_div float_inc float_swap float_inc float_swap float_swap float_inc float_rot integer_dup_items float_inc float_frominteger integer_dup_times integer_shove float_rot in1 float_inc float_rot float_min float_add print_float integer_flush)
Errors: [1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 3 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 10]
Total: 84.0
Mean: 1.68
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 1963.5511530999984
Median total errors in population: 445.444
Error averages by case: (69.52485189999994 3.7 60.15047950000081 7.379 64.64967240000003 7.508 81.77920789999978 5.983 76.77290989999982 4.497 63.59361510000007 3.821 69.00696260000012 3.598 71.12538399999983 7.867 79.24042819999987 4.92 80.88242649999978 5.525 78.68991629999995 3.952 66.66394549999988 7.122 79.86544019999984 5.543 101.72563990000062 10.217 65.86347449999987 9.835 63.065826900000005 3.442 82.64829679999971 10.648 68.82509310000007 3.671 73.06520550000006 4.018 84.65255809999954 7.565 70.39256410000004 3.663 72.4363454000002 7.319 65.29204290000008 3.486 66.68512280000006 3.447 58.056743100000084 10.171)
Error minima by case: (1.0 1 1.0 1 1.0 1 0.8524 1 1.0 1 1.0 1 0.0 0 0.0898 1 0.0044 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.0882 1 0.1213 1 1.0 1 0.0 0 1.0 1 0.1666 1 1.0 1 0.3004 1 1.0 1 1.0 1 0.0282 1)
Average genome size in population (length): 70.524
Average program size in population (points): 71.524
Average percent parens in population: 0.014
Minimum age in population: 208.8601471329809
Maximum age in population: 213.4196380203652
Average age in population: 211.3789542772617
Median age in population: 211.4372396704387
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.308
Error (vector) diversity:			 0.324
Behavioral diversity:				 0.325
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 205309495
--- Timings ---
Current time: 1529616410742 milliseconds
Total Time:         473.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       183.8 seconds, 38.9%
Fitness Testing:    227.9 seconds, 48.2%
Report:              61.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 3090.0
Test mean error for best: 1.54500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: 
-74.4160190901
Correct output: 26.0066432259  | Program output: 
27.0066432259
Correct output: -7.8630218821  | Program output: 
-6.8630218821
Correct output: 43.0854975447  | Program output: 
44.0854975447
Correct output: -19.0259005733 | Program output: 
-18.0259005733
Correct output: -36.5615896908 | Program output: 
-35.5615896908
Correct output: -86.7179135459 | Program output: 
-85.7179135459
Correct output: -7.1780786915  | Program output: 
-6.1780786915
Correct output: 103.0257764527 | Program output: 
104.0257764527
Correct output: 70.6761243376  | Program output: 
71.6761243376
Correct output: -141.6518933902 | Program output: 
-140.6518933902
Correct output: 82.2435662182  | Program output: 
83.2435662182
Correct output: 115.9472214055 | Program output: 
116.9472214055
Correct output: 157.0833815093 | Program output: 
158.0833815093
Correct output: -4.9643490685  | Program output: 
-3.9643490685
Correct output: 60.1212975555  | Program output: 
61.1212975555
Correct output: -4.3554462227  | Program output: 
-3.3554462227
Correct output: -72.9278840186 | Program output: 
-71.9278840186
Correct output: -110.3601522223 | Program output: 
-109.3601522223
Correct output: 5.1784404039   | Program output: 
6.1784404039 
Correct output: -95.8868459204 | Program output: 
-94.8868459204
Correct output: 36.6113545279  | Program output: 
37.6113545279
Correct output: -16.9310924128 | Program output: 
-15.9310924128
Correct output: -57.0165724778 | Program output: 
-56.0165724778
Correct output: -0.4292752469  | Program output: 
0.5707247531 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_dup} {:instruction float_tan} {:instruction print_newline} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_add} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_add} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_dup float_tan print_newline integer_max integer_dup_items float_dup_items integer_add -49 float_frominteger integer_swap float_shove integer_pop float_inc integer_min float_inc float_rot integer_mod integer_inc float_shove integer_pop float_inc integer_min float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 integer_stackdepth float_inc float_div float_inc float_swap float_div float_inc float_swap float_inc float_inc float_div float_inc float_swap float_inc float_swap float_swap float_inc float_rot integer_dup_items float_inc float_frominteger integer_dup_times integer_shove float_rot in1 float_inc float_rot float_min float_add print_float integer_flush)
Errors: [1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 3 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 10]
Total: 84.0
Mean: 1.68
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 1840.6592239
Median total errors in population: 379.8398
Error averages by case: (66.34511199999996 3.732 58.16802510000048 6.096 62.878644100000066 5.707 73.89202009999987 4.649 72.62931739999986 3.619 62.361133900000056 3.685 66.73940290000013 3.543 68.2000681999999 5.295 71.12802519999991 3.818 72.40697019999993 4.318 74.01493949999993 4.129 61.886932499999936 4.668 70.9629858999999 4.278 91.56405540000084 9.202 63.634557799999925 9.435 59.07371970000007 3.312 77.3031491999998 10.253 66.53479600000007 3.753 70.01539070000008 4.224 79.33113049999972 6.23 68.33604260000007 3.851 68.58880710000014 6.131 62.98627010000013 3.4 64.52397020000005 3.409 56.10275760000009 10.314)
Error minima by case: (1.0 1 1.0 1 1.0 1 0.1737 1 1.0 1 0.4384 1 0.0 0 0.9102 1 0.1165 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.0882 1 0.1213 1 1.0 1 0.0 0 1.0 1 0.1784 1 1.0 1 0.3004 1 1.0 1 1.0 1 0.6578 1)
Average genome size in population (length): 70.408
Average program size in population (points): 71.408
Average percent parens in population: 0.014
Minimum age in population: 210.586556903612
Maximum age in population: 214.9279000491415
Average age in population: 212.8683657302737
Median age in population: 212.8807991800394
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.328
Error (vector) diversity:			 0.339
Behavioral diversity:				 0.34
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 207069695
--- Timings ---
Current time: 1529616414307 milliseconds
Total Time:         476.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       185.0 seconds, 38.8%
Fitness Testing:    229.7 seconds, 48.2%
Report:              61.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -75.4160190901
Correct output: 26.0066432259  | Program output: 26.0066432259 
Correct output: -7.8630218821  | Program output: -7.8630218821 
Correct output: 43.0854975447  | Program output: 43.0854975447 
Correct output: -19.0259005733 | Program output: -19.0259005733
Correct output: -36.5615896908 | Program output: -36.5615896908
Correct output: -86.7179135459 | Program output: -86.7179135459
Correct output: -7.1780786915  | Program output: -7.1780786915 
Correct output: 103.0257764527 | Program output: 103.0257764527
Correct output: 70.6761243376  | Program output: 70.6761243376 
Correct output: -141.6518933902 | Program output: -141.6518933902
Correct output: 82.2435662182  | Program output: 82.2435662182 
Correct output: 115.9472214055 | Program output: 115.9472214055
Correct output: 157.0833815093 | Program output: 157.0833815093
Correct output: -4.9643490685  | Program output: -4.9643490685 
Correct output: 60.1212975555  | Program output: 60.1212975555 
Correct output: -4.3554462227  | Program output: -4.3554462227 
Correct output: -72.9278840186 | Program output: -72.9278840186
Correct output: -110.3601522223 | Program output: -110.3601522223
Correct output: 5.1784404039   | Program output: 5.1784404039  
Correct output: -95.8868459204 | Program output: -95.8868459204
Correct output: 36.6113545279  | Program output: 36.6113545279 
Correct output: -16.9310924128 | Program output: -16.9310924128
Correct output: -57.0165724778 | Program output: -57.0165724778
Correct output: -0.4292752469  | Program output: -0.4292752469 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_max} {:instruction float_dup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction -49} {:instruction float_frominteger} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction float_mod} {:instruction float_max} {:instruction float_div} {:instruction float_swap} {:instruction in2} {:instruction float_swap} {:instruction float_max} {:instruction float_div} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_shove} {:instruction float_yank} {:instruction float_stackdepth} {:instruction 35.9117690622775} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_items} {:instruction in1} {:instruction float_frominteger} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_swap} {:instruction float_rot} {:instruction float_min} {:instruction float_add} {:instruction print_float} {:instruction integer_flush})
Best program: (integer_mod integer_max float_dup integer_div float_flush integer_add float_dup float_dup_items integer_dup_items float_dup_items float_dup_items -49 float_frominteger integer_swap float_shove integer_pop integer_dup_times integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 float_mod float_max float_div float_swap in2 float_swap float_max float_div in2 integer_stackdepth float_inc float_div integer_stackdepth float_div float_inc float_swap float_shove float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_dup_items in1 float_frominteger integer_dup_times integer_shove float_swap float_rot float_min float_add print_float integer_flush)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2107.7789314000006
Median total errors in population: 258.0834
Error averages by case: (77.58156220000002 3.493 70.72901760000016 4.22 74.98953290000004 4.124 86.16746909999992 4.317 85.96884339999993 3.499 72.80693800000007 3.369 80.26356710000013 3.419 82.562659 3.814 81.34773019999996 3.676 84.61039519999997 4.082 84.03033539999997 4.045 75.51226009999996 3.625 81.39475009999992 4.114 92.63486020000056 6.871 80.00412510000001 7.507 73.11470380000003 3.431 83.77405629999991 8.419 80.5975512 3.727 81.10779410000008 4.149 83.54899809999992 4.233 79.7262767 3.602 77.2321134000001 4.396 77.39721110000012 3.394 75.31160549999998 3.244 72.00957560000003 10.585)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 70.013
Average program size in population (points): 71.013
Average percent parens in population: 0.014
Minimum age in population: 211.762275424711
Maximum age in population: 216.3828662636303
Average age in population: 214.4402372438842
Median age in population: 214.4627595828029
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.78
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.78
Total error diversity:				 0.313
Error (vector) diversity:			 0.315
Behavioral diversity:				 0.316
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 208820045
--- Timings ---
Current time: 1529616417897 milliseconds
Total Time:         480.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.3 seconds, 38.8%
Fitness Testing:    231.6 seconds, 48.2%
Report:              62.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 149
Successful program: (integer_mod integer_max float_dup integer_div float_flush integer_add float_dup float_dup_items integer_dup_items float_dup_items float_dup_items -49 float_frominteger integer_swap float_shove integer_pop integer_dup_times integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 float_mod float_max float_div float_swap in2 float_swap float_max float_div in2 integer_stackdepth float_inc float_div integer_stackdepth float_div float_inc float_swap float_shove float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_dup_items in1 float_frominteger integer_dup_times integer_shove float_swap float_rot float_min float_add print_float integer_flush)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 68


Auto-simplifying with starting size: 68
step: 0
program: (integer_mod integer_max float_dup integer_div float_flush integer_add float_dup float_dup_items integer_dup_items float_dup_items float_dup_items -49 float_frominteger integer_swap float_shove integer_pop integer_dup_times integer_swap float_shove integer_pop float_inc float_yank float_inc float_rot integer_mod integer_inc float_swap integer_stackdepth float_shove float_pop in1 float_swap in2 float_mod float_max float_div float_swap in2 float_swap float_max float_div in2 integer_stackdepth float_inc float_div integer_stackdepth float_div float_inc float_swap float_shove float_yank float_stackdepth 35.9117690622775 float_swap float_inc float_rot integer_dup_items in1 float_frominteger integer_dup_times integer_shove float_swap float_rot float_min float_add print_float integer_flush)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 68

step: 500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -75.4160190901 | Program output: -75.4160190901
Correct output: 26.0066432259  | Program output: 26.0066432259 
Correct output: -7.8630218821  | Program output: -7.8630218821 
Correct output: 43.0854975447  | Program output: 43.0854975447 
Correct output: -19.0259005733 | Program output: -19.0259005733
Correct output: -36.5615896908 | Program output: -36.5615896908
Correct output: -86.7179135459 | Program output: -86.7179135459
Correct output: -7.1780786915  | Program output: -7.1780786915 
Correct output: 103.0257764527 | Program output: 103.0257764527
Correct output: 70.6761243376  | Program output: 70.6761243376 
Correct output: -141.6518933902 | Program output: -141.6518933902
Correct output: 82.2435662182  | Program output: 82.2435662182 
Correct output: 115.9472214055 | Program output: 115.9472214055
Correct output: 157.0833815093 | Program output: 157.0833815093
Correct output: -4.9643490685  | Program output: -4.9643490685 
Correct output: 60.1212975555  | Program output: 60.1212975555 
Correct output: -4.3554462227  | Program output: -4.3554462227 
Correct output: -72.9278840186 | Program output: -72.9278840186
Correct output: -110.3601522223 | Program output: -110.3601522223
Correct output: 5.1784404039   | Program output: 5.1784404039  
Correct output: -95.8868459204 | Program output: -95.8868459204
Correct output: 36.6113545279  | Program output: 36.6113545279 
Correct output: -16.9310924128 | Program output: -16.9310924128
Correct output: -57.0165724778 | Program output: -57.0165724778
Correct output: -0.4292752469  | Program output: -0.4292752469 
;;******************************
