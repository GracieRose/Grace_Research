Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[36.54292031604817 29] 65.54292031604817]
Train Case:   1 | Input/Output: [[-44.073617697786396 81] 36.926382302213604]
Train Case:   2 | Input/Output: [[-82.62683849258832 70] -12.62683849258832]
Train Case:   3 | Input/Output: [[-91.09180843066453 -65] -156.0918084306645]
Train Case:   4 | Input/Output: [[58.95604567356591 22] 80.95604567356591]
Train Case:   5 | Input/Output: [[1.0682152269091603 -56] -54.93178477309084]
Train Case:   6 | Input/Output: [[-34.730495213650244 78] 43.269504786349756]
Train Case:   7 | Input/Output: [[47.575230790232524 80] 127.57523079023252]
Train Case:   8 | Input/Output: [[-88.38341025506796 -30] -118.38341025506796]
Train Case:   9 | Input/Output: [[-4.9430876309079395 -16] -20.94308763090794]
Train Case:  10 | Input/Output: [[-24.163722112652366 -16] -40.163722112652366]
Train Case:  11 | Input/Output: [[15.44593402780383 69] 84.44593402780383]
Train Case:  12 | Input/Output: [[84.95740485324069 -18] 66.95740485324069]
Train Case:  13 | Input/Output: [[-12.959677205067322 56] 43.04032279493268]
Train Case:  14 | Input/Output: [[-45.521874119442685 -85] -130.52187411944269]
Train Case:  15 | Input/Output: [[-66.79881400782452 40] -26.798814007824518]
Train Case:  16 | Input/Output: [[-27.624323256950476 90] 62.375676743049524]
Train Case:  17 | Input/Output: [[11.650957806506483 79] 90.65095780650648]
Train Case:  18 | Input/Output: [[-65.00709433763363 -81] -146.00709433763365]
Train Case:  19 | Input/Output: [[-60.95823179205162 -17] -77.95823179205162]
Train Case:  20 | Input/Output: [[-43.425042583777525 7] -36.425042583777525]
Train Case:  21 | Input/Output: [[-43.04896048761648 96] 52.95103951238352]
Train Case:  22 | Input/Output: [[15.762401069717981 20] 35.76240106971798]
Train Case:  23 | Input/Output: [[-94.68637640740934 -49] -143.68637640740934]
Train Case:  24 | Input/Output: [[-24.827989191759485 20] -4.827989191759485]
Test Case:   0 | Input/Output: [[86.2711550962004 -100] -13.728844903799597]
Test Case:   1 | Input/Output: [[-38.0882654101832 39] 0.9117345898168026]
Test Case:   2 | Input/Output: [[-57.256076310180795 56] -1.256076310180795]
Test Case:   3 | Input/Output: [[-64.31178703336018 -65] -129.3117870333602]
Test Case:   4 | Input/Output: [[-41.79296567557289 91] 49.20703432442711]
Test Case:   5 | Input/Output: [[-12.929720276964176 58] 45.070279723035824]
Test Case:   6 | Input/Output: [[-8.084947684342907 -24] -32.08494768434291]
Test Case:   7 | Input/Output: [[-31.010554248200478 -85] -116.01055424820048]
Test Case:   8 | Input/Output: [[79.99982431452094 92] 171.99982431452094]
Test Case:   9 | Input/Output: [[-74.33215469248198 -3] -77.33215469248198]
Test Case:  10 | Input/Output: [[-93.73896335672143 50] -43.73896335672143]
Test Case:  11 | Input/Output: [[58.987669958498316 20] 78.98766995849832]
Test Case:  12 | Input/Output: [[-69.5786850165614 70] 0.42131498343860585]
Test Case:  13 | Input/Output: [[-89.70606151975112 36] -53.70606151975112]
Test Case:  14 | Input/Output: [[-17.992978336210896 46] 28.007021663789104]
Test Case:  15 | Input/Output: [[77.83393313554112 -100] -22.166066864458884]
Test Case:  16 | Input/Output: [[44.66670140146084 -28] 16.66670140146084]
Test Case:  17 | Input/Output: [[58.23955813720315 81] 139.23955813720315]
Test Case:  18 | Input/Output: [[89.23363174379 -67] 22.23363174379]
Test Case:  19 | Input/Output: [[-56.671947769136196 59] 2.328052230863804]
Test Case:  20 | Input/Output: [[77.8254092059847 38] 115.8254092059847]
Test Case:  21 | Input/Output: [[-61.31816288768142 40] -21.318162887681417]
Test Case:  22 | Input/Output: [[4.286220052257519 -23] -18.71377994774248]
Test Case:  23 | Input/Output: [[31.521170517087285 -16] 15.521170517087285]
Test Case:  24 | Input/Output: [[-92.87131436417282 16] -76.87131436417282]
Test Case:  25 | Input/Output: [[-31.82274561322167 12] -19.82274561322167]
Test Case:  26 | Input/Output: [[62.024180387443295 53] 115.0241803874433]
Test Case:  27 | Input/Output: [[-2.2907559496028114 51] 48.70924405039719]
Test Case:  28 | Input/Output: [[-19.996173944592115 -83] -102.99617394459212]
Test Case:  29 | Input/Output: [[22.512284413532683 -26] -3.487715586467317]
Test Case:  30 | Input/Output: [[89.89106272888199 72] 161.891062728882]
Test Case:  31 | Input/Output: [[-6.301575670153198 -23] -29.3015756701532]
Test Case:  32 | Input/Output: [[-0.2679914700433699 -21] -21.26799147004337]
Test Case:  33 | Input/Output: [[-16.910703212664075 -100] -116.91070321266407]
Test Case:  34 | Input/Output: [[54.17714370679897 -77] -22.822856293201028]
Test Case:  35 | Input/Output: [[42.94348259896867 -64] -21.05651740103133]
Test Case:  36 | Input/Output: [[97.9908572967353 -17] 80.9908572967353]
Test Case:  37 | Input/Output: [[-18.40823227293231 -2] -20.40823227293231]
Test Case:  38 | Input/Output: [[-1.6837741420557109 99] 97.31622585794429]
Test Case:  39 | Input/Output: [[-25.991700306306043 -86] -111.99170030630604]
Test Case:  40 | Input/Output: [[-75.0145896760187 -55] -130.01458967601872]
Test Case:  41 | Input/Output: [[-56.25943230321162 34] -22.259432303211618]
Test Case:  42 | Input/Output: [[-38.15971656902235 -67] -105.15971656902235]
Test Case:  43 | Input/Output: [[-61.70760474136829 -46] -107.7076047413683]
Test Case:  44 | Input/Output: [[-82.6761546063517 -41] -123.6761546063517]
Test Case:  45 | Input/Output: [[-39.08565251436031 70] 30.914347485639688]
Test Case:  46 | Input/Output: [[55.97325696153678 32] 87.97325696153678]
Test Case:  47 | Input/Output: [[51.40467600117685 76] 127.40467600117685]
Test Case:  48 | Input/Output: [[-4.951573868095821 -20] -24.95157386809582]
Test Case:  49 | Input/Output: [[11.14731017004253 -98] -86.85268982995747]
Test Case:  50 | Input/Output: [[-27.321475314726356 -9] -36.32147531472636]
Test Case:  51 | Input/Output: [[36.16133860139291 34] 70.16133860139291]
Test Case:  52 | Input/Output: [[-33.42193030758426 -29] -62.42193030758426]
Test Case:  53 | Input/Output: [[-36.25831306005543 73] 36.74168693994457]
Test Case:  54 | Input/Output: [[-24.160502546450033 83] 58.83949745354997]
Test Case:  55 | Input/Output: [[98.49612337039838 8] 106.49612337039838]
Test Case:  56 | Input/Output: [[-74.37490901758179 71] -3.3749090175817855]
Test Case:  57 | Input/Output: [[99.63745075607605 -23] 76.63745075607605]
Test Case:  58 | Input/Output: [[-33.25323662234028 92] 58.74676337765972]
Test Case:  59 | Input/Output: [[-6.0613676762109066 -76] -82.0613676762109]
Test Case:  60 | Input/Output: [[-46.21037836214485 -42] -88.21037836214485]
Test Case:  61 | Input/Output: [[-3.3289475914933604 68] 64.67105240850664]
Test Case:  62 | Input/Output: [[-93.42156415501199 2] -91.42156415501199]
Test Case:  63 | Input/Output: [[25.106320888742076 19] 44.106320888742076]
Test Case:  64 | Input/Output: [[-55.675776199718044 31] -24.675776199718044]
Test Case:  65 | Input/Output: [[-82.86616678347491 20] -62.86616678347491]
Test Case:  66 | Input/Output: [[76.36616081881084 16] 92.36616081881084]
Test Case:  67 | Input/Output: [[-91.5509714947915 42] -49.5509714947915]
Test Case:  68 | Input/Output: [[-57.00878963244722 59] 1.9912103675527817]
Test Case:  69 | Input/Output: [[-71.25250408788958 5] -66.25250408788958]
Test Case:  70 | Input/Output: [[13.900744517951736 78] 91.90074451795174]
Test Case:  71 | Input/Output: [[47.6568799324904 -9] 38.6568799324904]
Test Case:  72 | Input/Output: [[-72.56933996852312 57] -15.569339968523124]
Test Case:  73 | Input/Output: [[21.14558289403392 29] 50.14558289403392]
Test Case:  74 | Input/Output: [[51.10541437137391 -96] -44.89458562862609]
Test Case:  75 | Input/Output: [[37.92522949955455 -76] -38.07477050044545]
Test Case:  76 | Input/Output: [[3.569152265084469 65] 68.56915226508447]
Test Case:  77 | Input/Output: [[24.38758559238252 -52] -27.61241440761748]
Test Case:  78 | Input/Output: [[38.493133691388266 -8] 30.493133691388266]
Test Case:  79 | Input/Output: [[-15.337506033417284 4] -11.337506033417284]
Test Case:  80 | Input/Output: [[19.745413921746177 -8] 11.745413921746177]
Test Case:  81 | Input/Output: [[11.885741618239123 53] 64.88574161823912]
Test Case:  82 | Input/Output: [[5.931240095706315 73] 78.93124009570631]
Test Case:  83 | Input/Output: [[-28.851309057933875 -42] -70.85130905793388]
Test Case:  84 | Input/Output: [[-50.665737686033395 -74] -124.6657376860334]
Test Case:  85 | Input/Output: [[77.77542001898982 58] 135.77542001898982]
Test Case:  86 | Input/Output: [[-93.91434012569573 52] -41.91434012569573]
Test Case:  87 | Input/Output: [[92.94782720475277 84] 176.94782720475277]
Test Case:  88 | Input/Output: [[57.622570252317615 -29] 28.622570252317615]
Test Case:  89 | Input/Output: [[-83.94434783808057 -89] -172.94434783808057]
Test Case:  90 | Input/Output: [[50.79816247891833 -58] -7.201837521081671]
Test Case:  91 | Input/Output: [[43.05391641534925 66] 109.05391641534925]
Test Case:  92 | Input/Output: [[-10.914854481072055 -85] -95.91485448107206]
Test Case:  93 | Input/Output: [[-83.91100069807196 -64] -147.91100069807197]
Test Case:  94 | Input/Output: [[25.681278792260073 -82] -56.31872120773993]
Test Case:  95 | Input/Output: [[-86.46545949214209 16] -70.46545949214209]
Test Case:  96 | Input/Output: [[66.78212301848126 -69] -2.2178769815187422]
Test Case:  97 | Input/Output: [[-46.40411878391928 100] 53.59588121608072]
Test Case:  98 | Input/Output: [[-98.66499228168844 99] 0.33500771831155873]
Test Case:  99 | Input/Output: [[-78.9140233384603 38] -40.9140233384603]
Test Case: 100 | Input/Output: [[-98.83026346487523 6] -92.83026346487523]
Test Case: 101 | Input/Output: [[-86.03943499766575 19] -67.03943499766575]
Test Case: 102 | Input/Output: [[27.20464918413687 63] 90.20464918413687]
Test Case: 103 | Input/Output: [[63.79518378724785 -85] -21.20481621275215]
Test Case: 104 | Input/Output: [[72.61362305446977 30] 102.61362305446977]
Test Case: 105 | Input/Output: [[40.99249581943653 -16] 24.992495819436527]
Test Case: 106 | Input/Output: [[0.939497661462795 -14] -13.060502338537205]
Test Case: 107 | Input/Output: [[22.790031039305816 -92] -69.20996896069418]
Test Case: 108 | Input/Output: [[75.48767109078497 -59] 16.48767109078497]
Test Case: 109 | Input/Output: [[-6.392100973743851 -18] -24.39210097374385]
Test Case: 110 | Input/Output: [[6.8684299466753345 45] 51.868429946675334]
Test Case: 111 | Input/Output: [[-12.435373057138904 -67] -79.4353730571389]
Test Case: 112 | Input/Output: [[-71.80451574327424 -58] -129.80451574327424]
Test Case: 113 | Input/Output: [[-13.43069348951073 77] 63.56930651048927]
Test Case: 114 | Input/Output: [[-91.00432408212819 -25] -116.00432408212819]
Test Case: 115 | Input/Output: [[-57.252408620516995 1] -56.252408620516995]
Test Case: 116 | Input/Output: [[-45.75650329298906 -91] -136.75650329298907]
Test Case: 117 | Input/Output: [[61.56653627265854 90] 151.56653627265854]
Test Case: 118 | Input/Output: [[56.493969289769865 -76] -19.506030710230135]
Test Case: 119 | Input/Output: [[25.925765081723043 -2] 23.925765081723043]
Test Case: 120 | Input/Output: [[56.88412532685308 10] 66.88412532685308]
Test Case: 121 | Input/Output: [[79.72016931194247 34] 113.72016931194247]
Test Case: 122 | Input/Output: [[25.815111913211595 93] 118.8151119132116]
Test Case: 123 | Input/Output: [[-76.35388286654424 72] -4.3538828665442395]
Test Case: 124 | Input/Output: [[50.122878201777525 58] 108.12287820177752]
Test Case: 125 | Input/Output: [[30.66512879356489 85] 115.66512879356489]
Test Case: 126 | Input/Output: [[58.05847089157436 47] 105.05847089157436]
Test Case: 127 | Input/Output: [[-81.81718993582606 59] -22.817189935826065]
Test Case: 128 | Input/Output: [[-58.706884994973606 1] -57.706884994973606]
Test Case: 129 | Input/Output: [[-39.110286149715876 60] 20.889713850284124]
Test Case: 130 | Input/Output: [[-34.31240003612058 66] 31.68759996387942]
Test Case: 131 | Input/Output: [[57.77156718701343 79] 136.77156718701343]
Test Case: 132 | Input/Output: [[26.34445682081514 53] 79.34445682081514]
Test Case: 133 | Input/Output: [[47.50679848234756 -74] -26.493201517652437]
Test Case: 134 | Input/Output: [[36.731112287665894 4] 40.731112287665894]
Test Case: 135 | Input/Output: [[76.37850702611928 -68] 8.37850702611928]
Test Case: 136 | Input/Output: [[-16.329764326357406 -81] -97.3297643263574]
Test Case: 137 | Input/Output: [[56.47355830975641 42] 98.47355830975641]
Test Case: 138 | Input/Output: [[42.56770735415512 18] 60.56770735415512]
Test Case: 139 | Input/Output: [[94.09159936408946 31] 125.09159936408946]
Test Case: 140 | Input/Output: [[-94.69757562020718 14] -80.69757562020718]
Test Case: 141 | Input/Output: [[52.88573307706227 25] 77.88573307706227]
Test Case: 142 | Input/Output: [[-27.826897806053935 32] 4.173102193946065]
Test Case: 143 | Input/Output: [[57.46953441770722 19] 76.46953441770722]
Test Case: 144 | Input/Output: [[83.35699082360603 88] 171.35699082360603]
Test Case: 145 | Input/Output: [[-76.58344890621083 56] -20.583448906210833]
Test Case: 146 | Input/Output: [[-67.84449055410676 57] -10.844490554106756]
Test Case: 147 | Input/Output: [[83.3385478966745 74] 157.3385478966745]
Test Case: 148 | Input/Output: [[9.062978436733005 95] 104.062978436733]
Test Case: 149 | Input/Output: [[8.627945185067617 39] 47.62794518506762]
Test Case: 150 | Input/Output: [[-89.29780890325823 69] -20.29780890325823]
Test Case: 151 | Input/Output: [[56.62866391400928 -57] -0.37133608599071977]
Test Case: 152 | Input/Output: [[-26.90206337583834 -6] -32.90206337583834]
Test Case: 153 | Input/Output: [[82.54826681222559 -58] 24.54826681222559]
Test Case: 154 | Input/Output: [[34.21866365880712 56] 90.21866365880712]
Test Case: 155 | Input/Output: [[51.10070099464613 90] 141.10070099464613]
Test Case: 156 | Input/Output: [[14.916973166624459 30] 44.91697316662446]
Test Case: 157 | Input/Output: [[-48.79270642454097 -26] -74.79270642454097]
Test Case: 158 | Input/Output: [[-55.73828197531727 95] 39.26171802468273]
Test Case: 159 | Input/Output: [[25.162510341005827 70] 95.16251034100583]
Test Case: 160 | Input/Output: [[67.99362838803097 -83] -15.00637161196903]
Test Case: 161 | Input/Output: [[25.418541791600546 -18] 7.418541791600546]
Test Case: 162 | Input/Output: [[73.5599576338368 27] 100.5599576338368]
Test Case: 163 | Input/Output: [[-81.21516459296647 69] -12.215164592966474]
Test Case: 164 | Input/Output: [[-96.32552767916573 -89] -185.32552767916573]
Test Case: 165 | Input/Output: [[37.68295307628895 94] 131.68295307628895]
Test Case: 166 | Input/Output: [[20.487129559451688 -10] 10.487129559451688]
Test Case: 167 | Input/Output: [[95.08508045541134 -80] 15.085080455411344]
Test Case: 168 | Input/Output: [[-58.247317478639495 9] -49.247317478639495]
Test Case: 169 | Input/Output: [[0.20918610963309447 -24] -23.790813890366906]
Test Case: 170 | Input/Output: [[73.05794895089747 63] 136.05794895089747]
Test Case: 171 | Input/Output: [[-11.068329325405642 -6] -17.068329325405642]
Test Case: 172 | Input/Output: [[15.270082317294793 -16] -0.7299176827052065]
Test Case: 173 | Input/Output: [[50.55849430871493 -39] 11.558494308714927]
Test Case: 174 | Input/Output: [[-7.696904874491622 -37] -44.69690487449162]
Test Case: 175 | Input/Output: [[43.854765221584756 18] 61.854765221584756]
Test Case: 176 | Input/Output: [[32.385420995399784 90] 122.38542099539978]
Test Case: 177 | Input/Output: [[-11.158112872539562 -72] -83.15811287253956]
Test Case: 178 | Input/Output: [[-38.39915803210552 80] 41.60084196789448]
Test Case: 179 | Input/Output: [[-84.31583345365958 -2] -86.31583345365958]
Test Case: 180 | Input/Output: [[25.69073369645676 33] 58.69073369645676]
Test Case: 181 | Input/Output: [[80.38472148752561 -16] 64.38472148752561]
Test Case: 182 | Input/Output: [[86.98205382942191 -59] 27.982053829421915]
Test Case: 183 | Input/Output: [[67.6880731971516 -76] -8.311926802848404]
Test Case: 184 | Input/Output: [[-4.823252165609077 84] 79.17674783439092]
Test Case: 185 | Input/Output: [[10.802468358569968 95] 105.80246835856997]
Test Case: 186 | Input/Output: [[53.96151651728621 10] 63.96151651728621]
Test Case: 187 | Input/Output: [[-12.546203542264806 32] 19.453796457735194]
Test Case: 188 | Input/Output: [[38.919138445794374 100] 138.91913844579437]
Test Case: 189 | Input/Output: [[-18.764726029804706 -53] -71.7647260298047]
Test Case: 190 | Input/Output: [[-34.622831566497254 -52] -86.62283156649725]
Test Case: 191 | Input/Output: [[78.42602631119448 12] 90.42602631119448]
Test Case: 192 | Input/Output: [[46.746647518787796 53] 99.7466475187878]
Test Case: 193 | Input/Output: [[-85.3954081966706 69] -16.3954081966706]
Test Case: 194 | Input/Output: [[-51.59754835845267 -32] -83.59754835845267]
Test Case: 195 | Input/Output: [[-36.733962433215254 0] -36.733962433215254]
Test Case: 196 | Input/Output: [[-92.9965702502994 58] -34.9965702502994]
Test Case: 197 | Input/Output: [[94.20149566812916 86] 180.20149566812916]
Test Case: 198 | Input/Output: [[-14.408675754141868 33] 18.591324245858132]
Test Case: 199 | Input/Output: [[-40.57894607724637 6] -34.57894607724637]
Test Case: 200 | Input/Output: [[-60.677702319605274 87] 26.322297680394726]
Test Case: 201 | Input/Output: [[60.55006288558107 -32] 28.55006288558107]
Test Case: 202 | Input/Output: [[97.84595745148982 89] 186.84595745148982]
Test Case: 203 | Input/Output: [[-17.835239415542333 -76] -93.83523941554233]
Test Case: 204 | Input/Output: [[17.10395951433601 85] 102.10395951433601]
Test Case: 205 | Input/Output: [[-19.602046369530598 -59] -78.6020463695306]
Test Case: 206 | Input/Output: [[-9.632148529900803 82] 72.3678514700992]
Test Case: 207 | Input/Output: [[-35.528258865362744 9] -26.528258865362744]
Test Case: 208 | Input/Output: [[-66.78134545620784 26] -40.781345456207845]
Test Case: 209 | Input/Output: [[1.7481133184295174 75] 76.74811331842952]
Test Case: 210 | Input/Output: [[5.021717901045264 -85] -79.97828209895474]
Test Case: 211 | Input/Output: [[-25.34332179698606 57] 31.65667820301394]
Test Case: 212 | Input/Output: [[-8.14641421148525 75] 66.85358578851475]
Test Case: 213 | Input/Output: [[82.49765220933222 -35] 47.497652209332216]
Test Case: 214 | Input/Output: [[17.370016714033284 -3] 14.370016714033284]
Test Case: 215 | Input/Output: [[-69.12742820782918 -39] -108.12742820782918]
Test Case: 216 | Input/Output: [[-51.47375552469104 27] -24.473755524691043]
Test Case: 217 | Input/Output: [[-22.710591414698 81] 58.289408585302]
Test Case: 218 | Input/Output: [[21.295417076151594 35] 56.295417076151594]
Test Case: 219 | Input/Output: [[-79.02911615236246 93] 13.970883847637538]
Test Case: 220 | Input/Output: [[-23.54104800114223 88] 64.45895199885777]
Test Case: 221 | Input/Output: [[46.664188338504346 35] 81.66418833850435]
Test Case: 222 | Input/Output: [[-14.378665372901423 14] -0.3786653729014233]
Test Case: 223 | Input/Output: [[-91.08292590326346 -12] -103.08292590326346]
Test Case: 224 | Input/Output: [[66.69098611107682 -59] 7.690986111076825]
Test Case: 225 | Input/Output: [[48.88645262523775 71] 119.88645262523775]
Test Case: 226 | Input/Output: [[47.95459919898681 -25] 22.954599198986813]
Test Case: 227 | Input/Output: [[-79.4919076458959 -2] -81.4919076458959]
Test Case: 228 | Input/Output: [[-46.407723638749296 59] 12.592276361250704]
Test Case: 229 | Input/Output: [[-44.125217391815674 -64] -108.12521739181568]
Test Case: 230 | Input/Output: [[84.73230412048105 94] 178.73230412048105]
Test Case: 231 | Input/Output: [[91.35945295587746 69] 160.35945295587746]
Test Case: 232 | Input/Output: [[-82.93187469792784 29] -53.93187469792784]
Test Case: 233 | Input/Output: [[-78.32521790844291 94] 15.674782091557091]
Test Case: 234 | Input/Output: [[23.335021839920984 38] 61.335021839920984]
Test Case: 235 | Input/Output: [[46.808369086658246 22] 68.80836908665825]
Test Case: 236 | Input/Output: [[-89.81483488450658 -29] -118.81483488450658]
Test Case: 237 | Input/Output: [[89.97850122505923 -9] 80.97850122505923]
Test Case: 238 | Input/Output: [[-25.903809372392203 47] 21.096190627607797]
Test Case: 239 | Input/Output: [[45.83170453371065 -21] 24.83170453371065]
Test Case: 240 | Input/Output: [[32.329367473221566 -36] -3.6706325267784337]
Test Case: 241 | Input/Output: [[25.06875081431123 36] 61.06875081431123]
Test Case: 242 | Input/Output: [[-50.083640106294425 -72] -122.08364010629442]
Test Case: 243 | Input/Output: [[81.86888767007773 -70] 11.868887670077726]
Test Case: 244 | Input/Output: [[66.58956106379043 2] 68.58956106379043]
Test Case: 245 | Input/Output: [[92.46280177191593 76] 168.46280177191593]
Test Case: 246 | Input/Output: [[-42.15952765452775 2] -40.15952765452775]
Test Case: 247 | Input/Output: [[-30.459361223032616 91] 60.540638776967384]
Test Case: 248 | Input/Output: [[-41.73006333212959 -78] -119.73006333212959]
Test Case: 249 | Input/Output: [[-97.57590049342299 -31] -128.57590049342298]
Test Case: 250 | Input/Output: [[-76.09608965515818 82] 5.903910344841819]
Test Case: 251 | Input/Output: [[44.31596405765657 -26] 18.315964057656572]
Test Case: 252 | Input/Output: [[-81.58713594599145 62] -19.58713594599145]
Test Case: 253 | Input/Output: [[93.14559197943288 -44] 49.14559197943288]
Test Case: 254 | Input/Output: [[-69.93365065416317 -76] -145.93365065416316]
Test Case: 255 | Input/Output: [[-0.27449576057698266 -37] -37.27449576057698]
Test Case: 256 | Input/Output: [[83.30594366983698 43] 126.30594366983698]
Test Case: 257 | Input/Output: [[-46.20842772339127 -89] -135.20842772339125]
Test Case: 258 | Input/Output: [[43.534592423816406 -58] -14.465407576183594]
Test Case: 259 | Input/Output: [[-72.54974543128768 80] 7.4502545687123245]
Test Case: 260 | Input/Output: [[-22.455658993306173 -3] -25.455658993306173]
Test Case: 261 | Input/Output: [[-14.588593201507678 70] 55.41140679849232]
Test Case: 262 | Input/Output: [[60.08064330179968 -88] -27.919356698200318]
Test Case: 263 | Input/Output: [[17.77456610446457 -77] -59.22543389553543]
Test Case: 264 | Input/Output: [[-32.41704963460603 28] -4.41704963460603]
Test Case: 265 | Input/Output: [[73.69770224540903 -95] -21.302297754590967]
Test Case: 266 | Input/Output: [[94.1809307199241 -56] 38.180930719924106]
Test Case: 267 | Input/Output: [[75.09641325273566 -80] -4.903586747264342]
Test Case: 268 | Input/Output: [[-70.0449452316603 80] 9.955054768339707]
Test Case: 269 | Input/Output: [[-99.2844906246826 24] -75.2844906246826]
Test Case: 270 | Input/Output: [[-38.77641622606036 -85] -123.77641622606036]
Test Case: 271 | Input/Output: [[41.513638317161394 -55] -13.486361682838606]
Test Case: 272 | Input/Output: [[-29.22662621829764 61] 31.77337378170236]
Test Case: 273 | Input/Output: [[-11.76438625765546 -77] -88.76438625765546]
Test Case: 274 | Input/Output: [[43.36913007754276 -6] 37.36913007754276]
Test Case: 275 | Input/Output: [[-61.43761247584125 60] -1.4376124758412487]
Test Case: 276 | Input/Output: [[-71.04036682203355 -29] -100.04036682203355]
Test Case: 277 | Input/Output: [[-50.62676275501157 30] -20.62676275501157]
Test Case: 278 | Input/Output: [[10.442716495343646 -32] -21.557283504656354]
Test Case: 279 | Input/Output: [[12.332486539168144 -89] -76.66751346083186]
Test Case: 280 | Input/Output: [[-81.91251218161494 91] 9.087487818385057]
Test Case: 281 | Input/Output: [[-77.87477409795932 -41] -118.87477409795932]
Test Case: 282 | Input/Output: [[38.49711380140161 91] 129.4971138014016]
Test Case: 283 | Input/Output: [[5.038305638661569 2] 7.038305638661569]
Test Case: 284 | Input/Output: [[36.018178686381674 -4] 32.018178686381674]
Test Case: 285 | Input/Output: [[-34.623715182931235 -65] -99.62371518293124]
Test Case: 286 | Input/Output: [[-85.0859544856762 -20] -105.0859544856762]
Test Case: 287 | Input/Output: [[-31.923700660209846 -87] -118.92370066020985]
Test Case: 288 | Input/Output: [[-87.09753809754028 -34] -121.09753809754028]
Test Case: 289 | Input/Output: [[-46.87565629575956 84] 37.12434370424044]
Test Case: 290 | Input/Output: [[-98.0781096487961 52] -46.0781096487961]
Test Case: 291 | Input/Output: [[42.84017694351485 28] 70.84017694351485]
Test Case: 292 | Input/Output: [[-65.94025278162307 -31] -96.94025278162307]
Test Case: 293 | Input/Output: [[47.15326479514755 57] 104.15326479514755]
Test Case: 294 | Input/Output: [[56.74390805518442 -32] 24.74390805518442]
Test Case: 295 | Input/Output: [[-98.1454637402656 -91] -189.1454637402656]
Test Case: 296 | Input/Output: [[57.03126502494584 -82] -24.96873497505416]
Test Case: 297 | Input/Output: [[-77.0791804535707 7] -70.0791804535707]
Test Case: 298 | Input/Output: [[-28.534513314642965 92] 63.465486685357035]
Test Case: 299 | Input/Output: [[78.44482068051016 -90] -11.555179319489838]
Test Case: 300 | Input/Output: [[-95.598233928051 89] -6.598233928051002]
Test Case: 301 | Input/Output: [[88.6388198387377 45] 133.6388198387377]
Test Case: 302 | Input/Output: [[76.4271243200819 66] 142.4271243200819]
Test Case: 303 | Input/Output: [[33.53938186958217 37] 70.53938186958217]
Test Case: 304 | Input/Output: [[62.371041693618054 69] 131.37104169361805]
Test Case: 305 | Input/Output: [[-71.49824817324497 61] -10.498248173244974]
Test Case: 306 | Input/Output: [[79.01096503895414 -96] -16.98903496104586]
Test Case: 307 | Input/Output: [[38.329814802073 4] 42.329814802073]
Test Case: 308 | Input/Output: [[81.28403505041709 -89] -7.7159649495829115]
Test Case: 309 | Input/Output: [[-78.31843083832817 -5] -83.31843083832817]
Test Case: 310 | Input/Output: [[-47.40669135323565 -71] -118.40669135323566]
Test Case: 311 | Input/Output: [[-81.79567544257749 -35] -116.79567544257749]
Test Case: 312 | Input/Output: [[95.44630728075671 -89] 6.446307280756713]
Test Case: 313 | Input/Output: [[-37.06390300405893 -88] -125.06390300405893]
Test Case: 314 | Input/Output: [[-95.99895238765525 -25] -120.99895238765525]
Test Case: 315 | Input/Output: [[7.682442507023282 0] 7.682442507023282]
Test Case: 316 | Input/Output: [[79.47936924431355 89] 168.47936924431355]
Test Case: 317 | Input/Output: [[-77.52030762050785 -19] -96.52030762050785]
Test Case: 318 | Input/Output: [[49.12627273572954 36] 85.12627273572954]
Test Case: 319 | Input/Output: [[68.73125611341976 -16] 52.73125611341976]
Test Case: 320 | Input/Output: [[-53.965659037687644 74] 20.034340962312356]
Test Case: 321 | Input/Output: [[-62.69773324379029 2] -60.69773324379029]
Test Case: 322 | Input/Output: [[-57.46519131977059 19] -38.46519131977059]
Test Case: 323 | Input/Output: [[53.285730083154704 -72] -18.714269916845296]
Test Case: 324 | Input/Output: [[-87.03862617654916 -90] -177.03862617654914]
Test Case: 325 | Input/Output: [[76.61388105164093 -2] 74.61388105164093]
Test Case: 326 | Input/Output: [[48.03839373955691 79] 127.03839373955691]
Test Case: 327 | Input/Output: [[45.94665075389159 -35] 10.94665075389159]
Test Case: 328 | Input/Output: [[-12.792872117601235 83] 70.20712788239877]
Test Case: 329 | Input/Output: [[8.027429677548753 60] 68.02742967754875]
Test Case: 330 | Input/Output: [[68.3810339865243 8] 76.3810339865243]
Test Case: 331 | Input/Output: [[5.713760969202397 15] 20.713760969202397]
Test Case: 332 | Input/Output: [[67.41809906900278 -95] -27.58190093099722]
Test Case: 333 | Input/Output: [[98.82864546743261 -70] 28.828645467432608]
Test Case: 334 | Input/Output: [[-88.36647211583242 53] -35.36647211583242]
Test Case: 335 | Input/Output: [[-70.4656439506772 -52] -122.4656439506772]
Test Case: 336 | Input/Output: [[76.6555966329766 -24] 52.6555966329766]
Test Case: 337 | Input/Output: [[77.14130228335216 29] 106.14130228335216]
Test Case: 338 | Input/Output: [[-30.944328986757114 -19] -49.944328986757114]
Test Case: 339 | Input/Output: [[-66.5403747534636 30] -36.540374753463595]
Test Case: 340 | Input/Output: [[-20.356806101003684 -70] -90.35680610100368]
Test Case: 341 | Input/Output: [[-25.29570081902692 3] -22.29570081902692]
Test Case: 342 | Input/Output: [[-83.41160680152042 80] -3.4116068015204206]
Test Case: 343 | Input/Output: [[13.217573518202585 27] 40.217573518202585]
Test Case: 344 | Input/Output: [[-40.800929046209134 94] 53.199070953790866]
Test Case: 345 | Input/Output: [[-61.64809191594094 80] 18.351908084059062]
Test Case: 346 | Input/Output: [[99.11172655038482 56] 155.11172655038482]
Test Case: 347 | Input/Output: [[-31.820060007424303 -14] -45.8200600074243]
Test Case: 348 | Input/Output: [[49.782106197406364 -38] 11.782106197406364]
Test Case: 349 | Input/Output: [[50.36085178026127 9] 59.36085178026127]
Test Case: 350 | Input/Output: [[89.50141160887759 -38] 51.50141160887759]
Test Case: 351 | Input/Output: [[2.81829540759513 -10] -7.18170459240487]
Test Case: 352 | Input/Output: [[-81.20512093589818 -15] -96.20512093589818]
Test Case: 353 | Input/Output: [[-2.6103451239124666 -77] -79.61034512391247]
Test Case: 354 | Input/Output: [[-47.73239273907526 -18] -65.73239273907527]
Test Case: 355 | Input/Output: [[-4.853361996331017 -90] -94.85336199633102]
Test Case: 356 | Input/Output: [[-52.4339400483036 19] -33.4339400483036]
Test Case: 357 | Input/Output: [[62.55915846907314 -11] 51.55915846907314]
Test Case: 358 | Input/Output: [[-95.53628343008465 -58] -153.53628343008467]
Test Case: 359 | Input/Output: [[81.03666777868145 72] 153.03666777868145]
Test Case: 360 | Input/Output: [[-81.55884274985219 2] -79.55884274985219]
Test Case: 361 | Input/Output: [[78.25290190581347 12] 90.25290190581347]
Test Case: 362 | Input/Output: [[-78.48615823768917 67] -11.486158237689168]
Test Case: 363 | Input/Output: [[-18.415235333514417 17] -1.415235333514417]
Test Case: 364 | Input/Output: [[-0.28097268176985324 10] 9.719027318230147]
Test Case: 365 | Input/Output: [[-2.000828550970951 41] 38.99917144902905]
Test Case: 366 | Input/Output: [[60.66179502486028 -78] -17.338204975139718]
Test Case: 367 | Input/Output: [[-88.42950799731508 45] -43.429507997315085]
Test Case: 368 | Input/Output: [[95.6546968451546 -25] 70.6546968451546]
Test Case: 369 | Input/Output: [[-31.660089399533405 -82] -113.6600893995334]
Test Case: 370 | Input/Output: [[48.49467953097994 53] 101.49467953097994]
Test Case: 371 | Input/Output: [[-33.82102332934245 50] 16.178976670657548]
Test Case: 372 | Input/Output: [[23.296172283793638 -43] -19.703827716206362]
Test Case: 373 | Input/Output: [[-78.86663063443065 91] 12.13336936556935]
Test Case: 374 | Input/Output: [[70.18698365838253 26] 96.18698365838253]
Test Case: 375 | Input/Output: [[-11.632362726890918 14] 2.3676372731090822]
Test Case: 376 | Input/Output: [[18.40530037663892 -1] 17.40530037663892]
Test Case: 377 | Input/Output: [[3.468928024346525 26] 29.468928024346525]
Test Case: 378 | Input/Output: [[63.68394178482893 8] 71.68394178482893]
Test Case: 379 | Input/Output: [[31.57394793810576 21] 52.57394793810576]
Test Case: 380 | Input/Output: [[1.5026296626407003 44] 45.5026296626407]
Test Case: 381 | Input/Output: [[14.88069302963035 -61] -46.11930697036965]
Test Case: 382 | Input/Output: [[-91.86278391316007 -64] -155.86278391316006]
Test Case: 383 | Input/Output: [[-84.57617518542457 -29] -113.57617518542457]
Test Case: 384 | Input/Output: [[16.287500280433704 -63] -46.712499719566296]
Test Case: 385 | Input/Output: [[34.73968106808215 -73] -38.26031893191785]
Test Case: 386 | Input/Output: [[-44.75551790769621 -72] -116.7555179076962]
Test Case: 387 | Input/Output: [[-61.14395289156238 -62] -123.14395289156238]
Test Case: 388 | Input/Output: [[26.24321897969213 38] 64.24321897969213]
Test Case: 389 | Input/Output: [[-27.71430124289506 -41] -68.71430124289506]
Test Case: 390 | Input/Output: [[5.775270776603321 -13] -7.224729223396679]
Test Case: 391 | Input/Output: [[56.97132026588267 -23] 33.97132026588267]
Test Case: 392 | Input/Output: [[78.33226155609219 -15] 63.33226155609219]
Test Case: 393 | Input/Output: [[54.66056477044256 -53] 1.6605647704425621]
Test Case: 394 | Input/Output: [[44.21315366762033 70] 114.21315366762033]
Test Case: 395 | Input/Output: [[99.16992895673391 41] 140.1699289567339]
Test Case: 396 | Input/Output: [[72.42826710983178 8] 80.42826710983178]
Test Case: 397 | Input/Output: [[28.75532010385203 55] 83.75532010385203]
Test Case: 398 | Input/Output: [[10.017831887798792 18] 28.017831887798792]
Test Case: 399 | Input/Output: [[35.059807745515116 83] 118.05980774551512]
Test Case: 400 | Input/Output: [[-48.466058373081665 54] 5.533941626918335]
Test Case: 401 | Input/Output: [[-41.30844289946249 38] -3.3084428994624915]
Test Case: 402 | Input/Output: [[87.87727488910159 8] 95.87727488910159]
Test Case: 403 | Input/Output: [[-71.01090039504163 75] 3.989099604958369]
Test Case: 404 | Input/Output: [[5.8096393902138885 83] 88.80963939021389]
Test Case: 405 | Input/Output: [[19.50750393924156 43] 62.50750393924156]
Test Case: 406 | Input/Output: [[65.80212060650734 65] 130.80212060650734]
Test Case: 407 | Input/Output: [[-83.74068987896487 29] -54.74068987896487]
Test Case: 408 | Input/Output: [[-54.06672469515006 50] -4.066724695150057]
Test Case: 409 | Input/Output: [[17.607282993532408 -20] -2.392717006467592]
Test Case: 410 | Input/Output: [[-5.270843795949844 77] 71.72915620405016]
Test Case: 411 | Input/Output: [[-21.513720827381192 12] -9.513720827381192]
Test Case: 412 | Input/Output: [[21.52128371860627 4] 25.52128371860627]
Test Case: 413 | Input/Output: [[-18.42754673358158 -64] -82.42754673358158]
Test Case: 414 | Input/Output: [[51.78713012349999 20] 71.78713012349999]
Test Case: 415 | Input/Output: [[-31.30343919574672 -9] -40.30343919574672]
Test Case: 416 | Input/Output: [[-59.68381012018797 35] -24.68381012018797]
Test Case: 417 | Input/Output: [[27.9051679549176 -47] -19.0948320450824]
Test Case: 418 | Input/Output: [[93.29820411529403 -64] 29.298204115294027]
Test Case: 419 | Input/Output: [[64.6337563076863 19] 83.6337563076863]
Test Case: 420 | Input/Output: [[-34.44040663301047 -46] -80.44040663301047]
Test Case: 421 | Input/Output: [[-92.58024496351133 4] -88.58024496351133]
Test Case: 422 | Input/Output: [[-21.385180382593276 -45] -66.38518038259328]
Test Case: 423 | Input/Output: [[-17.58526843716129 -78] -95.58526843716129]
Test Case: 424 | Input/Output: [[74.15264503020322 95] 169.15264503020322]
Test Case: 425 | Input/Output: [[24.18720167799593 -15] 9.18720167799593]
Test Case: 426 | Input/Output: [[40.47798738163891 20] 60.47798738163891]
Test Case: 427 | Input/Output: [[-97.33632438484656 84] -13.336324384846563]
Test Case: 428 | Input/Output: [[-78.04369761170315 -57] -135.04369761170315]
Test Case: 429 | Input/Output: [[-38.67027187482965 58] 19.329728125170348]
Test Case: 430 | Input/Output: [[-32.980451032113706 -65] -97.9804510321137]
Test Case: 431 | Input/Output: [[63.45044891947026 -96] -32.54955108052974]
Test Case: 432 | Input/Output: [[45.58080166110602 -25] 20.580801661106022]
Test Case: 433 | Input/Output: [[-3.710165192307528 -52] -55.71016519230753]
Test Case: 434 | Input/Output: [[47.205228960022566 41] 88.20522896002257]
Test Case: 435 | Input/Output: [[1.0854923414287896 -75] -73.91450765857121]
Test Case: 436 | Input/Output: [[70.6594006208625 17] 87.6594006208625]
Test Case: 437 | Input/Output: [[58.22893720583738 -24] 34.22893720583738]
Test Case: 438 | Input/Output: [[57.6334992838386 3] 60.6334992838386]
Test Case: 439 | Input/Output: [[-17.40690893053008 87] 69.59309106946992]
Test Case: 440 | Input/Output: [[86.93797600597193 53] 139.93797600597193]
Test Case: 441 | Input/Output: [[38.446955875312256 -79] -40.553044124687744]
Test Case: 442 | Input/Output: [[93.53969308729177 30] 123.53969308729177]
Test Case: 443 | Input/Output: [[-33.9018625044034 78] 44.0981374955966]
Test Case: 444 | Input/Output: [[-5.071059114069712 96] 90.92894088593029]
Test Case: 445 | Input/Output: [[-51.73382790906573 -83] -134.73382790906572]
Test Case: 446 | Input/Output: [[-86.30537568382385 -27] -113.30537568382385]
Test Case: 447 | Input/Output: [[-38.88468569585668 -11] -49.88468569585668]
Test Case: 448 | Input/Output: [[37.278742349978586 64] 101.27874234997859]
Test Case: 449 | Input/Output: [[-21.634942345663916 63] 41.365057654336084]
Test Case: 450 | Input/Output: [[47.75891751173299 -66] -18.24108248826701]
Test Case: 451 | Input/Output: [[-72.91051337077919 -1] -73.91051337077919]
Test Case: 452 | Input/Output: [[-30.02768804722848 58] 27.97231195277152]
Test Case: 453 | Input/Output: [[-95.85612297454418 -75] -170.85612297454418]
Test Case: 454 | Input/Output: [[-12.918203067154877 15] 2.0817969328451227]
Test Case: 455 | Input/Output: [[84.76664038333362 71] 155.76664038333362]
Test Case: 456 | Input/Output: [[47.31471288646435 73] 120.31471288646435]
Test Case: 457 | Input/Output: [[-64.78636770668285 -17] -81.78636770668285]
Test Case: 458 | Input/Output: [[-87.62051792620775 -48] -135.62051792620775]
Test Case: 459 | Input/Output: [[64.90761134496961 -19] 45.90761134496961]
Test Case: 460 | Input/Output: [[54.37507437485755 27] 81.37507437485755]
Test Case: 461 | Input/Output: [[-42.93444359223788 57] 14.065556407762116]
Test Case: 462 | Input/Output: [[39.26132815056732 43] 82.26132815056732]
Test Case: 463 | Input/Output: [[10.10935408429512 30] 40.10935408429512]
Test Case: 464 | Input/Output: [[52.20397837770682 -46] 6.203978377706818]
Test Case: 465 | Input/Output: [[-2.4417573800822083 77] 74.55824261991779]
Test Case: 466 | Input/Output: [[-87.65605427876517 -12] -99.65605427876517]
Test Case: 467 | Input/Output: [[-94.05053273860497 69] -25.05053273860497]
Test Case: 468 | Input/Output: [[14.101780712877314 54] 68.10178071287731]
Test Case: 469 | Input/Output: [[-12.075892475211631 -68] -80.07589247521163]
Test Case: 470 | Input/Output: [[86.74922419920244 83] 169.74922419920244]
Test Case: 471 | Input/Output: [[-11.511146633474027 -87] -98.51114663347403]
Test Case: 472 | Input/Output: [[-29.629669565210335 -25] -54.629669565210335]
Test Case: 473 | Input/Output: [[27.57740297822761 85] 112.57740297822761]
Test Case: 474 | Input/Output: [[43.96596351754067 84] 127.96596351754067]
Test Case: 475 | Input/Output: [[-48.494215085999095 -83] -131.4942150859991]
Test Case: 476 | Input/Output: [[-15.238003117241334 -29] -44.238003117241334]
Test Case: 477 | Input/Output: [[89.91345045379072 -29] 60.913450453790716]
Test Case: 478 | Input/Output: [[-24.82773156921651 88] 63.17226843078349]
Test Case: 479 | Input/Output: [[74.2973338486351 -30] 44.297333848635105]
Test Case: 480 | Input/Output: [[-52.54171706973834 -31] -83.54171706973834]
Test Case: 481 | Input/Output: [[10.307301042069582 76] 86.30730104206958]
Test Case: 482 | Input/Output: [[-61.428448934708044 31] -30.428448934708044]
Test Case: 483 | Input/Output: [[-21.413051407992228 30] 8.586948592007772]
Test Case: 484 | Input/Output: [[-12.592869536810113 -71] -83.59286953681011]
Test Case: 485 | Input/Output: [[-6.083459594374929 -13] -19.08345959437493]
Test Case: 486 | Input/Output: [[6.363970574550493 81] 87.36397057455049]
Test Case: 487 | Input/Output: [[57.549693585035044 -35] 22.549693585035044]
Test Case: 488 | Input/Output: [[-54.933808392888615 -47] -101.93380839288861]
Test Case: 489 | Input/Output: [[15.440597271550232 -69] -53.55940272844977]
Test Case: 490 | Input/Output: [[73.12562907479861 -37] 36.12562907479861]
Test Case: 491 | Input/Output: [[51.46014217509759 -54] -2.5398578249024126]
Test Case: 492 | Input/Output: [[-45.97775582697767 -30] -75.97775582697767]
Test Case: 493 | Input/Output: [[-98.61215477565682 -92] -190.61215477565682]
Test Case: 494 | Input/Output: [[71.18202328727855 -20] 51.182023287278554]
Test Case: 495 | Input/Output: [[34.36310270524936 38] 72.36310270524936]
Test Case: 496 | Input/Output: [[-16.50245964416375 -79] -95.50245964416375]
Test Case: 497 | Input/Output: [[64.64277060928265 -79] -14.35722939071735]
Test Case: 498 | Input/Output: [[39.30449515430209 -97] -57.69550484569791]
Test Case: 499 | Input/Output: [[-91.57915041833968 -56] -147.57915041833968]
Test Case: 500 | Input/Output: [[-45.11497777509239 -9] -54.11497777509239]
Test Case: 501 | Input/Output: [[-7.170487721998526 -11] -18.170487721998526]
Test Case: 502 | Input/Output: [[23.388356577474028 80] 103.38835657747403]
Test Case: 503 | Input/Output: [[-75.8353956169287 -92] -167.83539561692868]
Test Case: 504 | Input/Output: [[15.592603333172079 45] 60.59260333317208]
Test Case: 505 | Input/Output: [[-46.28144005263219 61] 14.718559947367808]
Test Case: 506 | Input/Output: [[-91.1324769861283 -51] -142.1324769861283]
Test Case: 507 | Input/Output: [[22.02806452101231 54] 76.02806452101231]
Test Case: 508 | Input/Output: [[66.53270835943599 -56] 10.532708359435986]
Test Case: 509 | Input/Output: [[-74.25788622046012 27] -47.25788622046012]
Test Case: 510 | Input/Output: [[-48.262378877591395 82] 33.737621122408605]
Test Case: 511 | Input/Output: [[-6.257866191459314 37] 30.742133808540686]
Test Case: 512 | Input/Output: [[-12.903996817612722 5] -7.903996817612722]
Test Case: 513 | Input/Output: [[25.05116680557049 73] 98.05116680557049]
Test Case: 514 | Input/Output: [[72.73516313772714 51] 123.73516313772714]
Test Case: 515 | Input/Output: [[-9.289658887255413 -51] -60.28965888725541]
Test Case: 516 | Input/Output: [[-51.72037251273489 -2] -53.72037251273489]
Test Case: 517 | Input/Output: [[-20.391079069223153 -15] -35.39107906922315]
Test Case: 518 | Input/Output: [[44.78050719617542 -28] 16.78050719617542]
Test Case: 519 | Input/Output: [[6.670207200424926 78] 84.67020720042493]
Test Case: 520 | Input/Output: [[-29.861987091729887 55] 25.138012908270113]
Test Case: 521 | Input/Output: [[-88.90002587269679 -31] -119.90002587269679]
Test Case: 522 | Input/Output: [[77.0216109503483 -67] 10.021610950348304]
Test Case: 523 | Input/Output: [[-80.28326121603672 -89] -169.28326121603672]
Test Case: 524 | Input/Output: [[-22.281305202487587 -15] -37.28130520248759]
Test Case: 525 | Input/Output: [[91.88375125671399 36] 127.88375125671399]
Test Case: 526 | Input/Output: [[-49.50295498254136 58] 8.497045017458639]
Test Case: 527 | Input/Output: [[-35.94638964324315 -15] -50.94638964324315]
Test Case: 528 | Input/Output: [[22.429962805399796 100] 122.4299628053998]
Test Case: 529 | Input/Output: [[37.46028327614073 49] 86.46028327614073]
Test Case: 530 | Input/Output: [[-50.27303432073793 23] -27.273034320737928]
Test Case: 531 | Input/Output: [[60.73404106498717 37] 97.73404106498717]
Test Case: 532 | Input/Output: [[-61.90484820030877 -54] -115.90484820030878]
Test Case: 533 | Input/Output: [[55.84546286700689 25] 80.84546286700689]
Test Case: 534 | Input/Output: [[42.640821417085476 78] 120.64082141708548]
Test Case: 535 | Input/Output: [[13.783944893377338 -39] -25.21605510662266]
Test Case: 536 | Input/Output: [[13.017213953900225 -97] -83.98278604609978]
Test Case: 537 | Input/Output: [[-28.097125552253416 -19] -47.09712555225342]
Test Case: 538 | Input/Output: [[33.6189452283879 -37] -3.3810547716120993]
Test Case: 539 | Input/Output: [[-67.07157992507021 -98] -165.0715799250702]
Test Case: 540 | Input/Output: [[-20.083292018452497 -19] -39.0832920184525]
Test Case: 541 | Input/Output: [[-93.66922011898025 -6] -99.66922011898025]
Test Case: 542 | Input/Output: [[89.74159528718675 -14] 75.74159528718675]
Test Case: 543 | Input/Output: [[68.2255143322225 -51] 17.225514332222502]
Test Case: 544 | Input/Output: [[-77.61761945851065 -38] -115.61761945851065]
Test Case: 545 | Input/Output: [[-28.517943251571594 71] 42.482056748428406]
Test Case: 546 | Input/Output: [[-25.207702743901578 99] 73.79229725609842]
Test Case: 547 | Input/Output: [[-29.287201193188395 56] 26.712798806811605]
Test Case: 548 | Input/Output: [[34.224249208773244 4] 38.224249208773244]
Test Case: 549 | Input/Output: [[76.25449019015181 100] 176.2544901901518]
Test Case: 550 | Input/Output: [[-60.6346417218806 16] -44.6346417218806]
Test Case: 551 | Input/Output: [[86.76433360255834 72] 158.76433360255834]
Test Case: 552 | Input/Output: [[-32.36734824233429 -11] -43.36734824233429]
Test Case: 553 | Input/Output: [[-58.61742651378714 2] -56.61742651378714]
Test Case: 554 | Input/Output: [[-80.4433799249982 -8] -88.4433799249982]
Test Case: 555 | Input/Output: [[63.32113188889571 -61] 2.3211318888957067]
Test Case: 556 | Input/Output: [[89.82508715968268 -60] 29.82508715968268]
Test Case: 557 | Input/Output: [[-65.96388415913117 65] -0.9638841591311689]
Test Case: 558 | Input/Output: [[55.927859686918055 -8] 47.927859686918055]
Test Case: 559 | Input/Output: [[-32.35863359209905 6] -26.358633592099054]
Test Case: 560 | Input/Output: [[-19.881006066715926 -30] -49.881006066715926]
Test Case: 561 | Input/Output: [[-55.56643498761136 87] 31.43356501238864]
Test Case: 562 | Input/Output: [[-59.16305563903064 90] 30.836944360969362]
Test Case: 563 | Input/Output: [[-2.7536922385693003 49] 46.2463077614307]
Test Case: 564 | Input/Output: [[59.93733467326754 -77] -17.062665326732457]
Test Case: 565 | Input/Output: [[61.70893236940833 -16] 45.70893236940833]
Test Case: 566 | Input/Output: [[-18.21374548829033 34] 15.786254511709672]
Test Case: 567 | Input/Output: [[-37.487227498080244 -27] -64.48722749808024]
Test Case: 568 | Input/Output: [[-2.648640444717799 -98] -100.6486404447178]
Test Case: 569 | Input/Output: [[-26.617187323911253 -50] -76.61718732391125]
Test Case: 570 | Input/Output: [[-92.71062449985932 -33] -125.71062449985932]
Test Case: 571 | Input/Output: [[31.577633838981683 28] 59.57763383898168]
Test Case: 572 | Input/Output: [[68.46230275565767 99] 167.46230275565767]
Test Case: 573 | Input/Output: [[64.99537509934069 21] 85.99537509934069]
Test Case: 574 | Input/Output: [[57.914623700487994 65] 122.914623700488]
Test Case: 575 | Input/Output: [[76.94243609418837 47] 123.94243609418837]
Test Case: 576 | Input/Output: [[82.07347131978094 -25] 57.073471319780936]
Test Case: 577 | Input/Output: [[31.34202518746409 -79] -47.65797481253591]
Test Case: 578 | Input/Output: [[64.17632518444191 68] 132.1763251844419]
Test Case: 579 | Input/Output: [[-82.38326845980104 14] -68.38326845980104]
Test Case: 580 | Input/Output: [[59.90068314544189 -10] 49.90068314544189]
Test Case: 581 | Input/Output: [[31.831782930162063 55] 86.83178293016206]
Test Case: 582 | Input/Output: [[97.38742472307035 60] 157.38742472307035]
Test Case: 583 | Input/Output: [[-10.02935257713304 50] 39.97064742286696]
Test Case: 584 | Input/Output: [[-11.45207392258611 56] 44.54792607741389]
Test Case: 585 | Input/Output: [[93.30775430085407 70] 163.30775430085407]
Test Case: 586 | Input/Output: [[-55.523487707682605 67] 11.476512292317395]
Test Case: 587 | Input/Output: [[62.711575288693325 1] 63.711575288693325]
Test Case: 588 | Input/Output: [[-47.75355222634865 78] 30.246447773651347]
Test Case: 589 | Input/Output: [[52.60836319796746 43] 95.60836319796746]
Test Case: 590 | Input/Output: [[-26.304968365011348 -34] -60.30496836501135]
Test Case: 591 | Input/Output: [[40.5489107127932 84] 124.5489107127932]
Test Case: 592 | Input/Output: [[42.43875055446523 -8] 34.43875055446523]
Test Case: 593 | Input/Output: [[2.163168145365347 -69] -66.83683185463465]
Test Case: 594 | Input/Output: [[-84.06759527950238 -70] -154.06759527950237]
Test Case: 595 | Input/Output: [[-23.614821589561828 15] -8.614821589561828]
Test Case: 596 | Input/Output: [[-56.732626055408005 -33] -89.732626055408]
Test Case: 597 | Input/Output: [[37.65825325247593 74] 111.65825325247593]
Test Case: 598 | Input/Output: [[76.03966436973056 9] 85.03966436973056]
Test Case: 599 | Input/Output: [[-20.55528349481412 60] 39.44471650518588]
Test Case: 600 | Input/Output: [[-79.47815755807486 77] -2.478157558074855]
Test Case: 601 | Input/Output: [[27.716834092691414 -78] -50.283165907308586]
Test Case: 602 | Input/Output: [[-68.22929475841921 -82] -150.2292947584192]
Test Case: 603 | Input/Output: [[72.33411579029163 76] 148.33411579029163]
Test Case: 604 | Input/Output: [[18.41605700260604 81] 99.41605700260604]
Test Case: 605 | Input/Output: [[-1.8055343615246784 94] 92.19446563847532]
Test Case: 606 | Input/Output: [[65.50380813313853 -99] -33.496191866861466]
Test Case: 607 | Input/Output: [[78.85273175277368 64] 142.85273175277368]
Test Case: 608 | Input/Output: [[53.5434178847417 -95] -41.4565821152583]
Test Case: 609 | Input/Output: [[-84.18667884483703 88] 3.813321155162967]
Test Case: 610 | Input/Output: [[-47.01271946141667 -99] -146.01271946141668]
Test Case: 611 | Input/Output: [[-88.36143262985732 49] -39.36143262985732]
Test Case: 612 | Input/Output: [[-80.19006864906797 50] -30.190068649067967]
Test Case: 613 | Input/Output: [[66.81716044599094 89] 155.81716044599094]
Test Case: 614 | Input/Output: [[59.85642814042035 54] 113.85642814042035]
Test Case: 615 | Input/Output: [[-22.170944109645575 -81] -103.17094410964557]
Test Case: 616 | Input/Output: [[27.787572958127996 -22] 5.7875729581279955]
Test Case: 617 | Input/Output: [[64.92922045922697 87] 151.92922045922697]
Test Case: 618 | Input/Output: [[57.62740100227296 -78] -20.37259899772704]
Test Case: 619 | Input/Output: [[-74.56563543733094 80] 5.43436456266906]
Test Case: 620 | Input/Output: [[6.616916773130768 97] 103.61691677313077]
Test Case: 621 | Input/Output: [[-44.07068958983136 33] -11.07068958983136]
Test Case: 622 | Input/Output: [[-35.740481676027855 -85] -120.74048167602785]
Test Case: 623 | Input/Output: [[-66.73311887619172 -44] -110.73311887619172]
Test Case: 624 | Input/Output: [[89.05955445397794 -65] 24.05955445397794]
Test Case: 625 | Input/Output: [[96.29492904711549 6] 102.29492904711549]
Test Case: 626 | Input/Output: [[-59.13569946731061 -41] -100.13569946731062]
Test Case: 627 | Input/Output: [[77.48128376021194 -13] 64.48128376021194]
Test Case: 628 | Input/Output: [[20.946905722431097 -67] -46.0530942775689]
Test Case: 629 | Input/Output: [[-89.65517279782304 -82] -171.65517279782304]
Test Case: 630 | Input/Output: [[-58.145828040117806 87] 28.854171959882194]
Test Case: 631 | Input/Output: [[-93.22344447745891 -34] -127.22344447745891]
Test Case: 632 | Input/Output: [[-16.584933836090812 65] 48.41506616390919]
Test Case: 633 | Input/Output: [[-50.105182539763724 34] -16.105182539763724]
Test Case: 634 | Input/Output: [[19.397088385507004 68] 87.397088385507]
Test Case: 635 | Input/Output: [[42.51243341100209 29] 71.51243341100209]
Test Case: 636 | Input/Output: [[-89.56614727825405 86] -3.56614727825405]
Test Case: 637 | Input/Output: [[-51.93771515188199 50] -1.9377151518819886]
Test Case: 638 | Input/Output: [[-76.75635256592798 -85] -161.75635256592798]
Test Case: 639 | Input/Output: [[99.44795175111241 33] 132.4479517511124]
Test Case: 640 | Input/Output: [[56.23518564962751 3] 59.23518564962751]
Test Case: 641 | Input/Output: [[53.34480014076394 -100] -46.65519985923606]
Test Case: 642 | Input/Output: [[-94.64448829627554 -55] -149.64448829627554]
Test Case: 643 | Input/Output: [[0.9051749689225517 57] 57.90517496892255]
Test Case: 644 | Input/Output: [[-96.8935455698847 73] -23.893545569884694]
Test Case: 645 | Input/Output: [[14.599949644597814 -12] 2.599949644597814]
Test Case: 646 | Input/Output: [[-93.42687289322286 88] -5.426872893222864]
Test Case: 647 | Input/Output: [[72.89210917352113 -41] 31.892109173521135]
Test Case: 648 | Input/Output: [[-91.41971550933734 76] -15.419715509337337]
Test Case: 649 | Input/Output: [[-14.965225465493347 -45] -59.96522546549335]
Test Case: 650 | Input/Output: [[50.4814523324053 21] 71.4814523324053]
Test Case: 651 | Input/Output: [[80.67217458035952 -89] -8.327825419640476]
Test Case: 652 | Input/Output: [[-20.590165616753623 25] 4.409834383246377]
Test Case: 653 | Input/Output: [[-76.49767825512066 64] -12.497678255120661]
Test Case: 654 | Input/Output: [[-79.51956599881257 49] -30.519565998812567]
Test Case: 655 | Input/Output: [[43.97856026462827 37] 80.97856026462827]
Test Case: 656 | Input/Output: [[-22.631501530496536 45] 22.368498469503464]
Test Case: 657 | Input/Output: [[-19.654352686512283 95] 75.34564731348772]
Test Case: 658 | Input/Output: [[37.35803377496262 86] 123.35803377496262]
Test Case: 659 | Input/Output: [[-85.71907438789519 -80] -165.7190743878952]
Test Case: 660 | Input/Output: [[74.66316621442681 61] 135.6631662144268]
Test Case: 661 | Input/Output: [[-73.94444268583264 -28] -101.94444268583264]
Test Case: 662 | Input/Output: [[-1.0270737459835573 45] 43.97292625401644]
Test Case: 663 | Input/Output: [[4.3226332087765655 -52] -47.677366791223434]
Test Case: 664 | Input/Output: [[14.193389758144065 26] 40.193389758144065]
Test Case: 665 | Input/Output: [[56.826564118622315 59] 115.82656411862231]
Test Case: 666 | Input/Output: [[68.46249996385976 37] 105.46249996385976]
Test Case: 667 | Input/Output: [[-98.43320299698757 -65] -163.43320299698757]
Test Case: 668 | Input/Output: [[74.23116197283375 -30] 44.231161972833746]
Test Case: 669 | Input/Output: [[54.00163300272601 22] 76.00163300272601]
Test Case: 670 | Input/Output: [[-64.42805487684498 -39] -103.42805487684498]
Test Case: 671 | Input/Output: [[-3.8851481069011413 1] -2.8851481069011413]
Test Case: 672 | Input/Output: [[4.11976074983275 -62] -57.88023925016725]
Test Case: 673 | Input/Output: [[-88.39245438767111 -83] -171.3924543876711]
Test Case: 674 | Input/Output: [[-76.42061098296713 8] -68.42061098296713]
Test Case: 675 | Input/Output: [[75.09419690845604 57] 132.09419690845604]
Test Case: 676 | Input/Output: [[-40.636987249987364 66] 25.363012750012636]
Test Case: 677 | Input/Output: [[-44.81544896686278 82] 37.18455103313722]
Test Case: 678 | Input/Output: [[-85.76632517210048 -86] -171.7663251721005]
Test Case: 679 | Input/Output: [[16.13668808571795 -15] 1.1366880857179495]
Test Case: 680 | Input/Output: [[-56.13402461438468 -69] -125.13402461438469]
Test Case: 681 | Input/Output: [[-51.7867878006202 -96] -147.7867878006202]
Test Case: 682 | Input/Output: [[-71.9928294505431 66] -5.992829450543098]
Test Case: 683 | Input/Output: [[85.4626652391317 20] 105.4626652391317]
Test Case: 684 | Input/Output: [[-20.891089906407174 -71] -91.89108990640717]
Test Case: 685 | Input/Output: [[-29.290705091495468 -21] -50.29070509149547]
Test Case: 686 | Input/Output: [[-65.46625816079651 -75] -140.4662581607965]
Test Case: 687 | Input/Output: [[18.073826037084046 64] 82.07382603708405]
Test Case: 688 | Input/Output: [[-91.59459140993356 88] -3.5945914099335567]
Test Case: 689 | Input/Output: [[-96.51758392306742 86] -10.51758392306742]
Test Case: 690 | Input/Output: [[84.15377636783111 36] 120.15377636783111]
Test Case: 691 | Input/Output: [[0.0210180500636028 -42] -41.9789819499364]
Test Case: 692 | Input/Output: [[93.99039673688213 -26] 67.99039673688213]
Test Case: 693 | Input/Output: [[18.336981272100346 -89] -70.66301872789965]
Test Case: 694 | Input/Output: [[36.0627504845896 -29] 7.0627504845896]
Test Case: 695 | Input/Output: [[-15.476535771771921 100] 84.52346422822808]
Test Case: 696 | Input/Output: [[-0.3760957230790609 -47] -47.37609572307906]
Test Case: 697 | Input/Output: [[2.9111700379482954 -100] -97.0888299620517]
Test Case: 698 | Input/Output: [[-1.7918776173938369 -81] -82.79187761739384]
Test Case: 699 | Input/Output: [[-12.334458239579632 -74] -86.33445823957963]
Test Case: 700 | Input/Output: [[-87.50177253351217 51] -36.50177253351217]
Test Case: 701 | Input/Output: [[-1.8270728642978185 47] 45.17292713570218]
Test Case: 702 | Input/Output: [[85.9424714478613 -39] 46.942471447861294]
Test Case: 703 | Input/Output: [[-58.26155240080213 77] 18.73844759919787]
Test Case: 704 | Input/Output: [[-37.32987472361808 -13] -50.32987472361808]
Test Case: 705 | Input/Output: [[9.750986378457057 -61] -51.24901362154294]
Test Case: 706 | Input/Output: [[92.39827796290427 43] 135.39827796290427]
Test Case: 707 | Input/Output: [[90.27958816617422 -81] 9.279588166174221]
Test Case: 708 | Input/Output: [[-26.493657966224404 -91] -117.4936579662244]
Test Case: 709 | Input/Output: [[-51.323531386990595 24] -27.323531386990595]
Test Case: 710 | Input/Output: [[-72.99786505182948 -83] -155.99786505182948]
Test Case: 711 | Input/Output: [[-83.33255052499848 69] -14.332550524998481]
Test Case: 712 | Input/Output: [[95.31606532853058 -8] 87.31606532853058]
Test Case: 713 | Input/Output: [[86.36128917959385 -34] 52.361289179593854]
Test Case: 714 | Input/Output: [[36.58116504051782 40] 76.58116504051782]
Test Case: 715 | Input/Output: [[55.811410381238744 -45] 10.811410381238744]
Test Case: 716 | Input/Output: [[76.06721121006004 -99] -22.932788789939963]
Test Case: 717 | Input/Output: [[-54.13741392213378 -80] -134.1374139221338]
Test Case: 718 | Input/Output: [[53.35538281628337 81] 134.35538281628337]
Test Case: 719 | Input/Output: [[-59.02254473921158 -65] -124.02254473921158]
Test Case: 720 | Input/Output: [[-7.3264086679009495 -47] -54.32640866790095]
Test Case: 721 | Input/Output: [[-85.16634846902389 -72] -157.1663484690239]
Test Case: 722 | Input/Output: [[-11.46602390954692 -94] -105.46602390954692]
Test Case: 723 | Input/Output: [[-10.30024435507842 -43] -53.30024435507842]
Test Case: 724 | Input/Output: [[-28.627731056272893 70] 41.37226894372711]
Test Case: 725 | Input/Output: [[-5.48699476524331 -58] -63.48699476524331]
Test Case: 726 | Input/Output: [[85.26453416532601 -2] 83.26453416532601]
Test Case: 727 | Input/Output: [[-7.2892654335720835 55] 47.71073456642792]
Test Case: 728 | Input/Output: [[95.44182836752896 -29] 66.44182836752896]
Test Case: 729 | Input/Output: [[22.593987292121227 86] 108.59398729212123]
Test Case: 730 | Input/Output: [[-23.35782524330645 15] -8.35782524330645]
Test Case: 731 | Input/Output: [[-84.86402464493803 -4] -88.86402464493803]
Test Case: 732 | Input/Output: [[38.04357993741954 24] 62.04357993741954]
Test Case: 733 | Input/Output: [[-70.75466783341516 5] -65.75466783341516]
Test Case: 734 | Input/Output: [[74.11918017831078 57] 131.11918017831078]
Test Case: 735 | Input/Output: [[67.15350410064133 77] 144.15350410064133]
Test Case: 736 | Input/Output: [[10.344108178790961 -5] 5.344108178790961]
Test Case: 737 | Input/Output: [[-83.92282378976222 -40] -123.92282378976222]
Test Case: 738 | Input/Output: [[78.63750207126293 14] 92.63750207126293]
Test Case: 739 | Input/Output: [[30.418730240562468 -39] -8.581269759437532]
Test Case: 740 | Input/Output: [[25.56769215771186 -22] 3.5676921577118605]
Test Case: 741 | Input/Output: [[-27.925812485775523 48] 20.074187514224477]
Test Case: 742 | Input/Output: [[83.42108122454786 -35] 48.42108122454786]
Test Case: 743 | Input/Output: [[94.90963028638336 43] 137.90963028638336]
Test Case: 744 | Input/Output: [[-74.20204956174268 37] -37.20204956174268]
Test Case: 745 | Input/Output: [[-67.48051276731717 -48] -115.48051276731717]
Test Case: 746 | Input/Output: [[-54.262971916190004 -65] -119.26297191619]
Test Case: 747 | Input/Output: [[40.86863912046363 -13] 27.868639120463627]
Test Case: 748 | Input/Output: [[51.30236409614167 61] 112.30236409614167]
Test Case: 749 | Input/Output: [[68.29391634036008 60] 128.29391634036008]
Test Case: 750 | Input/Output: [[-30.575820434384752 11] -19.575820434384752]
Test Case: 751 | Input/Output: [[2.7300920560624036 4] 6.730092056062404]
Test Case: 752 | Input/Output: [[-28.833714889096427 71] 42.16628511090357]
Test Case: 753 | Input/Output: [[6.867010279043839 -9] -2.132989720956161]
Test Case: 754 | Input/Output: [[-20.981829337107655 23] 2.018170662892345]
Test Case: 755 | Input/Output: [[99.93249903164835 20] 119.93249903164835]
Test Case: 756 | Input/Output: [[48.83209222448693 -97] -48.16790777551307]
Test Case: 757 | Input/Output: [[42.00655413729899 -87] -44.99344586270101]
Test Case: 758 | Input/Output: [[-92.04661614343613 -99] -191.04661614343613]
Test Case: 759 | Input/Output: [[-76.22225032840326 -51] -127.22225032840326]
Test Case: 760 | Input/Output: [[-46.9116656030147 -83] -129.91166560301468]
Test Case: 761 | Input/Output: [[55.897205507098676 30] 85.89720550709868]
Test Case: 762 | Input/Output: [[-33.68990921182369 -100] -133.6899092118237]
Test Case: 763 | Input/Output: [[75.83502176730104 34] 109.83502176730104]
Test Case: 764 | Input/Output: [[-21.81680114784959 -82] -103.81680114784959]
Test Case: 765 | Input/Output: [[-70.20099813870976 -65] -135.20099813870976]
Test Case: 766 | Input/Output: [[24.450111397870387 -69] -44.54988860212961]
Test Case: 767 | Input/Output: [[-88.22299995358964 -98] -186.22299995358964]
Test Case: 768 | Input/Output: [[54.42042391260992 27] 81.42042391260992]
Test Case: 769 | Input/Output: [[-89.27271260451228 82] -7.272712604512279]
Test Case: 770 | Input/Output: [[-29.90834505334898 -65] -94.90834505334898]
Test Case: 771 | Input/Output: [[-39.6844906631975 98] 58.3155093368025]
Test Case: 772 | Input/Output: [[11.72821331766194 -47] -35.27178668233806]
Test Case: 773 | Input/Output: [[-3.9001599275852357 60] 56.099840072414764]
Test Case: 774 | Input/Output: [[63.00394617813424 -16] 47.00394617813424]
Test Case: 775 | Input/Output: [[69.58051490867786 -23] 46.580514908677856]
Test Case: 776 | Input/Output: [[8.637669911530736 85] 93.63766991153074]
Test Case: 777 | Input/Output: [[15.366509594768488 -42] -26.633490405231512]
Test Case: 778 | Input/Output: [[20.465526751585102 -17] 3.4655267515851023]
Test Case: 779 | Input/Output: [[-51.0240893440355 79] 27.975910655964498]
Test Case: 780 | Input/Output: [[61.34121812773873 -1] 60.34121812773873]
Test Case: 781 | Input/Output: [[-32.61612888483245 77] 44.38387111516755]
Test Case: 782 | Input/Output: [[53.20832764909079 -3] 50.20832764909079]
Test Case: 783 | Input/Output: [[17.399536648683082 -29] -11.600463351316918]
Test Case: 784 | Input/Output: [[-84.40643508604495 17] -67.40643508604495]
Test Case: 785 | Input/Output: [[80.10788540323773 -22] 58.10788540323773]
Test Case: 786 | Input/Output: [[-31.26121458123383 -72] -103.26121458123383]
Test Case: 787 | Input/Output: [[-99.06273512564229 -48] -147.0627351256423]
Test Case: 788 | Input/Output: [[87.62314095966741 68] 155.6231409596674]
Test Case: 789 | Input/Output: [[-52.432359965730015 -46] -98.43235996573002]
Test Case: 790 | Input/Output: [[-27.423836452231384 -96] -123.42383645223138]
Test Case: 791 | Input/Output: [[56.996284542002996 77] 133.996284542003]
Test Case: 792 | Input/Output: [[14.567313674914331 65] 79.56731367491433]
Test Case: 793 | Input/Output: [[-54.31556493158591 45] -9.31556493158591]
Test Case: 794 | Input/Output: [[75.61225351233293 -56] 19.612253512332927]
Test Case: 795 | Input/Output: [[-88.64650120984888 -22] -110.64650120984888]
Test Case: 796 | Input/Output: [[82.40935894188604 -48] 34.40935894188604]
Test Case: 797 | Input/Output: [[40.47970690480952 -20] 20.479706904809518]
Test Case: 798 | Input/Output: [[-77.48151039883416 44] -33.48151039883416]
Test Case: 799 | Input/Output: [[-76.37728430704217 -58] -134.37728430704217]
Test Case: 800 | Input/Output: [[31.157372512506754 -97] -65.84262748749325]
Test Case: 801 | Input/Output: [[69.77898739201603 80] 149.77898739201603]
Test Case: 802 | Input/Output: [[75.80649283615153 -48] 27.806492836151534]
Test Case: 803 | Input/Output: [[-94.18266054046309 19] -75.18266054046309]
Test Case: 804 | Input/Output: [[-16.923616814613737 -87] -103.92361681461374]
Test Case: 805 | Input/Output: [[90.6029007992941 92] 182.6029007992941]
Test Case: 806 | Input/Output: [[-57.15477273336403 -56] -113.15477273336403]
Test Case: 807 | Input/Output: [[-39.98384168060512 87] 47.01615831939488]
Test Case: 808 | Input/Output: [[31.46854435278243 99] 130.46854435278243]
Test Case: 809 | Input/Output: [[-36.652903559085615 -46] -82.65290355908562]
Test Case: 810 | Input/Output: [[36.92953396016949 -78] -41.07046603983051]
Test Case: 811 | Input/Output: [[-63.159811848258826 -81] -144.1598118482588]
Test Case: 812 | Input/Output: [[88.58307303335096 29] 117.58307303335096]
Test Case: 813 | Input/Output: [[-29.715126574645083 53] 23.284873425354917]
Test Case: 814 | Input/Output: [[69.6445237165828 -49] 20.644523716582796]
Test Case: 815 | Input/Output: [[4.052236145211083 46] 50.05223614521108]
Test Case: 816 | Input/Output: [[-13.28336453918719 -79] -92.28336453918719]
Test Case: 817 | Input/Output: [[-57.451297166268645 -42] -99.45129716626865]
Test Case: 818 | Input/Output: [[15.984560611291585 -79] -63.015439388708415]
Test Case: 819 | Input/Output: [[21.20063163015314 -15] 6.20063163015314]
Test Case: 820 | Input/Output: [[-88.24022905150126 -41] -129.24022905150127]
Test Case: 821 | Input/Output: [[-38.90711823524007 67] 28.09288176475993]
Test Case: 822 | Input/Output: [[-43.23218805464273 3] -40.23218805464273]
Test Case: 823 | Input/Output: [[56.40349535392832 -90] -33.59650464607168]
Test Case: 824 | Input/Output: [[69.31076148770924 -78] -8.689238512290757]
Test Case: 825 | Input/Output: [[97.40824582208779 -41] 56.40824582208779]
Test Case: 826 | Input/Output: [[46.80320238796202 -54] -7.196797612037983]
Test Case: 827 | Input/Output: [[-19.243958420986118 -3] -22.243958420986118]
Test Case: 828 | Input/Output: [[-31.175345805133176 55] 23.824654194866824]
Test Case: 829 | Input/Output: [[7.287674851238691 5] 12.287674851238691]
Test Case: 830 | Input/Output: [[83.96324862395807 -7] 76.96324862395807]
Test Case: 831 | Input/Output: [[16.564536715020054 -85] -68.43546328497995]
Test Case: 832 | Input/Output: [[-17.154246362147575 -16] -33.154246362147575]
Test Case: 833 | Input/Output: [[-16.855121666583855 -10] -26.855121666583855]
Test Case: 834 | Input/Output: [[-22.94255610572887 15] -7.942556105728869]
Test Case: 835 | Input/Output: [[40.06068068223013 99] 139.06068068223013]
Test Case: 836 | Input/Output: [[1.9965876841182535 94] 95.99658768411825]
Test Case: 837 | Input/Output: [[51.158399002186 -5] 46.158399002186]
Test Case: 838 | Input/Output: [[65.89942244453681 85] 150.8994224445368]
Test Case: 839 | Input/Output: [[-12.119301547369872 -67] -79.11930154736987]
Test Case: 840 | Input/Output: [[-91.39875002640146 -82] -173.39875002640144]
Test Case: 841 | Input/Output: [[28.513084782315588 27] 55.51308478231559]
Test Case: 842 | Input/Output: [[-64.93677681236602 6] -58.93677681236602]
Test Case: 843 | Input/Output: [[-67.26610742410978 63] -4.2661074241097765]
Test Case: 844 | Input/Output: [[-35.897471055092495 11] -24.897471055092495]
Test Case: 845 | Input/Output: [[-86.45040333405714 -90] -176.45040333405714]
Test Case: 846 | Input/Output: [[-28.01124726192235 72] 43.98875273807765]
Test Case: 847 | Input/Output: [[49.05783807705842 -69] -19.94216192294158]
Test Case: 848 | Input/Output: [[69.88527539423549 -67] 2.8852753942354923]
Test Case: 849 | Input/Output: [[79.65716000848954 -50] 29.65716000848954]
Test Case: 850 | Input/Output: [[-83.22915049759116 48] -35.229150497591164]
Test Case: 851 | Input/Output: [[24.125204071415652 56] 80.12520407141565]
Test Case: 852 | Input/Output: [[0.24388800816726075 -19] -18.75611199183274]
Test Case: 853 | Input/Output: [[68.04742813333635 20] 88.04742813333635]
Test Case: 854 | Input/Output: [[91.83967506522825 88] 179.83967506522825]
Test Case: 855 | Input/Output: [[-51.22669319648099 80] 28.773306803519013]
Test Case: 856 | Input/Output: [[12.235830003829733 -34] -21.764169996170267]
Test Case: 857 | Input/Output: [[-95.41502563307817 28] -67.41502563307817]
Test Case: 858 | Input/Output: [[77.25325815210047 9] 86.25325815210047]
Test Case: 859 | Input/Output: [[66.53205643637796 -22] 44.53205643637796]
Test Case: 860 | Input/Output: [[-74.7011167241551 -85] -159.7011167241551]
Test Case: 861 | Input/Output: [[32.19849974644637 -82] -49.80150025355363]
Test Case: 862 | Input/Output: [[44.48456433012353 27] 71.48456433012353]
Test Case: 863 | Input/Output: [[-46.197838001877734 73] 26.802161998122266]
Test Case: 864 | Input/Output: [[-54.31399921937514 -66] -120.31399921937515]
Test Case: 865 | Input/Output: [[33.89881807105462 -63] -29.10118192894538]
Test Case: 866 | Input/Output: [[52.16370912475011 -28] 24.163709124750113]
Test Case: 867 | Input/Output: [[21.758280623201472 -2] 19.758280623201472]
Test Case: 868 | Input/Output: [[-79.85663029000132 72] -7.85663029000132]
Test Case: 869 | Input/Output: [[-63.78425570957616 68] 4.215744290423842]
Test Case: 870 | Input/Output: [[-67.84356093171652 96] 28.156439068283476]
Test Case: 871 | Input/Output: [[-11.006452187219821 -44] -55.00645218721982]
Test Case: 872 | Input/Output: [[46.45240633041476 84] 130.45240633041476]
Test Case: 873 | Input/Output: [[-25.366862063193295 -68] -93.3668620631933]
Test Case: 874 | Input/Output: [[-78.35387237421796 65] -13.353872374217957]
Test Case: 875 | Input/Output: [[-53.475963005962846 21] -32.475963005962846]
Test Case: 876 | Input/Output: [[-41.341852624177356 72] 30.658147375822644]
Test Case: 877 | Input/Output: [[23.62182751654703 -21] 2.621827516547029]
Test Case: 878 | Input/Output: [[-87.79976422777416 29] -58.79976422777416]
Test Case: 879 | Input/Output: [[-8.04489939517265 0] -8.04489939517265]
Test Case: 880 | Input/Output: [[-61.42774726306055 -53] -114.42774726306055]
Test Case: 881 | Input/Output: [[69.51866789996262 71] 140.51866789996262]
Test Case: 882 | Input/Output: [[51.793983494660665 -75] -23.206016505339335]
Test Case: 883 | Input/Output: [[-10.5928372229438 33] 22.4071627770562]
Test Case: 884 | Input/Output: [[88.98957499928741 -68] 20.989574999287413]
Test Case: 885 | Input/Output: [[-52.159384905760334 94] 41.840615094239666]
Test Case: 886 | Input/Output: [[37.101636260270425 -35] 2.101636260270425]
Test Case: 887 | Input/Output: [[16.30348246362614 78] 94.30348246362614]
Test Case: 888 | Input/Output: [[60.138819523685214 -74] -13.861180476314786]
Test Case: 889 | Input/Output: [[52.590172957264 -62] -9.409827042735998]
Test Case: 890 | Input/Output: [[81.90086943457288 39] 120.90086943457288]
Test Case: 891 | Input/Output: [[-61.88453127745812 -32] -93.88453127745812]
Test Case: 892 | Input/Output: [[-48.8605348037511 36] -12.8605348037511]
Test Case: 893 | Input/Output: [[57.920619380546924 74] 131.92061938054692]
Test Case: 894 | Input/Output: [[-3.3032867431747945 -64] -67.3032867431748]
Test Case: 895 | Input/Output: [[-10.195758274530093 98] 87.80424172546991]
Test Case: 896 | Input/Output: [[-98.76563273143792 58] -40.76563273143792]
Test Case: 897 | Input/Output: [[-36.58105474368507 50] 13.418945256314927]
Test Case: 898 | Input/Output: [[8.94986615735857 28] 36.94986615735857]
Test Case: 899 | Input/Output: [[5.161332190220591 -71] -65.83866780977941]
Test Case: 900 | Input/Output: [[-55.160508685519716 -1] -56.160508685519716]
Test Case: 901 | Input/Output: [[-47.353138258065066 -45] -92.35313825806506]
Test Case: 902 | Input/Output: [[-40.53500871278655 75] 34.46499128721345]
Test Case: 903 | Input/Output: [[89.70861362419876 23] 112.70861362419876]
Test Case: 904 | Input/Output: [[-58.04708194771311 -78] -136.0470819477131]
Test Case: 905 | Input/Output: [[28.011811833984325 36] 64.01181183398432]
Test Case: 906 | Input/Output: [[-19.15493325224618 21] 1.845066747753819]
Test Case: 907 | Input/Output: [[21.2019998554797 35] 56.2019998554797]
Test Case: 908 | Input/Output: [[19.475852150074374 -61] -41.524147849925626]
Test Case: 909 | Input/Output: [[93.15957264139166 86] 179.15957264139166]
Test Case: 910 | Input/Output: [[31.092116303647458 62] 93.09211630364746]
Test Case: 911 | Input/Output: [[95.41327240999789 -89] 6.413272409997887]
Test Case: 912 | Input/Output: [[47.60484253261902 17] 64.60484253261902]
Test Case: 913 | Input/Output: [[-71.0007980136415 83] 11.9992019863585]
Test Case: 914 | Input/Output: [[82.82147593657882 -99] -16.17852406342118]
Test Case: 915 | Input/Output: [[-44.483061186705505 -28] -72.4830611867055]
Test Case: 916 | Input/Output: [[78.37503105500673 -72] 6.37503105500673]
Test Case: 917 | Input/Output: [[-37.18271769802837 38] 0.8172823019716304]
Test Case: 918 | Input/Output: [[41.703345877177355 37] 78.70334587717736]
Test Case: 919 | Input/Output: [[-88.88486155621067 -1] -89.88486155621067]
Test Case: 920 | Input/Output: [[-67.55218587259202 -33] -100.55218587259202]
Test Case: 921 | Input/Output: [[-79.25678578898552 -87] -166.25678578898552]
Test Case: 922 | Input/Output: [[22.32651965536077 -73] -50.67348034463923]
Test Case: 923 | Input/Output: [[-17.923917742316803 23] 5.076082257683197]
Test Case: 924 | Input/Output: [[2.8915860458012617 -97] -94.10841395419874]
Test Case: 925 | Input/Output: [[-3.5591142896219736 -1] -4.559114289621974]
Test Case: 926 | Input/Output: [[-66.40622350554723 95] 28.59377649445277]
Test Case: 927 | Input/Output: [[-9.707502002991774 -81] -90.70750200299177]
Test Case: 928 | Input/Output: [[82.31976092785288 -73] 9.319760927852883]
Test Case: 929 | Input/Output: [[-79.30063131308222 37] -42.30063131308222]
Test Case: 930 | Input/Output: [[99.43262697003536 52] 151.43262697003536]
Test Case: 931 | Input/Output: [[-16.005090241274743 24] 7.994909758725257]
Test Case: 932 | Input/Output: [[95.185108768688 86] 181.185108768688]
Test Case: 933 | Input/Output: [[-98.53594756202355 55] -43.53594756202355]
Test Case: 934 | Input/Output: [[-25.60798142233483 31] 5.392018577665169]
Test Case: 935 | Input/Output: [[79.5480825136948 -52] 27.548082513694794]
Test Case: 936 | Input/Output: [[86.9339120890316 22] 108.9339120890316]
Test Case: 937 | Input/Output: [[-83.50433445730519 11] -72.50433445730519]
Test Case: 938 | Input/Output: [[-56.900885222206064 -14] -70.90088522220606]
Test Case: 939 | Input/Output: [[-45.87466876129942 98] 52.12533123870058]
Test Case: 940 | Input/Output: [[50.18173865073058 82] 132.18173865073058]
Test Case: 941 | Input/Output: [[-77.68198261013526 -32] -109.68198261013526]
Test Case: 942 | Input/Output: [[40.78991793997676 66] 106.78991793997676]
Test Case: 943 | Input/Output: [[32.58425636227983 -8] 24.58425636227983]
Test Case: 944 | Input/Output: [[-86.56606143659174 -7] -93.56606143659174]
Test Case: 945 | Input/Output: [[-34.44303115236609 16] -18.44303115236609]
Test Case: 946 | Input/Output: [[50.41243348071666 16] 66.41243348071666]
Test Case: 947 | Input/Output: [[-73.54052384305731 64] -9.540523843057315]
Test Case: 948 | Input/Output: [[-54.55061337569569 93] 38.44938662430431]
Test Case: 949 | Input/Output: [[-36.222901185821186 -4] -40.222901185821186]
Test Case: 950 | Input/Output: [[50.57278705111267 -68] -17.42721294888733]
Test Case: 951 | Input/Output: [[-78.35289456108802 97] 18.64710543891198]
Test Case: 952 | Input/Output: [[3.9296370525496513 -72] -68.07036294745035]
Test Case: 953 | Input/Output: [[-96.97719669052402 -2] -98.97719669052402]
Test Case: 954 | Input/Output: [[12.383094310972481 65] 77.38309431097248]
Test Case: 955 | Input/Output: [[-31.958227866089246 24] -7.958227866089246]
Test Case: 956 | Input/Output: [[4.919164029790068 -54] -49.08083597020993]
Test Case: 957 | Input/Output: [[61.604912970974794 73] 134.6049129709748]
Test Case: 958 | Input/Output: [[36.277604563298326 76] 112.27760456329833]
Test Case: 959 | Input/Output: [[-74.59960372946043 -76] -150.59960372946043]
Test Case: 960 | Input/Output: [[-3.739765941477671 -21] -24.73976594147767]
Test Case: 961 | Input/Output: [[-31.37254507748932 63] 31.62745492251068]
Test Case: 962 | Input/Output: [[-26.28101204108158 -95] -121.28101204108158]
Test Case: 963 | Input/Output: [[-95.34921267503844 20] -75.34921267503844]
Test Case: 964 | Input/Output: [[12.322914002711215 52] 64.32291400271122]
Test Case: 965 | Input/Output: [[52.07646540468252 -12] 40.07646540468252]
Test Case: 966 | Input/Output: [[98.39054594293094 -98] 0.3905459429309417]
Test Case: 967 | Input/Output: [[52.45681883175445 42] 94.45681883175445]
Test Case: 968 | Input/Output: [[21.27894211551242 -12] 9.278942115512422]
Test Case: 969 | Input/Output: [[-34.065826378803536 -68] -102.06582637880354]
Test Case: 970 | Input/Output: [[72.19790087116783 -26] 46.19790087116783]
Test Case: 971 | Input/Output: [[27.814235676141365 -91] -63.185764323858635]
Test Case: 972 | Input/Output: [[-49.75532913950271 -52] -101.75532913950272]
Test Case: 973 | Input/Output: [[-8.698998704552068 -11] -19.698998704552068]
Test Case: 974 | Input/Output: [[-12.053792272817333 27] 14.946207727182667]
Test Case: 975 | Input/Output: [[22.0026096688034 -99] -76.9973903311966]
Test Case: 976 | Input/Output: [[26.429559720294677 96] 122.42955972029468]
Test Case: 977 | Input/Output: [[-54.70933287301312 -30] -84.70933287301312]
Test Case: 978 | Input/Output: [[-34.15851986397247 3] -31.158519863972472]
Test Case: 979 | Input/Output: [[33.05655955437257 -69] -35.94344044562743]
Test Case: 980 | Input/Output: [[-42.89855570269463 28] -14.89855570269463]
Test Case: 981 | Input/Output: [[-90.51278443488292 -57] -147.51278443488292]
Test Case: 982 | Input/Output: [[-52.181545445750686 42] -10.181545445750686]
Test Case: 983 | Input/Output: [[-68.64716162066229 -52] -120.64716162066229]
Test Case: 984 | Input/Output: [[-5.437105017714416 -35] -40.437105017714416]
Test Case: 985 | Input/Output: [[-86.86804303964068 -6] -92.86804303964068]
Test Case: 986 | Input/Output: [[-81.85745152920012 42] -39.85745152920012]
Test Case: 987 | Input/Output: [[-86.86455579995591 0] -86.86455579995591]
Test Case: 988 | Input/Output: [[40.06315028964005 -76] -35.93684971035995]
Test Case: 989 | Input/Output: [[-21.468978094046903 -93] -114.4689780940469]
Test Case: 990 | Input/Output: [[53.494608843514214 55] 108.49460884351421]
Test Case: 991 | Input/Output: [[-82.27885373061461 78] -4.278853730614614]
Test Case: 992 | Input/Output: [[-19.17787102619863 62] 42.82212897380137]
Test Case: 993 | Input/Output: [[-36.918675017292045 11] -25.918675017292045]
Test Case: 994 | Input/Output: [[-79.82327519054843 44] -35.82327519054843]
Test Case: 995 | Input/Output: [[46.561238005672664 45] 91.56123800567266]
Test Case: 996 | Input/Output: [[11.546738708090203 -95] -83.4532612919098]
Test Case: 997 | Input/Output: [[25.07976434676189 80] 105.07976434676189]
Test Case: 998 | Input/Output: [[1.6859726670369781 72] 73.68597266703698]
Test Case: 999 | Input/Output: [[32.34216708012244 20] 52.34216708012244]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -116 1 31 95 -15 82 -62 -110 -77 -52 58 68 118 -56 -47 -61
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 55374.0
Test mean error for best: 27.68700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 36.542920316  
Correct output: 36.9263823022  | Program output: -44.0736176978
Correct output: -12.6268384926 | Program output: -82.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 58.9560456736 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: -34.7304952137
Correct output: 127.5752307902 | Program output: 47.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 15.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: -12.9596772051
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -66.7988140078
Correct output: 62.375676743   | Program output: -27.624323257 
Correct output: 90.6509578065  | Program output: 11.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: -43.4250425838
Correct output: 52.9510395124  | Program output: -43.0489604876
Correct output: 35.7624010697  | Program output: 15.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: -24.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_inc} {:instruction float_flush} {:instruction in2} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_rot} {:instruction float_shove} {:instruction float_add} {:instruction integer_mod} {:instruction in1} {:instruction integer_mult} {:instruction float_mult} {:instruction tagged_520} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction 2} {:instruction float_yank} {:instruction integer_dec} {:instruction float_rot} {:instruction integer_dup_items} {:instruction tagged_499} {:instruction integer_mult} {:instruction in1} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction float_min} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction float_min} {:instruction -87} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_swap} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_min} {:instruction print_float} {:instruction float_pop} {:instruction -19.68809175635542} {:instruction float_mod} {:instruction float_yank})
Best program: (integer_mod integer_add float_dup_times integer_swap integer_dup float_inc float_flush in2 float_yankdup float_flush float_rot float_shove float_add integer_mod in1 integer_mult float_mult tagged_520 print_float float_stackdepth float_dup integer_mult float_stackdepth integer_inc 2 float_yank integer_dec float_rot integer_dup_items tagged_499 integer_mult in1 integer_dup_items integer_dec float_min integer_sub float_stackdepth integer_fromfloat float_min -87 integer_yankdup integer_mod integer_dup_items float_swap float_dec integer_mult integer_add integer_mult float_pop integer_stackdepth integer_min integer_min print_float float_pop -19.68809175635542 float_mod float_yank)
Errors: [29.0 2 81.0 13 70.0 1 65.0 3 22.0 2 56.0 13 78.0 11 80.0 2 30.0 2 16.0 2 16.0 2 69.0 2 18.0 2 56.0 13 85.0 3 40.0 1 90.0 11 79.0 2 81.0 3 17.0 2 7.0 2 96.0 13 20.0 1 49.0 2 20.0 1]
Total: 1381.0
Mean: 27.62
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 17735.6778491
Median total errors in population: 25341.0
Error averages by case: (686.4436928999999 11.555 691.7188668999997 13.26 688.4561823000003 13.22 725.2877834000026 13.947 689.9300963000002 12.388 689.5939093000009 13.836 691.8133143000006 12.963 704.9188146999992 13.141 712.9144861000019 13.896 685.6473122000002 12.989 690.5141009000002 13.079 693.4690664000017 12.42 697.6031943999993 12.399 686.5829698999999 13.261 718.0329245000022 13.946 687.4712484999989 13.038 696.5948921999989 12.401 694.6367845999988 12.314 723.0458662000017 13.997 701.617636999999 13.095 680.3643093000011 13.165 694.5236729999996 13.128 679.8660643000004 12.261 720.5115169000005 13.931 678.0931425999986 12.396)
Error minima by case: (0.0669 1 0.9627 8 1.3732 1 19.9082 3 0.044 2 1.0682 9 0.361 6 2.4248 2 0.9733 2 0.9859 2 3.1637 2 0.4459 1 1.4814 2 0.1319 7 0.5219 3 0.0625 1 0.2086 7 0.349 1 3.9929 2 0.0418 2 0.575 2 0.4668 7 0.7624 1 24.3297 2 0.0884 1)
Average genome size in population (length): 50.894
Average program size in population (points): 51.894
Average percent parens in population: 0.041
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.326
Error (vector) diversity:			 0.35
Behavioral diversity:				 0.375
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1276075
--- Timings ---
Current time: 1529615752152 milliseconds
Total Time:           3.5 seconds
Initialization:       0.1 seconds,  3.1%
Reproduction:         0.6 seconds, 16.3%
Fitness Testing:      2.8 seconds, 80.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 55374.0
Test mean error for best: 27.68700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 36.542920316  
Correct output: 36.9263823022  | Program output: -44.0736176978
Correct output: -12.6268384926 | Program output: -82.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 58.9560456736 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: -34.7304952137
Correct output: 127.5752307902 | Program output: 47.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 15.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: -12.9596772051
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -66.7988140078
Correct output: 62.375676743   | Program output: -27.624323257 
Correct output: 90.6509578065  | Program output: 11.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: -43.4250425838
Correct output: 52.9510395124  | Program output: -43.0489604876
Correct output: 35.7624010697  | Program output: 15.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: -24.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction in1} {:instruction float_yank} {:instruction tagged_717} {:instruction float_min} {:instruction integer_div} {:instruction print_integer} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_dup_items} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_dup} {:instruction in1} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_tan} {:instruction float_dec} {:instruction integer_rot} {:instruction float_rot} {:instruction integer_min} {:instruction float_min} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_tan} {:instruction tagged_166} {:instruction float_rot} {:instruction float_sub} {:instruction float_swap} {:instruction integer_mod} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction float_swap} {:instruction float_flush} {:instruction float_yank} {:instruction integer_div} {:instruction float_pop} {:instruction float_dup} {:instruction integer_div} {:instruction print_integer} {:instruction integer_min} {:instruction print_float} {:instruction float_sin} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_div} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction tagged_159} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_mult} {:instruction float_flush} {:instruction integer_add})
Best program: (integer_fromfloat float_max in1 float_yank tagged_717 float_min integer_div print_integer integer_dup_items float_yank float_dup_items print_float float_stackdepth float_stackdepth integer_fromfloat float_dec integer_dup in1 float_frominteger integer_shove float_tan float_dec integer_rot float_rot integer_min float_min float_dup_items float_inc float_tan tagged_166 float_rot float_sub float_swap integer_mod integer_yank float_mod integer_dup_times integer_pop float_swap float_flush float_yank integer_div float_pop float_dup integer_div print_integer integer_min print_float float_sin integer_sub integer_swap integer_sub integer_div integer_dec float_dup_times integer_yankdup float_dup_times tagged_159 integer_sub float_mod integer_rot integer_rot integer_yank float_mult float_flush integer_add)
Errors: [29.0 2 81.0 13 70.0 1 65.0 3 22.0 2 56.0 13 78.0 11 80.0 2 30.0 2 16.0 2 16.0 2 69.0 2 18.0 2 56.0 13 85.0 3 40.0 1 90.0 11 79.0 2 81.0 3 17.0 2 7.0 2 96.0 13 20.0 1 49.0 2 20.0 1]
Total: 1381.0
Mean: 27.62
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 5974.646886900006
Median total errors in population: 2038.9924000000003
Error averages by case: (213.60651050000018 9.191 226.4573438999999 12.514 219.24269849999948 10.592 278.1276569999987 11.302 221.25299950000115 9.966 212.41671589999982 12.791 222.37432999999996 11.853 253.77577399999907 10.529 253.49531629999905 11.009 190.93443070000066 10.297 203.9333365000008 10.298 227.87740359999924 9.992 223.67333000000173 9.967 211.24809409999972 12.598 262.52328419999924 11.215 215.44956539999905 10.202 233.52750780000025 11.751 232.384712900002 9.756 272.92367419999795 11.338 228.46334159999864 10.38 203.64641909999898 10.641 235.06211559999986 12.346 197.78439630000133 9.526 270.44762670000125 11.151 192.95930260000048 9.854)
Error minima by case: (1.5429 1 0.9627 8 1.3732 1 3.7665 3 0.044 2 0.9318 9 0.361 6 2.4248 2 1.6166 2 0.9859 2 3.1637 2 0.4459 1 2.9574 2 0.1319 8 32.5219 3 0.0625 1 1.3757 9 0.349 1 16.9929 2 0.0418 2 0.575 2 5.652 7 1.7624 1 44.6864 2 0.0884 1)
Average genome size in population (length): 58.427
Average program size in population (points): 59.427
Average percent parens in population: 0.022
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.513
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.766
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.269
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2740375
--- Timings ---
Current time: 1529615757344 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         3.6 seconds, 40.7%
Fitness Testing:      4.5 seconds, 50.3%
Report:               0.7 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 55352.0
Test mean error for best: 27.67600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 37.542920316  
Correct output: 36.9263823022  | Program output: -43.0736176978
Correct output: -12.6268384926 | Program output: -81.6268384926
Correct output: -156.0918084307 | Program output: -90.0918084307
Correct output: 80.9560456736  | Program output: 59.9560456736 
Correct output: -54.9317847731 | Program output: 2.0682152269  
Correct output: 43.2695047863  | Program output: -33.7304952137
Correct output: 127.5752307902 | Program output: 48.5752307902 
Correct output: -118.3834102551 | Program output: -87.3834102551
Correct output: -20.9430876309 | Program output: -3.9430876309 
Correct output: -40.1637221127 | Program output: -23.1637221127
Correct output: 84.4459340278  | Program output: 16.4459340278 
Correct output: 66.9574048532  | Program output: 85.9574048532 
Correct output: 43.0403227949  | Program output: -11.9596772051
Correct output: -130.5218741194 | Program output: -44.5218741194
Correct output: -26.7988140078 | Program output: -65.7988140078
Correct output: 62.375676743   | Program output: -26.624323257 
Correct output: 90.6509578065  | Program output: 12.6509578065 
Correct output: -146.0070943376 | Program output: -64.0070943376
Correct output: -77.9582317921 | Program output: -59.9582317921
Correct output: -36.4250425838 | Program output: -42.4250425838
Correct output: 52.9510395124  | Program output: -42.0489604876
Correct output: 35.7624010697  | Program output: 16.7624010697 
Correct output: -143.6863764074 | Program output: -93.6863764074
Correct output: -4.8279891918  | Program output: -23.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction tag_float_362} {:instruction float_max} {:instruction float_yankdup} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_sub} {:instruction 4.12936612489105} {:instruction tag_integer_197} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_dec} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_add} {:instruction -30.556940628726068} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_max} {:instruction float_sin} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_inc} {:instruction integer_div} {:instruction tag_float_986} {:instruction integer_div} {:instruction integer_min} {:instruction print_float} {:instruction integer_add} {:instruction integer_add} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_dup} {:instruction tag_float_177} {:instruction float_cos} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction float_div} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction integer_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_sin} {:instruction float_swap} {:instruction float_max} {:instruction integer_yank})
Best program: (integer_shove tag_float_362 float_max float_yankdup in1 float_inc integer_shove float_sub 4.12936612489105 tag_integer_197 integer_stackdepth integer_dup float_yankdup float_dup integer_dec integer_div float_stackdepth float_dup_items integer_dup_items float_add -30.556940628726068 float_frominteger float_shove integer_max float_sin integer_shove float_dup_items float_sub float_frominteger float_add integer_inc integer_div tag_float_986 integer_div integer_min print_float integer_add integer_add print_integer integer_swap integer_div integer_fromfloat integer_div integer_dup tag_float_177 float_cos float_mult integer_stackdepth float_frominteger float_div float_yank integer_dup_times in1 float_rot integer_div integer_add float_dec float_sin float_swap float_max integer_yank)
Errors: [28.0 2 80.0 13 69.0 2 66.0 3 21.0 2 57.0 13 77.0 11 79.0 3 31.0 3 17.0 2 17.0 2 68.0 2 19.0 2 55.0 13 86.0 3 39.0 2 89.0 11 78.0 2 82.0 2 18.0 2 6.0 2 95.0 12 19.0 2 50.0 2 19.0 2]
Total: 1380.0
Mean: 27.6
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4797.568536400007
Median total errors in population: 1409.8302999999999
Error averages by case: (162.69339040000006 5.752 201.36660710000046 13.105 200.13289599999962 6.25 211.31571409999938 7.444 163.46210100000056 6.41 172.89674600000015 13.019 197.2269507000005 11.814 201.3714439999996 6.527 186.85646139999977 6.749 156.0192015000004 6.488 161.13498170000057 6.404 185.28839659999977 6.309 171.48168530000058 6.434 178.9929760000006 13.226 213.15009479999975 7.535 179.05783369999955 5.983 204.58881909999968 11.733 191.04980540000068 6.213 215.39770629999927 7.509 171.41691499999934 6.433 152.1426739 6.739 210.66334549999988 13.117 151.9287074000006 5.52 201.38320100000064 6.831 157.20388249999988 5.802)
Error minima by case: (6.4755 1 21.0736 8 9.5492 1 25.0918 3 0.5245 2 0.0682 9 8.0573 9 20.0 1 25.9562 2 3.9431 2 7.1637 2 4.5541 1 8.9574 2 10.9597 9 38.0947 3 17.1752 1 3.3757 9 1.651 1 16.9929 2 14.469 2 0.5698 2 5.049 7 2.5245 1 44.6864 2 2.5245 1)
Average genome size in population (length): 57.771
Average program size in population (points): 58.771
Average percent parens in population: 0.022
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9945
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.129
Error (vector) diversity:			 0.133
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4187075
--- Timings ---
Current time: 1529615761274 milliseconds
Total Time:          12.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.2 seconds, 41.0%
Fitness Testing:      6.2 seconds, 48.9%
Report:               1.2 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 55352.0
Test mean error for best: 27.67600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 37.542920316  
Correct output: 36.9263823022  | Program output: -43.0736176978
Correct output: -12.6268384926 | Program output: -81.6268384926
Correct output: -156.0918084307 | Program output: -90.0918084307
Correct output: 80.9560456736  | Program output: 59.9560456736 
Correct output: -54.9317847731 | Program output: 2.0682152269  
Correct output: 43.2695047863  | Program output: -33.7304952137
Correct output: 127.5752307902 | Program output: 48.5752307902 
Correct output: -118.3834102551 | Program output: -87.3834102551
Correct output: -20.9430876309 | Program output: -3.9430876309 
Correct output: -40.1637221127 | Program output: -23.1637221127
Correct output: 84.4459340278  | Program output: 16.4459340278 
Correct output: 66.9574048532  | Program output: 85.9574048532 
Correct output: 43.0403227949  | Program output: -11.9596772051
Correct output: -130.5218741194 | Program output: -44.5218741194
Correct output: -26.7988140078 | Program output: -65.7988140078
Correct output: 62.375676743   | Program output: -26.624323257 
Correct output: 90.6509578065  | Program output: 12.6509578065 
Correct output: -146.0070943376 | Program output: -64.0070943376
Correct output: -77.9582317921 | Program output: -59.9582317921
Correct output: -36.4250425838 | Program output: -42.4250425838
Correct output: 52.9510395124  | Program output: -42.0489604876
Correct output: 35.7624010697  | Program output: 16.7624010697 
Correct output: -143.6863764074 | Program output: -93.6863764074
Correct output: -4.8279891918  | Program output: -23.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_dup} {:instruction float_inc} {:instruction float_flush} {:instruction in2} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_rot} {:instruction float_shove} {:instruction float_add} {:instruction integer_mod} {:instruction in1} {:instruction integer_mult} {:instruction float_sin} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_min} {:instruction float_cos} {:instruction 15.657554573977507} {:instruction integer_shove} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_mod integer_add float_dup_times integer_swap integer_dup float_dup_times integer_dup float_inc float_flush in2 float_yankdup float_flush float_rot float_shove float_add integer_mod in1 integer_mult float_sin float_shove integer_dec integer_sub integer_add float_dup_items float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc integer_div float_min float_cos 15.657554573977507 integer_shove float_div in1 in1 integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank float_pop)
Errors: [28.0 2 80.0 13 69.0 2 66.0 3 21.0 2 57.0 13 77.0 11 79.0 3 31.0 3 17.0 2 17.0 2 68.0 2 19.0 2 55.0 13 86.0 3 39.0 2 89.0 11 78.0 2 82.0 2 18.0 2 6.0 2 95.0 12 19.0 2 50.0 2 19.0 2]
Total: 1380.0
Mean: 27.6
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4234.015667100001
Median total errors in population: 1381.0
Error averages by case: (142.6759042 3.348 190.495316 13.415 181.04038139999994 2.759 177.6977423 4.564 135.97340340000005 3.468 163.01986620000005 13.373 188.9446471 11.587 187.3720299 3.549 147.0464805 3.652 134.12904500000005 3.539 134.44780490000005 3.609 175.49114699999998 3.491 133.26401020000003 3.54 168.9302362 13.381 194.5896928 4.58 156.097892 2.751 198.5871165 11.42 184.98208890000006 3.46 191.42797719999993 4.529 135.93620709999996 3.615 127.66123060000004 3.61 204.622816 13.418 133.70786660000007 2.633 163.84405120000005 3.67 138.40171389999998 2.668)
Error minima by case: (28.0 1 9.8196 10 11.8161 1 64.0 3 21.0 2 1.0682 8 21.9091 9 20.0 1 29.0 2 3.9431 2 15.0 2 15.4459 1 17.0 2 11.9597 10 44.5219 3 26.1205 1 26.6243 10 11.651 1 64.0071 2 16.0 2 6.0 2 26.4745 7 15.7624 1 48.0 2 4.213 1)
Average genome size in population (length): 48.635
Average program size in population (points): 49.635
Average percent parens in population: 0.029
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4265
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 75
Genome diversity (% unique Plush genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.042
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5403700
--- Timings ---
Current time: 1529615765130 milliseconds
Total Time:          16.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         6.9 seconds, 41.3%
Fitness Testing:      7.8 seconds, 47.1%
Report:               1.8 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 55352.0
Test mean error for best: 27.67600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 37.542920316  
Correct output: 36.9263823022  | Program output: -43.0736176978
Correct output: -12.6268384926 | Program output: -81.6268384926
Correct output: -156.0918084307 | Program output: -90.0918084307
Correct output: 80.9560456736  | Program output: 59.9560456736 
Correct output: -54.9317847731 | Program output: 2.0682152269  
Correct output: 43.2695047863  | Program output: -33.7304952137
Correct output: 127.5752307902 | Program output: 48.5752307902 
Correct output: -118.3834102551 | Program output: -87.3834102551
Correct output: -20.9430876309 | Program output: -3.9430876309 
Correct output: -40.1637221127 | Program output: -23.1637221127
Correct output: 84.4459340278  | Program output: 16.4459340278 
Correct output: 66.9574048532  | Program output: 85.9574048532 
Correct output: 43.0403227949  | Program output: -11.9596772051
Correct output: -130.5218741194 | Program output: -44.5218741194
Correct output: -26.7988140078 | Program output: -65.7988140078
Correct output: 62.375676743   | Program output: -26.624323257 
Correct output: 90.6509578065  | Program output: 12.6509578065 
Correct output: -146.0070943376 | Program output: -64.0070943376
Correct output: -77.9582317921 | Program output: -59.9582317921
Correct output: -36.4250425838 | Program output: -42.4250425838
Correct output: 52.9510395124  | Program output: -42.0489604876
Correct output: 35.7624010697  | Program output: 16.7624010697 
Correct output: -143.6863764074 | Program output: -93.6863764074
Correct output: -4.8279891918  | Program output: -23.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction in1} {:instruction float_inc} {:instruction tagged_717} {:instruction float_min} {:instruction integer_div} {:instruction 12} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_dup_items} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_dup} {:instruction in1} {:instruction float_frominteger} {:instruction integer_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_rot} {:instruction integer_min} {:instruction float_min} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_min} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction -55.99019162865986} {:instruction float_rot} {:instruction -55.99019162865986} {:instruction float_rot} {:instruction integer_dec} {:instruction float_max})
Best program: (integer_fromfloat float_max in1 float_inc tagged_717 float_min integer_div 12 integer_dup_items float_yank float_dup_items print_float float_stackdepth float_stackdepth integer_fromfloat float_dec integer_dup in1 float_frominteger integer_shove integer_rot float_dec integer_rot float_rot integer_min float_min float_dup_items float_cos float_min float_inc float_dup_items float_frominteger integer_div integer_inc integer_dup_items -55.99019162865986 float_rot -55.99019162865986 float_rot integer_dec float_max)
Errors: [28.0 2 80.0 13 69.0 2 66.0 3 21.0 2 57.0 13 77.0 11 79.0 3 31.0 3 17.0 2 17.0 2 68.0 2 19.0 2 55.0 13 86.0 3 39.0 2 89.0 11 78.0 2 82.0 2 18.0 2 6.0 2 95.0 12 19.0 2 50.0 2 19.0 2]
Total: 1380.0
Mean: 27.6
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 4179.441933000001
Median total errors in population: 1381.0
Error averages by case: (140.04024520000002 3.244 188.11780729999998 13.449 178.30440539999995 2.726 177.14682609999997 4.495 133.08877710000002 3.359 164.58966739999997 13.406 184.58665549999998 11.579 185.2191706 3.499 146.28610809999998 3.603 132.2726262 3.437 132.4346447 3.53 174.3171011 3.397 132.4231676 3.446 166.3556561 13.418 194.33636299999998 4.484 151.24472189999997 2.72 196.18583200000003 11.387 184.05496190000005 3.361 190.99633979999996 4.38 133.66393399999998 3.533 122.55212350000001 3.528 200.3829156 13.389 131.92946500000002 2.592 163.0846362 3.574 133.6487817 2.643)
Error minima by case: (28.0 2 28.9264 10 12.6268 1 65.0 3 21.0 2 3.8741 11 33.0974 10 6.3707 2 30.0 2 16.0 2 16.0 2 36.7586 2 18.0 2 35.0403 8 71.7159 3 2.4368 1 54.3757 9 30.5536 2 81.0 2 17.0 2 6.0 2 42.1474 9 19.0 1 49.0 2 4.828 1)
Average genome size in population (length): 46.915
Average program size in population (points): 47.915
Average percent parens in population: 0.030
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.88775
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.681
Total error diversity:				 0.024
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6577000
--- Timings ---
Current time: 1529615768715 milliseconds
Total Time:          20.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.5 seconds, 41.5%
Fitness Testing:      9.5 seconds, 46.4%
Report:               2.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 55283.0
Test mean error for best: 27.64150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 38.542920316  
Correct output: 36.9263823022  | Program output: -42.0736176978
Correct output: -12.6268384926 | Program output: -80.6268384926
Correct output: -156.0918084307 | Program output: -89.0918084307
Correct output: 80.9560456736  | Program output: 60.9560456736 
Correct output: -54.9317847731 | Program output: 3.0682152269  
Correct output: 43.2695047863  | Program output: -32.7304952137
Correct output: 127.5752307902 | Program output: 49.5752307902 
Correct output: -118.3834102551 | Program output: -86.3834102551
Correct output: -20.9430876309 | Program output: -2.9430876309 
Correct output: -40.1637221127 | Program output: -22.1637221127
Correct output: 84.4459340278  | Program output: 17.4459340278 
Correct output: 66.9574048532  | Program output: 86.9574048532 
Correct output: 43.0403227949  | Program output: -10.9596772051
Correct output: -130.5218741194 | Program output: -43.5218741194
Correct output: -26.7988140078 | Program output: -64.7988140078
Correct output: 62.375676743   | Program output: -25.624323257 
Correct output: 90.6509578065  | Program output: 13.6509578065 
Correct output: -146.0070943376 | Program output: -63.0070943376
Correct output: -77.9582317921 | Program output: -58.9582317921
Correct output: -36.4250425838 | Program output: -41.4250425838
Correct output: 52.9510395124  | Program output: -41.0489604876
Correct output: 35.7624010697  | Program output: 17.7624010697 
Correct output: -143.6863764074 | Program output: -92.6863764074
Correct output: -4.8279891918  | Program output: -22.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction tag_float_362} {:instruction float_max} {:instruction float_yankdup} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_sub} {:instruction 4.12936612489105} {:instruction tag_integer_197} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_dec} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_add} {:instruction -30.556940628726068} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_max} {:instruction float_sin} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_inc} {:instruction integer_div} {:instruction tag_float_986} {:instruction float_inc} {:instruction integer_min} {:instruction print_float} {:instruction integer_add} {:instruction integer_add} {:instruction print_integer} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_dup} {:instruction tag_float_177} {:instruction float_cos} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction float_div} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction integer_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_sin} {:instruction float_swap} {:instruction float_max} {:instruction integer_yank})
Best program: (integer_shove tag_float_362 float_max float_yankdup in1 float_inc integer_shove float_sub 4.12936612489105 tag_integer_197 integer_stackdepth integer_dup float_yankdup float_dup integer_dec integer_div float_stackdepth float_dup_items integer_dup_items float_add -30.556940628726068 float_frominteger float_shove integer_max float_sin integer_shove float_dup_items float_sub float_frominteger float_add integer_inc integer_div tag_float_986 float_inc integer_min print_float integer_add integer_add print_integer float_frominteger integer_div integer_fromfloat integer_div integer_dup tag_float_177 float_cos float_mult integer_stackdepth float_frominteger float_div float_yank integer_dup_times in1 float_rot integer_div integer_add float_dec float_sin float_swap float_max integer_yank)
Errors: [27.0 2 79.0 13 68.0 2 67.0 3 20.0 1 58.0 13 76.0 10 78.0 3 32.0 3 18.0 1 18.0 2 67.0 2 20.0 1 54.0 13 87.0 2 38.0 2 88.0 11 77.0 2 83.0 3 19.0 2 5.0 2 94.0 13 18.0 2 51.0 3 18.0 2]
Total: 1373.0
Mean: 27.46
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4296.2149960000015
Median total errors in population: 1381.0
Error averages by case: (146.6488951 3.396 191.21263969999998 13.36 181.48356049999998 3.117 180.8909665 4.63 140.97956760000005 3.517 170.51518099999998 13.36 188.62382559999998 11.543 191.6472021 3.946 150.04987450000002 4.015 135.5187526 3.594 136.3997074 3.651 180.6210587 3.526 139.10861290000003 3.59 168.76192469999998 13.34 197.60371279999998 4.613 155.7960926 3.144 198.9652169 11.37 189.2117684 3.506 194.4256918 4.262 138.30724999999998 3.665 127.3347926 3.657 204.3774379 13.018 137.6633651 3.011 166.77703310000004 3.716 137.71386589999997 3.03)
Error minima by case: (7.5429 2 28.6677 9 12.6268 1 26.0918 3 20.0 1 0.0682 8 9.0573 9 32.4248 2 30.0 2 5.9431 1 8.1637 2 14.4459 2 18.0 1 13.9597 8 39.4781 2 26.7988 1 28.6243 10 10.651 2 15.9929 2 17.0 2 0.4302 2 44.049 7 4.2376 1 45.6864 2 4.828 1)
Average genome size in population (length): 50.456
Average program size in population (points): 51.456
Average percent parens in population: 0.026
Minimum age in population: 5.0
Maximum age in population: 9.0625
Average age in population: 7.274625
Median age in population: 7.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.033
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7838575
--- Timings ---
Current time: 1529615772210 milliseconds
Total Time:          23.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:         9.9 seconds, 41.5%
Fitness Testing:     11.1 seconds, 46.6%
Report:               2.7 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 55283.0
Test mean error for best: 27.64150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 38.542920316  
Correct output: 36.9263823022  | Program output: -42.0736176978
Correct output: -12.6268384926 | Program output: -80.6268384926
Correct output: -156.0918084307 | Program output: -89.0918084307
Correct output: 80.9560456736  | Program output: 60.9560456736 
Correct output: -54.9317847731 | Program output: 3.0682152269  
Correct output: 43.2695047863  | Program output: -32.7304952137
Correct output: 127.5752307902 | Program output: 49.5752307902 
Correct output: -118.3834102551 | Program output: -86.3834102551
Correct output: -20.9430876309 | Program output: -2.9430876309 
Correct output: -40.1637221127 | Program output: -22.1637221127
Correct output: 84.4459340278  | Program output: 17.4459340278 
Correct output: 66.9574048532  | Program output: 86.9574048532 
Correct output: 43.0403227949  | Program output: -10.9596772051
Correct output: -130.5218741194 | Program output: -43.5218741194
Correct output: -26.7988140078 | Program output: -64.7988140078
Correct output: 62.375676743   | Program output: -25.624323257 
Correct output: 90.6509578065  | Program output: 13.6509578065 
Correct output: -146.0070943376 | Program output: -63.0070943376
Correct output: -77.9582317921 | Program output: -58.9582317921
Correct output: -36.4250425838 | Program output: -41.4250425838
Correct output: 52.9510395124  | Program output: -41.0489604876
Correct output: 35.7624010697  | Program output: 17.7624010697 
Correct output: -143.6863764074 | Program output: -92.6863764074
Correct output: -4.8279891918  | Program output: -22.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction integer_dup} {:instruction float_sin} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_tan} {:instruction float_min} {:instruction float_cos} {:instruction 15.657554573977507} {:instruction integer_shove} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_fromfloat float_max float_dup tagged_949 integer_rot print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap float_add float_dup_items integer_dec integer_dup_items integer_flush in1 integer_dup float_sin float_shove integer_dec integer_sub integer_add float_dup_items float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc float_tan float_min float_cos 15.657554573977507 integer_shove float_div in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank float_pop)
Errors: [27.0 2 79.0 13 68.0 2 67.0 3 20.0 1 58.0 13 76.0 10 78.0 3 32.0 3 18.0 1 18.0 2 67.0 2 20.0 1 54.0 13 87.0 2 38.0 2 88.0 11 77.0 2 83.0 3 19.0 2 5.0 2 94.0 13 18.0 2 51.0 3 18.0 2]
Total: 1373.0
Mean: 27.46
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3466.140957300001
Median total errors in population: 1380.0
Error averages by case: (112.3036829 3.063 158.30822949999995 13.188 148.25852260000002 3.147 148.9131255 4.199 106.54135389999999 3.14 139.03212779999996 13.235 155.71869869999998 11.351 159.11197460000002 4.046 116.8928464 4.104 102.60086279999999 3.176 103.14924110000001 3.222 148.4540613 3.13 105.13786080000001 3.157 136.02618900000002 13.19 166.34031259999998 4.187 122.23810759999999 3.177 166.822634 11.241 157.5185034 3.134 163.045078 3.341 104.46189210000001 3.229 92.25794639999998 3.231 173.00172309999994 12.346 103.66935400000001 3.102 134.3530453 3.272 103.26758389999998 3.108)
Error minima by case: (27.0 2 6.8302 10 11.8849 1 65.0 3 20.0 1 54.9318 10 5.9611 9 78.0 2 30.0 2 12.0334 1 16.0 2 54.3497 2 18.0 1 12.9441 8 85.0 2 26.0568 1 32.2795 7 60.5547 2 81.0 2 17.0 2 5.0 2 22.8548 9 5.6662 1 49.0 2 4.086 1)
Average genome size in population (length): 57.89
Average program size in population (points): 58.89
Average percent parens in population: 0.018
Minimum age in population: 6.5
Maximum age in population: 10.40625
Average age in population: 8.6775625
Median age in population: 8.71875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.702
Total error diversity:				 0.033
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 9285950
--- Timings ---
Current time: 1529615776174 milliseconds
Total Time:          27.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.6 seconds, 41.9%
Fitness Testing:     12.8 seconds, 46.2%
Report:               3.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 55283.0
Test mean error for best: 27.64150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 38.542920316  
Correct output: 36.9263823022  | Program output: -42.0736176978
Correct output: -12.6268384926 | Program output: -80.6268384926
Correct output: -156.0918084307 | Program output: -89.0918084307
Correct output: 80.9560456736  | Program output: 60.9560456736 
Correct output: -54.9317847731 | Program output: 3.0682152269  
Correct output: 43.2695047863  | Program output: -32.7304952137
Correct output: 127.5752307902 | Program output: 49.5752307902 
Correct output: -118.3834102551 | Program output: -86.3834102551
Correct output: -20.9430876309 | Program output: -2.9430876309 
Correct output: -40.1637221127 | Program output: -22.1637221127
Correct output: 84.4459340278  | Program output: 17.4459340278 
Correct output: 66.9574048532  | Program output: 86.9574048532 
Correct output: 43.0403227949  | Program output: -10.9596772051
Correct output: -130.5218741194 | Program output: -43.5218741194
Correct output: -26.7988140078 | Program output: -64.7988140078
Correct output: 62.375676743   | Program output: -25.624323257 
Correct output: 90.6509578065  | Program output: 13.6509578065 
Correct output: -146.0070943376 | Program output: -63.0070943376
Correct output: -77.9582317921 | Program output: -58.9582317921
Correct output: -36.4250425838 | Program output: -41.4250425838
Correct output: 52.9510395124  | Program output: -41.0489604876
Correct output: 35.7624010697  | Program output: 17.7624010697 
Correct output: -143.6863764074 | Program output: -92.6863764074
Correct output: -4.8279891918  | Program output: -22.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction integer_dup} {:instruction float_sin} {:instruction float_shove} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_tan} {:instruction float_min} {:instruction float_cos} {:instruction 15.657554573977507} {:instruction integer_shove} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_fromfloat float_max float_dup tagged_949 integer_rot print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap float_add float_dup_items integer_dec integer_dup_items integer_flush in1 integer_dup float_sin float_shove integer_dec float_sub integer_add float_dup_items float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc float_tan float_min float_cos 15.657554573977507 integer_shove float_div in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank float_pop)
Errors: [27.0 2 79.0 13 68.0 2 67.0 3 20.0 1 58.0 13 76.0 10 78.0 3 32.0 3 18.0 1 18.0 2 67.0 2 20.0 1 54.0 13 87.0 2 38.0 2 88.0 11 77.0 2 83.0 3 19.0 2 5.0 2 94.0 13 18.0 2 51.0 3 18.0 2]
Total: 1373.0
Mean: 27.46
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3356.4915570000007
Median total errors in population: 1380.0
Error averages by case: (108.1847203 3.003 154.88906910000003 13.184 144.7668489 3.11 143.80260400000003 4.132 102.16449480000001 3.066 134.33947999999998 13.218 152.24631810000002 11.314 155.1128978 4.022 111.76944379999998 4.063 97.69137599999999 3.097 97.95131939999999 3.159 144.5984424 3.075 100.27177969999997 3.087 132.3106792 13.188 161.51715569999996 4.109 117.81486989999999 3.144 163.34746579999998 11.229 153.73004139999995 3.065 158.0775569 3.256 99.45199299999997 3.159 88.07198809999998 3.155 168.66993920000002 12.317 99.62091460000002 3.066 129.2359321 3.218 99.34522679999999 3.073)
Error minima by case: (7.5429 2 25.2955 10 8.5075 1 25.0918 3 20.0 1 52.8706 10 31.6386 8 31.4248 2 26.8706 2 11.0569 1 7.1637 2 52.5541 2 14.8706 1 31.4094 8 39.4781 2 22.5372 1 50.7448 9 66.349 2 15.9929 2 13.8706 2 5.0 2 41.3201 9 3.2376 1 44.6864 2 3.2424 1)
Average genome size in population (length): 58.874
Average program size in population (points): 59.874
Average percent parens in population: 0.017
Minimum age in population: 7.5
Maximum age in population: 12.109375
Average age in population: 10.151859375
Median age in population: 10.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.03
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 10757825
--- Timings ---
Current time: 1529615780273 milliseconds
Total Time:          31.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.1 seconds, 41.2%
Fitness Testing:     14.9 seconds, 46.9%
Report:               3.7 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 55283.0
Test mean error for best: 27.64150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 38.542920316  
Correct output: 36.9263823022  | Program output: -42.0736176978
Correct output: -12.6268384926 | Program output: -80.6268384926
Correct output: -156.0918084307 | Program output: -89.0918084307
Correct output: 80.9560456736  | Program output: 60.9560456736 
Correct output: -54.9317847731 | Program output: 3.0682152269  
Correct output: 43.2695047863  | Program output: -32.7304952137
Correct output: 127.5752307902 | Program output: 49.5752307902 
Correct output: -118.3834102551 | Program output: -86.3834102551
Correct output: -20.9430876309 | Program output: -2.9430876309 
Correct output: -40.1637221127 | Program output: -22.1637221127
Correct output: 84.4459340278  | Program output: 17.4459340278 
Correct output: 66.9574048532  | Program output: 86.9574048532 
Correct output: 43.0403227949  | Program output: -10.9596772051
Correct output: -130.5218741194 | Program output: -43.5218741194
Correct output: -26.7988140078 | Program output: -64.7988140078
Correct output: 62.375676743   | Program output: -25.624323257 
Correct output: 90.6509578065  | Program output: 13.6509578065 
Correct output: -146.0070943376 | Program output: -63.0070943376
Correct output: -77.9582317921 | Program output: -58.9582317921
Correct output: -36.4250425838 | Program output: -41.4250425838
Correct output: 52.9510395124  | Program output: -41.0489604876
Correct output: 35.7624010697  | Program output: 17.7624010697 
Correct output: -143.6863764074 | Program output: -92.6863764074
Correct output: -4.8279891918  | Program output: -22.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction float_rot} {:instruction float_dup} {:instruction float_mod} {:instruction float_yank} {:instruction float_flush} {:instruction integer_dec} {:instruction integer_sub} {:instruction integer_max} {:instruction float_div} {:instruction float_flush} {:instruction integer_dup} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_mod} {:instruction float_sin} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_tan} {:instruction float_min} {:instruction float_cos} {:instruction 15.657554573977507} {:instruction integer_shove} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction integer_swap} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (float_dup_times integer_rot integer_fromfloat integer_swap float_rot float_dup float_mod float_yank float_flush integer_dec integer_sub integer_max float_div float_flush integer_dup integer_stackdepth integer_dup_items integer_inc float_mod float_sin float_dec float_yank integer_yankdup float_frominteger integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc float_tan float_min float_cos 15.657554573977507 integer_shove float_div in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc in1 integer_flush float_pop print_float float_sub integer_swap float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank float_pop)
Errors: [27.0 2 79.0 13 68.0 2 67.0 3 20.0 1 58.0 13 76.0 10 78.0 3 32.0 3 18.0 1 18.0 2 67.0 2 20.0 1 54.0 13 87.0 2 38.0 2 88.0 11 77.0 2 83.0 3 19.0 2 5.0 2 94.0 13 18.0 2 51.0 3 18.0 2]
Total: 1373.0
Mean: 27.46
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3398.164264400001
Median total errors in population: 1380.0
Error averages by case: (109.229112 3.022 156.30499919999997 13.174 146.31215480000003 3.139 146.37090149999997 4.158 103.25292300000001 3.017 134.9385648 13.202 153.70195839999994 11.236 156.2023076 4.03 114.26022219999999 4.1 99.85200529999999 3.057 100.2145563 3.195 145.4790393 3.093 101.37014620000001 3.016 133.95176880000002 13.177 163.7899394 4.058 119.61300959999996 3.175 164.8276424 11.21 154.58008510000002 3.076 160.52911469999998 3.342 101.82740989999998 3.195 90.2068218 3.187 170.03074159999997 12.376 100.5554639 3.103 131.78173160000003 3.311 101.22064499999999 3.112)
Error minima by case: (23.8706 2 20.2688 9 12.2419 1 65.0 3 16.8706 1 54.09 9 8.1185 9 74.8706 2 30.0 2 16.0 1 16.0 2 63.8706 2 18.0 1 13.4231 8 85.0 2 26.7155 1 18.0938 8 73.8706 2 81.0 2 17.0 2 1.8706 2 6.7555 9 14.8706 1 49.0 2 4.8879 1)
Average genome size in population (length): 59.092
Average program size in population (points): 60.092
Average percent parens in population: 0.017
Minimum age in population: 9.25
Maximum age in population: 13.4453125
Average age in population: 11.68396875
Median age in population: 11.7265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.031
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 12235125
--- Timings ---
Current time: 1529615784011 milliseconds
Total Time:          35.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.6 seconds, 40.9%
Fitness Testing:     16.6 seconds, 46.8%
Report:               4.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 55273.0
Test mean error for best: 27.63650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 40.542920316  
Correct output: 36.9263823022  | Program output: -40.0736176978
Correct output: -12.6268384926 | Program output: -78.6268384926
Correct output: -156.0918084307 | Program output: -87.0918084307
Correct output: 80.9560456736  | Program output: 62.9560456736 
Correct output: -54.9317847731 | Program output: 5.0682152269  
Correct output: 43.2695047863  | Program output: -30.7304952137
Correct output: 127.5752307902 | Program output: 51.5752307902 
Correct output: -118.3834102551 | Program output: -84.3834102551
Correct output: -20.9430876309 | Program output: -0.9430876309 
Correct output: -40.1637221127 | Program output: -20.1637221127
Correct output: 84.4459340278  | Program output: 19.4459340278 
Correct output: 66.9574048532  | Program output: 88.9574048532 
Correct output: 43.0403227949  | Program output: -8.9596772051 
Correct output: -130.5218741194 | Program output: -41.5218741194
Correct output: -26.7988140078 | Program output: -62.7988140078
Correct output: 62.375676743   | Program output: -23.624323257 
Correct output: 90.6509578065  | Program output: 15.6509578065 
Correct output: -146.0070943376 | Program output: -61.0070943376
Correct output: -77.9582317921 | Program output: -56.9582317921
Correct output: -36.4250425838 | Program output: -39.4250425838
Correct output: 52.9510395124  | Program output: -39.0489604876
Correct output: 35.7624010697  | Program output: 19.7624010697 
Correct output: -143.6863764074 | Program output: -90.6863764074
Correct output: -4.8279891918  | Program output: -20.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_sin} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_fromfloat float_max float_dup tagged_949 integer_rot print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap float_add float_dup_items integer_dec integer_dup_items integer_flush in1 integer_dup integer_dup float_sin float_shove integer_dec integer_sub float_sub float_dup_items float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc integer_max float_div in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank float_pop)
Errors: [25.0 2 77.0 13 66.0 2 69.0 3 18.0 2 60.0 12 74.0 11 76.0 3 34.0 3 20.0 1 20.0 1 65.0 2 22.0 2 52.0 12 89.0 3 36.0 2 86.0 11 75.0 2 85.0 3 21.0 2 3.0 1 92.0 13 16.0 2 53.0 3 16.0 2]
Total: 1363.0
Mean: 27.26
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3805.8772461000003
Median total errors in population: 1380.0
Error averages by case: (126.46372689999998 3.244 171.51627349999998 13.234 161.57570519999996 3.399 162.72564690000002 4.386 120.63365349999998 2.925 151.28464449999998 13.251 169.01417359999996 11.017 172.5420584 4.247 131.20213569999999 4.352 115.90399379999997 2.99 116.8497441 3.444 161.15914940000002 3.321 119.3556835 2.915 148.79570109999997 13.228 179.7447934 3.997 135.5408255 3.411 179.60008359999995 11.283 169.95784670000003 3.31 176.55903269999996 3.905 118.9464198 3.437 106.76853959999998 3.437 185.01727279999997 12.741 117.1755851 3.328 148.41544000000002 3.886 117.08911679999999 3.352)
Error minima by case: (25.0 2 19.2688 10 9.8161 1 65.0 3 18.0 1 53.8081 10 25.612 9 76.0 2 30.0 2 16.0 1 16.0 1 65.0 2 18.0 1 25.3828 9 85.0 2 25.5336 1 44.7181 8 68.3958 2 81.0 2 17.0 2 3.0 1 35.2935 8 16.0 1 49.0 2 3.128 1)
Average genome size in population (length): 57.979
Average program size in population (points): 58.979
Average percent parens in population: 0.018
Minimum age in population: 10.3203125
Maximum age in population: 14.90625
Average age in population: 13.16034375
Median age in population: 13.173828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.044
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 13684600
--- Timings ---
Current time: 1529615787750 milliseconds
Total Time:          39.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.1 seconds, 41.0%
Fitness Testing:     18.4 seconds, 46.8%
Report:               4.7 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 55273.0
Test mean error for best: 27.63650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 40.542920316  
Correct output: 36.9263823022  | Program output: -40.0736176978
Correct output: -12.6268384926 | Program output: -78.6268384926
Correct output: -156.0918084307 | Program output: -87.0918084307
Correct output: 80.9560456736  | Program output: 62.9560456736 
Correct output: -54.9317847731 | Program output: 5.0682152269  
Correct output: 43.2695047863  | Program output: -30.7304952137
Correct output: 127.5752307902 | Program output: 51.5752307902 
Correct output: -118.3834102551 | Program output: -84.3834102551
Correct output: -20.9430876309 | Program output: -0.9430876309 
Correct output: -40.1637221127 | Program output: -20.1637221127
Correct output: 84.4459340278  | Program output: 19.4459340278 
Correct output: 66.9574048532  | Program output: 88.9574048532 
Correct output: 43.0403227949  | Program output: -8.9596772051 
Correct output: -130.5218741194 | Program output: -41.5218741194
Correct output: -26.7988140078 | Program output: -62.7988140078
Correct output: 62.375676743   | Program output: -23.624323257 
Correct output: 90.6509578065  | Program output: 15.6509578065 
Correct output: -146.0070943376 | Program output: -61.0070943376
Correct output: -77.9582317921 | Program output: -56.9582317921
Correct output: -36.4250425838 | Program output: -39.4250425838
Correct output: 52.9510395124  | Program output: -39.0489604876
Correct output: 35.7624010697  | Program output: 19.7624010697 
Correct output: -143.6863764074 | Program output: -90.6863764074
Correct output: -4.8279891918  | Program output: -20.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_sin} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank})
Best program: (integer_fromfloat float_max float_dup tagged_949 integer_rot print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap float_add float_dup_items integer_dec integer_dup_items integer_flush in1 integer_dup integer_dup float_sin float_shove integer_dec integer_sub float_sub float_dup_items float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc integer_max float_div in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank)
Errors: [25.0 2 77.0 13 66.0 2 69.0 3 18.0 2 60.0 12 74.0 11 76.0 3 34.0 3 20.0 1 20.0 1 65.0 2 22.0 2 52.0 12 89.0 3 36.0 2 86.0 11 75.0 2 85.0 3 21.0 2 3.0 1 92.0 13 16.0 2 53.0 3 16.0 2]
Total: 1363.0
Mean: 27.26
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3423.656399100001
Median total errors in population: 1373.0
Error averages by case: (110.53879029999999 3.098 156.19506749999996 13.231 146.1243666 3.25 148.72363930000003 4.253 104.65991490000002 2.364 137.2611562 13.225 153.6532538 10.577 157.41473489999998 4.109 116.61669399999995 4.184 100.77793239999995 2.378 101.81804799999998 3.295 145.7419025 3.183 104.22258289999996 2.35 133.18290819999999 13.246 165.84409659999997 3.409 119.79970579999998 3.28 164.43234950000002 11.281 154.67232590000003 3.162 162.70487069999993 4.18 104.05294969999997 3.29 90.66583549999996 3.285 169.87721390000002 13.159 101.1021557 3.194 134.15802570000005 4.174 101.04187859999998 3.217)
Error minima by case: (14.2708 2 14.3458 9 7.3519 1 65.0 3 15.8096 1 54.8992 10 8.0027 9 30.8096 2 30.0 2 16.0 1 16.0 1 12.3197 2 15.6852 1 8.2318 7 85.0 2 23.6423 1 11.1035 8 6.1147 2 81.0 2 17.0 1 3.0 1 1.6789 7 15.5098 1 49.0 2 3.3416 1)
Average genome size in population (length): 56.853
Average program size in population (points): 57.853
Average percent parens in population: 0.019
Minimum age in population: 12.4375
Maximum age in population: 16.541015625
Average age in population: 14.569998046875
Median age in population: 14.62109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 66
Genome diversity (% unique Plush genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.04
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 15105950
--- Timings ---
Current time: 1529615791593 milliseconds
Total Time:          43.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        17.7 seconds, 41.0%
Fitness Testing:     20.1 seconds, 46.7%
Report:               5.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 55273.0
Test mean error for best: 27.63650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 40.542920316  
Correct output: 36.9263823022  | Program output: -40.0736176978
Correct output: -12.6268384926 | Program output: -78.6268384926
Correct output: -156.0918084307 | Program output: -87.0918084307
Correct output: 80.9560456736  | Program output: 62.9560456736 
Correct output: -54.9317847731 | Program output: 5.0682152269  
Correct output: 43.2695047863  | Program output: -30.7304952137
Correct output: 127.5752307902 | Program output: 51.5752307902 
Correct output: -118.3834102551 | Program output: -84.3834102551
Correct output: -20.9430876309 | Program output: -0.9430876309 
Correct output: -40.1637221127 | Program output: -20.1637221127
Correct output: 84.4459340278  | Program output: 19.4459340278 
Correct output: 66.9574048532  | Program output: 88.9574048532 
Correct output: 43.0403227949  | Program output: -8.9596772051 
Correct output: -130.5218741194 | Program output: -41.5218741194
Correct output: -26.7988140078 | Program output: -62.7988140078
Correct output: 62.375676743   | Program output: -23.624323257 
Correct output: 90.6509578065  | Program output: 15.6509578065 
Correct output: -146.0070943376 | Program output: -61.0070943376
Correct output: -77.9582317921 | Program output: -56.9582317921
Correct output: -36.4250425838 | Program output: -39.4250425838
Correct output: 52.9510395124  | Program output: -39.0489604876
Correct output: 35.7624010697  | Program output: 19.7624010697 
Correct output: -143.6863764074 | Program output: -90.6863764074
Correct output: -4.8279891918  | Program output: -20.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_sin} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_fromfloat float_max float_dup tagged_949 integer_rot print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap float_add float_dup_items integer_dec integer_dup_items integer_flush in1 integer_dup integer_dup float_sin float_shove integer_dec integer_sub float_sub float_dup_items float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc integer_max float_div in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank float_pop)
Errors: [25.0 2 77.0 13 66.0 2 69.0 3 18.0 2 60.0 12 74.0 11 76.0 3 34.0 3 20.0 1 20.0 1 65.0 2 22.0 2 52.0 12 89.0 3 36.0 2 86.0 11 75.0 2 85.0 3 21.0 2 3.0 1 92.0 13 16.0 2 53.0 3 16.0 2]
Total: 1363.0
Mean: 27.26
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4274.4309516
Median total errors in population: 1373.0
Error averages by case: (144.7658489 3.417 190.37709749999996 13.29 180.9795278 3.619 182.34981820000004 4.595 139.29794660000002 2.7 169.26597149999995 13.247 187.74338949999998 10.707 189.8786798 4.453 151.57955040000002 4.554 134.244204 2.729 136.4747955 3.616 176.74230920000002 3.512 139.30314769999998 2.685 165.7677292 13.275 198.76430549999992 3.79 155.31663939999999 3.622 197.2804261 11.359 185.0676998000001 3.482 195.8535063 4.555 139.60360809999997 3.599 126.6489087 3.602 203.53355249999998 13.262 133.9724816 3.536 168.36246060000002 4.556 135.94134720000002 3.554)
Error minima by case: (2.4032 2 19.2688 8 7.3519 1 65.0 3 13.0099 1 23.9888 8 24.6766 9 59.6291 2 30.0 2 16.0 1 16.0 1 16.4998 2 0.9887 1 24.9058 9 51.6013 2 24.1779 1 5.5705 8 22.7048 2 67.0865 2 0.9624 1 3.0 1 14.9951 7 16.0 1 49.0 2 3.3506 1)
Average genome size in population (length): 56.858
Average program size in population (points): 57.858
Average percent parens in population: 0.019
Minimum age in population: 13.4609375
Maximum age in population: 17.947265625
Average age in population: 16.0699404296875
Median age in population: 16.12353515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.041
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 16527400
--- Timings ---
Current time: 1529615795390 milliseconds
Total Time:          46.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.1 seconds, 40.7%
Fitness Testing:     22.0 seconds, 46.9%
Report:               5.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 55273.0
Test mean error for best: 27.63650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 40.542920316  
Correct output: 36.9263823022  | Program output: -40.0736176978
Correct output: -12.6268384926 | Program output: -78.6268384926
Correct output: -156.0918084307 | Program output: -87.0918084307
Correct output: 80.9560456736  | Program output: 62.9560456736 
Correct output: -54.9317847731 | Program output: 5.0682152269  
Correct output: 43.2695047863  | Program output: -30.7304952137
Correct output: 127.5752307902 | Program output: 51.5752307902 
Correct output: -118.3834102551 | Program output: -84.3834102551
Correct output: -20.9430876309 | Program output: -0.9430876309 
Correct output: -40.1637221127 | Program output: -20.1637221127
Correct output: 84.4459340278  | Program output: 19.4459340278 
Correct output: 66.9574048532  | Program output: 88.9574048532 
Correct output: 43.0403227949  | Program output: -8.9596772051 
Correct output: -130.5218741194 | Program output: -41.5218741194
Correct output: -26.7988140078 | Program output: -62.7988140078
Correct output: 62.375676743   | Program output: -23.624323257 
Correct output: 90.6509578065  | Program output: 15.6509578065 
Correct output: -146.0070943376 | Program output: -61.0070943376
Correct output: -77.9582317921 | Program output: -56.9582317921
Correct output: -36.4250425838 | Program output: -39.4250425838
Correct output: 52.9510395124  | Program output: -39.0489604876
Correct output: 35.7624010697  | Program output: 19.7624010697 
Correct output: -143.6863764074 | Program output: -90.6863764074
Correct output: -4.8279891918  | Program output: -20.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_min} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_sin} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank})
Best program: (integer_fromfloat float_max float_dup tagged_949 integer_rot print_float integer_max float_inc float_min integer_rot float_flush float_swap float_add float_dup_items integer_dec integer_dup_items integer_flush in1 integer_dup integer_dup float_sin float_shove integer_dec integer_sub float_sub float_dup_items float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc integer_max float_div in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank)
Errors: [25.0 2 77.0 13 66.0 2 69.0 3 18.0 2 60.0 12 74.0 11 76.0 3 34.0 3 20.0 1 20.0 1 65.0 2 22.0 2 52.0 12 89.0 3 36.0 2 86.0 11 75.0 2 85.0 3 21.0 2 3.0 1 92.0 13 16.0 2 53.0 3 16.0 2]
Total: 1363.0
Mean: 27.26
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3612.3715897
Median total errors in population: 1373.0
Error averages by case: (117.62197529999999 3.114 163.81783120000003 13.282 153.87947820000002 3.262 155.2654097 4.244 111.6205274 2.569 145.95150110000003 13.04 161.17638449999998 10.812 164.00411860000003 4.114 123.5520412 4.196 109.7455942 2.481 109.98966539999999 3.145 153.61044709999996 3.198 112.2071513 2.569 141.46493980000005 13.044 172.81019260000002 3.623 127.17231689999998 3.266 172.12822599999996 11.314 162.63267220000006 3.17 169.41490480000002 4.204 111.40892849999997 3.192 97.70645449999998 3.135 177.3984195 13.265 109.1720194 3.194 140.834842 4.207 108.92554829999997 3.22)
Error minima by case: (8.5429 2 19.2688 9 7.4778 1 25.0918 2 16.0 1 51.9318 8 9.1185 9 31.4248 2 30.0 2 12.0569 1 7.1637 1 52.5541 2 18.0 1 12.4231 9 40.4781 2 23.7988 1 17.0938 8 66.349 2 16.9929 2 17.0 1 1.0 1 7.7555 9 3.2376 1 44.6864 2 1.828 1)
Average genome size in population (length): 59.677
Average program size in population (points): 60.677
Average percent parens in population: 0.018
Minimum age in population: 14.6796875
Maximum age in population: 19.626953125
Average age in population: 17.61945068359375
Median age in population: 17.641357421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.041
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 18019325
--- Timings ---
Current time: 1529615799194 milliseconds
Total Time:          50.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.6 seconds, 40.7%
Fitness Testing:     23.8 seconds, 46.8%
Report:               6.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 55273.0
Test mean error for best: 27.63650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 40.542920316  
Correct output: 36.9263823022  | Program output: -40.0736176978
Correct output: -12.6268384926 | Program output: -78.6268384926
Correct output: -156.0918084307 | Program output: -87.0918084307
Correct output: 80.9560456736  | Program output: 62.9560456736 
Correct output: -54.9317847731 | Program output: 5.0682152269  
Correct output: 43.2695047863  | Program output: -30.7304952137
Correct output: 127.5752307902 | Program output: 51.5752307902 
Correct output: -118.3834102551 | Program output: -84.3834102551
Correct output: -20.9430876309 | Program output: -0.9430876309 
Correct output: -40.1637221127 | Program output: -20.1637221127
Correct output: 84.4459340278  | Program output: 19.4459340278 
Correct output: 66.9574048532  | Program output: 88.9574048532 
Correct output: 43.0403227949  | Program output: -8.9596772051 
Correct output: -130.5218741194 | Program output: -41.5218741194
Correct output: -26.7988140078 | Program output: -62.7988140078
Correct output: 62.375676743   | Program output: -23.624323257 
Correct output: 90.6509578065  | Program output: 15.6509578065 
Correct output: -146.0070943376 | Program output: -61.0070943376
Correct output: -77.9582317921 | Program output: -56.9582317921
Correct output: -36.4250425838 | Program output: -39.4250425838
Correct output: 52.9510395124  | Program output: -39.0489604876
Correct output: 35.7624010697  | Program output: 19.7624010697 
Correct output: -143.6863764074 | Program output: -90.6863764074
Correct output: -4.8279891918  | Program output: -20.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_sin} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_fromfloat float_max float_dup tagged_949 integer_rot print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap float_add float_dup_items integer_dec integer_dup_items integer_flush in1 integer_dup integer_dup float_sin float_shove integer_dec integer_sub float_sub float_dup_items float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc integer_max float_div in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yank integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank float_pop)
Errors: [25.0 2 77.0 13 66.0 2 69.0 3 18.0 2 60.0 12 74.0 11 76.0 3 34.0 3 20.0 1 20.0 1 65.0 2 22.0 2 52.0 12 89.0 3 36.0 2 86.0 11 75.0 2 85.0 3 21.0 2 3.0 1 92.0 13 16.0 2 53.0 3 16.0 2]
Total: 1363.0
Mean: 27.26
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3276.6949904000003
Median total errors in population: 1363.0
Error averages by case: (104.38767460000003 3.052 150.44083279999998 13.122 140.38934579999994 3.153 145.10244759999998 4.148 98.51045450000002 2.982 130.9037553 12.465 147.85004089999995 11.172 151.53415290000004 4.026 112.90189980000001 4.129 94.15132079999998 2.622 96.73784100000002 2.666 137.42917730000002 3.101 100.7072506 2.988 124.48664570000001 12.407 162.34145889999996 4.03 113.78381459999999 3.168 157.56022180000002 11.197 146.07835489999997 3.092 159.17649920000002 4.122 100.288384 3.029 84.3585758 2.651 164.18717180000002 13.102 92.6488936 3.085 130.50136610000004 4.102 93.51541009999998 3.111)
Error minima by case: (2.9224 2 20.2688 8 11.8161 1 23.0918 2 16.0 1 55.8081 10 6.1185 8 29.4248 2 30.0 2 14.0569 1 5.1637 1 21.8254 2 4.3369 1 15.4231 9 42.4781 2 27.5336 1 0.2449 8 28.0304 2 18.9929 2 17.0 1 1.0 1 4.7555 9 1.2376 1 42.6864 2 5.128 1)
Average genome size in population (length): 65.205
Average program size in population (points): 66.205
Average percent parens in population: 0.016
Minimum age in population: 16.82666015625
Maximum age in population: 21.107177734375
Average age in population: 19.25655395507812
Median age in population: 19.2794189453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.045
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 19649450
--- Timings ---
Current time: 1529615803156 milliseconds
Total Time:          54.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.1 seconds, 40.4%
Fitness Testing:     25.8 seconds, 47.1%
Report:               6.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 55379.0
Test mean error for best: 27.68950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 43.542920316  
Correct output: 36.9263823022  | Program output: -37.0736176978
Correct output: -12.6268384926 | Program output: -75.6268384926
Correct output: -156.0918084307 | Program output: -84.0918084307
Correct output: 80.9560456736  | Program output: 65.9560456736 
Correct output: -54.9317847731 | Program output: 8.0682152269  
Correct output: 43.2695047863  | Program output: -27.7304952137
Correct output: 127.5752307902 | Program output: 54.5752307902 
Correct output: -118.3834102551 | Program output: -81.3834102551
Correct output: -20.9430876309 | Program output: 2.0569123691  
Correct output: -40.1637221127 | Program output: -17.1637221127
Correct output: 84.4459340278  | Program output: 22.4459340278 
Correct output: 66.9574048532  | Program output: 91.9574048532 
Correct output: 43.0403227949  | Program output: -5.9596772051 
Correct output: -130.5218741194 | Program output: -38.5218741194
Correct output: -26.7988140078 | Program output: -59.7988140078
Correct output: 62.375676743   | Program output: -20.624323257 
Correct output: 90.6509578065  | Program output: 18.6509578065 
Correct output: -146.0070943376 | Program output: -58.0070943376
Correct output: -77.9582317921 | Program output: -53.9582317921
Correct output: -36.4250425838 | Program output: -36.4250425838
Correct output: 52.9510395124  | Program output: -36.0489604876
Correct output: 35.7624010697  | Program output: 22.7624010697 
Correct output: -143.6863764074 | Program output: -87.6863764074
Correct output: -4.8279891918  | Program output: -17.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_dup} {:instruction tagged_949} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_min} {:instruction tag_float_54} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_min} {:instruction print_float} {:instruction float_pop} {:instruction -19.68809175635542} {:instruction float_mod} {:instruction float_yank})
Best program: (integer_fromfloat float_dup tagged_949 integer_rot print_float integer_max float_inc float_dup_items integer_fromfloat float_max float_dup tagged_949 integer_rot print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc integer_max float_div in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger float_frominteger integer_min tag_float_54 integer_sub integer_mult integer_shove float_mult integer_stackdepth integer_min integer_min print_float float_pop -19.68809175635542 float_mod float_yank)
Errors: [22.0 2 74.0 12 63.0 2 72.0 3 15.0 2 63.0 13 71.0 12 73.0 3 37.0 2 23.0 11 23.0 2 62.0 2 25.0 2 49.0 12 92.0 2 33.0 2 83.0 11 72.0 2 88.0 3 24.0 2 0.0 0 89.0 13 13.0 2 56.0 3 13.0 2]
Total: 1357.0
Mean: 27.14
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2744.2591584
Median total errors in population: 1363.0
Error averages by case: (81.78496539999999 2.809 128.8225793 13.083 118.35271819999998 2.906 124.0891437 3.902 75.72551980000003 2.855 112.3370307 12.245 126.2097027 11.213 130.1110451 3.787 91.0933367 3.87 74.7954593 2.118 75.8097687 2.118 118.1165471 2.855 78.7675532 2.871 105.1278263 12.22 142.65119030000002 3.903 91.11386659999998 2.903 137.40066890000006 11.15 127.3546128 2.862 138.4863496 3.876 78.06324030000002 2.886 60.9774509 2.103 142.99458619999996 13.063 71.98023229999998 2.845 109.1425769 3.848 71.7931874 2.867)
Error minima by case: (10.5429 2 11.2601 8 9.3429 1 23.0918 2 15.0 1 10.6393 7 4.2755 9 29.4248 2 30.0 2 14.0569 1 4.1287 1 50.5541 2 18.0 1 25.3828 8 42.4781 2 17.4936 1 30.7508 8 48.0939 2 18.9929 2 17.0 1 0.0 0 5.0972 7 1.2376 1 42.6864 2 3.828 1)
Average genome size in population (length): 67.254
Average program size in population (points): 68.254
Average percent parens in population: 0.015
Minimum age in population: 18.029541015625
Maximum age in population: 22.7667236328125
Average age in population: 20.77462658691406
Median age in population: 20.822265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.051
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 21330800
--- Timings ---
Current time: 1529615806957 milliseconds
Total Time:          58.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.6 seconds, 40.2%
Fitness Testing:     27.7 seconds, 47.3%
Report:               7.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 55399.0
Test mean error for best: 27.69950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 44.542920316  
Correct output: 36.9263823022  | Program output: -36.0736176978
Correct output: -12.6268384926 | Program output: -74.6268384926
Correct output: -156.0918084307 | Program output: -83.0918084307
Correct output: 80.9560456736  | Program output: 66.9560456736 
Correct output: -54.9317847731 | Program output: 9.0682152269  
Correct output: 43.2695047863  | Program output: -26.7304952137
Correct output: 127.5752307902 | Program output: 55.5752307902 
Correct output: -118.3834102551 | Program output: -80.3834102551
Correct output: -20.9430876309 | Program output: 3.0569123691  
Correct output: -40.1637221127 | Program output: -16.1637221127
Correct output: 84.4459340278  | Program output: 23.4459340278 
Correct output: 66.9574048532  | Program output: 92.9574048532 
Correct output: 43.0403227949  | Program output: -4.9596772051 
Correct output: -130.5218741194 | Program output: -37.5218741194
Correct output: -26.7988140078 | Program output: -58.7988140078
Correct output: 62.375676743   | Program output: -19.624323257 
Correct output: 90.6509578065  | Program output: 19.6509578065 
Correct output: -146.0070943376 | Program output: -57.0070943376
Correct output: -77.9582317921 | Program output: -52.9582317921
Correct output: -36.4250425838 | Program output: -35.4250425838
Correct output: 52.9510395124  | Program output: -35.0489604876
Correct output: 35.7624010697  | Program output: 23.7624010697 
Correct output: -143.6863764074 | Program output: -86.6863764074
Correct output: -4.8279891918  | Program output: -16.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction tag_float_362} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction print_float} {:instruction float_rot} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction float_div} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction integer_dup} {:instruction float_sin} {:instruction float_shove} {:instruction integer_dec} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_tan} {:instruction float_min} {:instruction float_cos} {:instruction 15.657554573977507} {:instruction integer_shove} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank})
Best program: (integer_shove tag_float_362 float_dup integer_dup_times integer_rot print_float float_rot float_inc float_dup_items integer_rot float_flush float_swap float_add float_div integer_dec integer_dup_items integer_flush in1 integer_dup float_sin float_shove integer_dec float_div integer_add float_dup_items float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc float_tan float_min float_cos 15.657554573977507 integer_shove float_div in1 in1 integer_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank)
Errors: [21.0 2 73.0 11 62.0 2 73.0 3 14.0 2 64.0 13 70.0 11 72.0 3 38.0 3 24.0 12 24.0 2 61.0 2 26.0 2 48.0 12 93.0 2 32.0 2 82.0 12 71.0 2 89.0 3 25.0 2 1.0 1 88.0 13 12.0 2 57.0 3 12.0 2]
Total: 1356.0
Mean: 27.12
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2785.2947948000005
Median total errors in population: 1363.0
Error averages by case: (83.77424189999999 2.848 130.62447830000002 13.045 119.99492419999999 2.941 126.02610199999998 3.934 77.7966712 2.893 113.32694489999999 12.24 128.04544649999997 11.199 132.01497700000004 3.836 93.0845581 3.924 75.87466749999999 2.242 77.39709730000003 2.138 119.22898670000001 2.883 80.884108 2.904 106.11032569999999 12.186 143.58033290000003 3.938 92.88124759999997 2.931 138.80078450000002 11.136 128.31471209999995 2.886 140.3532258 3.916 80.137178 2.94 62.94095190000001 2.11 144.76359100000002 13.029 73.2475288 2.872 111.10181280000003 3.898 73.2269001 2.894)
Error minima by case: (11.5429 2 17.2688 7 5.0313 1 22.0918 2 14.0 1 23.2262 9 23.612 9 28.4248 2 28.7248 2 3.2849 1 4.1637 1 49.5541 2 18.0 1 23.3828 9 40.8632 2 4.9068 1 42.7181 8 56.7448 2 19.9929 2 11.7004 1 0.0 0 33.2935 9 0.2376 1 41.6864 2 1.828 1)
Average genome size in population (length): 67.254
Average program size in population (points): 68.254
Average percent parens in population: 0.015
Minimum age in population: 19.0419921875
Maximum age in population: 24.03643798828125
Average age in population: 22.23544860839844
Median age in population: 22.26736450195312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.05
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 23012150
--- Timings ---
Current time: 1529615811123 milliseconds
Total Time:          62.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.1 seconds, 40.2%
Fitness Testing:     29.6 seconds, 47.4%
Report:               7.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 55399.0
Test mean error for best: 27.69950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 44.542920316  
Correct output: 36.9263823022  | Program output: -36.0736176978
Correct output: -12.6268384926 | Program output: -74.6268384926
Correct output: -156.0918084307 | Program output: -83.0918084307
Correct output: 80.9560456736  | Program output: 66.9560456736 
Correct output: -54.9317847731 | Program output: 9.0682152269  
Correct output: 43.2695047863  | Program output: -26.7304952137
Correct output: 127.5752307902 | Program output: 55.5752307902 
Correct output: -118.3834102551 | Program output: -80.3834102551
Correct output: -20.9430876309 | Program output: 3.0569123691  
Correct output: -40.1637221127 | Program output: -16.1637221127
Correct output: 84.4459340278  | Program output: 23.4459340278 
Correct output: 66.9574048532  | Program output: 92.9574048532 
Correct output: 43.0403227949  | Program output: -4.9596772051 
Correct output: -130.5218741194 | Program output: -37.5218741194
Correct output: -26.7988140078 | Program output: -58.7988140078
Correct output: 62.375676743   | Program output: -19.624323257 
Correct output: 90.6509578065  | Program output: 19.6509578065 
Correct output: -146.0070943376 | Program output: -57.0070943376
Correct output: -77.9582317921 | Program output: -52.9582317921
Correct output: -36.4250425838 | Program output: -35.4250425838
Correct output: 52.9510395124  | Program output: -35.0489604876
Correct output: 35.7624010697  | Program output: 23.7624010697 
Correct output: -143.6863764074 | Program output: -86.6863764074
Correct output: -4.8279891918  | Program output: -16.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction tagged_991} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction 15.324902211215957} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_sin} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult})
Best program: (integer_fromfloat float_max float_dup tagged_949 tagged_991 print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap float_add float_dup_items integer_dec integer_dup_items integer_flush 15.324902211215957 integer_dup integer_dup float_sin float_shove integer_dec integer_sub float_sub float_dup_items float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max float_inc integer_max float_div in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult)
Errors: [21.0 2 73.0 11 62.0 2 73.0 3 14.0 2 64.0 13 70.0 11 72.0 3 38.0 3 24.0 12 24.0 2 61.0 2 26.0 2 48.0 12 93.0 2 32.0 2 82.0 12 71.0 2 89.0 3 25.0 2 1.0 1 88.0 13 12.0 2 57.0 3 12.0 2]
Total: 1356.0
Mean: 27.12
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3159.4484059
Median total errors in population: 1363.0
Error averages by case: (98.91545270000002 3.101 144.4006721 12.984 133.76631659999998 3.242 143.7773565 4.235 93.4932086 3.163 126.65610989999996 12.32 141.55560149999997 11.295 146.6826341 4.078 109.72527529999999 4.159 89.8220502 3.025 92.32793820000002 2.53 132.5345971 3.172 98.2320659 3.186 118.9771936 12.194 158.54926129999996 4.185 107.65685229999998 3.246 151.5319458 11.158 141.28657370000005 3.152 155.76981499999997 4.219 96.34336789999999 3.244 78.70283180000001 2.425 157.68525670000002 13.025 87.84331059999998 3.17 127.78612830000003 4.174 87.55459019999999 3.19)
Error minima by case: (21.0 2 17.2688 8 0.7899 1 65.0 2 11.0375 1 41.515 8 23.612 9 31.5018 2 23.1193 2 7.5263 1 14.8506 1 20.8186 2 18.0 1 5.2246 8 85.0 2 13.382 1 12.7303 8 56.7448 2 60.4879 2 17.0 1 0.0 0 10.5467 7 12.0 1 26.0415 2 2.828 1)
Average genome size in population (length): 67.399
Average program size in population (points): 68.399
Average percent parens in population: 0.015
Minimum age in population: 21.2933349609375
Maximum age in population: 25.85543823242188
Average age in population: 23.68960571289062
Median age in population: 23.73666381835938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.055
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 24697125
--- Timings ---
Current time: 1529615815533 milliseconds
Total Time:          67.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.7 seconds, 39.8%
Fitness Testing:     31.9 seconds, 47.6%
Report:               8.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 55458.0
Test mean error for best: 27.72900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 45.542920316  
Correct output: 36.9263823022  | Program output: -35.0736176978
Correct output: -12.6268384926 | Program output: -73.6268384926
Correct output: -156.0918084307 | Program output: -82.0918084307
Correct output: 80.9560456736  | Program output: 67.9560456736 
Correct output: -54.9317847731 | Program output: 10.0682152269 
Correct output: 43.2695047863  | Program output: -25.7304952137
Correct output: 127.5752307902 | Program output: 56.5752307902 
Correct output: -118.3834102551 | Program output: -79.3834102551
Correct output: -20.9430876309 | Program output: 4.0569123691  
Correct output: -40.1637221127 | Program output: -15.1637221127
Correct output: 84.4459340278  | Program output: 24.4459340278 
Correct output: 66.9574048532  | Program output: 93.9574048532 
Correct output: 43.0403227949  | Program output: -3.9596772051 
Correct output: -130.5218741194 | Program output: -36.5218741194
Correct output: -26.7988140078 | Program output: -57.7988140078
Correct output: 62.375676743   | Program output: -18.624323257 
Correct output: 90.6509578065  | Program output: 20.6509578065 
Correct output: -146.0070943376 | Program output: -56.0070943376
Correct output: -77.9582317921 | Program output: -51.9582317921
Correct output: -36.4250425838 | Program output: -34.4250425838
Correct output: 52.9510395124  | Program output: -34.0489604876
Correct output: 35.7624010697  | Program output: 24.7624010697 
Correct output: -143.6863764074 | Program output: -85.6863764074
Correct output: -4.8279891918  | Program output: -15.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_max} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction integer_dup} {:instruction integer_inc} {:instruction float_sin} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_sub} {:instruction integer_div} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank})
Best program: (integer_fromfloat float_max float_dup tagged_949 float_stackdepth print_float integer_max integer_flush float_dup_items integer_rot float_flush float_swap float_add float_dup_items integer_dec integer_dup_items integer_flush in1 integer_dup integer_inc float_sin float_shove integer_dec integer_sub integer_div float_div integer_max integer_div float_inc integer_max float_div in1 in1 integer_pop float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank)
Errors: [20.0 1 72.0 12 61.0 2 74.0 3 13.0 2 65.0 13 69.0 12 71.0 3 39.0 3 25.0 12 25.0 2 60.0 1 27.0 2 47.0 11 94.0 2 31.0 2 81.0 12 70.0 1 90.0 2 26.0 2 2.0 1 87.0 13 11.0 2 58.0 3 11.0 2]
Total: 1350.0
Mean: 27.0
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3096.536556500001
Median total errors in population: 1363.0
Error averages by case: (95.91235539999998 3.047 141.4701274 12.765 131.09445889999992 3.186 139.97667180000002 4.156 90.38027840000001 3.103 125.41232939999998 12.502 138.92255569999995 11.389 143.53048740000003 4.045 107.50616450000001 3.996 88.40060779999996 4.729 90.71541960000002 2.613 129.86242900000002 3.1 94.81903580000001 3.116 116.51358090000002 12.209 156.6842917 3.937 104.906442 3.193 149.20849189999998 11.217 138.63986749999992 3.106 153.70054620000002 4.155 94.48764720000001 3.187 75.9125626 2.229 155.45129310000002 13.049 84.6018418 3.105 125.30884060000005 4.138 84.71022989999996 3.136)
Error minima by case: (10.5429 1 16.2688 9 10.6268 1 23.0918 2 13.0 1 52.9318 9 22.612 8 29.4248 2 30.0 2 3.6414 1 5.1637 1 18.6611 1 18.0 1 22.3828 8 6.0659 2 24.7988 1 41.7181 7 53.2842 1 18.9929 2 17.0 1 0.0 0 32.2935 7 1.2376 1 42.6864 2 2.828 1)
Average genome size in population (length): 68.943
Average program size in population (points): 69.943
Average percent parens in population: 0.015
Minimum age in population: 22.2933349609375
Maximum age in population: 27.22280883789062
Average age in population: 25.16256332397461
Median age in population: 25.22531890869141
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.055
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 26420700
--- Timings ---
Current time: 1529615819501 milliseconds
Total Time:          70.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.2 seconds, 39.7%
Fitness Testing:     33.8 seconds, 47.7%
Report:               8.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 55657.0
Test mean error for best: 27.82850
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 48.542920316  
Correct output: 36.9263823022  | Program output: -32.0736176978
Correct output: -12.6268384926 | Program output: -70.6268384926
Correct output: -156.0918084307 | Program output: -79.0918084307
Correct output: 80.9560456736  | Program output: 70.9560456736 
Correct output: -54.9317847731 | Program output: 13.0682152269 
Correct output: 43.2695047863  | Program output: -22.7304952137
Correct output: 127.5752307902 | Program output: 59.5752307902 
Correct output: -118.3834102551 | Program output: -76.3834102551
Correct output: -20.9430876309 | Program output: 7.0569123691  
Correct output: -40.1637221127 | Program output: -12.1637221127
Correct output: 84.4459340278  | Program output: 27.4459340278 
Correct output: 66.9574048532  | Program output: 96.9574048532 
Correct output: 43.0403227949  | Program output: -0.9596772051 
Correct output: -130.5218741194 | Program output: -33.5218741194
Correct output: -26.7988140078 | Program output: -54.7988140078
Correct output: 62.375676743   | Program output: -15.624323257 
Correct output: 90.6509578065  | Program output: 23.6509578065 
Correct output: -146.0070943376 | Program output: -53.0070943376
Correct output: -77.9582317921 | Program output: -48.9582317921
Correct output: -36.4250425838 | Program output: -31.4250425838
Correct output: 52.9510395124  | Program output: -31.0489604876
Correct output: 35.7624010697  | Program output: 27.7624010697 
Correct output: -143.6863764074 | Program output: -82.6863764074
Correct output: -4.8279891918  | Program output: -12.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction tagged_991} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_sin} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_mult} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_fromfloat float_max float_dup tagged_949 tagged_991 print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap float_add float_dup_items integer_dup integer_dup float_sin float_shove integer_dec integer_sub float_sub float_dup_items float_dec float_yank integer_yankdup float_mult float_sin float_div integer_max float_inc integer_max float_div in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank float_pop)
Errors: [17.0 2 69.0 12 58.0 2 77.0 3 10.0 1 68.0 13 66.0 11 68.0 3 42.0 3 28.0 12 28.0 2 57.0 2 30.0 1 44.0 12 97.0 2 28.0 2 78.0 12 67.0 2 93.0 3 29.0 2 5.0 1 84.0 13 8.0 2 61.0 3 8.0 2]
Total: 1343.0
Mean: 26.86
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2578.501471800001
Median total errors in population: 1357.0
Error averages by case: (73.3636769 2.849 120.04119749999995 12.052 109.79465119999993 2.935 121.92951760000003 3.881 67.90479690000002 2.9 106.39013239999998 12.885 117.29731519999994 11.546 122.24018460000006 3.824 88.67966110000002 3.558 68.53556369999994 9.255 71.01288530000001 2.809 107.81658300000001 2.877 75.6163921 2.908 94.16484740000004 12.148 138.8176581 3.259 82.91439489999998 2.944 127.73157750000007 11.419 116.74605699999995 2.902 136.02699010000003 3.897 75.24504850000002 2.944 53.41982130000003 1.78 134.29854080000004 13.019 61.564829299999985 2.882 106.90583680000003 3.88 61.79631260000001 2.894)
Error minima by case: (12.5429 1 20.2688 9 11.7855 1 21.0918 2 10.0 1 55.1619 9 26.612 8 27.4248 2 30.0 2 10.7756 1 3.1637 1 48.5541 1 18.0 1 26.3828 8 44.4781 2 26.3529 1 45.7181 8 62.349 1 20.9929 2 17.0 1 0.0 0 36.2935 8 0.7624 1 40.6864 2 5.1693 1)
Average genome size in population (length): 74.808
Average program size in population (points): 75.808
Average percent parens in population: 0.013
Minimum age in population: 23.7225341796875
Maximum age in population: 28.36055755615234
Average age in population: 26.68241223144531
Median age in population: 26.72029495239258
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.061
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 28290900
--- Timings ---
Current time: 1529615823780 milliseconds
Total Time:          75.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        29.8 seconds, 39.6%
Fitness Testing:     35.8 seconds, 47.7%
Report:               9.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 55819.0
Test mean error for best: 27.90950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 50.542920316  
Correct output: 36.9263823022  | Program output: -30.0736176978
Correct output: -12.6268384926 | Program output: -68.6268384926
Correct output: -156.0918084307 | Program output: -77.0918084307
Correct output: 80.9560456736  | Program output: 72.9560456736 
Correct output: -54.9317847731 | Program output: 15.0682152269 
Correct output: 43.2695047863  | Program output: -20.7304952137
Correct output: 127.5752307902 | Program output: 61.5752307902 
Correct output: -118.3834102551 | Program output: -74.3834102551
Correct output: -20.9430876309 | Program output: 9.0569123691  
Correct output: -40.1637221127 | Program output: -10.1637221127
Correct output: 84.4459340278  | Program output: 29.4459340278 
Correct output: 66.9574048532  | Program output: 98.9574048532 
Correct output: 43.0403227949  | Program output: 1.0403227949  
Correct output: -130.5218741194 | Program output: -31.5218741194
Correct output: -26.7988140078 | Program output: -52.7988140078
Correct output: 62.375676743   | Program output: -13.624323257 
Correct output: 90.6509578065  | Program output: 25.6509578065 
Correct output: -146.0070943376 | Program output: -51.0070943376
Correct output: -77.9582317921 | Program output: -46.9582317921
Correct output: -36.4250425838 | Program output: -29.4250425838
Correct output: 52.9510395124  | Program output: -29.0489604876
Correct output: 35.7624010697  | Program output: 29.7624010697 
Correct output: -143.6863764074 | Program output: -80.6863764074
Correct output: -4.8279891918  | Program output: -10.8279891918
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction float_dup} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_yankdup} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank})
Best program: (integer_fromfloat float_max float_dup integer_fromfloat float_max float_dup tagged_949 float_dup print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap float_sub integer_yank float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc integer_max float_yankdup in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_min float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank)
Errors: [15.0 2 67.0 12 56.0 2 79.0 3 8.0 2 70.0 12 64.0 12 66.0 3 44.0 3 30.0 12 30.0 1 55.0 2 32.0 2 42.0 2 99.0 2 26.0 2 76.0 12 65.0 2 95.0 3 31.0 2 7.0 2 82.0 12 6.0 2 63.0 3 6.0 2]
Total: 1328.0
Mean: 26.56
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2801.3597521
Median total errors in population: 1356.0
Error averages by case: (81.89959679999998 2.959 127.39695499999996 11.614 116.95284879999997 3.071 131.8522516 4.069 76.34084930000002 3.019 115.8538178 13.041 124.95819639999996 11.402 130.21136460000002 3.929 98.96680840000002 3.934 78.4959619 11.243 81.440469 3.118 115.28773850000002 3.008 85.87385640000001 3.038 101.61634070000001 12.113 148.67380799999995 3.272 90.6065221 3.078 135.17552589999997 11.849 124.08246029999998 2.998 145.73852819999996 4.028 85.47934409999998 3.094 63.20297290000002 2.198 141.53425100000004 13.03 69.48978610000002 3.001 117.02638840000004 4.005 70.0591099 3.033)
Error minima by case: (14.5429 1 14.2688 8 0.2208 1 19.0918 2 8.0 1 29.9405 8 20.612 7 25.4248 2 30.0 2 8.537 1 1.1637 1 46.5541 1 18.0 1 20.3828 2 45.6496 2 14.3928 1 39.7181 6 53.0939 1 22.9929 2 6.9141 1 0.0 0 30.2935 6 2.7624 1 38.6864 2 3.3154 1)
Average genome size in population (length): 80.186
Average program size in population (points): 81.186
Average percent parens in population: 0.012
Minimum age in population: 25.76409912109375
Maximum age in population: 30.08420181274414
Average age in population: 28.07906075668335
Median age in population: 28.11427116394043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.073
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 30295550
--- Timings ---
Current time: 1529615828457 milliseconds
Total Time:          79.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.3 seconds, 39.3%
Fitness Testing:     38.2 seconds, 47.9%
Report:              10.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 56140.0
Test mean error for best: 28.07000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 53.542920316  
Correct output: 36.9263823022  | Program output: -27.0736176978
Correct output: -12.6268384926 | Program output: -65.6268384926
Correct output: -156.0918084307 | Program output: -74.0918084307
Correct output: 80.9560456736  | Program output: 75.9560456736 
Correct output: -54.9317847731 | Program output: 18.0682152269 
Correct output: 43.2695047863  | Program output: -17.7304952137
Correct output: 127.5752307902 | Program output: 64.5752307902 
Correct output: -118.3834102551 | Program output: -71.3834102551
Correct output: -20.9430876309 | Program output: 12.0569123691 
Correct output: -40.1637221127 | Program output: -7.1637221127 
Correct output: 84.4459340278  | Program output: 32.4459340278 
Correct output: 66.9574048532  | Program output: 101.9574048532
Correct output: 43.0403227949  | Program output: 4.0403227949  
Correct output: -130.5218741194 | Program output: -28.5218741194
Correct output: -26.7988140078 | Program output: -49.7988140078
Correct output: 62.375676743   | Program output: -10.624323257 
Correct output: 90.6509578065  | Program output: 28.6509578065 
Correct output: -146.0070943376 | Program output: -48.0070943376
Correct output: -77.9582317921 | Program output: -43.9582317921
Correct output: -36.4250425838 | Program output: -26.4250425838
Correct output: 52.9510395124  | Program output: -26.0489604876
Correct output: 35.7624010697  | Program output: 32.7624010697 
Correct output: -143.6863764074 | Program output: -77.6863764074
Correct output: -4.8279891918  | Program output: -7.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_tan} {:instruction float_min} {:instruction float_cos} {:instruction 16.100463211436917} {:instruction integer_shove} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_pop} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_fromfloat float_max float_dup tagged_949 integer_rot print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap float_add float_dup_items integer_dec integer_dup_items integer_flush in1 float_inc integer_max float_div in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_tan float_min float_cos 16.100463211436917 integer_shove float_div in1 in1 integer_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc integer_pop in1 integer_flush float_pop print_float float_sub float_flush float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank float_pop)
Errors: [12.0 2 64.0 13 53.0 2 82.0 3 5.0 2 73.0 13 61.0 12 63.0 3 47.0 2 33.0 11 33.0 2 52.0 2 35.0 3 39.0 1 102.0 3 23.0 2 73.0 12 62.0 2 98.0 2 34.0 2 10.0 1 79.0 12 3.0 1 66.0 3 3.0 1]
Total: 1317.0
Mean: 26.34
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3027.5621167999993
Median total errors in population: 1356.0
Error averages by case: (89.4655558 2.943 135.7120336 11.903 124.7784874 3.051 142.42491900000002 4.129 83.6462217 3.035 127.22338459999999 13.115 132.68008519999998 11.618 137.46927880000004 3.914 108.5808908 3.975 90.16178430000001 11.521 91.79306710000004 3.183 124.12806310000002 3.018 96.53962260000002 3.057 110.72188130000002 11.903 157.84018229999992 3.304 98.2795835 3.048 142.89670590000003 11.981 133.18354720000002 2.98 154.88869049999997 3.925 94.911442 3.163 72.75197860000002 2.317 148.9492973 13.04 79.33475459999997 2.994 126.47426560000001 3.924 78.68739400000001 2.998)
Error minima by case: (12.0 1 4.2462 8 3.6268 1 19.0918 2 5.0 1 43.1897 9 2.0969 8 25.4248 2 29.0 2 11.7756 1 1.1637 1 20.8186 1 17.0 1 1.8677 1 46.4781 1 17.7988 1 12.7303 6 49.4783 1 22.9929 2 15.094 1 0.0 0 11.7784 7 2.7624 1 38.6864 2 3.0 1)
Average genome size in population (length): 81.26
Average program size in population (points): 82.26
Average percent parens in population: 0.012
Minimum age in population: 26.76409912109375
Maximum age in population: 31.5426139831543
Average age in population: 29.65115139961243
Median age in population: 29.70255374908447
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.869
Total error diversity:				 0.077
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 32327050
--- Timings ---
Current time: 1529615832800 milliseconds
Total Time:          84.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.8 seconds, 39.0%
Fitness Testing:     40.4 seconds, 48.0%
Report:              10.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 56377.0
Test mean error for best: 28.18850
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 55.542920316  
Correct output: 36.9263823022  | Program output: -25.0736176978
Correct output: -12.6268384926 | Program output: -63.6268384926
Correct output: -156.0918084307 | Program output: -72.0918084307
Correct output: 80.9560456736  | Program output: 77.9560456736 
Correct output: -54.9317847731 | Program output: 20.0682152269 
Correct output: 43.2695047863  | Program output: -15.7304952137
Correct output: 127.5752307902 | Program output: 66.5752307902 
Correct output: -118.3834102551 | Program output: -69.3834102551
Correct output: -20.9430876309 | Program output: 14.0569123691 
Correct output: -40.1637221127 | Program output: -5.1637221127 
Correct output: 84.4459340278  | Program output: 34.4459340278 
Correct output: 66.9574048532  | Program output: 103.9574048532
Correct output: 43.0403227949  | Program output: 6.0403227949  
Correct output: -130.5218741194 | Program output: -26.5218741194
Correct output: -26.7988140078 | Program output: -47.7988140078
Correct output: 62.375676743   | Program output: -8.624323257  
Correct output: 90.6509578065  | Program output: 30.6509578065 
Correct output: -146.0070943376 | Program output: -46.0070943376
Correct output: -77.9582317921 | Program output: -41.9582317921
Correct output: -36.4250425838 | Program output: -24.4250425838
Correct output: 52.9510395124  | Program output: -24.0489604876
Correct output: 35.7624010697  | Program output: 34.7624010697 
Correct output: -143.6863764074 | Program output: -75.6863764074
Correct output: -4.8279891918  | Program output: -5.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction float_dup} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_yankdup} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_div} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_fromfloat float_max float_dup integer_fromfloat float_max float_dup tagged_949 float_dup print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap float_sub integer_yank float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc integer_max float_yankdup in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_min float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_div tag_integer_380 float_add float_yank float_pop)
Errors: [10.0 1 62.0 13 51.0 2 84.0 3 3.0 2 75.0 13 59.0 12 61.0 3 49.0 3 35.0 12 35.0 2 50.0 1 37.0 3 37.0 2 104.0 3 21.0 2 71.0 11 60.0 1 100.0 1 36.0 2 12.0 2 77.0 12 1.0 1 68.0 3 1.0 1]
Total: 1310.0
Mean: 26.2
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3471.3778810999997
Median total errors in population: 1345.0
Error averages by case: (107.3072932 3.12 152.06268460000004 12.256 143.30821019999996 3.181 160.60690309999995 4.292 101.74181920000001 2.967 143.99803869999997 13.01 149.38904389999993 11.672 153.809614 3.995 128.4994364 4.101 107.50013579999998 11.47 111.33349600000003 3.322 138.9715744 3.201 116.01155580000001 3.001 125.35274920000002 10.897 177.23816570000002 3.495 116.7967475 3.185 158.51498189999998 11.929 147.1512323 3.173 174.25106779999996 4.106 116.01926449999998 3.281 94.19862529999999 2.537 165.70183559999998 12.895 94.72385720000001 3.05 146.0967056 3.997 95.57784319999996 3.082)
Error minima by case: (10.0 1 9.2201 9 9.7086 1 16.0918 2 3.0 1 1.9318 9 2.877 7 22.4248 2 26.1193 2 7.9431 1 0.1637 1 12.4459 1 18.0 1 3.1062 1 47.4781 1 21.0 1 16.2292 6 8.651 1 23.9929 1 17.0 1 0.0 0 6.8046 6 1.0 1 25.1703 2 1.0 1)
Average genome size in population (length): 80.268
Average program size in population (points): 81.268
Average percent parens in population: 0.013
Minimum age in population: 28.44921875
Maximum age in population: 33.20413112640381
Average age in population: 31.26366834259033
Median age in population: 31.28010559082031
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.081
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 34333750
--- Timings ---
Current time: 1529615837230 milliseconds
Total Time:          88.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.2 seconds, 38.6%
Fitness Testing:     42.8 seconds, 48.3%
Report:              11.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 56377.0
Test mean error for best: 28.18850
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 55.542920316  
Correct output: 36.9263823022  | Program output: -25.0736176978
Correct output: -12.6268384926 | Program output: -63.6268384926
Correct output: -156.0918084307 | Program output: -72.0918084307
Correct output: 80.9560456736  | Program output: 77.9560456736 
Correct output: -54.9317847731 | Program output: 20.0682152269 
Correct output: 43.2695047863  | Program output: -15.7304952137
Correct output: 127.5752307902 | Program output: 66.5752307902 
Correct output: -118.3834102551 | Program output: -69.3834102551
Correct output: -20.9430876309 | Program output: 14.0569123691 
Correct output: -40.1637221127 | Program output: -5.1637221127 
Correct output: 84.4459340278  | Program output: 34.4459340278 
Correct output: 66.9574048532  | Program output: 103.9574048532
Correct output: 43.0403227949  | Program output: 6.0403227949  
Correct output: -130.5218741194 | Program output: -26.5218741194
Correct output: -26.7988140078 | Program output: -47.7988140078
Correct output: 62.375676743   | Program output: -8.624323257  
Correct output: 90.6509578065  | Program output: 30.6509578065 
Correct output: -146.0070943376 | Program output: -46.0070943376
Correct output: -77.9582317921 | Program output: -41.9582317921
Correct output: -36.4250425838 | Program output: -24.4250425838
Correct output: 52.9510395124  | Program output: -24.0489604876
Correct output: 35.7624010697  | Program output: 34.7624010697 
Correct output: -143.6863764074 | Program output: -75.6863764074
Correct output: -4.8279891918  | Program output: -5.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction float_dup} {:instruction tagged_988} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_max} {:instruction integer_flush} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_yankdup} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_565} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank})
Best program: (float_max float_max float_dup tagged_949 integer_rot print_float integer_max float_inc integer_fromfloat integer_swap float_dup tagged_988 float_stackdepth print_float integer_max integer_flush integer_rot float_flush float_swap float_sub integer_yank float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc integer_max float_yankdup in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush tag_float_565 integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_dup_items float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank)
Errors: [10.0 1 62.0 13 51.0 2 84.0 3 3.0 2 75.0 13 59.0 12 61.0 3 49.0 3 35.0 12 35.0 2 50.0 1 37.0 3 37.0 2 104.0 3 21.0 2 71.0 11 60.0 1 100.0 1 36.0 2 12.0 2 77.0 12 1.0 1 68.0 3 1.0 1]
Total: 1310.0
Mean: 26.2
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3281.1102708
Median total errors in population: 1343.0
Error averages by case: (97.25672429999999 3.145 142.0063027 12.404 132.0128288 3.31 154.08238079999995 4.184 91.6889298 2.945 141.38855720000004 12.86 139.58472989999996 11.818 144.61142550000005 4.069 121.784118 4.231 104.7577875 11.485 105.97064360000005 3.267 132.546494 3.23 108.60281389999997 3.031 119.25332979999997 8.076 170.75439279999995 3.497 106.09680100000003 3.312 150.4655999 11.898 141.4225451 3.204 167.8313891999999 4.152 108.79010660000002 3.149 86.66111090000005 2.692 156.12424329999996 12.829 87.50872290000001 3.093 139.53150620000005 4.212 87.17078709999998 3.113)
Error minima by case: (6.0 1 7.8259 9 1.6268 1 65.0 2 1.0 1 43.9318 6 14.169 8 57.0 2 30.0 2 9.9431 1 16.0 1 46.0 1 18.0 1 13.9399 1 85.0 1 15.7988 1 33.2752 7 56.0 1 81.0 1 17.0 1 0.0 0 23.8506 7 1.0 1 49.0 2 1.0 1)
Average genome size in population (length): 83.019
Average program size in population (points): 84.019
Average percent parens in population: 0.012
Minimum age in population: 29.98565101623535
Maximum age in population: 34.81106567382812
Average age in population: 32.71480623149872
Median age in population: 32.73093152046204
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.084
Error (vector) diversity:			 0.095
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 36409225
--- Timings ---
Current time: 1529615841856 milliseconds
Total Time:          93.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.7 seconds, 38.3%
Fitness Testing:     45.2 seconds, 48.5%
Report:              12.2 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_max} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction integer_max} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_tan} {:instruction float_min} {:instruction float_cos} {:instruction 15.657554573977507} {:instruction integer_shove} {:instruction tag_integer_611} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_565} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank})
Best program: (integer_fromfloat float_max float_dup tagged_949 float_stackdepth print_float integer_max integer_flush float_dup_items integer_rot float_flush float_swap float_dup_items integer_rot float_flush float_swap integer_max float_div in1 in1 integer_pop float_inc in1 integer_flush float_frominteger float_inc float_tan float_min float_cos 15.657554573977507 integer_shove tag_integer_611 in1 in1 integer_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush tag_float_565 integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_dup_items float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3555.8343406000004
Median total errors in population: 1328.0
Error averages by case: (107.6531689 3.225 152.07454920000004 12.713 142.40576229999996 3.474 166.0736928 4.156 102.40507910000001 3.352 153.16193349999998 12.895 149.41980999999996 12.062 153.9899127 4.108 134.58793380000003 4.348 117.07718419999999 11.402 118.50487769999998 3.394 141.54666340000003 3.349 122.46407679999999 3.625 128.38715620000002 5.07 182.6638405 3.693 116.61136299999998 3.467 159.78443779999995 11.683 150.24775259999998 3.316 179.6816646 4.101 121.82754479999997 3.385 100.36844049999993 3.206 165.67687769999998 12.495 97.36532330000001 2.916 151.8776522 4.382 97.18964299999995 2.971)
Error minima by case: (3.0 1 9.2688 9 10.6268 1 9.0918 2 0.0 0 11.405 3 2.1833 8 15.4248 2 30.0 2 5.8894 1 3.8363 1 36.5541 1 18.0 1 13.2758 1 51.4781 1 14.0 1 34.7181 8 50.349 1 27.9929 1 3.961 1 0.0 0 25.2935 7 0.0 0 28.6864 2 0.0 0)
Average genome size in population (length): 89.958
Average program size in population (points): 90.958
Average percent parens in population: 0.011
Minimum age in population: 31.76962852478027
Maximum age in population: 36.3173770904541
Average age in population: 34.32358147215843
Median age in population: 34.38208115100861
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.094
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 38658225
--- Timings ---
Current time: 1529615846448 milliseconds
Total Time:          97.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.3 seconds, 38.1%
Fitness Testing:     47.6 seconds, 48.6%
Report:              12.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_frominteger} {:instruction tagged_949} {:instruction float_dup} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction float_cos} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_div} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_fromfloat float_max float_frominteger tagged_949 float_dup print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap float_sub integer_yank float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_dup_items float_dec float_yank integer_yankdup float_frominteger float_sin float_div float_cos in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc integer_max integer_div float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_div tag_integer_380 float_add float_yank float_add float_yank float_pop)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3975.1544910000002
Median total errors in population: 1321.0
Error averages by case: (122.47221270000003 3.398 165.62948239999994 12.894 156.06763469999996 3.85 186.49603379999996 4.635 117.77379740000005 3.677 170.6743388 13.114 162.70730689999994 12.087 168.23248560000002 4.425 154.80654959999998 4.642 136.41994870000002 11.359 137.56497250000004 3.906 156.1859956 3.558 139.84320960000005 4.216 143.9467483 5.058 200.96028689999994 4.372 131.7530356 3.875 173.32085470000004 11.444 164.70973700000005 3.519 198.49483659999996 4.129 141.29596549999994 3.887 119.72688169999996 3.703 178.61856910000003 12.389 113.08291650000002 3.046 171.98521870000005 4.718 113.30347209999994 3.181)
Error minima by case: (0.0 0 2.2688 8 0.6268 1 7.0918 2 0.0 0 1.7357 6 8.612 8 13.4248 2 30.0 2 12.9473 1 8.8363 1 10.4154 1 18.0 1 5.2246 1 56.4781 1 9.0 1 12.7303 1 4.2104 1 32.9929 1 17.0 1 0.0 0 18.2935 6 0.0 0 26.6864 2 0.0 0)
Average genome size in population (length): 98.063
Average program size in population (points): 99.063
Average percent parens in population: 0.010
Minimum age in population: 33.52353668212891
Maximum age in population: 37.98164868354797
Average age in population: 35.57197766923904
Median age in population: 35.59650307893753
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.114
Error (vector) diversity:			 0.131
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 41109925
--- Timings ---
Current time: 1529615851294 milliseconds
Total Time:         102.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.9 seconds, 37.9%
Fitness Testing:     50.1 seconds, 48.9%
Report:              13.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction integer_swap} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction integer_flush} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup})
Best program: (integer_fromfloat float_max float_dup tagged_949 integer_rot print_float integer_max float_inc float_dup_items integer_rot float_flush integer_swap float_add float_dup_items integer_dec integer_dup_items integer_flush in1 float_inc integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc integer_flush integer_sub integer_flush float_inc float_inc float_inc float_inc in1 float_shove float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4502.542476600001
Median total errors in population: 1316.0
Error averages by case: (143.93588410000004 3.427 185.04490989999996 12.87 176.29458819999994 3.964 206.56757689999998 4.978 139.1849118 3.78 192.94498109999995 13.141 182.88807629999994 12.035 188.6884212 4.679 176.14198999999994 4.846 158.41484469999997 11.613 160.01835340000002 4.037 176.65405889999997 3.579 162.35688650000006 4.482 163.96462369999998 5.379 221.3774915999999 4.845 152.50763779999997 3.985 193.3412824 11.327 185.05427430000012 3.538 218.98617199999984 4.013 163.33352219999995 4.063 142.2676463999999 3.911 198.09404069999997 12.35 134.6312144 3.163 192.9361543000001 4.822 134.83993379999995 3.246)
Error minima by case: (1.0 1 5.2688 8 0.3732 1 9.0918 2 0.0 0 41.9318 9 7.8537 8 15.4248 2 30.0 2 6.6605 1 8.8363 1 11.9054 1 15.8342 1 8.0829 1 40.4758 1 12.0 1 11.2525 2 33.3633 1 32.9929 1 17.0 1 0.0 0 1.8278 6 0.0 0 28.6864 2 0.0 0)
Average genome size in population (length): 105.921
Average program size in population (points): 106.921
Average percent parens in population: 0.010
Minimum age in population: 34.69034934043884
Maximum age in population: 38.99026089906693
Average age in population: 36.88825557869673
Median age in population: 36.93567141890526
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.099
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 43758050
--- Timings ---
Current time: 1529615856221 milliseconds
Total Time:         107.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.3 seconds, 37.4%
Fitness Testing:     53.1 seconds, 49.3%
Report:              14.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_frominteger} {:instruction tagged_949} {:instruction float_dup} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction integer_rot} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction float_cos} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_div} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_fromfloat float_rot float_frominteger tagged_949 float_dup print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap float_sub integer_rot float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_dup_items float_dec integer_sub integer_yankdup float_frominteger float_sin float_div float_cos in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc integer_max integer_div float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_div tag_integer_380 float_add float_yank float_add float_yank float_pop)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3968.5081113000006
Median total errors in population: 1310.0
Error averages by case: (122.35279689999997 3.274 164.74371950000005 12.856 156.0870517 3.544 188.394612 4.687 117.71165020000001 3.467 170.48070589999995 13.071 161.37317819999993 11.914 168.21209170000003 4.29 156.68629569999996 4.467 135.33746789999998 11.574 137.7299793 3.661 154.37615499999998 3.397 142.67179430000002 4.206 140.3152049 5.129 202.39672920000007 4.517 131.26849909999999 3.544 171.05551590000002 11.214 162.5829601 3.383 200.16436020000003 3.813 143.00755349999997 3.783 121.34814049999994 3.655 177.66247499999994 12.276 111.7144765 2.724 173.84099900000007 4.381 111.26369909999995 2.903)
Error minima by case: (0.0 0 1.2688 8 1.6268 1 7.0918 2 0.0 0 34.2392 9 1.8815 8 13.4248 2 30.0 2 8.9968 1 9.8363 1 34.5541 1 18.0 1 1.6176 1 57.4781 1 8.0 1 3.8202 2 47.0 1 33.9929 1 13.2567 1 0.0 0 3.2445 7 0.0 0 26.6864 2 0.0 0)
Average genome size in population (length): 106.543
Average program size in population (points): 107.543
Average percent parens in population: 0.009
Minimum age in population: 36.04295241832733
Maximum age in population: 40.20187076926231
Average age in population: 38.2324728282094
Median age in population: 38.25361013412476
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.103
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 46421750
--- Timings ---
Current time: 1529615861044 milliseconds
Total Time:         112.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.7 seconds, 37.1%
Fitness Testing:     55.8 seconds, 49.7%
Report:              14.7 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction integer_rot} {:instruction print_float} {:instruction integer_sub} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_yankdup} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_539} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc})
Best program: (integer_fromfloat float_max float_dup tagged_949 integer_rot print_float integer_sub float_inc float_dup_items integer_rot float_flush float_swap float_sub integer_yank float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc integer_max float_yankdup in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush tag_float_539 integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult float_inc float_inc in1 integer_flush float_pop integer_pop float_inc)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4336.790889100001
Median total errors in population: 1310.0
Error averages by case: (137.28484609999998 3.649 178.57861499999999 12.827 170.028389 3.637 201.53019519999998 4.987 132.80466859999999 3.762 185.53530039999993 13.045 175.8470970999999 11.94 182.00708570000003 4.343 171.29131430000004 4.559 150.7260333 11.675 153.29448460000003 3.827 168.0858636 3.819 157.77732030000004 4.503 154.95840710000004 5.193 216.8104884999999 4.861 146.05296349999992 3.645 185.27077659999995 11.205 176.0660495 3.809 214.24299419999994 4.279 158.39867339999998 4.073 137.2536003 3.956 191.66349879999996 12.276 126.33473449999998 2.817 188.03720490000003 4.529 126.6492846 3.045)
Error minima by case: (0.0 0 6.2688 8 12.6632 1 4.0918 2 0.0 0 1.6942 8 12.612 8 10.4248 2 30.0 2 16.0 1 1.4953 1 6.9633 1 10.5252 1 12.3828 1 58.4781 1 5.3424 1 15.1069 2 13.1683 1 34.9929 1 17.0 1 0.0 0 22.2935 8 0.0 0 23.6864 2 0.0 0)
Average genome size in population (length): 105.54
Average program size in population (points): 106.54
Average percent parens in population: 0.010
Minimum age in population: 37.09937000274658
Maximum age in population: 41.57029518485069
Average age in population: 39.60724090315402
Median age in population: 39.61671054363251
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.102
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 49060350
--- Timings ---
Current time: 1529615865985 milliseconds
Total Time:         117.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.2 seconds, 36.8%
Fitness Testing:     58.7 seconds, 50.0%
Report:              15.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction tagged_1028} {:instruction float_rot} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_swap} {:instruction integer_flush} {:instruction print_float} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction float_cos} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_div} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_fromfloat float_max float_dup tagged_949 tagged_1028 float_rot integer_dup integer_fromfloat float_max float_dup tagged_949 float_stackdepth print_float integer_swap integer_flush print_float integer_rot float_flush float_swap float_add integer_rot float_flush float_swap float_add float_dup_items integer_dup float_dup_items float_dec float_yank integer_yankdup float_frominteger float_sin float_div float_cos in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc integer_max integer_div float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_div tag_integer_380 float_add float_yank float_add float_yank float_pop)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4077.8278337999996
Median total errors in population: 1308.0
Error averages by case: (125.95319189999996 3.372 168.80293310000002 12.899 159.86829539999997 3.223 190.58297859999996 4.635 120.91473069999996 3.513 177.24951499999997 13.117 166.39840179999993 12.013 171.37917240000002 4.007 159.65499149999997 4.16 141.69238109999998 11.665 144.0630039 3.399 159.6255412 3.517 146.42920690000008 4.252 145.4657162 5.071 206.54943399999996 4.526 135.0060833 3.226 176.8367397 11.247 168.18783210000004 3.509 203.76928319999996 3.903 147.0177912 3.719 125.6499597 3.601 182.04810830000002 12.33 116.9632079 2.428 176.6841185 4.114 116.97721619999999 2.612)
Error minima by case: (0.0 0 2.2688 7 2.6963 1 6.0918 2 0.0 0 54.9825 10 1.8637 7 12.4248 2 30.0 2 7.9188 1 11.8363 1 0.9218 1 16.5667 1 8.3828 1 59.4781 1 4.3424 1 21.1484 1 7.1269 1 35.9929 1 17.0 1 0.0 0 3.4201 7 0.0 0 25.6864 2 0.0 0)
Average genome size in population (length): 104.349
Average program size in population (points): 105.349
Average percent parens in population: 0.010
Minimum age in population: 38.09937000274658
Maximum age in population: 42.85974523425102
Average age in population: 40.95595955267549
Median age in population: 41.03179397061467
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.094
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 51669125
--- Timings ---
Current time: 1529615870647 milliseconds
Total Time:         122.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.7 seconds, 36.6%
Fitness Testing:     61.2 seconds, 50.2%
Report:              16.0 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction integer_rot} {:instruction print_float} {:instruction integer_sub} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction float_sub} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_yankdup} {:instruction in1} {:instruction float_sin} {:instruction float_div} {:instruction float_cos} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_div} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank} {:instruction float_add} {:instruction float_yank} {:instruction float_flush})
Best program: (integer_fromfloat float_max float_dup tagged_949 integer_rot print_float integer_sub float_inc float_dup_items integer_rot float_flush float_swap float_sub integer_yank float_dec float_yank integer_yankdup float_frominteger float_sin float_div float_sub integer_div float_inc integer_max float_yankdup in1 float_sin float_div float_cos in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc integer_max integer_div float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_div tag_integer_380 float_add float_yank float_add float_yank float_flush)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4290.8371809
Median total errors in population: 1303.0
Error averages by case: (134.76748299999994 3.57 176.96295109999997 12.953 167.84016070000004 3.374 199.01208210000001 4.842 129.85227840000002 3.708 185.5306764 13.137 174.67067099999994 12.08 179.79360950000006 4.123 168.41941720000003 4.311 150.67724920000003 11.683 152.5724398 3.485 167.18272319999994 3.727 155.50936560000002 4.439 154.54324360000004 5.005 214.67748109999994 4.734 143.3777036 3.366 184.8984171 11.275 175.58390930000002 3.674 211.93693610000003 4.083 155.82836720000003 3.89 134.74202099999994 3.82 190.1639418 12.324 124.72880970000001 2.556 185.25856960000002 4.269 125.19567359999999 2.683)
Error minima by case: (1.0 1 2.2688 8 11.6075 1 6.0918 2 0.0 0 54.9937 8 4.8167 8 12.4248 2 30.0 2 16.0 1 3.8363 1 33.5541 1 18.0 1 8.3828 1 51.4781 1 12.0 1 27.7181 2 47.349 1 27.9929 1 17.0 1 0.0 0 18.2935 6 0.0 0 25.6864 2 0.0 0)
Average genome size in population (length): 103.252
Average program size in population (points): 104.252
Average percent parens in population: 0.010
Minimum age in population: 40.21917485445738
Maximum age in population: 44.19581574946642
Average age in population: 42.36489916272089
Median age in population: 42.4024269785732
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.095
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 54250500
--- Timings ---
Current time: 1529615875411 milliseconds
Total Time:         126.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.2 seconds, 36.4%
Fitness Testing:     63.9 seconds, 50.4%
Report:              16.6 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction float_max} {:instruction float_frominteger} {:instruction tagged_949} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction integer_flush} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup})
Best program: (integer_fromfloat float_max float_dup integer_fromfloat float_max float_dup float_max float_frominteger tagged_949 float_dup_items integer_dec integer_dup_items integer_flush in1 float_inc integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_dec float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc integer_flush integer_sub integer_flush float_inc float_inc float_inc float_inc in1 float_shove float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4428.2459327
Median total errors in population: 1308.0
Error averages by case: (140.19900329999996 3.634 182.17717879999998 12.916 173.74560639999996 3.461 204.58637869999998 4.906 135.57127700000004 3.812 191.00999000000004 13.083 179.73716939999989 12.07 184.9741230000001 4.258 173.77444619999997 4.404 156.4839449 11.738 157.93563029999996 3.551 172.88409530000004 3.792 161.0719361 4.524 160.38758819999998 5.117 219.2143348 4.809 149.56110189999998 3.466 189.8808757 11.273 181.5342786000001 3.765 216.73271210000004 4.161 160.86694649999998 3.948 139.72001 3.88 194.78415959999995 12.324 131.1026452 2.688 190.6018398 4.373 130.99466089999996 2.761)
Error minima by case: (1.0 1 2.2688 8 9.6268 1 7.0918 2 0.0 0 26.7341 8 8.612 8 13.4248 2 30.0 2 16.0 1 7.8363 1 1.9683 1 4.1339 1 0.3953 1 48.856 1 7.0 1 0.3827 2 8.1734 1 31.9929 1 3.7077 1 0.0 0 8.1207 7 0.0 0 26.6864 2 0.0 0)
Average genome size in population (length): 103.756
Average program size in population (points): 104.756
Average percent parens in population: 0.010
Minimum age in population: 41.32840233296156
Maximum age in population: 45.60103824920952
Average age in population: 43.73373770768009
Median age in population: 43.77086569461972
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.097
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 56844575
--- Timings ---
Current time: 1529615880089 milliseconds
Total Time:         131.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.7 seconds, 36.3%
Fitness Testing:     66.5 seconds, 50.6%
Report:              17.2 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_times} {:instruction tagged_949} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_max} {:instruction integer_flush} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_frominteger} {:instruction 39} {:instruction float_tan} {:instruction float_min} {:instruction float_cos} {:instruction 15.657554573977507} {:instruction integer_shove} {:instruction tag_integer_611} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction float_cos} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank})
Best program: (integer_fromfloat float_max float_dup_times tagged_949 float_stackdepth print_float integer_max integer_flush float_dup_items float_yank integer_rot float_flush float_swap float_add integer_rot float_flush float_swap float_add in1 integer_pop float_inc integer_max integer_dec integer_dup_items integer_flush integer_fromfloat float_inc integer_max float_inc in1 integer_pop integer_flush float_frominteger 39 float_tan float_min float_cos 15.657554573977507 integer_shove tag_integer_611 integer_yankdup float_frominteger float_sin float_div float_cos in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc integer_max integer_div float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_pop print_float float_sub integer_yankdup integer_sub in1 integer_flush float_pop float_dup_items float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add float_yank)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4815.6220288
Median total errors in population: 1308.0
Error averages by case: (155.8115179 3.813 197.53082970000003 12.877 188.89775469999995 3.67 219.6939442 5.116 150.9606641 3.975 205.0822423 13.112 195.0602778999999 12.053 199.8390951 4.426 189.79973239999995 4.609 171.9119632 11.724 173.62457089999995 3.807 187.5255008 3.968 175.40057769999996 4.687 175.13803090000005 5.367 234.7386508 5.003 165.28691759999992 3.675 204.74189439999998 11.215 195.59475480000006 3.952 232.250845 4.41 177.37526929999996 4.174 156.66085949999993 4.095 210.2977577999999 12.301 146.40431660000002 2.881 206.31000949999998 4.574 147.20905169999997 2.991)
Error minima by case: (0.0 0 2.2688 8 11.8161 1 6.0918 2 0.0 0 54.9152 9 8.612 7 12.4248 2 29.0 2 5.6605 1 11.8363 1 2.9952 1 11.9539 1 8.3828 1 59.4781 1 9.0 1 16.5356 1 9.2002 1 35.9929 1 16.0 1 0.0 0 18.2935 7 0.0 0 25.6864 2 0.0 0)
Average genome size in population (length): 102.808
Average program size in population (points): 103.808
Average percent parens in population: 0.010
Minimum age in population: 42.32840233296156
Maximum age in population: 46.91008602548391
Average age in population: 45.07509198222496
Median age in population: 45.11602552933618
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.1
Error (vector) diversity:			 0.11
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 59415100
--- Timings ---
Current time: 1529615884958 milliseconds
Total Time:         136.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.3 seconds, 36.1%
Fitness Testing:     69.2 seconds, 50.7%
Report:              17.8 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction tag_float_496} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction tagged_949} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction float_tan} {:instruction float_min} {:instruction float_cos} {:instruction 16.100463211436917} {:instruction integer_shove} {:instruction float_div} {:instruction float_dup_items} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction print_integer} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult})
Best program: (float_swap tag_float_496 float_dup_items integer_dec integer_dup_items tagged_949 integer_fromfloat float_add float_dup_items integer_dec integer_rot float_flush float_swap float_add float_dup_items integer_dec integer_dup_items integer_flush in1 float_inc integer_max float_div in1 in1 integer_pop float_inc float_tan float_min float_cos 16.100463211436917 integer_shove float_div float_dup_items in1 integer_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float print_integer float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4583.589883199999
Median total errors in population: 1310.0
Error averages by case: (146.5545471 3.722 188.8053461 12.911 178.64593879999995 3.668 211.77146980000003 5.061 141.89536500000003 3.906 196.39715699999996 13.12 185.56005229999994 12.071 191.40530569999996 4.375 180.70693119999999 4.592 162.00956200000002 11.624 163.41895060000002 3.821 178.9444574 3.902 167.63437790000006 4.609 166.0495171 5.43 225.04677359999994 4.954 154.96767269999998 3.675 195.07811370000002 11.254 187.3990327000001 3.878 222.8806748 4.337 166.90402589999997 4.144 146.07742329999996 4.054 200.1650000999999 12.364 138.43606640000004 2.86 197.4788889000001 4.566 137.41123309999998 3.048)
Error minima by case: (2.0 1 2.8259 8 0.6268 1 0.9082 2 0.0 0 42.9318 8 4.8167 8 5.4248 2 30.0 2 8.9431 1 5.4626 1 15.4243 1 2.0643 1 8.9399 1 59.4781 1 5.3424 1 6.646 2 21.6293 1 35.9929 1 16.9582 1 0.0 0 1.2868 6 0.0 0 18.6864 2 0.0 0)
Average genome size in population (length): 102.758
Average program size in population (points): 103.758
Average percent parens in population: 0.010
Minimum age in population: 43.57132270932198
Maximum age in population: 48.53502834960818
Average age in population: 46.519188034683
Median age in population: 46.55389884626493
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.949
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.101
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 61984375
--- Timings ---
Current time: 1529615889837 milliseconds
Total Time:         141.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.6 seconds, 35.9%
Fitness Testing:     71.9 seconds, 50.9%
Report:              18.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_975} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_min} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction float_cos} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_pop} {:instruction float_sin} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_yankdup} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_mult} {:instruction tag_integer_380} {:instruction float_add})
Best program: (integer_fromfloat float_max float_dup tagged_975 integer_rot print_float integer_max float_inc float_dup_items integer_rot integer_dup_times float_swap float_max float_dup_items integer_min integer_dup_items integer_flush in1 float_inc integer_max float_frominteger float_sin float_div integer_max integer_div float_dup_items float_dec float_yank integer_yankdup float_frominteger float_sin float_div float_cos in1 integer_pop float_inc in1 integer_stackdepth float_pop float_sin float_frominteger float_sin float_div integer_max integer_div float_inc integer_max float_yankdup in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc in1 integer_flush float_pop integer_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc float_inc in1 float_dec float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_mult tag_integer_380 float_add)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3879.7909875
Median total errors in population: 1303.0
Error averages by case: (117.9891276 3.305 161.52596640000002 12.928 153.26851439999996 3.083 182.9565123 4.552 112.98067370000003 3.481 169.79792969999997 13.099 158.39981399999996 12.061 163.73085659999998 3.901 151.37461419999997 3.993 134.14972570000006 11.677 135.30270090000002 3.22 151.4856214 3.464 138.9978895 4.205 138.20228819999997 4.884 199.07240789999997 4.435 127.38945130000002 3.085 168.58662370000005 11.247 159.89762430000002 3.442 196.5853447 3.799 139.0789028 3.589 117.43702669999999 3.492 175.0979437 12.359 108.2572165 2.311 168.44787529999996 3.982 107.74533599999998 2.439)
Error minima by case: (0.0 0 0.1741 8 2.6268 1 7.0918 2 0.0 0 54.9318 8 6.169 8 13.4248 2 26.6023 2 16.0 1 5.8363 1 34.5541 1 18.0 1 5.9399 1 51.0706 1 8.0 1 18.5474 1 47.0 1 29.9929 1 17.0 1 0.0 0 7.6931 6 0.0 0 18.1703 2 0.0 0)
Average genome size in population (length): 102.721
Average program size in population (points): 103.721
Average percent parens in population: 0.010
Minimum age in population: 44.57132270932198
Maximum age in population: 50.01609037304297
Average age in population: 47.88805504536233
Median age in population: 47.95288456894923
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.089
Error (vector) diversity:			 0.099
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 64553125
--- Timings ---
Current time: 1529615894754 milliseconds
Total Time:         146.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.1 seconds, 35.7%
Fitness Testing:     74.7 seconds, 51.1%
Report:              19.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_1000} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_swap} {:instruction tagged_975} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_pop} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction integer_flush} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup})
Best program: (integer_fromfloat float_max float_dup tagged_1000 float_stackdepth print_float integer_swap tagged_975 integer_dup_items integer_flush float_flush float_swap float_sub integer_yank float_dec float_pop integer_dec integer_dup_items integer_flush in1 float_inc integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_dec float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc integer_flush integer_sub integer_flush float_inc float_inc float_inc float_inc in1 float_shove float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4581.4579079
Median total errors in population: 1308.0
Error averages by case: (145.5798486 3.605 189.50748869999995 12.971 180.54538250000002 3.518 210.6556218 4.94 140.51285030000003 3.794 195.6645386 13.16 187.02619369999996 12.123 189.8977589 4.23 180.43434169999992 4.419 161.09972269999997 11.842 164.6153679 3.618 177.88321329999997 3.77 165.7417183 4.499 165.44584630000003 5.204 225.98825549999995 4.811 156.32934259999988 3.517 196.8102944 11.298 186.13315050000003 3.756 223.36944289999997 4.221 168.11400449999996 4.01 147.1800766 3.905 202.3994349 12.389 136.01713320000005 2.653 197.01177320000002 4.416 137.99610629999995 2.83)
Error minima by case: (0.0 0 3.7312 9 6.3732 1 6.0918 2 0.0 0 54.4546 3 2.612 1 12.4248 2 30.0 2 16.0 1 7.8363 1 13.968 1 3.5206 1 2.3828 1 55.4781 1 7.7988 1 8.1023 1 20.173 1 31.9929 1 17.0 1 0.0 0 5.0979 7 0.0 0 25.6864 2 0.0 0)
Average genome size in population (length): 103.042
Average program size in population (points): 104.042
Average percent parens in population: 0.010
Minimum age in population: 45.57132270932198
Maximum age in population: 51.40367193531711
Average age in population: 49.28119336006988
Median age in population: 49.35648355539888
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.099
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.11
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 67129625
--- Timings ---
Current time: 1529615899571 milliseconds
Total Time:         150.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.5 seconds, 35.5%
Fitness Testing:     77.4 seconds, 51.3%
Report:              19.9 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_min} {:instruction float_cos} {:instruction 15.657554573977507} {:instruction integer_shove} {:instruction in1} {:instruction integer_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_565} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub})
Best program: (integer_fromfloat float_dup_items float_sub float_max float_dup tagged_949 float_dup_items integer_rot float_flush float_swap float_sub integer_shove float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc integer_max float_yankdup float_dup_times float_dup_items float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc integer_dup_items float_min float_cos 15.657554573977507 integer_shove in1 integer_inc integer_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush tag_float_565 integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4545.574036
Median total errors in population: 1303.0
Error averages by case: (144.53494819999995 3.579 187.75250090000003 13.031 178.33251459999994 3.423 209.28841920000002 4.843 139.4166194 3.739 194.8813386 13.206 185.2327887 12.163 189.14256559999998 4.184 178.2377401 4.332 161.4718092 11.912 163.05568409999998 3.571 176.65591789999996 3.743 165.98817769999997 4.505 165.17286470000005 5.046 224.23301679999994 4.765 153.80789079999997 3.425 195.1178456 11.309 185.08311019999996 3.728 221.51441279999995 4.1 166.02938329999998 3.926 145.21965299999994 3.825 200.56384939999992 12.44 135.45288459999995 2.606 194.8915928 4.328 135.99450779999998 2.773)
Error minima by case: (0.0 0 11.8425 7 2.792 1 4.0918 1 0.0 0 15.1083 9 18.1857 2 10.4248 2 30.0 2 15.9431 1 0.3402 1 0.9582 1 18.0 1 9.1751 1 48.7448 1 5.0 1 1.8508 1 44.0 1 37.9929 1 2.975 1 0.0 0 26.9577 6 0.0 0 23.6864 2 0.0 0)
Average genome size in population (length): 102.973
Average program size in population (points): 103.973
Average percent parens in population: 0.010
Minimum age in population: 46.57132270932198
Maximum age in population: 52.56719337269897
Average age in population: 50.655508844595
Median age in population: 50.72440566850128
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.092
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 69704250
--- Timings ---
Current time: 1529615904345 milliseconds
Total Time:         155.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.1 seconds, 35.4%
Fitness Testing:     80.0 seconds, 51.4%
Report:              20.6 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction float_max} {:instruction float_frominteger} {:instruction tagged_949} {:instruction float_dup} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_min} {:instruction integer_yank} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction float_flush} {:instruction float_flush} {:instruction tag_float_565} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_rot})
Best program: (integer_fromfloat float_max float_dup integer_fromfloat float_max float_dup float_max float_frominteger tagged_949 float_dup print_float integer_max float_inc float_dup_items integer_rot float_dup_items float_dec integer_sub integer_yankdup float_frominteger float_min integer_yank in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_flush float_frominteger integer_min integer_yankdup float_flush float_flush tag_float_565 integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult float_inc float_inc in1 integer_flush float_pop integer_pop float_rot)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4800.456551500001
Median total errors in population: 1303.0
Error averages by case: (155.2883095 3.857 196.3212381 13.0 187.74332760000004 3.69 220.4911531 5.146 150.81687829999996 4.006 204.06809570000001 13.126 193.51863969999997 12.132 199.3547974 4.429 190.55774509999992 4.627 170.10196710000002 11.734 173.03601980000005 3.837 186.40854699999997 4.021 176.09299409999997 4.73 172.82972350000003 5.265 235.04238159999989 5.032 164.3634512 3.708 203.1674471 11.273 194.31173270000005 4.006 232.70837959999992 4.458 177.86869439999992 4.243 156.05840119999993 4.138 209.11741679999997 12.373 145.12225840000002 2.893 207.0982826 4.597 145.60266989999994 3.045)
Error minima by case: (0.0 0 2.2688 8 1.6268 1 6.0918 2 0.0 0 3.0017 8 5.8167 8 12.4248 2 30.0 2 1.8224 1 10.695 1 17.9755 1 18.0 1 8.3828 1 58.4781 1 4.0333 1 27.7181 2 11.7705 1 34.9929 1 17.0 1 0.0 0 9.9401 7 0.0 0 25.6864 2 0.0 0)
Average genome size in population (length): 103.248
Average program size in population (points): 104.248
Average percent parens in population: 0.010
Minimum age in population: 49.11831686785445
Maximum age in population: 54.10484280803939
Average age in population: 52.09569691576087
Median age in population: 52.10716098966077
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.123
Error (vector) diversity:			 0.133
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 72285875
--- Timings ---
Current time: 1529615909289 milliseconds
Total Time:         160.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.5 seconds, 35.2%
Fitness Testing:     82.7 seconds, 51.5%
Report:              21.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction integer_rot} {:instruction print_float} {:instruction integer_sub} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_inc} {:instruction float_swap} {:instruction integer_inc} {:instruction integer_shove} {:instruction integer_sub} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_yankdup} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_539} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_max} {:instruction integer_mod} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult})
Best program: (integer_fromfloat float_max float_dup tagged_949 integer_rot print_float integer_sub float_inc float_dup_items float_dup_items integer_rot float_inc float_swap integer_inc integer_shove integer_sub float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc integer_max float_yankdup in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_swap float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush tag_float_539 integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_fromfloat integer_yankdup integer_sub integer_yankdup integer_sub integer_mult float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_dup_items float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_max integer_mod float_pop float_dup_items float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4607.078968700001
Median total errors in population: 1303.0
Error averages by case: (148.41274280000005 3.666 190.21418439999997 12.998 180.87999680000001 3.57 213.389954 5.022 143.7058481 3.872 196.39178600000002 13.164 186.18150819999994 12.134 192.90961270000005 4.294 181.2139794 4.488 162.07705240000004 11.772 163.83417440000005 3.676 179.53592969999994 3.846 168.60235310000013 4.593 166.18470000000005 5.232 226.48078429999995 4.921 156.56305830000002 3.573 195.5502737 11.302 187.75031150000004 3.839 224.5587546 4.274 168.62695749999995 4.096 147.50277389999997 3.997 202.24402609999993 12.408 138.49807380000004 2.717 197.90340690000005 4.46 137.07272609999995 2.88)
Error minima by case: (0.0 0 5.2688 8 1.6268 1 65.0 2 0.0 0 5.2666 9 2.6331 2 51.0 2 24.6023 2 11.8829 1 9.5015 1 4.0016 1 18.0 1 11.3828 1 38.0706 1 9.7988 1 6.1478 2 50.0 1 81.0 1 17.0 1 0.0 0 13.467 9 0.0 0 16.1703 2 0.0 0)
Average genome size in population (length): 103.424
Average program size in population (points): 104.424
Average percent parens in population: 0.010
Minimum age in population: 50.57401957991533
Maximum age in population: 55.46161514076812
Average age in population: 53.49879771155909
Median age in population: 53.55482281833974
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.101
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 74871975
--- Timings ---
Current time: 1529615914590 milliseconds
Total Time:         165.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.2 seconds, 35.1%
Fitness Testing:     85.6 seconds, 51.6%
Report:              22.0 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_954} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction float_cos} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_565} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_pop})
Best program: (integer_fromfloat float_max float_dup tagged_954 integer_rot print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap float_inc float_dup_items integer_rot float_dup_items float_dec integer_sub integer_yankdup float_frominteger float_sin float_div float_cos in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc integer_max integer_div float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush tag_float_565 integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger float_pop)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4917.592449000001
Median total errors in population: 1303.0
Error averages by case: (160.15684900000005 3.885 201.01627409999998 13.062 192.41690839999995 3.76 223.61965439999992 5.212 155.28105149999996 4.026 208.64905069999995 13.255 198.2923726999999 12.226 203.87329879999996 4.438 193.89793200000003 4.663 174.55871920000004 11.77 178.44405530000003 3.932 191.99620080000003 4.062 179.18281559999997 4.745 178.49461599999992 5.589 238.43280229999993 5.101 169.0517646 3.757 208.28553860000005 11.346 200.08624270000004 4.042 237.68710600000006 4.504 181.17572409999994 4.289 160.71078920000002 4.174 214.92822919999998 12.502 150.73188670000002 2.928 210.62268910000012 4.624 150.96187799999996 3.146)
Error minima by case: (1.0 1 0.2688 8 4.3732 1 53.0182 2 0.0 0 25.6007 7 6.612 2 17.603 2 29.0 2 1.7094 1 10.8327 1 38.0 1 17.0 1 6.3828 1 84.0 1 2.5322 1 25.7181 1 48.0 1 80.0 1 4.7511 1 0.0 0 16.2935 6 0.0 0 48.0 2 0.0 0)
Average genome size in population (length): 104.57
Average program size in population (points): 105.57
Average percent parens in population: 0.010
Minimum age in population: 51.91971496253973
Maximum age in population: 57.02043192190467
Average age in population: 54.94072016894211
Median age in population: 54.98073347252648
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.955
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.955
Total error diversity:				 0.116
Error (vector) diversity:			 0.134
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 77486650
--- Timings ---
Current time: 1529615919421 milliseconds
Total Time:         170.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.6 seconds, 34.9%
Fitness Testing:     88.3 seconds, 51.7%
Report:              22.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction tagged_954} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_inc} {:instruction float_sin} {:instruction integer_max} {:instruction integer_div} {:instruction float_dup_items} {:instruction in2} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction in1} {:instruction float_cos} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_div} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank} {:instruction float_max} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_fromfloat float_max float_dup tagged_954 integer_rot print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap float_inc float_sin integer_max integer_div float_dup_items in2 in1 integer_pop float_inc float_yank integer_yankdup float_frominteger float_sin in1 float_cos in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc integer_max integer_div float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_flush float_frominteger integer_min float_yank integer_mult integer_mult integer_shove float_div tag_integer_380 float_add float_yank float_max float_yank float_pop)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4799.912287700001
Median total errors in population: 1303.0
Error averages by case: (154.7133589 3.783 196.360571 13.167 187.61833819999998 3.668 218.92473090000001 5.124 149.92787239999998 3.947 205.06157389999998 13.294 194.21043269999996 12.288 198.77824850000002 4.363 189.0017445 4.535 171.08584640000004 11.849 174.2763498 3.793 187.0302435 3.971 174.92514630000002 4.7 174.57547310000004 5.257 233.81375849999995 5.0 163.92376369999994 3.685 204.53794760000005 11.388 195.3478619 3.928 232.60577149999997 4.371 176.3930424 4.199 155.78142779999996 4.091 209.9810779999999 12.548 145.5040817 2.818 205.52097629999994 4.56 146.6836482 3.002)
Error minima by case: (0.0 0 0.0736 7 1.6268 1 6.0918 2 0.0 0 18.1941 8 6.2695 8 12.4248 2 29.0 2 12.2906 1 11.8363 1 33.5541 1 17.0 1 6.0403 1 29.0706 1 3.929 1 2.8522 2 47.349 1 35.9929 1 4.8323 1 0.0 0 15.951 7 0.0 0 25.6864 2 0.0 0)
Average genome size in population (length): 104.172
Average program size in population (points): 105.172
Average percent parens in population: 0.010
Minimum age in population: 53.61406876091496
Maximum age in population: 58.38646930263349
Average age in population: 56.37331984788256
Median age in population: 56.40596364369776
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.949
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.118
Error (vector) diversity:			 0.132
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 80091700
--- Timings ---
Current time: 1529615924224 milliseconds
Total Time:         175.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.2 seconds, 34.9%
Fitness Testing:     90.9 seconds, 51.8%
Report:              23.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_swap} {:instruction integer_flush} {:instruction print_float} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction print_integer} {:instruction float_min} {:instruction float_cos} {:instruction 16.100463211436917} {:instruction integer_shove} {:instruction float_div} {:instruction integer_flush} {:instruction in1} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction integer_sub} {:instruction integer_max} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_div} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_dup} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_fromfloat integer_yankdup integer_dup float_stackdepth print_float integer_swap integer_flush print_float integer_rot float_flush float_swap float_add integer_rot float_flush float_swap print_integer float_min float_cos 16.100463211436917 integer_shove float_div integer_flush in1 integer_dec integer_dup_items integer_flush in1 integer_sub integer_max float_inc in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop print_float float_sub float_flush print_float float_sub float_flush float_pop print_float float_sub float_frominteger float_frominteger float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_div tag_integer_380 float_add float_dup float_add float_yank float_pop)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4814.8986786000005
Median total errors in population: 1305.5
Error averages by case: (156.02574679999995 3.824 196.48557159999996 13.031 187.88528850000003 3.777 220.11584789999998 5.207 151.62565860000004 4.024 205.9692571 13.228 193.94741739999995 12.17 199.80342 4.432 189.64421749999997 4.661 172.0159519 11.798 173.32482740000003 3.985 188.11312799999996 4.03 176.2883590000001 4.733 175.47976660000003 5.411 234.06048329999996 5.1 164.61416609999992 3.787 204.1209226 11.289 196.41812130000002 4.016 231.6476006 4.502 176.96125889999996 4.319 156.14008079999994 4.18 209.04468709999998 12.444 147.41543320000005 2.911 206.08488050000014 4.661 146.95458590000004 3.192)
Error minima by case: (0.0 0 4.2688 7 2.3732 1 1.9082 2 0.0 0 1.7439 10 0.1833 6 4.4248 2 30.0 2 4.9968 1 10.8363 1 4.8806 1 2.2274 1 10.3828 1 58.4781 1 8.0 1 2.3543 2 11.0857 1 34.9929 1 15.9582 1 0.0 0 0.1984 7 0.0 0 17.6864 2 0.0 0)
Average genome size in population (length): 103.569
Average program size in population (points): 104.569
Average percent parens in population: 0.010
Minimum age in population: 54.8124994149548
Maximum age in population: 59.94508941038112
Average age in population: 57.74295612200493
Median age in population: 57.78049865368757
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.952
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.952
Total error diversity:				 0.118
Error (vector) diversity:			 0.13
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 82681575
--- Timings ---
Current time: 1529615929538 milliseconds
Total Time:         180.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.8 seconds, 34.7%
Fitness Testing:     93.8 seconds, 51.9%
Report:              24.1 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction tagged_949} {:instruction float_dup} {:instruction in1} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction integer_div} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction 15.657554573977507} {:instruction integer_shove} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_yankdup} {:instruction tag_float_565} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction print_integer} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_flush} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_dup_times integer_dup_times float_frominteger tagged_949 float_dup in1 float_dec float_yank integer_yankdup float_frominteger float_sin float_dec float_yank integer_yankdup float_frominteger float_dup_items integer_rot float_flush float_swap float_sub integer_div float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc 15.657554573977507 integer_shove in1 in1 integer_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 float_yankdup tag_float_565 integer_pop float_inc in1 print_integer float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_dup_items float_sub float_flush tag_integer_380 float_add float_yank float_pop)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4505.0694651
Median total errors in population: 1310.0
Error averages by case: (142.6847924 3.732 184.07280989999998 12.99 175.40955909999997 3.632 208.10550509999993 5.068 138.37220110000004 3.906 193.59535349999993 13.216 181.83529249999998 12.121 187.54871079999998 4.305 177.52108999999996 4.544 159.17433610000003 11.727 161.29906820000008 3.845 176.0741847 3.912 162.53600469999998 4.623 163.16104329999993 5.423 222.40702659999997 4.955 151.9974436 3.653 192.65390110000007 11.272 184.57337099999998 3.902 220.62197740000002 4.357 165.5182802 4.162 143.2336069 4.051 197.20634369999996 12.438 134.12115489999996 2.807 194.3542037 4.535 134.74620459999997 3.07)
Error minima by case: (1.0 1 4.7087 8 12.6268 1 2.0918 2 0.0 0 15.6344 8 0.6331 8 8.4248 2 30.0 2 7.6605 1 0.8664 1 5.8258 1 14.6273 1 1.4052 1 36.0706 1 7.0 1 4.1478 2 0.3792 1 34.9929 1 17.0 1 0.0 0 0.621 6 0.0 0 21.6864 2 0.0 0)
Average genome size in population (length): 104.37
Average program size in population (points): 105.37
Average percent parens in population: 0.010
Minimum age in population: 55.8124994149548
Maximum age in population: 61.29367503347476
Average age in population: 59.13976520743583
Median age in population: 59.17391161325668
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.119
Error (vector) diversity:			 0.138
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 85291350
--- Timings ---
Current time: 1529615934367 milliseconds
Total Time:         185.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.3 seconds, 34.6%
Fitness Testing:     96.5 seconds, 51.9%
Report:              24.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_frominteger} {:instruction tagged_949} {:instruction float_dup} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_min} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_swap} {:instruction float_swap} {:instruction float_sub} {:instruction float_inc} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction print_integer} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction tag_float_29} {:instruction float_min} {:instruction float_cos} {:instruction 15.657554573977507} {:instruction integer_shove} {:instruction in1} {:instruction integer_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_inc} {:instruction float_inc} {:instruction in1} {:instruction float_yankdup} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_629} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_div})
Best program: (integer_fromfloat float_max float_frominteger tagged_949 float_dup print_float integer_max float_inc float_min integer_rot float_dup_times float_swap float_swap float_sub float_inc print_float integer_max float_inc float_dup_items integer_rot float_flush float_swap float_sub print_integer float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc tag_float_29 float_min float_cos 15.657554573977507 integer_shove in1 integer_inc integer_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_inc float_inc in1 float_yankdup float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush tag_float_629 integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_div)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4334.8511581
Median total errors in population: 1303.0
Error averages by case: (136.10808010000002 3.572 177.70606639999997 13.084 168.6108516 3.416 200.6200145 4.861 131.3983267 3.738 188.1387214999999 13.242 175.49489179999995 12.197 181.29216 4.155 169.64693329999997 4.33 153.43914130000005 11.678 154.40024530000002 3.609 170.13350640000002 3.744 156.4004906 4.49 158.63875689999995 5.133 215.8042699999999 4.777 144.5297163 3.416 186.36717559999997 11.309 178.66282100000006 3.738 213.29244859999994 4.134 157.06169420000003 3.949 135.84633449999998 3.88 190.86749469999992 12.486 127.6352129 2.587 186.77178780000006 4.323 127.30801609999996 2.828)
Error minima by case: (0.0 0 8.2688 8 0.6268 1 7.0918 2 0.0 0 17.6919 9 7.923 2 13.4248 2 30.0 2 8.9431 1 10.8363 1 33.0 1 18.0 1 14.3828 1 57.8982 1 4.0 1 33.7181 1 43.0 1 34.9929 1 5.3346 1 0.0 0 24.2935 6 0.0 0 26.6864 2 0.0 0)
Average genome size in population (length): 103.221
Average program size in population (points): 104.221
Average percent parens in population: 0.010
Minimum age in population: 57.5593229742226
Maximum age in population: 62.54749932623963
Average age in population: 60.47700461082267
Median age in population: 60.51935768523708
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.118
Error (vector) diversity:			 0.13
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 87872300
--- Timings ---
Current time: 1529615939395 milliseconds
Total Time:         190.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.9 seconds, 34.6%
Fitness Testing:     99.1 seconds, 52.0%
Report:              25.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_yankdup} {:instruction float_sub} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_shove} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_sin} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_539} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_max} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction tag_float_623} {:instruction float_flush} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_flush} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction tag_float_623} {:instruction float_flush} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc})
Best program: (float_max float_dup_items integer_rot float_flush float_swap float_sub integer_shove float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc integer_max float_yankdup float_sub in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc float_inc in1 float_shove float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 float_sin float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush tag_float_539 integer_pop float_inc in1 integer_dec float_pop print_float float_sub float_max float_frominteger integer_min integer_yankdup tag_float_623 float_flush integer_sub float_inc float_inc float_flush integer_sub float_inc float_inc tag_float_623 float_flush integer_sub float_inc float_inc float_inc float_inc)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4847.5988478
Median total errors in population: 1303.0
Error averages by case: (158.11608789999997 3.938 197.63583460000004 13.233 188.7454066 3.75 221.79776070000003 5.227 153.86125669999998 4.094 205.07156629999997 13.372 195.2310802 12.356 202.27383659999998 4.458 191.81533350000004 4.623 171.2867797 11.805 174.4777543 3.989 188.72514859999998 4.115 178.2078304 4.853 175.32026519999997 5.372 236.20394929999995 5.124 165.757547 3.773 204.74020819999996 11.386 196.70583009999996 4.084 234.01687749999996 4.484 179.09793109999998 4.326 158.2584057 4.239 210.50978999999992 12.618 147.71708690000003 2.946 208.5634379 4.636 147.46584280000002 3.195)
Error minima by case: (0.0 0 2.2688 8 5.3092 1 6.0918 2 0.0 0 0.0977 8 4.4557 7 12.4248 2 30.0 2 11.8829 1 1.0893 1 33.5541 1 18.0 1 4.6849 1 53.5601 1 5.3424 1 14.6505 1 42.9258 1 35.9929 1 0.9965 1 0.0 0 5.2259 7 0.0 0 25.6864 2 0.0 0)
Average genome size in population (length): 103.789
Average program size in population (points): 104.789
Average percent parens in population: 0.010
Minimum age in population: 58.5593229742226
Maximum age in population: 64.02202871164263
Average age in population: 61.87173428181027
Median age in population: 61.90822942524176
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.143
Error (vector) diversity:			 0.164
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 90467550
--- Timings ---
Current time: 1529615944133 milliseconds
Total Time:         195.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.4 seconds, 34.5%
Fitness Testing:    101.7 seconds, 52.0%
Report:              26.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction tag_float_362} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_dup} {:instruction float_rot} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_tan} {:instruction float_min} {:instruction float_cos} {:instruction 15.657554573977507} {:instruction integer_shove} {:instruction tag_integer_716} {:instruction in1} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_inc} {:instruction float_inc} {:instruction in1} {:instruction float_yankdup} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_565} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub})
Best program: (integer_shove tag_float_362 float_dup integer_dup_times integer_rot float_dup float_rot float_dup_items integer_rot float_flush float_swap float_sub integer_yank float_dec float_yank integer_yankdup float_frominteger float_sin integer_stackdepth float_inc integer_max float_div integer_div float_dup_items float_dec float_yank float_stackdepth integer_max float_dup_items integer_rot float_flush float_swap float_sub float_frominteger float_sin float_div integer_max integer_div float_inc integer_max float_dup_items integer_dup float_dup_items float_inc float_tan float_min float_cos 15.657554573977507 integer_shove tag_integer_716 in1 float_stackdepth float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_inc float_inc in1 float_yankdup float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush tag_float_565 integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4637.603966
Median total errors in population: 1310.0
Error averages by case: (149.53769640000002 3.764 189.81502039999998 13.127 180.82080549999995 3.656 212.72590160000004 5.054 145.11087339999997 3.961 198.3078510999999 13.27 187.24936029999998 12.25 194.26250759999996 4.376 182.6574949 4.535 163.98701259999996 11.778 165.63753050000003 3.841 181.46197000000004 3.936 169.19315530000011 4.683 168.0255261 5.393 227.48688089999993 4.97 157.2701396 3.661 197.1259839 11.347 189.6478604000001 3.913 225.12174779999995 4.335 169.75876149999993 4.152 148.7665832 4.067 202.5037090999999 12.515 139.8621997 2.838 199.24054510000013 4.548 139.02484909999993 3.032)
Error minima by case: (1.0 1 7.2688 8 4.3732 1 4.0918 2 0.0 0 16.6344 3 6.1833 2 10.4248 2 29.0 2 3.9431 1 1.8664 1 1.0696 1 9.9127 1 13.3828 1 61.4781 1 4.0 1 5.331 1 33.6062 1 21.3327 1 13.0507 1 0.0 0 4.0937 6 0.0 0 23.6864 2 0.0 0)
Average genome size in population (length): 103.33
Average program size in population (points): 104.33
Average percent parens in population: 0.010
Minimum age in population: 59.5593229742226
Maximum age in population: 65.21001846347701
Average age in population: 63.29063169394459
Median age in population: 63.36174586830958
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.953
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.953
Total error diversity:				 0.125
Error (vector) diversity:			 0.143
Behavioral diversity:				 0.145
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 93051425
--- Timings ---
Current time: 1529615949170 milliseconds
Total Time:         200.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.0 seconds, 34.4%
Fitness Testing:    104.3 seconds, 52.1%
Report:              26.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_swap} {:instruction integer_flush} {:instruction print_float} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction print_integer} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction float_cos} {:instruction print_float} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_div} {:instruction tag_integer_294} {:instruction float_add} {:instruction float_yank} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_fromfloat integer_yankdup integer_dup float_stackdepth print_float integer_swap integer_flush print_float integer_rot float_flush float_swap float_add integer_rot float_flush float_swap print_integer float_yank integer_yankdup float_frominteger float_sin float_dec float_yank integer_yankdup float_frominteger integer_yank float_div integer_max integer_div float_dup_items float_dec float_yank integer_yankdup float_frominteger float_sin float_div float_cos print_float in1 float_inc in1 integer_flush float_pop float_inc float_inc integer_max integer_div float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_max float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_div tag_integer_294 float_add float_yank float_add float_yank float_pop)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5103.633215000001
Median total errors in population: 1303.0
Error averages by case: (167.93704269999998 3.957 208.04290199999994 13.17 199.49965939999998 3.843 230.99649770000005 5.309 163.7462724 4.15 216.3992261 13.336 205.77691289999996 12.348 211.3830631 4.52 201.5339095 4.717 182.99345690000004 12.037 185.2851094999999 3.98 198.54556160000007 4.161 188.83353489999996 4.924 186.15449589999997 5.177 245.4986995 5.198 176.20542620000003 3.845 215.45398210000002 11.407 206.50502970000002 4.14 243.30769850000001 4.548 189.2826069 4.364 168.41630720000003 4.299 220.76346619999993 12.586 157.91726389999997 2.985 218.0077997 4.723 158.2462905 3.177)
Error minima by case: (0.0 0 2.2688 8 5.2994 1 1.9082 1 0.0 0 14.2571 8 8.612 2 4.4248 2 24.1193 2 9.3542 1 9.8664 1 25.5541 1 18.0 1 8.3828 1 58.4781 1 3.4985 1 27.7181 1 39.349 1 34.9929 1 8.7694 1 0.0 0 18.2935 7 0.0 0 17.6864 2 0.0 0)
Average genome size in population (length): 102.469
Average program size in population (points): 103.469
Average percent parens in population: 0.010
Minimum age in population: 62.14057200915249
Maximum age in population: 66.65776585326569
Average age in population: 64.65742809760856
Median age in population: 64.7083530485854
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.126
Error (vector) diversity:			 0.14
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 95613675
--- Timings ---
Current time: 1529615953921 milliseconds
Total Time:         205.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.5 seconds, 34.3%
Fitness Testing:    106.9 seconds, 52.1%
Report:              27.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_flush} {:instruction in1} {:instruction tagged_664} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_mult} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_611} {:instruction in1} {:instruction in1} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_pop} {:instruction print_integer} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction in1} {:instruction integer_flush} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_565} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_pop float_flush float_swap float_sub integer_yank float_dec float_yank integer_yankdup float_frominteger float_sin integer_max float_inc float_dup_items float_flush in1 tagged_664 float_dup_times float_inc float_mult integer_flush float_pop float_inc float_inc in1 float_inc in1 integer_flush float_pop float_inc float_inc tag_integer_611 in1 in1 float_dup_times float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_dec float_pop print_integer float_inc in1 integer_flush float_pop in1 integer_flush float_swap float_inc float_inc float_inc float_inc float_inc in1 integer_flush tag_float_565 integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_frominteger)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4887.272924100002
Median total errors in population: 1303.0
Error averages by case: (158.94883140000002 4.004 197.83253169999998 13.162 189.22238839999997 3.917 223.28517979999992 5.304 155.11881640000007 4.191 208.6777731999999 13.305 195.8678042 12.3 203.15052639999996 4.597 193.19762210000005 4.797 174.8599289 11.862 176.5808429000001 4.054 191.2847059 4.209 179.42871350000013 4.954 178.82259569999997 5.348 236.59793369999997 5.238 166.5184606 3.907 206.4885305 11.415 199.49600560000007 4.194 235.1682183 4.591 180.09489759999997 4.444 158.70359049999993 4.361 210.9704193999999 12.542 149.99271980000003 3.077 209.82280630000002 4.785 149.32208130000004 3.261)
Error minima by case: (1.0 1 1.2688 7 3.9942 1 6.0918 2 0.0 0 5.9227 8 7.612 2 12.4248 2 30.0 2 4.2906 1 1.6775 1 33.0 1 18.0 1 7.3828 1 52.4781 1 4.0 1 26.7181 2 17.8927 1 28.9929 1 17.0 1 0.0 0 17.2935 7 0.0 0 25.6864 2 0.0 0)
Average genome size in population (length): 101.714
Average program size in population (points): 102.714
Average percent parens in population: 0.010
Minimum age in population: 63.45313446231387
Maximum age in population: 68.04943588784045
Average age in population: 66.07572017705967
Median age in population: 66.10687776158125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.95
Total error diversity:				 0.149
Error (vector) diversity:			 0.164
Behavioral diversity:				 0.164
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 98156725
--- Timings ---
Current time: 1529615958771 milliseconds
Total Time:         210.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.1 seconds, 34.3%
Fitness Testing:    109.5 seconds, 52.1%
Report:              28.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction float_dup} {:instruction tagged_922} {:instruction float_dup} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction float_frominteger} {:instruction tagged_949} {:instruction float_dup} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_max} {:instruction float_inc} {:instruction in1} {:instruction float_min} {:instruction float_cos} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction float_cos} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc})
Best program: (float_sub float_max float_dup tagged_949 float_dup tagged_922 float_dup print_float integer_max float_inc float_max float_frominteger tagged_949 float_dup print_float integer_max float_inc in1 integer_flush float_pop integer_max float_inc in1 float_min float_cos integer_yankdup float_frominteger float_sin float_div float_cos in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc integer_stackdepth integer_div float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_inc in1 integer_flush float_pop float_inc float_inc integer_shove float_inc)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5295.2398516
Median total errors in population: 1310.0
Error averages by case: (174.67274780000002 4.214 214.6050979 13.138 206.48203119999988 4.184 239.2036288 5.545 171.34358800000004 4.437 222.34786859999997 13.318 211.9099435999999 12.298 218.41273679999998 4.799 210.00462989999994 5.055 190.2747354 11.839 194.86355730000002 4.356 205.8394467 4.447 193.84264690000003 5.145 192.91527019999998 5.593 252.22911839999995 5.468 184.85358200000005 4.177 221.8573555 11.443 213.87661010000005 4.428 252.50956570000008 4.897 197.2576044 4.671 176.75808379999995 4.618 228.5584334999999 12.541 165.53419350000001 3.326 225.9816246000001 5.015 166.612751 3.541)
Error minima by case: (0.0 0 1.2688 8 2.6268 1 5.0918 2 0.0 0 42.3284 8 0.1833 8 11.4248 2 11.6044 2 10.9431 1 0.1637 1 6.9304 1 5.9214 1 7.3828 1 6.616 1 3.3424 1 7.4363 2 17.7721 1 13.3327 1 17.0 1 0.0 0 0.3989 6 0.0 0 4.8693 2 0.0 0)
Average genome size in population (length): 100.742
Average program size in population (points): 101.742
Average percent parens in population: 0.010
Minimum age in population: 65.02861431286948
Maximum age in population: 69.58245703733853
Average age in population: 67.49280683140888
Median age in population: 67.53793515876349
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.148
Error (vector) diversity:			 0.174
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 100675400
--- Timings ---
Current time: 1529615963333 milliseconds
Total Time:         214.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        73.6 seconds, 34.3%
Fitness Testing:    112.0 seconds, 52.1%
Report:              29.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction tag_float_362} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_dup} {:instruction print_float} {:instruction float_dec} {:instruction float_min} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction float_add} {:instruction in2} {:instruction integer_shove} {:instruction integer_min} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_yankdup} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_tan} {:instruction in1} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dup_items} {:instruction tag_float_565} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup})
Best program: (integer_shove tag_float_362 float_dup integer_dup_times integer_rot float_dup print_float float_dec float_min integer_yankdup float_frominteger float_sin float_dec float_yank integer_yankdup float_frominteger integer_yank float_div integer_max integer_div float_dup_items float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_dup_items float_dec float_yank integer_yankdup float_stackdepth float_add in2 integer_shove integer_min in1 integer_pop float_inc float_inc float_inc float_inc in1 float_yankdup float_pop integer_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_tan in1 integer_flush float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 float_dup_items tag_float_565 integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_mod float_frominteger integer_min integer_yankdup)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4450.949117900001
Median total errors in population: 1303.0
Error averages by case: (139.71970300000004 3.799 182.5714658 13.158 174.78016920000005 3.637 207.96566890000003 5.054 135.69807119999996 3.987 190.20156199999994 13.292 180.28887179999992 12.317 184.92908709999992 4.339 177.48313140000002 4.533 155.6355327 11.837 159.25267860000002 3.831 172.07439229999994 3.981 160.31678900000009 4.71 158.63341170000004 5.303 220.95186999999996 4.955 150.94380859999995 3.662 190.189989 11.4 180.67028259999998 3.935 218.58356149999997 4.344 162.98999599999996 4.163 141.58335570000003 4.079 195.0138608 12.547 130.6405599 2.839 194.18740440000002 4.531 132.3388947 3.072)
Error minima by case: (0.0 0 6.1363 7 5.3966 1 2.0918 2 0.0 0 47.7015 7 5.8167 8 8.4248 2 30.0 2 13.7128 1 6.8363 1 4.9582 1 1.5019 1 0.8545 1 54.4781 1 6.0 1 2.3827 1 16.7705 1 6.3327 1 17.0 1 0.0 0 2.7391 7 0.0 0 21.6864 2 0.0 0)
Average genome size in population (length): 100.319
Average program size in population (points): 101.319
Average percent parens in population: 0.010
Minimum age in population: 66.53467903835912
Maximum age in population: 71.03465912625609
Average age in population: 68.83819370240505
Median age in population: 68.8502771462548
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.137
Error (vector) diversity:			 0.162
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 103183475
--- Timings ---
Current time: 1529615968503 milliseconds
Total Time:         219.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        75.2 seconds, 34.3%
Fitness Testing:    114.6 seconds, 52.2%
Report:              29.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_dup} {:instruction print_float} {:instruction integer_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_sin} {:instruction print_float} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_sub} {:instruction float_add} {:instruction float_sin} {:instruction float_flush} {:instruction float_swap} {:instruction float_add} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_inc} {:instruction float_mult} {:instruction float_sin} {:instruction in2} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction 90.4214388927349} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_pop} {:instruction print_float} {:instruction float_inc} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub})
Best program: (integer_fromfloat float_frominteger float_frominteger float_rot float_dup print_float integer_inc float_inc float_sub integer_yank float_dec float_yank integer_yankdup float_frominteger float_sin float_sin print_float integer_yank integer_dup float_sub float_add float_sin float_flush float_swap float_add integer_dec integer_dup_items integer_flush in1 float_frominteger integer_max float_inc float_mult float_sin in2 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc 90.4214388927349 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_yankdup float_pop float_inc float_inc in1 integer_flush float_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_rot float_pop print_float float_sub float_flush float_pop float_yankdup float_pop print_float float_inc float_flush float_frominteger integer_min integer_yankdup integer_sub)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4682.9026226
Median total errors in population: 1308.0
Error averages by case: (150.2551049 3.853 191.95908149999994 12.962 183.3483455 3.785 217.91402969999996 5.185 147.4727461 4.042 196.43195699999998 13.142 188.99049019999998 12.157 195.0319977 4.489 187.9542590999999 4.71 163.09717809999995 11.841 167.77595220000012 3.99 179.9785728 4.027 172.2474056 4.795 167.03270149999997 5.291 230.5304226999999 5.101 161.183176 3.821 197.577846 11.301 188.01736019999998 4.017 229.15597389999996 4.53 173.62890199999998 4.299 151.4452544 4.208 204.17182229999992 12.375 139.19454689999998 2.942 203.90673810000007 4.71 139.83075819999996 3.197)
Error minima by case: (1.0 1 9.8215 8 10.557 1 1.9082 2 0.0 0 7.071 9 16.1646 8 4.4248 2 7.6044 2 3.2652 1 7.6971 1 4.4459 1 11.9537 1 1.0567 1 35.7097 1 0.1778 1 5.5779 1 0.651 1 6.3327 1 14.4821 1 0.0 0 0.6011 7 0.0 0 0.8693 2 0.0 0)
Average genome size in population (length): 99.847
Average program size in population (points): 100.847
Average percent parens in population: 0.010
Minimum age in population: 67.53467903835912
Maximum age in population: 72.34468440022778
Average age in population: 70.24611028867503
Median age in population: 70.28149397937912
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.136
Error (vector) diversity:			 0.15
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 105679775
--- Timings ---
Current time: 1529615973066 milliseconds
Total Time:         224.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        76.7 seconds, 34.2%
Fitness Testing:    117.1 seconds, 52.2%
Report:              30.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_add} {:instruction integer_yank} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction print_float} {:instruction in1} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction float_inc} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction print_float} {:instruction float_dup_items} {:instruction float_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_swap} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float})
Best program: (float_inc float_dup_items integer_rot float_flush float_swap float_max integer_yank float_dec float_add integer_yank float_flush float_swap float_sub float_sub float_dec float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_inc integer_max print_float in1 float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_dup_items float_dec float_yank float_inc in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc in1 integer_rot float_pop float_inc float_inc in1 integer_flush integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_dup_times float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop print_float float_sub float_flush print_float float_dup_items float_flush float_pop print_float float_sub float_flush float_frominteger float_pop integer_swap float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult integer_shove float_pop float_dup_items float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub float_inc in1 integer_flush float_pop print_float)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4307.815866999998
Median total errors in population: 1303.0
Error averages by case: (136.53515399999998 3.746 176.44063589999996 12.998 168.0506675 3.606 202.79154700000004 5.028 132.73385460000003 3.893 182.6421156 13.156 174.07905289999985 12.136 182.1122261 4.323 171.9981367 4.526 147.95304080000003 11.682 151.87733820000003 3.812 165.99779539999997 3.915 156.85237820000003 4.631 151.14668790000002 5.279 216.23598839999994 4.94 144.88383029999994 3.631 183.26966579999996 11.253 173.832224 3.882 214.61544819999997 4.32 158.325872 4.141 136.46428059999997 4.061 189.58850639999991 12.365 124.0510966 2.763 189.08221630000008 4.471 124.71610759999996 2.982)
Error minima by case: (0.0 0 1.2688 8 11.8161 1 4.0918 2 0.0 0 3.144 8 7.612 8 10.4248 2 23.9058 2 7.6779 1 11.5427 1 1.2308 1 10.2289 1 7.3828 1 36.0442 1 1.8222 1 5.6472 2 4.1869 1 37.9929 1 16.5194 1 0.0 0 3.7774 7 0.0 0 23.6864 2 0.0 0)
Average genome size in population (length): 98.997
Average program size in population (points): 99.997
Average percent parens in population: 0.010
Minimum age in population: 68.53467903835912
Maximum age in population: 73.78010830759301
Average age in population: 71.61237221035744
Median age in population: 71.66473026450028
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.14
Error (vector) diversity:			 0.155
Behavioral diversity:				 0.155
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 108154900
--- Timings ---
Current time: 1529615977951 milliseconds
Total Time:         229.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        78.2 seconds, 34.1%
Fitness Testing:    119.7 seconds, 52.2%
Report:              31.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_dup} {:instruction print_float} {:instruction integer_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_sin} {:instruction print_float} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_add} {:instruction float_sin} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_mult} {:instruction integer_max} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction integer_flush} {:instruction in1} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_inc} {:instruction float_mult} {:instruction float_sin} {:instruction in2} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction 90.4214388927349} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_pop} {:instruction print_float} {:instruction float_inc} {:instruction float_flush} {:instruction float_frominteger} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_sub})
Best program: (integer_fromfloat float_frominteger float_frominteger float_rot float_dup print_float integer_inc float_inc float_sub integer_yank float_dec float_yank integer_yankdup float_frominteger float_sin float_sin print_float integer_yank float_dec float_sub float_add float_sin float_yank integer_yankdup float_frominteger float_sin float_div integer_max integer_div float_dup_items float_frominteger float_sin float_div integer_max integer_div float_mult integer_max float_inc in1 integer_flush float_pop float_inc float_inc integer_max integer_div float_inc float_inc float_div integer_flush in1 float_frominteger integer_max float_inc float_mult float_sin in2 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc 90.4214388927349 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_yankdup float_pop float_inc float_inc in1 integer_flush float_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop print_float float_sub float_flush float_pop float_yankdup float_pop print_float float_inc float_flush float_frominteger print_float float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_dup_items float_sub)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 139
Size: 140
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 4988.6272884
Median total errors in population: 1303.0
Error averages by case: (164.210689 3.927 203.70870590000004 13.088 194.80028629999995 3.779 226.54237680000006 5.228 159.77870869999995 4.164 211.26760040000005 13.255 201.31385549999996 12.258 207.87778989999995 4.546 196.84601890000002 4.688 177.52882429999994 11.823 179.8034050999999 3.89 194.6094107 4.129 183.82748460000005 4.889 181.5872154 5.283 241.07044739999998 5.16 171.68993289999995 3.807 210.68824780000003 11.417 202.4546789999999 4.103 238.7389166 4.503 184.33475859999996 4.307 163.74683119999992 4.254 216.5043347 12.498 153.56869710000004 2.965 213.2347038 4.671 153.16936780000003 3.092)
Error minima by case: (1.0 1 3.0654 7 2.0058 1 6.0918 2 0.0 0 35.9318 7 9.4923 8 5.5752 2 20.3834 2 1.9431 1 11.8363 1 15.5541 1 17.0 1 9.4844 1 59.4781 1 7.7988 1 27.343 2 29.349 1 35.9929 1 5.9582 1 0.0 0 16.5146 7 0.0 0 7.6864 2 0.0 0)
Average genome size in population (length): 97.895
Average program size in population (points): 98.895
Average percent parens in population: 0.010
Minimum age in population: 69.53467903835912
Maximum age in population: 74.93831894741896
Average age in population: 72.97119735201306
Median age in population: 73.02995902811146
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.121
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 110602550
--- Timings ---
Current time: 1529615982627 milliseconds
Total Time:         233.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        79.7 seconds, 34.1%
Fitness Testing:    122.2 seconds, 52.2%
Report:              31.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_mod} {:instruction integer_yank} {:instruction integer_rot} {:instruction print_float} {:instruction integer_div} {:instruction float_yankdup} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction integer_rot} {:instruction float_inc} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc})
Best program: (integer_fromfloat float_max float_mod integer_yank integer_rot print_float integer_div float_yankdup in1 in1 integer_pop float_inc in1 integer_flush integer_flush integer_dup_items integer_rot float_inc float_pop float_inc float_inc integer_max integer_div float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 float_frominteger float_pop float_inc float_inc in1 integer_flush float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop float_inc in1 integer_flush float_pop print_float float_sub integer_mult float_inc float_inc in1 integer_flush float_pop integer_pop float_inc)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 5329.712643800001
Median total errors in population: 1310.0
Error averages by case: (178.3000035 4.149 217.0451075999999 13.027 208.9901893 4.113 241.85290020000002 5.498 174.75742290000002 4.363 222.16292599999994 13.197 213.08890439999996 12.221 221.1998079999999 4.789 211.61291219999998 5.023 189.0106266 11.893 192.83354649999993 4.22 207.20033909999995 4.365 198.52743060000006 5.075 192.29295079999997 5.444 254.15172389999987 5.417 187.38358899999997 4.124 221.36805489999992 11.367 214.5564808 4.34 253.77593160000004 4.812 199.11804669999998 4.624 178.32748039999996 4.529 229.67057199999994 12.397 167.91835710000007 3.266 227.71315030000008 4.996 166.1721894 3.433)
Error minima by case: (0.0 0 0.8289 8 0.0058 1 7.0918 2 0.0 0 12.7556 9 3.3669 9 13.4248 2 17.6044 2 4.6255 1 2.0125 1 6.8253 1 6.7156 1 2.1843 1 28.7097 1 9.1895 1 0.1478 2 11.7705 1 29.9929 1 1.7586 1 0.0 0 6.3989 7 0.0 0 10.8693 2 0.0 0)
Average genome size in population (length): 96.87
Average program size in population (points): 97.87
Average percent parens in population: 0.010
Minimum age in population: 71.99929744750578
Maximum age in population: 76.36177854654404
Average age in population: 74.35410721814554
Median age in population: 74.3835645097821
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.132
Error (vector) diversity:			 0.143
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 113024425
--- Timings ---
Current time: 1529615987551 milliseconds
Total Time:         238.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        81.1 seconds, 34.0%
Fitness Testing:    125.0 seconds, 52.3%
Report:              32.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_max} {:instruction integer_rot} {:instruction float_flush} {:instruction float_swap} {:instruction float_sub} {:instruction integer_add} {:instruction float_dec} {:instruction float_yank} {:instruction integer_rot} {:instruction print_float} {:instruction float_inc} {:instruction float_yank} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_add} {:instruction float_yank} {:instruction 16.100463211436917} {:instruction integer_shove} {:instruction float_div} {:instruction in1} {:instruction integer_swap} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction integer_add} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_686} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_565} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_flush} {:instruction print_integer} {:instruction integer_yankdup})
Best program: (integer_fromfloat float_max integer_fromfloat float_inc integer_max integer_rot float_flush float_swap float_sub integer_add float_dec float_yank integer_rot print_float float_inc float_yank float_frominteger float_sin float_add float_yank 16.100463211436917 integer_shove float_div in1 integer_swap integer_pop float_inc float_inc float_inc float_frominteger float_sin float_div integer_max integer_div float_inc integer_max integer_add in1 in1 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc in1 integer_flush float_pop integer_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 float_dup_times float_pop float_inc float_inc in1 integer_flush tag_float_686 integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush tag_float_565 integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_flush print_integer integer_yankdup)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4944.530962000001
Median total errors in population: 1303.0
Error averages by case: (160.1171894 3.949 201.7177369999999 13.074 193.1844338 3.841 226.1619657 5.282 155.70015940000002 4.15 209.73668849999993 13.249 199.25685359999989 12.186 203.89083999999994 4.563 196.34446059999993 4.754 176.1611419 11.786 179.96005300000007 4.046 191.7765701999999 4.122 180.99293950000003 4.888 178.5107535 5.284 240.47162339999994 5.199 170.6970269999999 3.834 209.18397830000004 11.301 199.87372350000012 4.129 238.30164759999985 4.551 183.82341389999996 4.372 162.22900569999996 4.301 214.4064499 12.423 150.74764050000005 3.021 212.75677280000008 4.728 152.29189329999997 3.203)
Error minima by case: (0.0 0 6.2688 7 4.3092 1 7.0918 2 0.0 0 0.0737 9 12.612 8 13.4248 2 30.0 2 12.6255 1 10.8363 1 6.398 1 11.0906 1 5.4774 1 54.4339 1 4.3424 1 15.6723 1 12.603 1 34.9929 1 1.8702 1 0.0 0 22.2935 6 0.0 0 26.6864 2 0.0 0)
Average genome size in population (length): 96.812
Average program size in population (points): 97.812
Average percent parens in population: 0.010
Minimum age in population: 73.64646475958449
Maximum age in population: 77.67178068983756
Average age in population: 75.763272628968
Median age in population: 75.82411384034165
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.124
Error (vector) diversity:			 0.134
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 115444825
--- Timings ---
Current time: 1529615992443 milliseconds
Total Time:         243.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        82.6 seconds, 33.9%
Fitness Testing:    127.8 seconds, 52.4%
Report:              33.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction tagged_949} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_max} {:instruction integer_flush} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_rot} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction -77.53535460222977} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_pop} {:instruction integer_min} {:instruction float_div} {:instruction integer_dec} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction 93.88033379602263} {:instruction tag_integer_387} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction print_float} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc})
Best program: (integer_fromfloat float_max integer_fromfloat float_max tagged_869 tagged_949 float_stackdepth print_float integer_max integer_flush integer_inc integer_rot float_flush integer_div float_dup_items float_dec float_yank integer_dup_times float_frominteger float_rot float_rot float_sin float_div integer_max integer_div float_dup_items float_dec float_yank integer_yankdup -77.53535460222977 float_sin integer_stackdepth float_cos integer_stackdepth in1 integer_pop integer_min float_div integer_dec in1 integer_pop float_inc 93.88033379602263 tag_integer_387 float_pop float_inc float_inc integer_max integer_div float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_frominteger float_pop float_inc float_inc float_inc in1 integer_flush float_pop print_float float_sub float_flush print_float float_dup_items float_sub float_flush float_frominteger integer_min integer_yankdup integer_sub integer_mult float_inc float_inc)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5057.915162700001
Median total errors in population: 1303.0
Error averages by case: (167.08705049999995 3.983 206.8521687 13.036 198.4704516 3.884 230.6764264999999 5.337 162.6191957 4.191 212.55505239999997 13.24 204.5958957 12.215 210.8985908 4.574 200.44828139999998 4.808 178.74413339999998 11.841 182.17669670000004 4.072 196.11546159999997 4.158 187.58457300000003 4.922 182.7240149000001 5.368 244.53817049999995 5.243 174.52897589999992 3.895 212.72455330000003 11.324 203.3863819 4.144 242.39870679999999 4.651 187.41908949999998 4.414 166.85842109999996 4.355 219.18593369999996 12.475 155.5200573 3.018 216.86752679999998 4.811 155.725353 3.255)
Error minima by case: (0.0 0 5.2688 8 0.3092 1 5.0918 1 0.0 0 8.0583 9 8.4419 2 11.4248 2 20.2116 2 2.9998 1 6.7097 1 4.6148 1 18.0 1 4.7754 1 52.6946 1 4.1778 1 2.7303 2 1.5902 1 36.9929 1 17.0 1 0.0 0 7.0825 6 0.0 0 24.6864 2 0.0 0)
Average genome size in population (length): 96.925
Average program size in population (points): 97.925
Average percent parens in population: 0.010
Minimum age in population: 74.69497751488912
Maximum age in population: 78.99139901123272
Average age in population: 77.14598587884068
Median age in population: 77.20034936876876
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.134
Error (vector) diversity:			 0.148
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 117868175
--- Timings ---
Current time: 1529615997075 milliseconds
Total Time:         248.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        84.2 seconds, 33.9%
Fitness Testing:    130.2 seconds, 52.4%
Report:              33.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction tagged_949} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_max} {:instruction integer_flush} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction in1} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction float_tan} {:instruction float_min} {:instruction float_cos} {:instruction 16.100463211436917} {:instruction integer_shove} {:instruction float_div} {:instruction integer_flush} {:instruction in1} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction print_integer} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_add} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_flush} {:instruction print_integer} {:instruction float_sub} {:instruction float_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush})
Best program: (integer_fromfloat float_max tagged_869 tagged_949 float_frominteger print_float integer_max integer_flush float_dup integer_rot float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc integer_max integer_swap in1 in1 integer_pop float_inc float_tan float_min float_cos 16.100463211436917 integer_shove float_div integer_flush in1 integer_mult float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float print_integer float_flush float_frominteger integer_min float_add integer_flush float_pop float_inc float_inc float_inc float_inc float_flush print_integer float_sub float_flush float_pop print_float float_sub float_flush)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4775.271231799999
Median total errors in population: 1308.0
Error averages by case: (154.2218111 3.833 194.44404740000002 12.97 186.69729999999996 3.765 219.04227499999996 5.192 150.424753 4.032 204.15007189999992 13.17 192.20724509999997 12.14 198.53548060000003 4.48 188.23262740000007 4.664 170.19929820000004 11.809 171.70214310000003 3.937 186.62535899999997 4.037 174.9627409 4.77 173.37006960000002 5.15 233.4138001999999 5.113 163.7140270999999 3.792 201.92652979999997 11.298 194.72099180000004 4.028 231.00435960000002 4.485 175.2289416 4.283 154.3936946 4.22 206.86535230000004 12.379 145.33990610000004 2.926 204.65589640000005 4.667 144.90350999999998 3.149)
Error minima by case: (0.0 0 5.9927 8 0.3092 1 7.0918 2 0.0 0 27.609 8 12.3358 1 13.4248 2 6.2116 2 0.9463 1 10.8363 1 0.6957 1 14.9537 1 0.3161 1 27.7097 1 1.0 1 0.2697 2 0.7705 1 34.9929 1 16.0 1 0.0 0 0.6011 7 0.0 0 3.8693 2 0.0 0)
Average genome size in population (length): 96.22
Average program size in population (points): 97.22
Average percent parens in population: 0.010
Minimum age in population: 75.76278276390096
Maximum age in population: 80.6189126440484
Average age in population: 78.5819655067278
Median age in population: 78.61489744059016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.115
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 120273850
--- Timings ---
Current time: 1529616001951 milliseconds
Total Time:         253.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        85.8 seconds, 33.9%
Fitness Testing:    132.7 seconds, 52.4%
Report:              34.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_max} {:instruction float_dup} {:instruction tagged_949} {:instruction integer_rot} {:instruction integer_swap} {:instruction float_dup} {:instruction tagged_988} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction float_cos} {:instruction float_inc} {:instruction integer_dup} {:instruction float_sin} {:instruction float_min} {:instruction float_cos} {:instruction 16.100463211436917} {:instruction integer_shove} {:instruction float_div} {:instruction integer_max} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_mod} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction integer_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction -7.61285726741454} {:instruction integer_shove})
Best program: (float_dup_items float_max float_dup tagged_949 integer_rot integer_swap float_dup tagged_988 float_stackdepth print_float float_inc float_cos float_inc integer_dup float_sin float_min float_cos 16.100463211436917 integer_shove float_div integer_max in1 integer_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_mod float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop print_float integer_sub float_flush float_frominteger integer_yankdup integer_sub -7.61285726741454 integer_shove)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4622.275956000001
Median total errors in population: 1303.0
Error averages by case: (146.62288370000002 3.769 191.46693049999993 12.965 182.0464128 3.657 216.64059350000005 5.074 142.3687192 3.936 192.94643749999994 13.13 188.20981549999993 12.118 191.0770056 4.366 185.11811499999996 4.589 159.75394059999996 11.741 166.53608029999998 3.866 175.96364549999996 3.951 169.71071270000004 4.681 163.31304790000002 5.268 229.05884570000003 4.978 158.80979739999995 3.657 197.27980670000005 11.25 184.09361800000005 3.927 227.48013780000002 4.399 171.49198250000003 4.161 149.94214349999996 4.082 203.56474519999998 12.387 135.17640999999995 2.819 201.7680123 4.565 139.41211659999996 3.088)
Error minima by case: (1.0 1 5.056 7 0.0256 1 6.0918 1 0.0 0 23.253 8 2.6021 2 12.4248 2 15.6044 2 0.6255 1 9.8363 1 14.9582 1 12.384 1 5.8339 1 30.7097 1 0.2153 1 12.3827 1 43.0 1 33.9929 1 4.0343 1 0.0 0 1.239 7 0.0 0 8.8693 2 0.0 0)
Average genome size in population (length): 96.471
Average program size in population (points): 97.471
Average percent parens in population: 0.010
Minimum age in population: 77.42935672462131
Maximum age in population: 82.02523390618833
Average age in population: 79.91538816415625
Median age in population: 79.94090869657595
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.134
Error (vector) diversity:			 0.149
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 122685750
--- Timings ---
Current time: 1529616006507 milliseconds
Total Time:         258.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        87.3 seconds, 33.9%
Fitness Testing:    135.2 seconds, 52.4%
Report:              35.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction float_rot} {:instruction float_inc} {:instruction float_add} {:instruction integer_rot} {:instruction print_float} {:instruction float_dec} {:instruction integer_max} {:instruction float_yankdup} {:instruction in1} {:instruction float_add} {:instruction float_tan} {:instruction float_add} {:instruction integer_rot} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_shove} {:instruction tag_integer_611} {:instruction in1} {:instruction float_mult} {:instruction print_integer} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_div} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_frominteger})
Best program: (float_rot float_rot float_inc float_add integer_rot print_float float_dec integer_max float_yankdup in1 float_add float_tan float_add integer_rot integer_mod float_swap integer_shove tag_integer_611 in1 float_mult print_integer float_div in1 in1 float_dup_items float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_div integer_sub integer_mult float_frominteger)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3969.181315200001
Median total errors in population: 1303.0
Error averages by case: (120.69135289999997 3.536 162.97851109999996 12.927 154.03732989999986 3.335 187.97755919999997 4.785 116.4607009 3.692 172.6388552 13.133 160.89355419999995 12.104 166.74042980000002 4.062 156.7013544 4.247 138.4517996 11.846 140.07238400000003 3.487 154.1599059 3.676 141.34936350000004 4.432 141.9777397999999 4.901 203.94430419999992 4.713 130.42516070000005 3.349 171.62366340000005 11.275 162.69660109999998 3.68 200.73129549999993 4.083 143.36148929999993 3.906 121.6052262 3.805 176.24305030000002 12.333 110.98061439999998 2.466 173.95532740000004 4.253 111.78274229999998 2.675)
Error minima by case: (1.0 1 0.2414 7 5.3732 1 6.0918 2 0.0 0 25.1045 9 2.2695 2 12.4248 2 22.6044 2 2.6255 1 11.6824 1 27.492 1 10.0035 1 2.0403 1 23.7097 1 4.0618 1 5.4218 1 33.697 1 35.9929 1 2.078 1 0.0 0 4.0029 6 0.0 0 15.8693 2 0.0 0)
Average genome size in population (length): 95.513
Average program size in population (points): 96.513
Average percent parens in population: 0.011
Minimum age in population: 78.42935672462131
Maximum age in population: 83.53783018754908
Average age in population: 81.31394362831946
Median age in population: 81.3057499723774
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.126
Error (vector) diversity:			 0.137
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 125073675
--- Timings ---
Current time: 1529616011199 milliseconds
Total Time:         262.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        88.9 seconds, 33.9%
Fitness Testing:    137.7 seconds, 52.4%
Report:              35.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_pop} {:instruction integer_dup} {:instruction tagged_607} {:instruction float_sin} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction in1} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_sin} {:instruction float_div} {:instruction integer_add} {:instruction in1} {:instruction float_sin} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction -37} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_tan} {:instruction float_min} {:instruction float_pop} {:instruction integer_pop} {:instruction float_tan} {:instruction in1} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_stackdepth} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction tag_float_565} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup})
Best program: (integer_fromfloat float_max float_pop integer_dup tagged_607 float_sin float_div integer_max integer_div float_inc integer_max float_div in1 float_dup_items float_dec float_sin float_div integer_add in1 float_sin float_inc in1 integer_flush in1 float_inc float_inc -37 integer_div float_inc float_inc float_inc float_inc in1 float_dup_items integer_dup float_dup_items float_inc float_tan float_min float_pop integer_pop float_tan in1 integer_flush float_inc float_inc float_inc float_inc in1 float_stackdepth float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_sub tag_float_565 integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_mod float_frominteger integer_min integer_yankdup)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4946.3698552000005
Median total errors in population: 1308.0
Error averages by case: (162.39303580000004 3.936 201.77163419999997 12.968 193.04831369999997 3.858 225.10083450000002 5.25 158.12557310000003 4.14 209.4194953999999 13.179 199.46348009999997 12.12 206.3813276 4.582 195.3243999 4.776 175.74854890000003 11.7 178.01341029999998 4.017 192.9588982 4.132 181.70873489999997 4.849 179.40014499999995 5.437 240.40875619999994 5.176 170.01728179999998 3.869 208.82371250000006 11.316 200.7245123000001 4.132 237.14574009999995 4.545 182.45905730000004 4.342 161.95492819999993 4.263 214.52034089999995 12.392 151.99688090000004 3.047 211.81400490000007 4.753 151.64280849999994 3.225)
Error minima by case: (0.0 0 2.2688 7 3.0058 1 6.0918 2 0.0 0 17.5953 9 8.612 8 12.4248 2 30.0 2 3.8894 1 11.8363 1 2.3354 1 18.0 1 4.3161 1 57.9948 1 7.0 1 24.4057 1 3.8696 1 35.9929 1 5.4312 1 0.0 0 12.8985 8 0.0 0 25.6864 2 0.0 0)
Average genome size in population (length): 95.017
Average program size in population (points): 96.017
Average percent parens in population: 0.011
Minimum age in population: 80.21697591133227
Maximum age in population: 84.8891344139717
Average age in population: 82.74307787579701
Median age in population: 82.77134869950832
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.117
Error (vector) diversity:			 0.132
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 127449175
--- Timings ---
Current time: 1529616015835 milliseconds
Total Time:         267.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.4 seconds, 33.8%
Fitness Testing:    140.2 seconds, 52.5%
Report:              36.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_max} {:instruction integer_shove} {:instruction tag_float_362} {:instruction float_pop} {:instruction integer_dup_times} {:instruction tagged_949} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_yankdup} {:instruction in1} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction tag_float_67} {:instruction integer_max} {:instruction float_div} {:instruction float_dup_times} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_cos} {:instruction float_flush} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_inc} {:instruction print_float} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_min} {:instruction integer_min})
Best program: (float_dup_items float_max integer_shove tag_float_362 float_pop integer_dup_times tagged_949 integer_rot print_float integer_max float_yankdup in1 float_add integer_pop integer_dup_items integer_flush in1 in1 float_dup_items integer_dec integer_dup_items tag_float_67 integer_max float_div float_dup_times in1 float_inc in1 integer_flush float_pop float_inc float_inc integer_max integer_div float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_yankdup float_pop float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_yank in2 float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_cos float_flush integer_mult integer_shove float_inc print_float integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_min integer_min)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4390.4687719
Median total errors in population: 1303.0
Error averages by case: (139.09782070000003 3.688 179.4787729 12.987 170.4550252 3.517 203.25212030000006 4.97 134.39854950000003 3.857 189.619103 13.186 177.06037150000003 12.166 184.0832343 4.255 173.18314279999998 4.428 155.01921939999997 11.892 156.1543022 3.675 172.11286560000005 3.867 160.54803369999996 4.631 158.46233340000003 4.995 217.95057469999992 4.859 146.6254512 3.545 187.25995950000004 11.29 180.41370529999998 3.842 216.0630662 4.247 159.6669684 4.062 138.20841160000006 3.968 192.71358849999996 12.388 130.5102464 2.701 189.10449970000005 4.427 128.69240589999998 2.892)
Error minima by case: (0.0 0 0.7267 8 1.3341 1 3.0918 2 0.0 0 18.0624 10 1.9831 8 9.4248 2 27.8357 2 6.9822 1 10.8363 1 8.9891 1 1.3082 1 2.2123 1 39.9742 1 4.8995 1 8.1478 1 9.2294 1 34.9929 1 4.9641 1 0.0 0 1.0704 7 0.0 0 22.6864 2 0.0 0)
Average genome size in population (length): 94.344
Average program size in population (points): 95.344
Average percent parens in population: 0.011
Minimum age in population: 81.37012332601302
Maximum age in population: 86.10876665966205
Average age in population: 84.06160615282379
Median age in population: 84.11748792221483
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.115
Error (vector) diversity:			 0.129
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 129807975
--- Timings ---
Current time: 1529616020513 milliseconds
Total Time:         271.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.9 seconds, 33.8%
Fitness Testing:    142.6 seconds, 52.5%
Report:              37.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction tagged_954} {:instruction integer_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction print_float} {:instruction integer_max} {:instruction print_float} {:instruction integer_max} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_max} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction in2} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_cos} {:instruction float_flush} {:instruction tag_float_539} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction tag_integer_380} {:instruction -56} {:instruction float_yank} {:instruction float_add} {:instruction float_yank} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction print_float} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_646} {:instruction integer_pop} {:instruction float_inc})
Best program: (integer_rot tagged_954 integer_rot print_float integer_max float_inc print_float integer_max print_float integer_max integer_flush integer_dup_items integer_flush integer_max float_div in1 in1 float_inc in1 integer_flush float_pop float_inc float_inc integer_max integer_div float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_yankdup float_pop float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush in2 float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_cos float_flush tag_float_539 integer_pop float_inc in1 integer_flush float_pop print_float float_sub tag_integer_380 -56 float_yank float_add float_yank in1 integer_flush float_pop print_float float_sub float_flush print_float float_dup_items float_sub float_dup_times float_tan integer_sub integer_mult float_inc float_inc in1 integer_flush tag_float_646 integer_pop float_inc)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4306.8872061
Median total errors in population: 1303.0
Error averages by case: (134.17790150000002 3.634 176.3854227 12.882 167.62296960000003 3.521 202.26852549999995 4.975 129.971282 3.819 183.65965809999997 13.097 173.68697609999992 12.052 179.63535220000009 4.224 171.19104060000004 4.447 149.88607120000006 11.787 153.76429370000002 3.603 166.86467650000003 3.808 156.43889080000002 4.562 154.48786419999996 5.002 216.714087 4.908 144.04551490000003 3.528 184.78061879999998 11.246 175.0757956 3.794 214.54073530000005 4.23 158.1125414 4.069 136.56493339999992 3.965 189.76004159999997 12.283 124.44669449999996 2.634 188.35182280000004 4.418 125.1824961 2.783)
Error minima by case: (1.0 1 2.2688 7 1.9744 1 0.9082 2 0.0 0 30.2949 8 0.931 8 12.4248 2 2.8766 2 7.8862 1 4.8363 1 12.0351 1 5.4534 1 0.7018 1 7.6388 1 7.0618 1 10.0351 1 18.2402 1 28.9929 1 7.2685 1 0.0 0 6.4482 6 0.0 0 18.6864 2 0.0 0)
Average genome size in population (length): 93.93
Average program size in population (points): 94.93
Average percent parens in population: 0.011
Minimum age in population: 83.1230845406264
Maximum age in population: 87.36185427077552
Average age in population: 85.40632914242552
Median age in population: 85.43415825154426
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.121
Error (vector) diversity:			 0.132
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 132156375
--- Timings ---
Current time: 1529616024998 milliseconds
Total Time:         276.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.4 seconds, 33.8%
Fitness Testing:    145.0 seconds, 52.5%
Report:              37.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction float_rot} {:instruction float_frominteger} {:instruction tagged_949} {:instruction integer_flush} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_div} {:instruction integer_dec} {:instruction integer_div} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_max} {:instruction float_div} {:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_sin} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction integer_fromfloat} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_yankdup})
Best program: (float_rot float_rot float_frominteger tagged_949 integer_flush integer_div integer_rot float_dec float_yank integer_yankdup float_frominteger integer_sub float_div integer_dec integer_div integer_mult float_dec float_rot integer_dup_items integer_flush integer_max float_div in1 in1 float_inc in1 integer_flush float_pop float_sin in1 float_inc in1 integer_flush float_pop float_inc float_inc integer_max integer_div float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush integer_fromfloat print_float float_sub float_flush float_frominteger integer_min integer_yankdup)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4090.9772334000013
Median total errors in population: 1308.0
Error averages by case: (126.08194060000001 3.652 166.6385336 12.934 157.51197939999997 3.543 193.08577709999997 4.927 121.87438769999997 3.81 177.85410190000002 13.105 164.37685570000002 12.096 173.9691741 4.249 161.16737899999998 4.46 142.96182020000003 11.73 144.46982720000005 3.721 160.18950180000004 3.844 146.95315039999997 4.55 146.62690179999998 4.982 206.79838559999996 4.864 134.05251829999997 3.551 175.74821260000004 11.263 168.67679219999997 3.81 204.97875699999994 4.245 148.0704298 4.046 126.55404700000003 3.967 179.98746409999998 12.314 117.2842956 2.716 178.4094889 4.425 116.89851179999998 2.953)
Error minima by case: (1.0 1 1.9383 7 0.3092 1 0.0918 2 0.0 0 17.8408 8 1.831 7 47.0 2 4.0715 2 2.6255 1 16.0 1 16.1899 1 1.2987 1 2.0601 1 1.5487 1 7.0 1 5.8804 2 22.3949 1 23.8985 1 4.8546 1 0.0 0 7.8506 7 0.0 0 19.6864 2 0.0 0)
Average genome size in population (length): 94.077
Average program size in population (points): 95.077
Average percent parens in population: 0.011
Minimum age in population: 84.4504071673572
Maximum age in population: 88.9621542712169
Average age in population: 86.84394061205215
Median age in population: 86.8775557420169
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.129
Error (vector) diversity:			 0.14
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 134508425
--- Timings ---
Current time: 1529616029740 milliseconds
Total Time:         281.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        94.9 seconds, 33.8%
Fitness Testing:    147.5 seconds, 52.5%
Report:              38.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_max} {:instruction float_frominteger} {:instruction tagged_949} {:instruction float_dup} {:instruction tag_float_362} {:instruction float_dup} {:instruction float_min} {:instruction integer_rot} {:instruction print_float} {:instruction float_rot} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_flush} {:instruction float_swap} {:instruction float_tan} {:instruction float_tan} {:instruction integer_dec} {:instruction integer_sub} {:instruction integer_rot} {:instruction float_flush} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_yankdup} {:instruction tag_float_565} {:instruction integer_dec} {:instruction float_inc} {:instruction in1} {:instruction print_integer} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction integer_inc} {:instruction float_flush} {:instruction print_float})
Best program: (integer_dup_items float_max float_frominteger tagged_949 float_dup tag_float_362 float_dup float_min integer_rot print_float float_rot float_inc float_dup_items float_flush float_swap float_tan float_tan integer_dec integer_sub integer_rot float_flush print_float float_dup_items integer_rot float_flush float_inc integer_max integer_div integer_div float_dup_items float_dec float_yank integer_dup_times integer_shove integer_flush integer_pop float_inc in1 integer_flush float_pop float_inc float_inc integer_stackdepth integer_div float_inc float_inc float_inc integer_flush in1 integer_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush float_pop integer_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 float_yankdup tag_float_565 integer_dec float_inc in1 print_integer float_pop print_float float_sub integer_inc float_flush print_float)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4119.643020799999
Median total errors in population: 1305.5
Error averages by case: (126.46365789999997 3.571 169.8450824 12.966 160.418588 3.413 196.36476820000001 4.84 122.01023280000005 3.74 177.08191669999994 13.141 166.79079009999998 12.093 172.37259970000002 4.165 164.0064737 4.317 143.04065359999993 11.768 145.48977340000002 3.604 159.17969179999997 3.747 148.36403329999996 4.496 146.69330680000002 4.976 208.5832091 4.745 136.43775309999995 3.459 176.9409228 11.271 167.9087659 3.729 207.03010759999998 4.113 149.5114525 3.925 128.7712548 3.839 182.1712883 12.345 116.8725779 2.623 181.22815000000006 4.334 118.02697040000002 2.819)
Error minima by case: (1.0 1 7.1377 8 1.6963 1 7.0918 2 0.0 0 5.2983 9 2.6819 1 13.4248 2 30.0 2 12.2906 1 10.8363 1 5.8186 1 17.0426 1 2.9111 1 58.4781 1 2.0 1 2.2697 1 41.0 1 34.9929 1 14.094 1 0.0 0 6.9996 7 0.0 0 26.6864 2 0.0 0)
Average genome size in population (length): 93.777
Average program size in population (points): 94.777
Average percent parens in population: 0.011
Minimum age in population: 85.70279690655617
Maximum age in population: 90.4463100702948
Average age in population: 88.2996785124353
Median age in population: 88.33562488348602
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.12
Error (vector) diversity:			 0.131
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 136853100
--- Timings ---
Current time: 1529616034296 milliseconds
Total Time:         285.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.4 seconds, 33.7%
Fitness Testing:    150.0 seconds, 52.5%
Report:              39.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction integer_yankdup} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_div} {:instruction integer_shove} {:instruction in1} {:instruction float_dup_times} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_swap} {:instruction float_inc} {:instruction float_cos} {:instruction 16.100463211436917} {:instruction integer_shove} {:instruction float_div} {:instruction integer_div} {:instruction in1} {:instruction integer_pop} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_mod} {:instruction tag_integer_611} {:instruction in1} {:instruction in1} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction float_tan} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_565} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction tag_integer_380} {:instruction float_add} {:instruction float_dup} {:instruction float_add} {:instruction float_yank} {:instruction float_pop})
Best program: (integer_fromfloat float_max integer_yankdup float_yank integer_fromfloat float_frominteger float_sin float_div integer_shove in1 float_dup_times float_inc in1 integer_flush float_pop float_swap float_inc float_cos 16.100463211436917 integer_shove float_div integer_div in1 integer_pop float_inc float_swap float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_pop float_inc float_inc integer_max integer_div float_inc float_inc integer_max integer_div float_mod tag_integer_611 in1 in1 float_dup_items float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush integer_flush float_pop integer_pop float_inc in1 float_tan float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush tag_float_565 integer_pop float_inc in1 integer_flush float_pop print_float float_dup_items integer_shove tag_integer_380 float_add float_dup float_add float_yank float_pop)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4138.446420099999
Median total errors in population: 1303.0
Error averages by case: (127.3794839 3.58 170.58438339999998 12.903 161.98913009999998 3.418 194.8609524999999 4.836 122.738569 3.76 178.11374090000007 13.114 167.07216279999997 12.044 172.748954 4.196 164.9742748 4.339 143.0379052 11.677 147.21664150000004 3.557 159.70172710000003 3.765 148.9061022 4.507 146.89239719999995 5.033 211.94795399999992 4.736 136.7092681 3.418 177.78067119999994 11.227 167.8949622 3.748 207.7647704 4.108 150.53200549999994 3.924 129.72621160000003 3.84 184.16933840000004 12.32 117.05097390000003 2.621 182.02214510000005 4.309 118.8666951 2.785)
Error minima by case: (0.0 0 1.8259 8 0.9744 1 6.0918 2 0.0 0 1.366 9 0.3669 8 12.4248 2 30.0 2 1.9431 1 1.7359 1 26.8704 1 18.0 1 7.9399 1 3.6388 1 4.7882 1 3.1478 1 45.0 1 35.9929 1 17.0 1 0.0 0 12.8985 8 0.0 0 25.6864 2 0.0 0)
Average genome size in population (length): 93.1
Average program size in population (points): 94.1
Average percent parens in population: 0.011
Minimum age in population: 87.16710558419007
Maximum age in population: 91.74341151493353
Average age in population: 89.66961108902284
Median age in population: 89.6893161188577
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.122
Error (vector) diversity:			 0.133
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 139180800
--- Timings ---
Current time: 1529616038842 milliseconds
Total Time:         290.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        97.8 seconds, 33.7%
Fitness Testing:    152.5 seconds, 52.5%
Report:              39.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_frominteger} {:instruction tagged_949} {:instruction float_dup} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction float_sub} {:instruction integer_rot} {:instruction float_flush} {:instruction float_dec} {:instruction float_yank} {:instruction integer_rot} {:instruction print_float} {:instruction float_inc} {:instruction float_yank} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_add} {:instruction float_yank} {:instruction 16.100463211436917} {:instruction integer_shove} {:instruction float_div} {:instruction in1} {:instruction integer_swap} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_dup} {:instruction float_mod} {:instruction tag_integer_611} {:instruction in1} {:instruction in1} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction float_tan} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_565} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction tag_integer_380})
Best program: (integer_fromfloat integer_dup_items float_max float_frominteger tagged_949 float_dup print_float integer_max float_inc float_sub integer_rot float_flush float_dec float_yank integer_rot print_float float_inc float_yank float_frominteger float_sin float_add float_yank 16.100463211436917 integer_shove float_div in1 integer_swap integer_pop float_inc integer_dup float_mod tag_integer_611 in1 in1 integer_min float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_flush integer_flush float_pop integer_pop float_inc in1 float_tan float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush tag_float_565 integer_pop float_inc in1 integer_flush float_pop print_float float_dup_items integer_shove tag_integer_380)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4570.4192442
Median total errors in population: 1303.0
Error averages by case: (145.3496539 3.788 186.70054009999996 12.976 177.57339710000002 3.671 214.69138279999996 5.096 141.53991079999994 3.968 195.15121689999995 13.138 182.8391079999999 12.164 192.64443329999997 4.364 181.46533199999993 4.579 161.0007123 11.825 162.86621630000005 3.802 177.48013899999995 3.983 168.18113170000004 4.703 163.01070320000002 5.104 226.8454756 5.001 154.09994500000002 3.669 192.85819330000012 11.316 185.44927360000003 3.976 223.68702009999996 4.38 167.89783640000002 4.173 147.5331157 4.123 198.25316929999994 12.384 136.53293199999996 2.836 198.34337310000004 4.554 135.8160327 3.036)
Error minima by case: (1.0 1 0.8379 7 1.6908 1 65.0 2 0.0 0 6.7755 8 0.6426 7 16.1538 2 5.0715 2 1.478 1 1.7359 1 3.9582 1 8.2024 1 0.8718 1 0.3612 1 4.3777 1 1.3827 1 15.4912 1 24.8985 1 17.0 1 0.0 0 3.0389 7 0.0 0 24.1056 2 0.0 0)
Average genome size in population (length): 92.816
Average program size in population (points): 93.816
Average percent parens in population: 0.011
Minimum age in population: 88.31222376998606
Maximum age in population: 93.25467061456806
Average age in population: 91.09618982060826
Median age in population: 91.15117644611017
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.127
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 141501525
--- Timings ---
Current time: 1529616043250 milliseconds
Total Time:         294.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.3 seconds, 33.7%
Fitness Testing:    154.9 seconds, 52.5%
Report:              40.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 56504.0
Test mean error for best: 28.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -71.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 21.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -68.3834102551
Correct output: -20.9430876309 | Program output: 15.0569123691 
Correct output: -40.1637221127 | Program output: -4.1637221127 
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 104.9574048532
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -25.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -45.0070943376
Correct output: -77.9582317921 | Program output: -40.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -74.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction integer_yankdup} {:instruction tagged_949} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_frominteger} {:instruction tagged_949} {:instruction tagged_922} {:instruction float_dup} {:instruction print_float} {:instruction integer_rot} {:instruction integer_swap} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_inc} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_tan} {:instruction integer_swap} {:instruction float_cos} {:instruction 15.657554573977507} {:instruction float_mod} {:instruction tag_integer_611} {:instruction in1} {:instruction in1} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_pop} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction tag_float_565} {:instruction integer_yankdup} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction tag_integer_380})
Best program: (integer_fromfloat float_max integer_yankdup tagged_949 float_dup integer_fromfloat float_max float_frominteger tagged_949 tagged_922 float_dup print_float integer_rot integer_swap float_dup_items integer_max float_inc float_dec float_dup_items float_inc float_tan integer_swap float_cos 15.657554573977507 float_mod tag_integer_611 in1 in1 integer_min float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop float_inc float_inc in1 integer_sub float_frominteger float_pop integer_pop float_inc in1 integer_dec float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 float_inc float_pop in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_flush tag_float_565 integer_yankdup float_inc in1 integer_flush float_pop print_float float_dup_items integer_shove tag_integer_380)
Errors: [9.0 2 61.0 13 50.0 1 85.0 3 2.0 2 76.0 13 58.0 12 60.0 2 50.0 2 36.0 12 36.0 1 49.0 2 38.0 3 36.0 2 105.0 3 20.0 1 70.0 11 59.0 2 101.0 2 37.0 2 13.0 2 76.0 12 0.0 0 69.0 2 0.0 0]
Total: 1303.0
Mean: 26.06
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4310.2386229
Median total errors in population: 1303.0
Error averages by case: (133.90338370000003 3.74 176.27974360000005 12.945 167.59815849999993 3.646 201.73768589999997 5.047 129.80717639999997 3.9 185.5378071 13.139 174.16588140000002 12.089 179.0809795 4.318 171.07723970000006 4.534 150.0079328 11.764 154.026657 3.835 167.40932560000005 3.929 154.87208840000005 4.62 154.7065625 5.12 216.73146429999994 4.948 144.06271159999997 3.639 185.0527362 11.295 175.87776050000002 3.904 213.72599499999995 4.354 157.6291847999999 4.156 136.04456560000003 4.063 189.3759124 12.358 125.05370679999999 2.787 188.2568708000001 4.518 126.5250928 3.044)
Error minima by case: (0.0 0 7.2688 7 0.3732 1 6.0918 1 0.0 0 28.1487 7 13.612 2 12.4248 2 30.0 2 5.84 1 10.8363 1 22.8704 1 7.1114 1 7.6492 1 0.3612 1 0.0158 1 11.7387 1 22.2294 1 34.9929 1 17.0 1 0.0 0 12.8985 6 0.0 0 25.6864 2 0.0 0)
Average genome size in population (length): 92.563
Average program size in population (points): 93.563
Average percent parens in population: 0.011
Minimum age in population: 89.31222376998606
Maximum age in population: 94.62383828310975
Average age in population: 92.46643057830282
Median age in population: 92.50019514824909
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.137
Error (vector) diversity:			 0.151
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 143816000
--- Timings ---
Current time: 1529616047640 milliseconds
Total Time:         299.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.8 seconds, 33.7%
Fitness Testing:    157.2 seconds, 52.6%
Report:              41.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 51873.0
Test mean error for best: 25.93650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -80.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 12.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -77.3834102551
Correct output: -20.9430876309 | Program output: 6.0569123691  
Correct output: -40.1637221127 | Program output: -13.1637221127
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 95.9574048532 
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -34.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -54.0070943376
Correct output: -77.9582317921 | Program output: -49.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -83.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction tagged_949} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_max} {:instruction integer_flush} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_sin} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_flush} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction integer_sub} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 tagged_949 float_frominteger print_float integer_max integer_flush integer_inc integer_rot float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 float_sin float_pop float_inc float_inc in1 float_dup_items float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_flush float_inc in1 integer_flush float_pop print_float integer_sub float_flush float_frominteger)
Errors: [9.0 2 61.0 13 50.0 1 76.0 3 2.0 2 67.0 13 58.0 12 60.0 2 41.0 3 27.0 12 27.0 2 49.0 2 29.0 2 36.0 2 96.0 2 20.0 1 70.0 11 59.0 2 92.0 2 28.0 2 13.0 2 76.0 12 0.0 0 60.0 2 0.0 0]
Total: 1213.0
Mean: 24.26
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4524.5707637999985
Median total errors in population: 1303.0
Error averages by case: (144.79273450000005 3.729 184.97942109999997 13.018 176.72465899999992 3.561 207.54671269999997 4.959 139.5286394 3.872 195.09895459999998 13.195 182.9372037 12.14 188.4010818 4.291 177.5861184 4.45 160.73193719999998 11.844 161.6668048 3.784 177.29443290000006 3.921 163.93880109999998 4.633 164.7152044 5.013 223.2875055 4.89 152.537711 3.566 193.5959195 11.278 185.76967410000003 3.895 219.91243440000002 4.273 164.9419076 4.081 144.4334424 4.019 197.93928170000004 12.417 135.52930349999994 2.748 194.33335890000006 4.431 135.33351960000002 3.006)
Error minima by case: (0.0 0 0.8259 7 2.0256 1 7.0918 2 0.0 0 9.8279 9 7.169 2 13.4248 2 30.0 2 5.3977 1 4.9402 1 20.4614 1 9.0754 1 6.9399 1 9.6388 1 4.0 1 4.4937 1 14.2564 1 30.9929 1 17.0 1 0.0 0 3.1079 7 0.0 0 26.6864 2 0.0 0)
Average genome size in population (length): 92.997
Average program size in population (points): 93.997
Average percent parens in population: 0.011
Minimum age in population: 90.31222376998606
Maximum age in population: 95.88471802508535
Average age in population: 93.81953782901726
Median age in population: 93.86832268135745
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.114
Error (vector) diversity:			 0.126
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 146141175
--- Timings ---
Current time: 1529616052280 milliseconds
Total Time:         303.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.3 seconds, 33.7%
Fitness Testing:    159.8 seconds, 52.6%
Report:              41.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 51873.0
Test mean error for best: 25.93650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -80.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 12.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -77.3834102551
Correct output: -20.9430876309 | Program output: 6.0569123691  
Correct output: -40.1637221127 | Program output: -13.1637221127
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 95.9574048532 
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -34.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -54.0070943376
Correct output: -77.9582317921 | Program output: -49.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -83.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction tagged_949} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_max} {:instruction integer_flush} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_sin} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_flush} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction integer_sub} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 tagged_949 float_frominteger print_float integer_max integer_flush integer_inc integer_rot float_dup_items float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 float_sin float_pop float_inc float_inc in1 float_dup_items float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_flush float_inc in1 integer_flush float_pop print_float integer_sub float_flush float_frominteger)
Errors: [9.0 2 61.0 13 50.0 1 76.0 3 2.0 2 67.0 13 58.0 12 60.0 2 41.0 3 27.0 12 27.0 2 49.0 2 29.0 2 36.0 2 96.0 2 20.0 1 70.0 11 59.0 2 92.0 2 28.0 2 13.0 2 76.0 12 0.0 0 60.0 2 0.0 0]
Total: 1213.0
Mean: 24.26
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4610.695308
Median total errors in population: 1303.0
Error averages by case: (145.84850690000002 3.744 189.43488739999998 13.0 181.19770959999997 3.609 213.4246585999999 5.033 141.5360514 3.919 196.13482709999997 13.162 186.7976798 12.106 190.46165580000002 4.335 183.2721666 4.512 162.80390320000004 11.732 166.32325450000005 3.768 177.90715359999996 3.931 166.7763596 4.663 164.7887915 5.035 229.20046969999993 4.972 157.4895787 3.613 196.61715529999998 11.25 185.91070400000004 3.916 225.86074860000002 4.29 170.48029839999998 4.107 149.59098699999998 4.065 202.25494729999994 12.38 136.23504720000005 2.771 199.92395420000003 4.483 139.046812 2.981)
Error minima by case: (0.0 0 0.8259 9 7.3092 1 6.0918 2 0.0 0 24.247 8 0.6426 2 12.4248 2 30.0 2 3.9463 1 9.479 1 23.7179 1 18.0 1 0.8718 1 58.4781 1 3.0 1 4.1144 1 17.5129 1 34.9929 1 17.0 1 0.0 0 9.0389 6 0.0 0 25.6864 2 0.0 0)
Average genome size in population (length): 92.618
Average program size in population (points): 93.618
Average percent parens in population: 0.011
Minimum age in population: 92.39634426175365
Maximum age in population: 97.22487637130112
Average age in population: 95.19058107541856
Median age in population: 95.24550165010356
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.114
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 148456800
--- Timings ---
Current time: 1529616056613 milliseconds
Total Time:         308.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.7 seconds, 33.7%
Fitness Testing:    162.1 seconds, 52.6%
Report:              42.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 51873.0
Test mean error for best: 25.93650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -80.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 12.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -77.3834102551
Correct output: -20.9430876309 | Program output: 6.0569123691  
Correct output: -40.1637221127 | Program output: -13.1637221127
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 95.9574048532 
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -34.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -54.0070943376
Correct output: -77.9582317921 | Program output: -49.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -83.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction tagged_949} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_max} {:instruction integer_flush} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_sin} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_flush} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction integer_sub} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 tagged_949 float_frominteger print_float integer_max integer_flush integer_inc integer_rot float_dup_items float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 float_sin float_pop float_inc float_inc in1 float_dup_items float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_flush float_inc in1 integer_flush float_pop print_float integer_sub float_flush float_frominteger)
Errors: [9.0 2 61.0 13 50.0 1 76.0 3 2.0 2 67.0 13 58.0 12 60.0 2 41.0 3 27.0 12 27.0 2 49.0 2 29.0 2 36.0 2 96.0 2 20.0 1 70.0 11 59.0 2 92.0 2 28.0 2 13.0 2 76.0 12 0.0 0 60.0 2 0.0 0]
Total: 1213.0
Mean: 24.26
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4172.9551924
Median total errors in population: 1303.0
Error averages by case: (130.64192530000005 3.656 171.90584689999997 12.942 163.29908639999996 3.46 195.42349499999992 4.894 125.89744909999997 3.808 180.1154727 13.117 169.02970159999992 12.083 175.80546079999993 4.216 164.3397194 4.36 145.0577717000001 11.705 146.7088101 3.588 162.30674539999995 3.815 149.53937940000003 4.515 148.76401669999998 5.19 210.10433619999992 4.772 139.3672562 3.48 178.71534660000006 11.279 170.42111610000003 3.793 207.92024129999993 4.167 151.27373339999997 3.979 130.80258769999998 3.883 185.03465450000007 12.35 120.18115530000003 2.677 181.45545960000013 4.324 119.973425 2.818)
Error minima by case: (1.0 1 1.8259 8 0.1265 1 65.0 2 0.0 0 29.0022 6 8.169 8 14.6949 2 30.0 2 4.9865 1 14.2342 1 7.3718 1 10.1167 1 7.9399 1 6.3612 1 0.8692 1 14.6984 1 8.2582 1 39.4321 1 17.0 1 0.0 0 17.8506 7 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 92.219
Average program size in population (points): 93.219
Average percent parens in population: 0.011
Minimum age in population: 93.39634426175365
Maximum age in population: 98.71655915329956
Average age in population: 96.62852960164145
Median age in population: 96.69414790972569
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.121
Error (vector) diversity:			 0.13
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 150762325
--- Timings ---
Current time: 1529616060981 milliseconds
Total Time:         312.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.1 seconds, 33.6%
Fitness Testing:    164.6 seconds, 52.7%
Report:              42.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 51873.0
Test mean error for best: 25.93650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 56.542920316  
Correct output: 36.9263823022  | Program output: -24.0736176978
Correct output: -12.6268384926 | Program output: -62.6268384926
Correct output: -156.0918084307 | Program output: -80.0918084307
Correct output: 80.9560456736  | Program output: 78.9560456736 
Correct output: -54.9317847731 | Program output: 12.0682152269 
Correct output: 43.2695047863  | Program output: -14.7304952137
Correct output: 127.5752307902 | Program output: 67.5752307902 
Correct output: -118.3834102551 | Program output: -77.3834102551
Correct output: -20.9430876309 | Program output: 6.0569123691  
Correct output: -40.1637221127 | Program output: -13.1637221127
Correct output: 84.4459340278  | Program output: 35.4459340278 
Correct output: 66.9574048532  | Program output: 95.9574048532 
Correct output: 43.0403227949  | Program output: 7.0403227949  
Correct output: -130.5218741194 | Program output: -34.5218741194
Correct output: -26.7988140078 | Program output: -46.7988140078
Correct output: 62.375676743   | Program output: -7.624323257  
Correct output: 90.6509578065  | Program output: 31.6509578065 
Correct output: -146.0070943376 | Program output: -54.0070943376
Correct output: -77.9582317921 | Program output: -49.9582317921
Correct output: -36.4250425838 | Program output: -23.4250425838
Correct output: 52.9510395124  | Program output: -23.0489604876
Correct output: 35.7624010697  | Program output: 35.7624010697 
Correct output: -143.6863764074 | Program output: -83.6863764074
Correct output: -4.8279891918  | Program output: -4.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction integer_yankdup} {:instruction tagged_949} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_pop} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_sin} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_flush} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction integer_sub} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max integer_yankdup tagged_949 float_dup integer_fromfloat float_dup_items float_dup_times integer_dup_items integer_flush in1 float_pop integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 float_sin float_pop float_inc float_inc in1 float_dup_items float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_min float_inc in1 integer_flush float_pop print_float float_sub float_flush float_flush float_inc in1 integer_flush float_pop print_float integer_sub float_flush float_frominteger)
Errors: [9.0 2 61.0 13 50.0 1 76.0 3 2.0 2 67.0 13 58.0 12 60.0 2 41.0 3 27.0 12 27.0 2 49.0 2 29.0 2 36.0 2 96.0 2 20.0 1 70.0 11 59.0 2 92.0 2 28.0 2 13.0 2 76.0 12 0.0 0 60.0 2 0.0 0]
Total: 1213.0
Mean: 24.26
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4459.8000956
Median total errors in population: 1303.0
Error averages by case: (141.3859543 3.673 182.23154259999998 12.983 173.6195023999999 3.587 206.18057069999995 5.02 137.0025515 3.858 192.45443099999991 13.169 179.75830229999994 12.118 186.07165770000006 4.265 175.9608628 4.519 158.01377169999998 11.793 159.2983667 3.74 174.23497799999998 3.855 163.89885750000002 4.565 160.85820579999995 5.069 220.8462898 4.869 149.56447900000003 3.598 190.16055270000004 11.268 182.5151896 3.824 218.8122152 4.263 162.92130579999994 4.08 141.1891112 4.018 195.27478419999997 12.389 132.38935210000002 2.701 192.94574390000005 4.461 131.55951709999994 2.967)
Error minima by case: (1.0 1 0.0557 8 3.4197 1 6.0918 2 0.0 0 23.0022 9 5.3059 8 12.4248 2 30.0 2 5.4659 1 8.2342 1 1.4245 1 17.6663 1 6.4556 1 39.1606 1 5.1308 1 23.6362 1 23.3592 1 34.9929 1 2.1832 1 0.0 0 15.5518 6 0.0 0 25.6864 2 0.0 0)
Average genome size in population (length): 91.838
Average program size in population (points): 92.838
Average percent parens in population: 0.011
Minimum age in population: 94.39634426175365
Maximum age in population: 100.0560899385803
Average age in population: 98.0220047903093
Median age in population: 98.06724772964465
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.126
Error (vector) diversity:			 0.141
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 153058350
--- Timings ---
Current time: 1529616065566 milliseconds
Total Time:         317.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       106.5 seconds, 33.6%
Fitness Testing:    167.2 seconds, 52.7%
Report:              43.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 49675.0
Test mean error for best: 24.83750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 58.542920316  
Correct output: 36.9263823022  | Program output: -22.0736176978
Correct output: -12.6268384926 | Program output: -60.6268384926
Correct output: -156.0918084307 | Program output: -83.0918084307
Correct output: 80.9560456736  | Program output: 80.9560456736 
Correct output: -54.9317847731 | Program output: 9.0682152269  
Correct output: 43.2695047863  | Program output: -12.7304952137
Correct output: 127.5752307902 | Program output: 69.5752307902 
Correct output: -118.3834102551 | Program output: -80.3834102551
Correct output: -20.9430876309 | Program output: 3.0569123691  
Correct output: -40.1637221127 | Program output: -16.1637221127
Correct output: 84.4459340278  | Program output: 37.4459340278 
Correct output: 66.9574048532  | Program output: 92.9574048532 
Correct output: 43.0403227949  | Program output: 9.0403227949  
Correct output: -130.5218741194 | Program output: -37.5218741194
Correct output: -26.7988140078 | Program output: -44.7988140078
Correct output: 62.375676743   | Program output: -5.624323257  
Correct output: 90.6509578065  | Program output: 33.6509578065 
Correct output: -146.0070943376 | Program output: -57.0070943376
Correct output: -77.9582317921 | Program output: -52.9582317921
Correct output: -36.4250425838 | Program output: -21.4250425838
Correct output: 52.9510395124  | Program output: -21.0489604876
Correct output: 35.7624010697  | Program output: 37.7624010697 
Correct output: -143.6863764074 | Program output: -86.6863764074
Correct output: -4.8279891918  | Program output: -2.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction tagged_949} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_max} {:instruction integer_flush} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_sin} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_shove} {:instruction float_inc} {:instruction in1} {:instruction float_yank} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction integer_pop} {:instruction float_flush} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float})
Best program: (integer_fromfloat float_max tagged_869 tagged_949 float_frominteger print_float integer_max integer_flush integer_inc integer_rot float_dup_items float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc integer_sub integer_flush float_inc float_inc in1 float_sin float_pop float_inc float_inc in1 float_dup_items float_frominteger float_pop float_shove float_inc in1 float_yank float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub integer_pop float_flush float_inc in1 integer_flush float_pop print_float)
Errors: [7.0 2 59.0 13 48.0 2 73.0 3 0.0 0 64.0 13 56.0 11 58.0 3 38.0 3 24.0 12 24.0 2 47.0 2 26.0 2 34.0 2 93.0 2 18.0 2 68.0 11 57.0 2 89.0 3 25.0 2 15.0 2 74.0 12 2.0 1 57.0 3 2.0 1]
Total: 1169.0
Mean: 23.38
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4012.370874500001
Median total errors in population: 1303.0
Error averages by case: (123.79345549999998 3.512 166.93603980000003 12.969 158.59475070000005 3.49 190.4918916 4.812 119.96474509999997 3.687 172.1081949 13.13 163.73908609999998 12.047 169.15817670000004 4.184 158.1723731 4.413 136.76060839999997 11.688 138.97417299999998 3.688 155.26836859999997 3.687 145.21371190000005 4.251 142.46856839999995 5.073 202.86744629999987 4.525 133.7293603 3.481 172.7244621 11.159 163.89385840000006 3.663 200.56051789999995 4.116 143.5360575 3.877 124.15479929999997 3.852 179.01400500000008 12.372 114.51043989999994 2.641 174.36843530000004 4.241 113.82834870000002 2.981)
Error minima by case: (0.0 0 6.8259 8 11.6075 1 7.0918 2 0.0 0 10.5629 8 0.6066 2 12.4248 2 30.0 2 14.5488 1 4.2052 1 1.6562 1 18.0 1 0.8357 1 1.6388 1 5.0 1 1.6509 1 7.9284 1 34.9929 1 4.3989 1 0.0 0 9.075 6 0.0 0 26.6864 2 0.0 0)
Average genome size in population (length): 89.294
Average program size in population (points): 90.294
Average percent parens in population: 0.011
Minimum age in population: 96.83402482502242
Maximum age in population: 101.6137052439445
Average age in population: 99.50928332881827
Median age in population: 99.55078656764793
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.162
Error (vector) diversity:			 0.183
Behavioral diversity:				 0.184
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 155290775
--- Timings ---
Current time: 1529616070083 milliseconds
Total Time:         321.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.0 seconds, 33.6%
Fitness Testing:    169.7 seconds, 52.8%
Report:              43.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 49026.0
Test mean error for best: 24.51300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 65.542920316  
Correct output: 36.9263823022  | Program output: -15.0736176978
Correct output: -12.6268384926 | Program output: -53.6268384926
Correct output: -156.0918084307 | Program output: -80.0918084307
Correct output: 80.9560456736  | Program output: 87.9560456736 
Correct output: -54.9317847731 | Program output: 12.0682152269 
Correct output: 43.2695047863  | Program output: -5.7304952137 
Correct output: 127.5752307902 | Program output: 76.5752307902 
Correct output: -118.3834102551 | Program output: -77.3834102551
Correct output: -20.9430876309 | Program output: 6.0569123691  
Correct output: -40.1637221127 | Program output: -13.1637221127
Correct output: 84.4459340278  | Program output: 44.4459340278 
Correct output: 66.9574048532  | Program output: 95.9574048532 
Correct output: 43.0403227949  | Program output: 16.0403227949 
Correct output: -130.5218741194 | Program output: -34.5218741194
Correct output: -26.7988140078 | Program output: -37.7988140078
Correct output: 62.375676743   | Program output: 1.375676743   
Correct output: 90.6509578065  | Program output: 40.6509578065 
Correct output: -146.0070943376 | Program output: -54.0070943376
Correct output: -77.9582317921 | Program output: -49.9582317921
Correct output: -36.4250425838 | Program output: -14.4250425838
Correct output: 52.9510395124  | Program output: -14.0489604876
Correct output: 35.7624010697  | Program output: 44.7624010697 
Correct output: -143.6863764074 | Program output: -83.6863764074
Correct output: -4.8279891918  | Program output: 4.1720108082  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction tagged_949} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_max} {:instruction integer_flush} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_sin} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_flush} {:instruction float_inc} {:instruction in1} {:instruction integer_dup} {:instruction float_pop} {:instruction print_float} {:instruction integer_sub} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 tagged_949 float_frominteger print_float integer_max integer_flush integer_inc integer_rot float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 float_sin float_pop float_inc float_inc in1 float_dup_items float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_flush float_inc in1 integer_dup float_pop print_float integer_sub float_flush float_frominteger)
Errors: [0.0 0 52.0 13 41.0 2 76.0 3 7.0 1 67.0 13 49.0 11 51.0 3 41.0 3 27.0 12 27.0 2 40.0 1 29.0 2 27.0 2 96.0 2 11.0 2 61.0 2 50.0 1 92.0 2 28.0 2 22.0 2 67.0 13 9.0 2 60.0 2 9.0 10]
Total: 1147.0
Mean: 22.94
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3350.300402
Median total errors in population: 1243.0
Error averages by case: (96.83264539999998 3.014 144.09398050000001 13.005 134.17960519999994 3.034 159.41218020000002 4.248 91.73418839999994 3.16 144.33807839999997 13.16 141.19786999999994 11.998 143.34642889999998 3.744 127.74256809999999 4.018 109.73182129999996 11.528 111.5757523 3.274 131.0319628 3.148 112.9554203 3.394 120.42615949999995 5.074 176.9567367 3.589 108.58234320000001 3.051 151.60158589999998 11.133 139.7498783 3.137 173.29823259999995 3.623 115.00839800000001 3.298 98.65545839999997 3.312 157.78183019999997 12.446 87.47188890000001 2.211 145.11431720000002 3.648 89.65507129999996 2.579)
Error minima by case: (0.0 0 16.7313 8 0.0256 1 3.0918 2 0.0 0 37.4965 10 23.3839 2 9.4248 2 30.0 2 3.5078 1 2.8363 1 5.9132 1 18.0 1 1.3565 1 50.4781 1 3.0 1 27.9835 1 0.2918 1 26.9929 1 17.0 1 0.0 0 32.0116 7 0.0 0 22.6864 2 0.0 0)
Average genome size in population (length): 82.685
Average program size in population (points): 83.685
Average percent parens in population: 0.012
Minimum age in population: 98.53134298400232
Maximum age in population: 103.0553058824551
Average age in population: 100.9673075287329
Median age in population: 101.0293302384561
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.181
Error (vector) diversity:			 0.22
Behavioral diversity:				 0.22
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 157357950
--- Timings ---
Current time: 1529616074511 milliseconds
Total Time:         325.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       109.4 seconds, 33.6%
Fitness Testing:    172.0 seconds, 52.8%
Report:              44.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 47975.0
Test mean error for best: 23.98750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 57.542920316  
Correct output: 36.9263823022  | Program output: -23.0736176978
Correct output: -12.6268384926 | Program output: -61.6268384926
Correct output: -156.0918084307 | Program output: -87.0918084307
Correct output: 80.9560456736  | Program output: 79.9560456736 
Correct output: -54.9317847731 | Program output: 5.0682152269  
Correct output: 43.2695047863  | Program output: -13.7304952137
Correct output: 127.5752307902 | Program output: 68.5752307902 
Correct output: -118.3834102551 | Program output: -84.3834102551
Correct output: -20.9430876309 | Program output: -0.9430876309 
Correct output: -40.1637221127 | Program output: -20.1637221127
Correct output: 84.4459340278  | Program output: 36.4459340278 
Correct output: 66.9574048532  | Program output: 88.9574048532 
Correct output: 43.0403227949  | Program output: 8.0403227949  
Correct output: -130.5218741194 | Program output: -41.5218741194
Correct output: -26.7988140078 | Program output: -45.7988140078
Correct output: 62.375676743   | Program output: -6.624323257  
Correct output: 90.6509578065  | Program output: 32.6509578065 
Correct output: -146.0070943376 | Program output: -61.0070943376
Correct output: -77.9582317921 | Program output: -56.9582317921
Correct output: -36.4250425838 | Program output: -22.4250425838
Correct output: 52.9510395124  | Program output: -22.0489604876
Correct output: 35.7624010697  | Program output: 36.7624010697 
Correct output: -143.6863764074 | Program output: -90.6863764074
Correct output: -4.8279891918  | Program output: -3.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction integer_yankdup} {:instruction tagged_949} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_pop} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_flush} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction integer_sub} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max integer_yankdup tagged_949 float_dup integer_fromfloat float_dup_items float_dup_times integer_dup_items integer_flush in1 float_pop integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 float_inc float_pop integer_pop float_inc integer_pop float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc float_inc in1 integer_flush float_pop integer_min float_inc in1 integer_flush float_pop print_float float_sub float_flush float_flush float_inc in1 integer_flush float_pop print_float integer_sub float_flush float_frominteger)
Errors: [8.0 2 60.0 13 49.0 2 69.0 3 1.0 2 60.0 12 57.0 11 59.0 3 34.0 3 20.0 1 20.0 1 48.0 2 22.0 2 35.0 2 89.0 3 19.0 2 69.0 11 58.0 2 85.0 3 21.0 2 14.0 2 75.0 12 1.0 1 53.0 3 1.0 1]
Total: 1128.0
Mean: 22.56
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2793.6601664999994
Median total errors in population: 1213.0
Error averages by case: (76.3448761 2.77 122.23602540000003 13.001 112.00678129999996 2.723 135.87700139999995 3.922 70.7989101 2.787 124.53257969999999 13.167 119.46847039999996 11.938 124.15391710000002 3.417 103.176301 3.814 87.21344739999999 11.552 87.94720190000002 3.014 111.51112820000003 2.884 90.89892220000002 2.974 98.08636569999994 4.701 153.63044309999995 3.11 85.63888469999996 2.722 130.2615947 11.151 120.50163589999995 2.887 150.32281269999996 3.245 90.27449039999999 2.961 76.19548739999999 3.034 136.25014990000005 12.398 66.93870550000001 1.835 121.07013850000004 3.227 66.7928958 2.297)
Error minima by case: (0.0 0 13.8499 8 0.6268 1 4.9082 2 0.0 0 18.5387 3 1.1833 2 0.4248 2 27.3834 2 15.45 1 3.7706 1 14.9343 1 2.5542 1 7.7359 1 45.2224 1 4.0 1 7.136 1 21.1393 1 35.9929 1 7.3412 1 0.0 0 2.1748 7 0.0 0 14.6864 2 0.0 0)
Average genome size in population (length): 80.04
Average program size in population (points): 81.04
Average percent parens in population: 0.012
Minimum age in population: 100.0733386812777
Maximum age in population: 104.2145941494426
Average age in population: 102.4334029981725
Median age in population: 102.4688199416734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 61
Genome diversity (% unique Plush genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.181
Error (vector) diversity:			 0.213
Behavioral diversity:				 0.214
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 159358950
--- Timings ---
Current time: 1529616078935 milliseconds
Total Time:         330.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       111.0 seconds, 33.6%
Fitness Testing:    174.4 seconds, 52.8%
Report:              45.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 47975.0
Test mean error for best: 23.98750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 57.542920316  
Correct output: 36.9263823022  | Program output: -23.0736176978
Correct output: -12.6268384926 | Program output: -61.6268384926
Correct output: -156.0918084307 | Program output: -87.0918084307
Correct output: 80.9560456736  | Program output: 79.9560456736 
Correct output: -54.9317847731 | Program output: 5.0682152269  
Correct output: 43.2695047863  | Program output: -13.7304952137
Correct output: 127.5752307902 | Program output: 68.5752307902 
Correct output: -118.3834102551 | Program output: -84.3834102551
Correct output: -20.9430876309 | Program output: -0.9430876309 
Correct output: -40.1637221127 | Program output: -20.1637221127
Correct output: 84.4459340278  | Program output: 36.4459340278 
Correct output: 66.9574048532  | Program output: 88.9574048532 
Correct output: 43.0403227949  | Program output: 8.0403227949  
Correct output: -130.5218741194 | Program output: -41.5218741194
Correct output: -26.7988140078 | Program output: -45.7988140078
Correct output: 62.375676743   | Program output: -6.624323257  
Correct output: 90.6509578065  | Program output: 32.6509578065 
Correct output: -146.0070943376 | Program output: -61.0070943376
Correct output: -77.9582317921 | Program output: -56.9582317921
Correct output: -36.4250425838 | Program output: -22.4250425838
Correct output: 52.9510395124  | Program output: -22.0489604876
Correct output: 35.7624010697  | Program output: 36.7624010697 
Correct output: -143.6863764074 | Program output: -90.6863764074
Correct output: -4.8279891918  | Program output: -3.8279891918 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction integer_yankdup} {:instruction tagged_949} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_pop} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_flush} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction integer_sub} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max integer_yankdup tagged_949 float_dup integer_fromfloat float_dup_items float_dup_times integer_dup_items integer_flush in1 float_pop integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 float_inc float_pop integer_pop float_inc integer_pop float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc float_inc in1 integer_flush float_pop integer_min float_inc in1 integer_flush float_pop print_float float_sub float_flush float_flush float_inc in1 integer_flush float_pop print_float integer_sub float_flush float_frominteger)
Errors: [8.0 2 60.0 13 49.0 2 69.0 3 1.0 2 60.0 12 57.0 11 59.0 3 34.0 3 20.0 1 20.0 1 48.0 2 22.0 2 35.0 2 89.0 3 19.0 2 69.0 11 58.0 2 85.0 3 21.0 2 14.0 2 75.0 12 1.0 1 53.0 3 1.0 1]
Total: 1128.0
Mean: 22.56
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3112.8206099999993
Median total errors in population: 1213.0
Error averages by case: (88.1943553 2.818 134.7416136 13.031 124.89771009999995 3.075 147.720905 3.986 83.49364680000001 2.663 136.9702845 13.181 131.96997 11.754 134.9414118 3.657 115.43327439999999 3.867 100.13842829999999 11.235 101.4278347 3.038 123.655409 3.01 102.47914139999999 3.026 111.70588319999997 4.846 165.4481237 3.231 98.97405529999997 3.064 142.88763189999997 10.921 132.68016789999996 3.003 162.0684231 3.48 102.97153699999998 3.052 90.7871867 3.21 148.63566889999998 12.498 81.1931564 2.159 133.04564750000003 3.446 81.9111435 3.197)
Error minima by case: (0.0 0 1.6536 8 9.6268 1 1.9082 2 0.0 0 55.2808 7 7.9968 2 6.4248 2 30.0 2 16.0 1 16.0 1 27.5541 1 6.0687 1 7.7676 1 67.4781 1 4.0 1 27.1029 1 41.349 1 43.9929 1 15.9582 1 0.0 0 17.6783 8 0.0 0 17.6864 2 0.0 0)
Average genome size in population (length): 82.408
Average program size in population (points): 83.408
Average percent parens in population: 0.012
Minimum age in population: 101.2671617675624
Maximum age in population: 106.1877433922251
Average age in population: 103.8974664247251
Median age in population: 103.9507129672995
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.208
Error (vector) diversity:			 0.254
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 161419150
--- Timings ---
Current time: 1529616083254 milliseconds
Total Time:         334.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.4 seconds, 33.6%
Fitness Testing:    176.6 seconds, 52.8%
Report:              45.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 47358.0
Test mean error for best: 23.67900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 73.542920316  
Correct output: 36.9263823022  | Program output: -7.0736176978 
Correct output: -12.6268384926 | Program output: -45.6268384926
Correct output: -156.0918084307 | Program output: -80.0918084307
Correct output: 80.9560456736  | Program output: 95.9560456736 
Correct output: -54.9317847731 | Program output: 12.0682152269 
Correct output: 43.2695047863  | Program output: 2.2695047863  
Correct output: 127.5752307902 | Program output: 84.5752307902 
Correct output: -118.3834102551 | Program output: -77.3834102551
Correct output: -20.9430876309 | Program output: 6.0569123691  
Correct output: -40.1637221127 | Program output: -13.1637221127
Correct output: 84.4459340278  | Program output: 52.4459340278 
Correct output: 66.9574048532  | Program output: 95.9574048532 
Correct output: 43.0403227949  | Program output: 24.0403227949 
Correct output: -130.5218741194 | Program output: -34.5218741194
Correct output: -26.7988140078 | Program output: -29.7988140078
Correct output: 62.375676743   | Program output: 9.375676743   
Correct output: 90.6509578065  | Program output: 48.6509578065 
Correct output: -146.0070943376 | Program output: -54.0070943376
Correct output: -77.9582317921 | Program output: -49.9582317921
Correct output: -36.4250425838 | Program output: -6.4250425838 
Correct output: 52.9510395124  | Program output: -6.0489604876 
Correct output: 35.7624010697  | Program output: 52.7624010697 
Correct output: -143.6863764074 | Program output: -83.6863764074
Correct output: -4.8279891918  | Program output: 12.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction tagged_949} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_max} {:instruction print_float} {:instruction integer_max} {:instruction integer_flush} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_sin} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction float_flush} {:instruction float_flush} {:instruction float_inc} {:instruction in1} {:instruction integer_dup} {:instruction float_pop} {:instruction print_float} {:instruction integer_sub} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 tagged_949 float_frominteger print_float integer_max print_float integer_max integer_flush integer_inc integer_rot float_dup_items float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 float_sin float_pop float_inc float_inc in1 float_dup_items float_frominteger float_pop float_inc float_inc in1 integer_flush float_pop integer_pop float_inc in1 integer_flush float_pop print_float float_sub float_flush float_flush float_inc in1 integer_dup float_pop print_float integer_sub float_flush float_frominteger)
Errors: [8.0 2 44.0 12 33.0 2 76.0 3 15.0 2 67.0 13 41.0 2 43.0 3 41.0 3 27.0 12 27.0 2 32.0 2 29.0 2 19.0 2 96.0 2 3.0 1 53.0 2 42.0 2 92.0 2 28.0 2 30.0 1 59.0 12 17.0 2 60.0 2 17.0 11]
Total: 1100.0
Mean: 22.0
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3260.1019115000004
Median total errors in population: 1185.0
Error averages by case: (98.03304159999999 2.921 142.3759447 13.104 132.49835409999994 3.372 150.39676629999994 4.092 94.61099499999997 2.722 140.44515180000002 13.21 139.1240206 11.728 144.42704329999998 3.988 118.3423112 3.975 103.84253289999998 10.623 104.1381588 3.16 129.32551690000005 3.217 106.61406919999999 3.16 115.12400589999997 5.202 167.90449230000002 3.427 106.967609 3.387 148.12581669999994 10.543 137.50540819999998 3.197 164.5722362 3.835 105.88428820000001 3.208 100.461779 3.357 156.09879229999999 12.696 89.2146004 2.629 136.01784380000004 3.842 89.18513310000002 4.271)
Error minima by case: (0.0 0 15.0176 9 3.3732 1 2.0918 2 0.0 0 4.0795 8 21.0974 2 8.4248 2 28.1193 2 16.0 1 0.1637 1 29.5541 1 18.0 1 4.3565 1 47.4781 1 3.0 1 40.9809 1 42.0 1 23.9929 1 17.0 1 0.0 0 30.1474 7 0.0 0 21.6864 2 0.0 0)
Average genome size in population (length): 83.429
Average program size in population (points): 84.429
Average percent parens in population: 0.012
Minimum age in population: 103.2834360797331
Maximum age in population: 107.227172795099
Average age in population: 105.4123776463999
Median age in population: 105.4355695427935
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.247
Error (vector) diversity:			 0.309
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 163504875
--- Timings ---
Current time: 1529616087827 milliseconds
Total Time:         339.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.0 seconds, 33.6%
Fitness Testing:    179.0 seconds, 52.8%
Report:              46.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 45472.0
Test mean error for best: 22.73600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 65.542920316  
Correct output: 36.9263823022  | Program output: -15.0736176978
Correct output: -12.6268384926 | Program output: -53.6268384926
Correct output: -156.0918084307 | Program output: -87.0918084307
Correct output: 80.9560456736  | Program output: 87.9560456736 
Correct output: -54.9317847731 | Program output: 5.0682152269  
Correct output: 43.2695047863  | Program output: -5.7304952137 
Correct output: 127.5752307902 | Program output: 76.5752307902 
Correct output: -118.3834102551 | Program output: -84.3834102551
Correct output: -20.9430876309 | Program output: -0.9430876309 
Correct output: -40.1637221127 | Program output: -20.1637221127
Correct output: 84.4459340278  | Program output: 44.4459340278 
Correct output: 66.9574048532  | Program output: 88.9574048532 
Correct output: 43.0403227949  | Program output: 16.0403227949 
Correct output: -130.5218741194 | Program output: -41.5218741194
Correct output: -26.7988140078 | Program output: -37.7988140078
Correct output: 62.375676743   | Program output: 1.375676743   
Correct output: 90.6509578065  | Program output: 40.6509578065 
Correct output: -146.0070943376 | Program output: -61.0070943376
Correct output: -77.9582317921 | Program output: -56.9582317921
Correct output: -36.4250425838 | Program output: -14.4250425838
Correct output: 52.9510395124  | Program output: -14.0489604876
Correct output: 35.7624010697  | Program output: 44.7624010697 
Correct output: -143.6863764074 | Program output: -90.6863764074
Correct output: -4.8279891918  | Program output: 4.1720108082  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_max} {:instruction float_frominteger} {:instruction tagged_949} {:instruction float_stackdepth} {:instruction print_float} {:instruction print_float} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction integer_rot} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction in1} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction integer_div} {:instruction tag_integer_460} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction integer_mult} {:instruction float_flush} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (float_dup_times float_max float_frominteger tagged_949 float_stackdepth print_float print_float integer_max float_inc integer_max integer_rot float_flush float_pop integer_max in1 in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc integer_div tag_integer_460 float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc float_inc in1 in2 float_shove float_inc float_inc float_inc in1 integer_flush float_pop integer_min float_inc in1 integer_flush float_pop print_float float_sub integer_mult float_flush float_inc in1 integer_flush float_pop print_float float_dup_times float_flush float_frominteger)
Errors: [0.0 0 52.0 13 41.0 2 69.0 3 7.0 1 60.0 12 49.0 11 51.0 3 34.0 3 20.0 1 20.0 1 40.0 1 22.0 2 27.0 2 89.0 3 11.0 2 61.0 2 50.0 1 85.0 3 21.0 2 22.0 2 67.0 13 9.0 2 53.0 3 9.0 10]
Total: 1067.0
Mean: 21.34
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2961.6420817
Median total errors in population: 1164.0
Error averages by case: (82.40605570000001 2.535 128.32736910000003 13.053 118.76539209999999 3.028 140.40913489999994 3.832 80.1449616 2.543 131.2836777 12.997 125.73829579999999 11.611 129.40100259999997 3.788 107.97284040000002 3.755 94.20392649999998 9.076 94.3718148 2.793 117.7261117 2.951 96.30606670000002 2.959 105.02916649999997 4.758 158.5741065 3.318 92.17097500000001 3.037 136.55965759999998 9.591 126.76836630000003 2.933 155.0182689 3.66 95.6596663 2.962 87.4810132 3.011 142.1724889 12.753 78.53311460000002 2.477 125.62984180000002 3.674 78.87576649999997 5.018)
Error minima by case: (0.0 0 0.4035 8 1.3732 1 15.0918 2 0.0 0 55.8081 3 5.9396 2 8.4248 2 30.0 2 16.0 1 2.8363 1 5.2456 1 11.4656 1 5.7104 1 50.4781 1 3.0 1 6.8839 1 11.4506 1 26.9929 1 17.0 1 0.0 0 2.5407 6 0.0 0 34.6864 2 0.0 0)
Average genome size in population (length): 85.34
Average program size in population (points): 86.34
Average percent parens in population: 0.012
Minimum age in population: 104.2834360797331
Maximum age in population: 108.8730657263601
Average age in population: 106.808136999577
Median age in population: 106.8646224036539
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.198
Error (vector) diversity:			 0.259
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 165638375
--- Timings ---
Current time: 1529616092084 milliseconds
Total Time:         343.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.5 seconds, 33.6%
Fitness Testing:    181.2 seconds, 52.8%
Report:              46.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 45021.0
Test mean error for best: 22.51050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 75.542920316  
Correct output: 36.9263823022  | Program output: -5.0736176978 
Correct output: -12.6268384926 | Program output: -43.6268384926
Correct output: -156.0918084307 | Program output: -84.0918084307
Correct output: 80.9560456736  | Program output: 97.9560456736 
Correct output: -54.9317847731 | Program output: 8.0682152269  
Correct output: 43.2695047863  | Program output: 4.2695047863  
Correct output: 127.5752307902 | Program output: 86.5752307902 
Correct output: -118.3834102551 | Program output: -81.3834102551
Correct output: -20.9430876309 | Program output: 2.0569123691  
Correct output: -40.1637221127 | Program output: -17.1637221127
Correct output: 84.4459340278  | Program output: 54.4459340278 
Correct output: 66.9574048532  | Program output: 91.9574048532 
Correct output: 43.0403227949  | Program output: 26.0403227949 
Correct output: -130.5218741194 | Program output: -38.5218741194
Correct output: -26.7988140078 | Program output: -27.7988140078
Correct output: 62.375676743   | Program output: 11.375676743  
Correct output: 90.6509578065  | Program output: 50.6509578065 
Correct output: -146.0070943376 | Program output: -58.0070943376
Correct output: -77.9582317921 | Program output: -53.9582317921
Correct output: -36.4250425838 | Program output: -4.4250425838 
Correct output: 52.9510395124  | Program output: -4.0489604876 
Correct output: 35.7624010697  | Program output: 54.7624010697 
Correct output: -143.6863764074 | Program output: -87.6863764074
Correct output: -4.8279891918  | Program output: 14.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction float_max} {:instruction tagged_869} {:instruction tagged_949} {:instruction float_rot} {:instruction print_float} {:instruction integer_max} {:instruction integer_flush} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_sin} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction integer_sub} {:instruction integer_pop})
Best program: (float_rot float_max tagged_869 tagged_949 float_rot print_float integer_max integer_flush integer_inc integer_rot float_dup_items float_dup_times integer_swap integer_flush in1 float_inc integer_max integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 in2 float_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc in1 float_sin float_pop float_inc in1 integer_flush float_pop print_float integer_sub integer_pop)
Errors: [10.0 1 42.0 12 31.0 2 72.0 3 17.0 2 63.0 13 39.0 1 41.0 3 37.0 2 23.0 11 23.0 2 30.0 1 25.0 2 17.0 2 92.0 2 1.0 1 51.0 2 40.0 1 88.0 3 24.0 2 32.0 2 57.0 12 19.0 2 56.0 3 19.0 10]
Total: 1046.0
Mean: 20.92
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2829.8923618
Median total errors in population: 1141.0
Error averages by case: (79.348051 2.487 125.28612349999997 13.067 115.11000449999995 2.934 136.4812225 3.808 76.6094392 2.464 121.38907250000001 12.739 121.05068900000002 11.537 126.59636100000003 3.672 103.1866876 3.747 85.06011399999998 6.219 86.88752710000004 2.582 112.4725944 2.846 92.0899782 2.921 98.4180997 4.886 153.57392599999997 3.533 88.20716209999999 2.927 130.63841100000002 9.623 120.93990959999998 2.817 150.23645190000002 3.652 90.4194353 2.898 82.76855230000002 2.928 138.9180824 12.703 73.78495589999999 2.347 120.9953905 3.671 71.7901206 4.626)
Error minima by case: (0.0 0 7.9305 2 0.6268 1 65.0 2 0.0 0 7.9141 9 12.1517 1 3.4248 2 27.8611 2 10.1039 1 6.854 1 24.0 1 18.0 1 11.0 1 39.9996 1 1.0 1 6.9545 1 34.0 1 55.4848 1 12.564 1 0.0 0 2.4701 2 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 85.392
Average program size in population (points): 86.392
Average percent parens in population: 0.012
Minimum age in population: 106.129447915023
Maximum age in population: 109.8295014398612
Average age in population: 108.256444241349
Median age in population: 108.3090094133459
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.205
Error (vector) diversity:			 0.253
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 167773175
--- Timings ---
Current time: 1529616096530 milliseconds
Total Time:         348.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.0 seconds, 33.6%
Fitness Testing:    183.6 seconds, 52.8%
Report:              47.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 43468.0
Test mean error for best: 21.73400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 75.542920316  
Correct output: 36.9263823022  | Program output: -5.0736176978 
Correct output: -12.6268384926 | Program output: -43.6268384926
Correct output: -156.0918084307 | Program output: -87.0918084307
Correct output: 80.9560456736  | Program output: 97.9560456736 
Correct output: -54.9317847731 | Program output: 5.0682152269  
Correct output: 43.2695047863  | Program output: 4.2695047863  
Correct output: 127.5752307902 | Program output: 86.5752307902 
Correct output: -118.3834102551 | Program output: -84.3834102551
Correct output: -20.9430876309 | Program output: -0.9430876309 
Correct output: -40.1637221127 | Program output: -20.1637221127
Correct output: 84.4459340278  | Program output: 54.4459340278 
Correct output: 66.9574048532  | Program output: 88.9574048532 
Correct output: 43.0403227949  | Program output: 26.0403227949 
Correct output: -130.5218741194 | Program output: -41.5218741194
Correct output: -26.7988140078 | Program output: -27.7988140078
Correct output: 62.375676743   | Program output: 11.375676743  
Correct output: 90.6509578065  | Program output: 50.6509578065 
Correct output: -146.0070943376 | Program output: -61.0070943376
Correct output: -77.9582317921 | Program output: -56.9582317921
Correct output: -36.4250425838 | Program output: -4.4250425838 
Correct output: 52.9510395124  | Program output: -4.0489604876 
Correct output: 35.7624010697  | Program output: 54.7624010697 
Correct output: -143.6863764074 | Program output: -90.6863764074
Correct output: -4.8279891918  | Program output: 14.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction integer_mult} {:instruction float_flush} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc integer_dup_items float_inc float_inc float_dup_items integer_div float_inc integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc integer_sub integer_flush float_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc float_inc in1 in2 float_shove float_inc float_inc float_inc in1 integer_flush float_pop integer_min float_inc in1 integer_flush float_pop print_float float_sub integer_mult float_flush float_inc in1 integer_flush float_pop print_float float_dup_times float_flush float_frominteger)
Errors: [10.0 1 42.0 12 31.0 2 69.0 3 17.0 2 60.0 12 39.0 1 41.0 3 34.0 3 20.0 1 20.0 1 30.0 1 22.0 2 17.0 2 89.0 3 1.0 1 51.0 2 40.0 1 85.0 3 21.0 2 32.0 2 57.0 12 19.0 2 53.0 3 19.0 10]
Total: 1006.0
Mean: 20.12
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3046.8357480999994
Median total errors in population: 1119.0
Error averages by case: (89.38032919999999 2.724 133.6512001 13.129 123.62187039999999 3.157 141.82360519999997 4.012 86.92260939999998 2.579 131.45186829999997 12.726 130.72207799999998 11.43 135.55629750000003 3.88 109.5328692 3.924 94.37620650000001 4.455 94.95556010000001 2.574 122.39277150000005 3.081 98.05271979999999 3.1 108.0064328 4.933 159.604808 3.848 97.42609230000001 3.126 140.33511069999997 9.909 130.69915910000003 3.042 156.2145855 3.84 97.08534610000001 3.051 93.57984350000001 3.141 147.50958049999997 12.729 84.0361987 2.552 127.13088790000002 3.872 83.12871779999999 4.825)
Error minima by case: (0.0 0 7.8515 2 2.6268 1 14.0918 2 0.0 0 9.8329 9 14.1719 1 7.5752 2 10.3834 2 15.0 1 3.8363 1 13.5541 1 17.0 1 4.3161 1 51.4781 2 0.0 0 32.3653 1 27.349 1 27.9929 1 4.0418 1 0.0 0 23.8742 2 0.0 0 2.3136 2 0.0 0)
Average genome size in population (length): 84.855
Average program size in population (points): 85.855
Average percent parens in population: 0.012
Minimum age in population: 107.2977578048281
Maximum age in population: 111.6176587628688
Average age in population: 109.7615261009228
Median age in population: 109.76589570797
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.199
Error (vector) diversity:			 0.245
Behavioral diversity:				 0.246
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 169894550
--- Timings ---
Current time: 1529616100833 milliseconds
Total Time:         352.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.5 seconds, 33.6%
Fitness Testing:    185.9 seconds, 52.8%
Report:              47.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 43468.0
Test mean error for best: 21.73400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 75.542920316  
Correct output: 36.9263823022  | Program output: -5.0736176978 
Correct output: -12.6268384926 | Program output: -43.6268384926
Correct output: -156.0918084307 | Program output: -87.0918084307
Correct output: 80.9560456736  | Program output: 97.9560456736 
Correct output: -54.9317847731 | Program output: 5.0682152269  
Correct output: 43.2695047863  | Program output: 4.2695047863  
Correct output: 127.5752307902 | Program output: 86.5752307902 
Correct output: -118.3834102551 | Program output: -84.3834102551
Correct output: -20.9430876309 | Program output: -0.9430876309 
Correct output: -40.1637221127 | Program output: -20.1637221127
Correct output: 84.4459340278  | Program output: 54.4459340278 
Correct output: 66.9574048532  | Program output: 88.9574048532 
Correct output: 43.0403227949  | Program output: 26.0403227949 
Correct output: -130.5218741194 | Program output: -41.5218741194
Correct output: -26.7988140078 | Program output: -27.7988140078
Correct output: 62.375676743   | Program output: 11.375676743  
Correct output: 90.6509578065  | Program output: 50.6509578065 
Correct output: -146.0070943376 | Program output: -61.0070943376
Correct output: -77.9582317921 | Program output: -56.9582317921
Correct output: -36.4250425838 | Program output: -4.4250425838 
Correct output: 52.9510395124  | Program output: -4.0489604876 
Correct output: 35.7624010697  | Program output: 54.7624010697 
Correct output: -143.6863764074 | Program output: -90.6863764074
Correct output: -4.8279891918  | Program output: 14.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction integer_mult} {:instruction float_flush} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc integer_dup_items float_inc float_inc float_dup_items integer_div float_inc integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc integer_sub integer_flush float_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc float_inc in1 in2 float_shove float_inc float_inc float_inc in1 integer_flush float_pop integer_min float_inc in1 integer_flush float_pop print_float float_sub integer_mult float_flush float_inc in1 integer_flush float_pop print_float float_dup_times float_flush float_frominteger)
Errors: [10.0 1 42.0 12 31.0 2 69.0 3 17.0 2 60.0 12 39.0 1 41.0 3 34.0 3 20.0 1 20.0 1 30.0 1 22.0 2 17.0 2 89.0 3 1.0 1 51.0 2 40.0 1 85.0 3 21.0 2 32.0 2 57.0 12 19.0 2 53.0 3 19.0 10]
Total: 1006.0
Mean: 20.12
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2850.7535477
Median total errors in population: 1105.0
Error averages by case: (79.6458221 2.531 122.59528750000001 12.808 113.20030869999995 3.067 136.2611522 3.926 80.15551550000002 2.609 126.69386399999999 12.747 119.8076148 10.403 123.61753090000006 3.76 103.8410689 3.773 89.67224689999999 5.07 89.9167658 2.637 111.43081889999999 2.984 92.2779161 2.995 98.53672579999996 4.753 154.2273729 3.707 86.71007250000001 2.967 130.46181919999998 8.046 120.4367261 2.963 150.76949590000004 3.74 91.36427019999999 2.964 87.34952490000003 3.124 136.4359828 12.615 78.0910803 2.671 121.50423780000001 3.743 78.21732699999997 6.93)
Error minima by case: (0.0 0 1.0736 2 4.6268 1 6.9082 2 0.0 0 2.9318 10 5.2695 1 0.4248 2 23.3834 2 8.9431 1 8.755 1 11.4459 1 18.0 1 5.0403 1 49.5219 1 0.0 0 24.3757 1 7.651 1 48.9929 1 8.9582 1 0.0 0 14.951 1 0.0 0 10.6864 2 0.0 0)
Average genome size in population (length): 87.286
Average program size in population (points): 88.286
Average percent parens in population: 0.011
Minimum age in population: 109.1164938227923
Maximum age in population: 113.1072371003445
Average age in population: 111.2127336405934
Median age in population: 111.2181683280028
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.241
Error (vector) diversity:			 0.292
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 172076700
--- Timings ---
Current time: 1529616105201 milliseconds
Total Time:         356.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.9 seconds, 33.6%
Fitness Testing:    188.2 seconds, 52.8%
Report:              48.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 42739.0
Test mean error for best: 21.36950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 81.542920316  
Correct output: 36.9263823022  | Program output: 0.9263823022  
Correct output: -12.6268384926 | Program output: -37.6268384926
Correct output: -156.0918084307 | Program output: -87.0918084307
Correct output: 80.9560456736  | Program output: 103.9560456736
Correct output: -54.9317847731 | Program output: 5.0682152269  
Correct output: 43.2695047863  | Program output: 10.2695047863 
Correct output: 127.5752307902 | Program output: 92.5752307902 
Correct output: -118.3834102551 | Program output: -84.3834102551
Correct output: -20.9430876309 | Program output: -0.9430876309 
Correct output: -40.1637221127 | Program output: -20.1637221127
Correct output: 84.4459340278  | Program output: 60.4459340278 
Correct output: 66.9574048532  | Program output: 88.9574048532 
Correct output: 43.0403227949  | Program output: 32.0403227949 
Correct output: -130.5218741194 | Program output: -41.5218741194
Correct output: -26.7988140078 | Program output: -21.7988140078
Correct output: 62.375676743   | Program output: 17.375676743  
Correct output: 90.6509578065  | Program output: 56.6509578065 
Correct output: -146.0070943376 | Program output: -61.0070943376
Correct output: -77.9582317921 | Program output: -56.9582317921
Correct output: -36.4250425838 | Program output: 1.5749574162  
Correct output: 52.9510395124  | Program output: 1.9510395124  
Correct output: 35.7624010697  | Program output: 60.7624010697 
Correct output: -143.6863764074 | Program output: -90.6863764074
Correct output: -4.8279891918  | Program output: 20.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction in1} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction print_float} {:instruction float_sub} {:instruction integer_mult} {:instruction float_flush})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 integer_sub float_inc integer_stackdepth integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc integer_dup_items float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove float_inc in1 float_dup_items float_frominteger integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc float_inc in1 in2 float_shove float_inc float_inc float_inc in1 integer_flush float_pop integer_min float_inc in1 integer_flush float_pop print_float float_sub integer_mult float_flush)
Errors: [16.0 2 36.0 2 25.0 2 69.0 3 23.0 2 60.0 12 33.0 2 35.0 2 34.0 3 20.0 1 20.0 1 24.0 2 22.0 2 11.0 2 89.0 3 5.0 1 45.0 2 34.0 2 85.0 3 21.0 2 38.0 11 51.0 2 25.0 2 53.0 3 25.0 11]
Total: 979.0
Mean: 19.58
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2756.99784
Median total errors in population: 1067.0
Error averages by case: (77.1769584 2.563 115.95130029999999 12.511 107.74178989999997 3.132 135.5660476 3.816 80.4391076 2.743 120.62642729999996 12.755 111.73601799999997 8.844 118.5777173 3.811 102.33852550000002 3.595 83.9914832 5.46 85.79075440000001 2.612 105.73499550000001 2.999 90.1269555 2.922 91.89057419999997 4.642 152.5257489 3.558 81.741047 2.957 122.51678630000002 5.592 114.33960100000004 2.987 149.32695169999997 3.76 89.58058629999998 2.871 88.02466900000002 3.273 129.70464249999998 12.401 79.33034510000003 2.937 120.10953150000003 3.739 76.75227600000002 8.877)
Error minima by case: (0.0 0 0.018 2 1.9471 1 19.0918 1 0.0 0 46.3578 10 2.4093 1 1.4248 2 30.0 2 12.3691 1 1.1637 1 14.5541 1 17.0426 1 2.1801 1 46.4781 1 0.0 0 0.312 1 22.561 1 22.9929 1 17.0 1 0.0 0 9.7366 1 0.0 0 38.6864 2 0.0 0)
Average genome size in population (length): 91.005
Average program size in population (points): 92.005
Average percent parens in population: 0.011
Minimum age in population: 110.2398133029909
Maximum age in population: 114.5309392799963
Average age in population: 112.657085189182
Median age in population: 112.6529762510441
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.252
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 174351825
--- Timings ---
Current time: 1529616109758 milliseconds
Total Time:         361.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.5 seconds, 33.6%
Fitness Testing:    190.6 seconds, 52.8%
Report:              49.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 40278.0
Test mean error for best: 20.13900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 86.542920316  
Correct output: 36.9263823022  | Program output: 5.9263823022  
Correct output: -12.6268384926 | Program output: -32.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 108.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 15.2695047863 
Correct output: 127.5752307902 | Program output: 97.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 65.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 37.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -16.7988140078
Correct output: 62.375676743   | Program output: 22.375676743  
Correct output: 90.6509578065  | Program output: 61.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 6.5749574162  
Correct output: 52.9510395124  | Program output: 6.9510395124  
Correct output: 35.7624010697  | Program output: 65.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 25.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction float_min} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 integer_sub float_inc integer_stackdepth integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc in1 integer_sub float_inc in1 float_min float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [21.0 2 31.0 2 20.0 1 65.0 3 28.0 2 56.0 13 28.0 2 30.0 2 30.0 2 16.0 2 16.0 2 19.0 2 18.0 2 6.0 2 85.0 3 10.0 1 40.0 1 29.0 2 81.0 3 17.0 2 43.0 11 46.0 2 30.0 1 49.0 2 30.0 11]
Total: 922.0
Mean: 18.44
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2629.5942311000003
Median total errors in population: 1051.0
Error averages by case: (75.72974310000001 2.612 112.4342793 12.11 103.1299487 2.978 126.85754050000001 3.737 79.44426669999997 2.782 117.86388120000002 12.635 107.62439369999998 7.399 113.9768224 3.702 94.0569864 3.481 80.3838248 4.638 80.49414660000001 2.481 100.43534400000001 2.917 82.63609809999998 2.766 85.80789409999998 4.383 145.3102338 3.522 76.98339390000002 2.692 117.40523030000001 5.042 108.71663100000002 2.902 141.7058831 3.705 81.6739405 2.742 87.35676550000001 3.402 126.13327620000003 11.853 76.96966739999999 2.839 111.8912574 3.599 74.61678239999999 9.037)
Error minima by case: (0.0 0 2.0736 2 4.3872 1 7.9082 1 0.0 0 2.9318 10 3.8167 1 1.5752 2 24.3834 2 8.9431 1 16.0 1 9.5541 1 18.0 1 0.3856 1 49.5219 1 0.0 0 6.5048 1 7.651 1 49.9929 1 9.9582 1 0.0 0 13.951 1 0.0 0 11.6864 2 0.0 0)
Average genome size in population (length): 92.496
Average program size in population (points): 93.496
Average percent parens in population: 0.011
Minimum age in population: 112.2096784631895
Maximum age in population: 116.164751765093
Average age in population: 114.1272175200373
Median age in population: 114.1621583278618
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.239
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 176664225
--- Timings ---
Current time: 1529616114455 milliseconds
Total Time:         365.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.0 seconds, 33.6%
Fitness Testing:    193.0 seconds, 52.8%
Report:              49.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 40278.0
Test mean error for best: 20.13900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 86.542920316  
Correct output: 36.9263823022  | Program output: 5.9263823022  
Correct output: -12.6268384926 | Program output: -32.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 108.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 15.2695047863 
Correct output: 127.5752307902 | Program output: 97.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 65.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 37.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -16.7988140078
Correct output: 62.375676743   | Program output: 22.375676743  
Correct output: 90.6509578065  | Program output: 61.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 6.5749574162  
Correct output: 52.9510395124  | Program output: 6.9510395124  
Correct output: 35.7624010697  | Program output: 65.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 25.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction float_min} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 integer_sub float_inc integer_stackdepth integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_dec float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc in1 integer_sub float_inc in1 float_min float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [21.0 2 31.0 2 20.0 1 65.0 3 28.0 2 56.0 13 28.0 2 30.0 2 30.0 2 16.0 2 16.0 2 19.0 2 18.0 2 6.0 2 85.0 3 10.0 1 40.0 1 29.0 2 81.0 3 17.0 2 43.0 11 46.0 2 30.0 1 49.0 2 30.0 11]
Total: 922.0
Mean: 18.44
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3155.3934078
Median total errors in population: 1022.0
Error averages by case: (103.30180749999998 3.087 133.0728118 11.864 125.32558229999997 3.413 145.1588378 4.052 107.58039800000002 3.301 135.51956349999998 12.831 127.32857330000002 6.604 136.73502170000003 4.064 113.14346160000002 3.773 98.54970759999998 3.595 98.77869939999998 2.846 120.3058909 3.306 103.08360140000002 3.114 103.94198300000005 4.746 162.72365640000004 3.939 101.1717594 3.019 136.0781498 5.043 127.522637 3.285 159.54213450000003 3.996 100.9084707 3.062 113.05543800000002 4.278 146.27662030000002 11.548 101.96916950000002 3.258 130.5786529 3.854 98.36777950000001 9.495)
Error minima by case: (0.0 0 0.2041 1 9.0 1 10.9082 1 0.0 0 0.9318 9 0.9135 1 1.5752 2 21.3834 2 6.9431 1 3.8363 1 4.6235 1 18.0 1 0.0 0 41.5248 1 0.0 0 10.3757 1 1.5815 1 27.9929 2 6.9582 1 0.0 0 0.951 1 0.0 0 8.6864 2 0.0 0)
Average genome size in population (length): 94.46
Average program size in population (points): 95.46
Average percent parens in population: 0.011
Minimum age in population: 113.2096784631895
Maximum age in population: 117.5754574640582
Average age in population: 115.5612703177848
Median age in population: 115.6556182529455
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.261
Error (vector) diversity:			 0.325
Behavioral diversity:				 0.326
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 179025750
--- Timings ---
Current time: 1529616119197 milliseconds
Total Time:         370.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.5 seconds, 33.6%
Fitness Testing:    195.6 seconds, 52.8%
Report:              50.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 40236.0
Test mean error for best: 20.11800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 90.542920316  
Correct output: 36.9263823022  | Program output: 9.9263823022  
Correct output: -12.6268384926 | Program output: -28.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 112.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 19.2695047863 
Correct output: 127.5752307902 | Program output: 101.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 69.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 41.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -12.7988140078
Correct output: 62.375676743   | Program output: 26.375676743  
Correct output: 90.6509578065  | Program output: 65.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 10.5749574162 
Correct output: 52.9510395124  | Program output: 10.9510395124 
Correct output: 35.7624010697  | Program output: 69.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 29.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction float_min} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 integer_sub float_inc integer_stackdepth integer_flush float_pop float_inc float_inc integer_div integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc in1 integer_sub float_inc in1 float_min float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [25.0 2 27.0 2 16.0 2 65.0 3 32.0 3 56.0 13 24.0 2 26.0 2 30.0 2 16.0 2 16.0 2 15.0 2 18.0 2 2.0 1 85.0 3 14.0 2 36.0 2 25.0 2 81.0 3 17.0 2 47.0 12 42.0 2 34.0 2 49.0 2 34.0 11]
Total: 915.0
Mean: 18.3
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2877.1100022
Median total errors in population: 1002.0
Error averages by case: (89.78403130000002 2.905 117.17568000000001 10.321 108.07562429999997 3.132 137.98636549999995 3.939 93.89732910000002 3.112 127.98157950000001 12.688 114.11651699999997 5.6 118.52580140000003 3.812 105.5078919 3.695 91.4872796 2.994 91.72396690000002 2.791 106.41886080000003 3.065 93.68400399999999 2.924 93.57419530000003 4.458 155.9255714 3.893 86.46939250000003 2.693 124.8655811 4.88 115.22482269999999 3.037 152.4818295 3.872 93.10097619999998 2.876 102.24038750000001 5.409 130.8560579 9.757 92.62874990000002 2.968 123.20266670000002 3.675 92.26284019999996 9.416)
Error minima by case: (0.0 0 0.176 1 0.6268 1 64.0 1 0.0 0 51.93 9 1.2695 1 4.5752 2 29.0 2 15.0 1 15.0 1 0.4459 1 5.5499 1 0.0 0 84.0 1 0.0 0 0.9682 1 13.349 1 80.0 2 16.0 1 0.0 0 2.951 1 0.0 0 48.0 2 0.0 0)
Average genome size in population (length): 98.436
Average program size in population (points): 99.436
Average percent parens in population: 0.010
Minimum age in population: 114.8356787561598
Maximum age in population: 118.7007794423708
Average age in population: 117.1042666476123
Median age in population: 117.1543379862217
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.255
Error (vector) diversity:			 0.305
Behavioral diversity:				 0.305
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 181486650
--- Timings ---
Current time: 1529616124152 milliseconds
Total Time:         375.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.0 seconds, 33.6%
Fitness Testing:    198.3 seconds, 52.8%
Report:              51.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 40402.0
Test mean error for best: 20.20100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 95.542920316  
Correct output: 36.9263823022  | Program output: 14.9263823022 
Correct output: -12.6268384926 | Program output: -23.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 117.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 24.2695047863 
Correct output: 127.5752307902 | Program output: 106.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 74.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 46.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -7.7988140078 
Correct output: 62.375676743   | Program output: 31.375676743  
Correct output: 90.6509578065  | Program output: 70.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 15.5749574162 
Correct output: 52.9510395124  | Program output: 15.9510395124 
Correct output: 35.7624010697  | Program output: 74.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 34.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction float_min} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_swap in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc integer_dup_items float_dup_items integer_div float_inc float_inc float_inc float_inc integer_div float_inc integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_dec float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc in1 integer_sub float_inc in1 float_min float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [30.0 1 22.0 2 11.0 2 65.0 3 37.0 3 56.0 13 19.0 2 21.0 2 30.0 2 16.0 2 16.0 2 10.0 1 18.0 2 3.0 1 85.0 3 19.0 2 31.0 2 20.0 1 81.0 3 17.0 2 52.0 12 37.0 2 39.0 2 49.0 2 39.0 10]
Total: 902.0
Mean: 18.04
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3050.0219518
Median total errors in population: 975.0
Error averages by case: (102.904738 3.096 121.49965320000004 7.957 115.30304319999999 3.239 143.9820259 3.981 107.14539990000002 3.374 132.6128912 12.793 118.239185 5.254 125.64166980000005 3.888 111.83887639999999 3.599 95.7784943 3.056 96.5959447 2.93 112.27632369999999 3.218 100.52336009999999 2.948 97.77286020000001 4.71 160.90930650000004 3.978 98.7629369 2.944 128.81496579999998 4.99 120.03998089999999 3.185 158.5525894 3.912 99.7195095 2.869 112.70805480000003 7.436 134.8330805 7.632 104.56412979999999 3.094 129.3059776 3.588 102.6489545 9.377)
Error minima by case: (0.0 0 0.376 1 0.9106 1 15.9082 1 0.0 0 56.0 8 0.4518 1 5.5752 1 16.3834 2 3.5757 1 16.0 1 0.5541 1 18.0 1 0.0 0 81.4781 1 0.0 0 4.3653 1 14.349 1 57.9929 1 1.9582 1 0.0 0 0.3992 1 0.0 0 3.6864 2 0.0 0)
Average genome size in population (length): 101.479
Average program size in population (points): 102.479
Average percent parens in population: 0.010
Minimum age in population: 116.228518654692
Maximum age in population: 120.2819552508497
Average age in population: 118.5588865039226
Median age in population: 118.596637894285
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.24
Error (vector) diversity:			 0.305
Behavioral diversity:				 0.305
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 184023625
--- Timings ---
Current time: 1529616128970 milliseconds
Total Time:         380.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.4 seconds, 33.5%
Fitness Testing:    201.0 seconds, 52.9%
Report:              51.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 40468.0
Test mean error for best: 20.23400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 96.542920316  
Correct output: 36.9263823022  | Program output: 15.9263823022 
Correct output: -12.6268384926 | Program output: -22.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 118.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 25.2695047863 
Correct output: 127.5752307902 | Program output: 107.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 75.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 47.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -6.7988140078 
Correct output: 62.375676743   | Program output: 32.375676743  
Correct output: 90.6509578065  | Program output: 71.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 16.5749574162 
Correct output: 52.9510395124  | Program output: 16.9510395124 
Correct output: 35.7624010697  | Program output: 75.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 35.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_inc integer_sub integer_flush float_inc integer_mod float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [31.0 2 21.0 2 10.0 1 65.0 3 38.0 3 56.0 13 18.0 2 20.0 1 30.0 2 16.0 2 16.0 2 9.0 2 18.0 2 4.0 1 85.0 3 20.0 1 30.0 1 19.0 2 81.0 3 17.0 2 53.0 11 36.0 2 40.0 1 49.0 2 40.0 11]
Total: 899.0
Mean: 17.98
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2664.1968887
Median total errors in population: 954.0
Error averages by case: (89.26575260000003 2.95 106.7055696 6.665 97.11512929999999 3.038 128.31210529999998 3.888 92.47623789999999 3.308 117.94654979999999 12.993 103.23313739999998 5.348 108.5952721 3.597 95.5571638 3.232 80.6643139 2.93 81.36773470000001 2.973 95.18718799999998 3.063 83.95622069999999 2.876 82.2700842 4.612 146.49330099999997 3.911 83.8128028 2.924 113.57635370000001 5.028 103.94228020000004 3.027 142.99004620000002 3.847 83.100671 2.744 100.25618079999998 8.502 120.53162009999997 6.457 90.05442819999999 2.905 113.3917084 3.245 90.200037 9.132)
Error minima by case: (0.0 0 0.9868 1 0.0 0 65.0 2 0.0 0 11.777 10 0.1673 1 5.3817 1 30.0 2 4.7364 1 2.9911 1 0.0 0 18.0 1 0.0 0 85.0 2 0.0 0 4.6183 1 6.3817 1 81.0 1 17.0 1 0.0 0 5.9542 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 104.729
Average program size in population (points): 105.729
Average percent parens in population: 0.010
Minimum age in population: 117.697755884846
Maximum age in population: 121.8178721930817
Average age in population: 119.9719397121823
Median age in population: 120.0114689495523
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.228
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 186641850
--- Timings ---
Current time: 1529616134281 milliseconds
Total Time:         385.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.9 seconds, 33.4%
Fitness Testing:    204.1 seconds, 52.9%
Report:              52.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction integer_max} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_swap in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc integer_rot float_dup_items float_flush integer_swap integer_flush in1 float_inc integer_max integer_max integer_sub float_inc in1 integer_flush integer_pop float_inc float_inc float_inc print_integer integer_dup_items float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 float_cos float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc print_integer float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc float_inc in1 in2 float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 135
Size: 136
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2393.6353695000003
Median total errors in population: 932.0
Error averages by case: (79.99821250000002 2.856 95.2141374 6.282 87.47140169999997 2.928 116.55673409999999 3.708 83.7346197 3.28 107.68760269999999 13.161 90.39136650000002 5.548 98.20185760000001 3.433 83.4851885 2.809 69.90935569999999 2.824 69.98642650000001 2.823 85.5913152 2.961 72.08848819999999 2.726 71.60380189999998 4.571 135.27450040000002 3.748 76.39150439999999 2.903 101.47896749999997 5.138 94.15220089999998 2.937 131.5720185 3.668 71.07787030000001 2.689 89.84214250000002 8.713 108.3843675 6.18 82.16808020000002 2.767 101.4526073 2.828 79.58360180000001 8.856)
Error minima by case: (0.0 0 0.0549 1 2.0 1 25.9082 2 0.0 0 1.0682 9 1.0 1 3.0 1 6.3834 2 4.9431 1 16.0 1 0.0746 1 18.0 1 0.0 0 45.5219 2 0.0 0 7.7113 1 0.349 1 65.0071 1 8.0418 1 0.0 0 0.0132 1 0.0 0 6.3136 1 0.0 0)
Average genome size in population (length): 108.014
Average program size in population (points): 109.014
Average percent parens in population: 0.009
Minimum age in population: 119.5203325606926
Maximum age in population: 123.1193876970389
Average age in population: 121.4032340281181
Median age in population: 121.4610662918968
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.185
Error (vector) diversity:			 0.215
Behavioral diversity:				 0.215
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 189342250
--- Timings ---
Current time: 1529616139455 milliseconds
Total Time:         390.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.3 seconds, 33.4%
Fitness Testing:    206.9 seconds, 53.0%
Report:              53.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_flush} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction integer_max} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_swap in1 integer_sub float_inc in1 integer_flush float_flush float_inc float_inc integer_rot float_dup_items float_flush integer_swap integer_flush in1 float_inc integer_max integer_max integer_sub float_inc in1 integer_flush integer_pop float_inc float_inc float_inc print_integer integer_dup_items float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 float_cos float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc print_integer float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc float_inc in1 in2 float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 135
Size: 136
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3010.8444112
Median total errors in population: 921.0
Error averages by case: (107.44541839999998 3.167 116.6027643 6.132 110.34990449999998 3.235 140.5759573 3.977 111.38591309999998 3.777 130.195742 13.248 113.5044719 5.467 119.52784620000001 3.564 108.36508540000001 3.042 95.2299821 3.095 95.286768 3.071 106.49351570000002 3.211 95.5156462 2.967 96.1799038 4.672 158.79242490000001 4.018 105.11915079999999 3.442 124.29843469999996 5.202 114.25347210000001 3.225 155.1911163 3.936 96.29480430000001 3.002 118.92098699999995 9.324 129.87037 6.063 109.57058260000001 3.114 125.8703832 3.063 109.8437664 9.146)
Error minima by case: (0.1441 1 0.2223 1 0.0 0 64.0 2 0.0 0 16.2266 9 1.247 1 5.0 1 29.0 2 8.9957 1 15.0 1 0.0 0 10.9574 2 0.0 0 59.3635 2 0.0 0 2.2813 1 3.343 1 74.8487 1 6.7998 1 0.0 0 3.049 1 0.0 0 48.0 1 1.0 1)
Average genome size in population (length): 111.4
Average program size in population (points): 112.4
Average percent parens in population: 0.009
Minimum age in population: 121.0408698118748
Maximum age in population: 124.6573067759373
Average age in population: 122.8443044696637
Median age in population: 122.8878824291247
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.156
Error (vector) diversity:			 0.177
Behavioral diversity:				 0.177
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 192127250
--- Timings ---
Current time: 1529616144882 milliseconds
Total Time:         396.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.8 seconds, 33.3%
Fitness Testing:    210.1 seconds, 53.0%
Report:              54.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_min} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_yankdup integer_min in1 float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_dup_items float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 float_cos float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc print_integer float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc float_inc in1 in2 float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3053.8957518999996
Median total errors in population: 909.0
Error averages by case: (111.89258320000002 3.166 116.12622990000004 6.025 108.76997909999997 3.103 142.95141130000002 4.02 116.0182598 3.815 134.2129625 13.313 112.7417986 5.381 118.82991350000003 3.402 110.80402310000002 3.075 97.52460420000001 3.189 97.62322420000001 3.192 105.71388540000002 3.081 99.55335430000001 3.046 96.39352870000002 4.504 161.07210560000001 4.111 107.76505450000003 3.73 122.67006769999999 5.107 113.98887460000003 3.142 157.50206239999997 3.978 98.73293169999998 3.085 122.84286329999999 9.543 129.47938380000002 5.958 113.50748459999998 3.061 128.27858870000003 3.109 112.5905772 9.174)
Error minima by case: (0.0 0 1.1912 1 0.0 0 65.0 1 0.0 0 35.8782 9 0.461 1 3.0 1 30.0 2 1.8895 1 16.0 2 0.0 0 18.0 1 0.0 0 85.0 1 0.0 0 7.0 1 2.0 1 81.0 2 17.0 1 0.0 0 0.7513 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 114.615
Average program size in population (points): 115.615
Average percent parens in population: 0.009
Minimum age in population: 122.0518469878609
Maximum age in population: 125.9253815724288
Average age in population: 124.2006963895784
Median age in population: 124.2214689097057
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.159
Error (vector) diversity:			 0.185
Behavioral diversity:				 0.185
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 194992625
--- Timings ---
Current time: 1529616150335 milliseconds
Total Time:         401.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.2 seconds, 33.2%
Fitness Testing:    213.3 seconds, 53.1%
Report:              54.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_max} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (float_dup_times float_max integer_swap integer_flush in1 integer_min integer_max in1 integer_sub float_inc integer_mod integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc integer_div integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_inc integer_min float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3128.8440629
Median total errors in population: 907.0
Error averages by case: (115.02297410000001 3.367 115.93209750000004 5.894 109.82803659999999 3.091 146.09432309999997 4.023 119.5702152 3.944 136.6992133 13.222 114.58477210000002 5.33 120.41390300000003 3.518 114.1022478 3.098 101.13881760000001 3.179 101.1778065 3.122 109.03235510000005 3.185 103.0558212 3.004 102.27701010000001 4.593 164.2845803 4.068 110.28671420000005 4.0 125.66612589999997 4.996 117.05072400000005 3.3 160.6665319 3.999 102.1638616 3.056 125.3033299 9.596 129.3279027 5.851 118.48385260000006 3.181 131.4808291 3.12 118.1530175 9.31)
Error minima by case: (0.0 0 0.025 1 0.0 0 64.0 1 0.0 0 55.0 11 0.0 0 1.0 1 29.0 2 15.0 1 15.0 1 0.0 0 17.0 1 0.0 0 84.0 1 1.0 1 0.0634 1 0.0 0 80.0 2 16.0 1 0.0 0 1.5379 1 0.0 0 48.0 2 0.0 0)
Average genome size in population (length): 116.012
Average program size in population (points): 117.012
Average percent parens in population: 0.009
Minimum age in population: 123.0518469878609
Maximum age in population: 127.1660222292905
Average age in population: 125.5679899118851
Median age in population: 125.5660774167239
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.166
Error (vector) diversity:			 0.184
Behavioral diversity:				 0.185
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 197892925
--- Timings ---
Current time: 1529616155653 milliseconds
Total Time:         407.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.8 seconds, 33.1%
Fitness Testing:    216.3 seconds, 53.2%
Report:              55.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_min} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_yankdup integer_min in1 float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_dup_items float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 float_cos float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc print_integer float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc float_inc in1 in2 float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2900.6562296999996
Median total errors in population: 907.0
Error averages by case: (106.07651100000001 3.251 107.68572170000002 5.804 100.42515719999997 2.911 137.6353139 3.969 110.39032839999997 3.793 126.71039729999998 13.194 105.17883970000001 5.205 110.99328270000002 3.314 105.3194095 3.038 91.0829869 3.01 91.42832250000001 3.032 99.6812799 3.02 94.0812614 2.945 92.76277139999999 4.311 155.91034929999998 3.995 100.88161830000001 3.675 116.47748609999998 4.778 107.64793210000002 3.155 151.6082123 3.955 93.2136847 3.021 118.15766029999999 9.512 121.25395209999999 5.735 109.84524779999997 2.959 122.88159750000001 3.045 109.29590570000003 9.404)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 55.8081 11 0.0 0 1.0 1 30.0 2 13.4464 1 16.0 2 0.0 0 18.0 1 0.0 0 85.0 1 0.0 0 0.6155 1 1.0 1 81.0 2 17.0 2 0.0 0 2.8327 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 116.597
Average program size in population (points): 117.597
Average percent parens in population: 0.009
Minimum age in population: 125.1473030139405
Maximum age in population: 128.6878611096681
Average age in population: 126.8308894685143
Median age in population: 126.834844018841
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.153
Error (vector) diversity:			 0.169
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 200807850
--- Timings ---
Current time: 1529616161282 milliseconds
Total Time:         412.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.3 seconds, 33.0%
Fitness Testing:    219.6 seconds, 53.2%
Report:              56.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_min} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_yankdup integer_min in1 float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_dup_items float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 float_cos float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc print_integer float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc float_inc in1 in2 float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2803.0642829
Median total errors in population: 906.0
Error averages by case: (101.97183550000001 3.323 104.08008360000001 5.993 96.63532519999995 2.918 134.0411837 3.866 106.19752100000001 3.86 124.0323206 13.241 101.1736397 5.313 106.87896370000004 3.312 101.59268039999999 2.922 88.4249685 3.001 88.4412387 3.005 94.25903699999999 3.011 89.6108632 2.889 88.73924769999999 4.469 152.44555309999998 3.952 97.9934167 3.669 111.65875429999997 4.935 102.80746440000003 3.177 148.8214459 3.88 89.42466 2.947 113.8547982 9.491 117.44037870000001 5.826 104.4920999 2.992 119.21827809999999 2.953 104.57352509999998 9.31)
Error minima by case: (0.0 0 0.0 0 0.0 0 64.0 1 0.0 0 12.9318 11 0.461 1 0.0 0 29.0 2 15.0 2 1.8363 1 0.0 0 1.9574 2 0.0 0 84.0 1 0.0 0 0.019 1 0.349 1 80.0 2 16.0 2 0.0 0 0.0283 1 0.0 0 48.0 2 0.0 0)
Average genome size in population (length): 116.684
Average program size in population (points): 117.684
Average percent parens in population: 0.009
Minimum age in population: 126.3345176371833
Maximum age in population: 130.0257846752207
Average age in population: 128.1125838085866
Median age in population: 128.1731613846455
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.163
Error (vector) diversity:			 0.183
Behavioral diversity:				 0.183
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 203724975
--- Timings ---
Current time: 1529616166380 milliseconds
Total Time:         417.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.7 seconds, 33.0%
Fitness Testing:    222.5 seconds, 53.3%
Report:              57.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_min} {:instruction in1} {:instruction 77.6947077484169} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_142} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_swap integer_min in1 77.6947077484169 integer_max in1 integer_sub float_inc in1 integer_flush float_pop in1 float_inc integer_max integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_dup_items float_shove float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc tagged_142 float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2770.1132976999997
Median total errors in population: 908.0
Error averages by case: (102.15002070000003 3.469 103.00289200000003 6.21 96.79771899999999 2.967 131.3663787 3.873 106.07271929999999 3.862 121.90116499999999 13.209 100.2676677 5.563 108.26225720000002 3.47 98.8088841 2.924 84.8050767 2.976 85.56085260000002 2.989 94.86391079999999 3.015 87.5178437 2.868 88.14605180000001 4.718 149.6294463 3.945 98.6022118 4.043 111.14628250000001 5.275 102.76979949999998 3.272 145.2456556 3.864 85.8647425 2.93 112.23790520000001 9.266 116.28833739999999 6.063 103.54601170000002 3.113 116.4979443 2.949 102.81952160000004 9.109)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 53.2012 10 0.0 0 0.0 0 30.0 2 9.6026 2 16.0 2 0.0 0 18.0 2 0.0 0 85.0 2 0.0 0 0.4639 1 1.0 1 81.0 2 17.0 1 0.0 0 0.4031 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 117.791
Average program size in population (points): 118.791
Average percent parens in population: 0.008
Minimum age in population: 127.3345176371833
Maximum age in population: 131.4479352518432
Average age in population: 129.4488807261079
Median age in population: 129.4816751297381
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.176
Error (vector) diversity:			 0.194
Behavioral diversity:				 0.195
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 206669750
--- Timings ---
Current time: 1529616171520 milliseconds
Total Time:         422.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       139.2 seconds, 32.9%
Fitness Testing:    225.4 seconds, 53.3%
Report:              58.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_min} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_shove} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_max} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction float_min} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_yankdup integer_min in1 float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_shove in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc float_inc integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items float_max in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_dec float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc in1 integer_sub float_inc in1 float_min float_pop float_inc float_inc integer_dup_times integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2595.9414140999997
Median total errors in population: 907.0
Error averages by case: (95.98981339999999 3.486 97.83481880000002 6.256 89.23020929999997 2.789 123.85202500000001 3.838 99.80976579999998 3.782 114.43011259999999 13.195 94.50589209999998 5.538 101.61490330000001 3.399 91.0072174 2.88 77.37960349999999 2.911 77.49763630000001 2.903 86.72724040000003 2.848 79.5635631 2.843 81.55053489999997 4.767 142.30527529999998 3.874 92.0073832 4.02 104.34397189999999 5.276 94.7500473 3.18 138.71440570000001 3.813 78.6462717 2.881 107.19304849999997 9.23 111.4615395 6.044 95.77922480000001 3.027 108.87545080000001 2.902 96.25245949999994 8.937)
Error minima by case: (0.0 0 1.7604 1 0.0 0 65.0 2 0.0 0 47.2931 10 0.0 0 1.0 1 30.0 2 8.9957 2 16.0 2 0.0 0 8.9574 2 0.0 0 85.0 2 0.0 0 0.1816 1 0.0 0 81.0 1 17.0 2 1.0 1 0.9327 1 0.0 0 49.0 1 0.0 0)
Average genome size in population (length): 118.872
Average program size in population (points): 119.872
Average percent parens in population: 0.008
Minimum age in population: 128.6953635317906
Maximum age in population: 132.7488980742472
Average age in population: 130.7408309571268
Median age in population: 130.799401181419
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.169
Error (vector) diversity:			 0.181
Behavioral diversity:				 0.182
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 209641575
--- Timings ---
Current time: 1529616177259 milliseconds
Total Time:         428.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.0 seconds, 32.9%
Fitness Testing:    228.4 seconds, 53.3%
Report:              58.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_shove} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_max} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction in2} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction float_min} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (float_min float_max tagged_869 float_dup_times integer_swap integer_flush in1 float_inc integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_shove in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc float_inc integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items float_max in1 integer_flush float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items in2 float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc in1 integer_sub float_inc in1 float_min float_pop float_inc float_inc integer_dup_times integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2409.248085
Median total errors in population: 907.0
Error averages by case: (89.45883700000002 3.411 87.34762099999998 6.025 82.24887689999998 2.605 117.36053319999999 3.702 93.92415199999998 3.647 107.61062580000001 13.162 84.65108160000001 5.296 92.87597029999999 3.275 84.3430089 2.748 70.7520432 2.801 70.82771969999999 2.817 79.0865598 2.694 72.20473449999999 2.714 74.50635609999999 4.595 136.0754607 3.775 86.1698835 4.057 94.93689830000001 5.053 86.6342572 3.065 132.333234 3.716 71.9164845 2.768 98.97203150000001 9.251 101.07632539999999 5.76 90.67755000000001 2.915 102.2978216 2.77 89.24301830000003 9.095)
Error minima by case: (0.0 0 0.8457 1 0.0 0 48.1836 2 0.0 0 54.8504 10 1.0 1 1.0 1 30.0 2 16.0 2 16.0 2 0.0 0 18.0 2 0.0 0 62.9563 2 0.0 0 0.2965 1 0.0 0 19.9858 1 17.0 2 0.0 0 0.1131 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 119.627
Average program size in population (points): 120.627
Average percent parens in population: 0.008
Minimum age in population: 129.7139635458459
Maximum age in population: 134.1398443359005
Average age in population: 132.0547062052661
Median age in population: 132.1183082439845
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.161
Error (vector) diversity:			 0.178
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 212632275
--- Timings ---
Current time: 1529616182502 milliseconds
Total Time:         433.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       142.5 seconds, 32.8%
Fitness Testing:    231.5 seconds, 53.4%
Report:              59.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_max} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction integer_min} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_pop} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (float_dup_times float_max integer_swap integer_flush in1 integer_min in1 float_inc integer_max float_pop integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_dup_items float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 float_cos float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc print_integer float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc float_inc in1 in2 float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2779.1065682
Median total errors in population: 907.0
Error averages by case: (103.46600150000002 3.605 101.24246160000001 6.066 95.1728625 2.836 132.2516992 3.883 107.49148930000001 3.837 120.9935633 13.203 98.7934431 5.449 105.8260145 3.442 99.7295586 2.928 85.30868849999999 2.978 86.5273718 2.992 94.38352550000003 2.841 88.6008292 2.891 90.47552879999999 4.633 150.5137923 3.935 98.66157950000002 4.465 110.351951 5.207 101.81910969999997 3.245 146.12151410000004 3.879 86.7966944 2.955 113.87653279999999 9.422 114.7195243 5.859 106.83693210000004 3.126 117.3976879 2.957 105.87721270000002 9.237)
Error minima by case: (0.0 0 0.0 0 0.0 0 39.9082 2 0.0 0 53.9966 8 0.0 0 1.0 1 7.6166 2 6.7193 1 16.0 1 0.0 0 7.1073 2 0.0 0 85.0 2 1.0 1 0.135 1 0.0 0 81.0 2 17.0 2 0.0 0 3.0696 1 0.3663 1 20.3136 2 0.172 1)
Average genome size in population (length): 119.523
Average program size in population (points): 120.523
Average percent parens in population: 0.008
Minimum age in population: 130.8730301267707
Maximum age in population: 135.3801791909821
Average age in population: 133.2946969375104
Median age in population: 133.3241086914377
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.163
Error (vector) diversity:			 0.181
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 215620375
--- Timings ---
Current time: 1529616188262 milliseconds
Total Time:         439.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.2 seconds, 32.8%
Fitness Testing:    234.7 seconds, 53.4%
Report:              60.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (float_min float_max tagged_869 float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 integer_sub float_inc integer_stackdepth integer_flush float_pop float_inc float_inc integer_div integer_rot float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc float_inc in1 in2 float_shove float_inc float_inc integer_swap float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2475.6990779999996
Median total errors in population: 903.0
Error averages by case: (92.07863520000001 3.457 89.4460522 5.441 81.00206959999997 2.599 120.8728164 3.73 96.96686929999997 3.679 112.0632263 13.202 86.35226259999999 4.91 91.00728990000005 3.212 87.94323320000001 2.771 74.90745530000001 2.866 74.87450890000001 2.859 78.3233951 2.612 76.9858722 2.753 76.4233207 4.219 139.78395619999995 3.806 87.40657300000002 4.155 96.41437729999997 4.691 86.46772920000001 3.016 135.98098579999998 3.712 75.7650836 2.809 105.72910630000001 9.778 102.86538770000001 5.186 94.4811709 2.932 105.8096272 2.799 95.12507390000003 9.429)
Error minima by case: (0.0 0 0.8699 1 0.0 0 38.9082 2 0.0 0 54.9535 10 0.0 0 0.0 0 6.6166 2 16.0 1 16.0 2 0.0 0 1.0426 1 0.0 0 85.0 1 0.0 0 0.4978 1 0.0 0 80.9929 1 17.0 2 0.0 0 0.5923 1 0.0 0 19.3136 2 0.0 0)
Average genome size in population (length): 118.991
Average program size in population (points): 119.991
Average percent parens in population: 0.008
Minimum age in population: 132.3539996432426
Maximum age in population: 136.4414777971064
Average age in population: 134.5594395926446
Median age in population: 134.6099735751582
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.157
Error (vector) diversity:			 0.175
Behavioral diversity:				 0.176
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 218595150
--- Timings ---
Current time: 1529616193317 milliseconds
Total Time:         444.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.6 seconds, 32.7%
Fitness Testing:    237.6 seconds, 53.4%
Report:              61.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_dup_times} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction tagged_871} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction in1} {:instruction 93} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_swap integer_flush integer_rot float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_dup_times in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items tagged_871 float_inc float_dup_items float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 float_cos float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div in1 93 float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc print_integer float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc float_inc in1 in2 float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2639.2760577
Median total errors in population: 903.0
Error averages by case: (100.40800720000001 3.485 96.33842899999999 5.741 89.35389620000001 2.597 126.8505981 3.802 104.4872555 3.679 116.70533859999999 13.211 92.403935 5.174 100.0992762 3.237 94.11616289999999 2.844 79.8624612 2.936 80.4218774 2.929 87.10128510000003 2.665 82.63939730000001 2.814 82.82508499999999 4.517 144.51914929999998 3.891 94.59337560000003 4.11 102.6022195 4.956 94.70688100000001 3.062 141.73964379999998 3.792 81.4703465 2.881 110.0068532 9.589 109.88956139999999 5.473 102.29843140000001 2.951 111.90634630000001 2.877 99.457245 9.26)
Error minima by case: (1.0 1 0.3007 1 0.0 0 65.0 2 0.0 0 25.4807 10 0.0 0 0.0 0 30.0 1 8.508 2 10.7127 2 0.0 0 16.9484 2 0.0 0 85.0 2 0.0 0 0.1054 1 0.349 1 81.0 2 17.0 1 0.0 0 1.3559 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 118.915
Average program size in population (points): 119.915
Average percent parens in population: 0.008
Minimum age in population: 133.5480175691424
Maximum age in population: 138.0972169446857
Average age in population: 135.9063700102673
Median age in population: 135.9411978648957
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.15
Error (vector) diversity:			 0.17
Behavioral diversity:				 0.171
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 221568100
--- Timings ---
Current time: 1529616198713 milliseconds
Total Time:         450.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.3 seconds, 32.7%
Fitness Testing:    240.6 seconds, 53.5%
Report:              62.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_min} {:instruction in1} {:instruction integer_inc} {:instruction integer_inc} {:instruction in1} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_142} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_swap integer_min in1 integer_inc integer_inc in1 float_dup_items float_inc integer_sub float_inc integer_stackdepth integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_yank integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc tagged_142 float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2031.5337156000005
Median total errors in population: 903.0
Error averages by case: (73.0486171 3.345 70.23718600000002 5.586 62.621478899999985 2.444 104.3632898 3.524 77.42250209999999 3.543 95.46875109999999 13.115 67.97379589999997 5.006 74.34793219999996 3.095 70.82470509999999 2.567 57.1670868 2.659 57.2219473 2.655 62.489720199999994 2.481 59.154737000000004 2.525 59.80423379999999 4.312 123.3545447 3.628 68.56513969999996 4.021 79.5919395 4.836 71.01247129999997 2.919 119.61446910000001 3.566 58.285674 2.612 85.03037299999998 9.535 84.25365790000001 5.281 76.51310819999998 2.794 89.0455901 2.579 76.3467648 9.146)
Error minima by case: (0.0 0 0.363 1 0.0 0 64.0 1 1.0 1 1.0682 10 0.0 0 0.0 0 29.0 2 4.9431 2 15.0 2 0.0 0 17.0 2 0.0 0 45.5219 2 0.0 0 0.3757 1 0.0 0 65.0071 2 16.0 1 1.0 1 0.1474 1 0.0 0 48.0 2 0.0 0)
Average genome size in population (length): 119.2
Average program size in population (points): 120.2
Average percent parens in population: 0.008
Minimum age in population: 134.7255723395256
Maximum age in population: 139.391951038419
Average age in population: 137.2055806253037
Median age in population: 137.2554666964093
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.162
Error (vector) diversity:			 0.175
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 224548175
--- Timings ---
Current time: 1529616204006 milliseconds
Total Time:         455.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.9 seconds, 32.7%
Fitness Testing:    243.6 seconds, 53.5%
Report:              62.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_max} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_sub} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (float_min float_max float_dup_times float_max integer_swap integer_flush in1 integer_min integer_max in1 integer_sub float_inc integer_mod integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc integer_div integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_sub float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup float_frominteger float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2196.0512634999995
Median total errors in population: 902.0
Error averages by case: (81.13113639999999 3.362 78.20175590000001 5.57 69.9599733 2.515 109.77434769999999 3.587 85.53739010000002 3.554 101.0277612 13.162 75.50984050000001 5.016 81.26725480000002 3.104 76.41401100000002 2.625 62.980887800000005 2.738 62.999863399999995 2.705 68.76733519999999 2.468 64.88641460000001 2.599 65.85684730000001 4.341 128.7705681 3.672 75.95081459999996 3.977 86.14949879999999 4.838 77.022741 2.935 125.01408949999998 3.602 64.0069305 2.638 92.7436506 9.527 92.2184068 5.305 83.70412110000004 2.801 94.53344530000001 2.643 83.14717800000001 9.191)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 56.0 12 0.0 0 1.0 1 30.0 1 16.0 2 16.0 1 0.0 0 18.0 2 0.0 0 85.0 2 0.0 0 1.6243 1 0.0 0 81.0 2 17.0 1 0.0 0 0.4354 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 118.499
Average program size in population (points): 119.499
Average percent parens in population: 0.008
Minimum age in population: 136.0119324877897
Maximum age in population: 140.6482063448437
Average age in population: 138.5941444213728
Median age in population: 138.6089908179048
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.157
Error (vector) diversity:			 0.177
Behavioral diversity:				 0.178
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 227510750
--- Timings ---
Current time: 1529616209220 milliseconds
Total Time:         460.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.5 seconds, 32.7%
Fitness Testing:    246.5 seconds, 53.5%
Report:              63.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_min} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_inc} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_stackdepth})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_yankdup integer_min in1 float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_dup_items integer_shove float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_dup_items float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_inc float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc print_integer float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc float_inc in1 float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_stackdepth)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2619.222124
Median total errors in population: 904.5
Error averages by case: (99.28762830000001 3.52 95.12693759999998 5.804 89.73603929999996 2.717 124.94284680000001 3.827 103.6875594 3.724 115.9461507 13.197 92.6206271 5.119 100.09525600000002 3.319 92.1295301 2.87 78.55766040000002 2.924 78.61927750000001 2.912 87.54310750000002 2.689 80.8083658 2.817 83.20887359999999 4.458 143.3741103 3.879 93.17762360000002 4.222 103.30093840000004 4.939 94.74707349999998 3.089 139.7518826 3.824 79.7640297 2.9 108.92298780000002 9.555 108.8253691 5.527 101.8743778 3.007 109.9852187 2.9 100.16265239999998 9.287)
Error minima by case: (0.0 0 0.0 0 0.0 0 64.0 2 0.0 0 13.3718 10 0.0 0 0.0 0 29.0 2 14.4118 2 0.5801 2 0.0 0 17.0 2 0.0 0 62.2183 2 0.0 0 0.1816 1 1.0 1 77.7035 2 9.6546 1 0.0 0 2.049 1 0.0 0 48.0 2 0.0 0)
Average genome size in population (length): 118.346
Average program size in population (points): 119.346
Average percent parens in population: 0.008
Minimum age in population: 137.649327329083
Maximum age in population: 142.0837520452899
Average age in population: 139.9537904313625
Median age in population: 140.0397268283449
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.159
Error (vector) diversity:			 0.179
Behavioral diversity:				 0.18
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 230469475
--- Timings ---
Current time: 1529616214892 milliseconds
Total Time:         466.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.2 seconds, 32.7%
Fitness Testing:    249.5 seconds, 53.6%
Report:              64.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_min} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_swap integer_min in1 integer_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop in1 float_inc float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_dup_items float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 float_cos float_pop float_inc float_inc in1 in2 float_shove float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div in1 integer_flush float_pop float_inc float_inc float_dup_items integer_add float_inc float_inc float_dup_items integer_div float_inc float_inc print_integer float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc float_inc in1 in2 float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2694.9931967
Median total errors in population: 903.0
Error averages by case: (102.7328644 3.696 98.33398310000001 5.827 92.46365559999998 2.859 127.27335289999998 3.839 107.10173490000004 3.901 118.36486620000001 13.184 96.07905429999997 5.32 103.68320770000004 3.49 94.6369968 2.885 81.4976784 2.92 81.4889294 2.921 90.25911830000003 2.868 83.7291441 2.823 86.17407249999998 4.654 145.9060725 3.892 98.0169236 4.353 106.2279402 5.132 97.65616429999999 3.294 142.190169 3.814 82.4397464 2.898 112.41641839999998 9.65 111.91745809999998 5.57 103.88392140000005 3.159 112.36393740000001 2.91 103.04278679999999 9.254)
Error minima by case: (0.0 0 0.0 0 0.0 0 3.9082 2 0.0 0 10.0682 11 0.0 0 0.0 0 5.6166 2 8.5911 2 16.0 1 0.0 0 18.0 2 0.0 0 65.5219 2 0.4444 1 0.1523 1 1.0 1 45.9929 2 12.9582 1 0.0 0 0.0509 1 0.0 0 15.6864 2 0.0 0)
Average genome size in population (length): 117.604
Average program size in population (points): 118.604
Average percent parens in population: 0.008
Minimum age in population: 138.649327329083
Maximum age in population: 143.2212106025637
Average age in population: 141.2209239763368
Median age in population: 141.2591550845699
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.166
Error (vector) diversity:			 0.19
Behavioral diversity:				 0.191
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 233409650
--- Timings ---
Current time: 1529616220678 milliseconds
Total Time:         472.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.7 seconds, 32.6%
Fitness Testing:    253.1 seconds, 53.6%
Report:              65.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_min} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_142} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_swap integer_min integer_add integer_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop in1 float_inc integer_max integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_dup_items float_shove float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc tagged_142 float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2649.0405977
Median total errors in population: 906.0
Error averages by case: (99.94895270000002 3.55 97.65952130000001 5.819 90.2631798 2.751 126.36458809999999 3.809 104.06710729999998 3.764 117.7913363 13.175 93.46227730000001 5.243 100.6526127 3.371 93.63417139999999 2.859 80.41740449999999 2.881 80.4399841 2.866 87.24707489999996 2.715 82.17744710000001 2.775 83.66969250000001 4.539 144.99397009999998 3.84 95.601495 4.373 103.09980740000003 5.063 94.9607667 3.138 141.27241869999997 3.801 81.42432099999999 2.862 112.14749090000002 9.59 111.06760650000001 5.542 101.44054820000001 3.022 111.4117773 2.875 100.4150459 9.187)
Error minima by case: (0.0 0 0.9312 1 0.0 0 65.0 2 1.0 1 56.0 12 0.0 0 0.0 0 30.0 2 16.0 1 16.0 2 0.0 0 18.0 1 0.0 0 85.0 2 0.0 0 0.1816 1 0.0 0 81.0 2 17.0 2 0.0 0 2.951 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 117.346
Average program size in population (points): 118.346
Average percent parens in population: 0.008
Minimum age in population: 140.3951203417751
Maximum age in population: 145.1154324201282
Average age in population: 142.5636572890359
Median age in population: 142.5989495911247
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.152
Error (vector) diversity:			 0.176
Behavioral diversity:				 0.176
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 236343425
--- Timings ---
Current time: 1529616226237 milliseconds
Total Time:         477.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.2 seconds, 32.5%
Fitness Testing:    256.5 seconds, 53.7%
Report:              65.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (float_min float_max tagged_869 float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 integer_rot float_inc integer_stackdepth integer_flush float_pop float_inc float_inc integer_div integer_rot float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dec float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_div float_inc integer_dup float_inc float_inc integer_sub integer_flush float_inc float_inc float_inc float_inc float_inc in1 in2 float_shove float_inc float_inc integer_swap float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2359.3114335000005
Median total errors in population: 903.0
Error averages by case: (88.37555560000006 3.55 84.07696630000001 5.484 76.0777334 2.576 115.9621693 3.657 93.14169530000004 3.735 106.77235800000001 13.115 81.1053687 4.973 87.87935140000006 3.293 82.8482737 2.709 69.4380883 2.705 69.4767179 2.722 74.90117590000001 2.599 71.4180398 2.636 72.64999650000003 4.176 134.79107549999998 3.688 83.1653342 4.455 92.06894460000002 4.798 82.92438779999995 3.1 131.0456231 3.673 70.49557270000001 2.7 100.73933140000001 9.696 97.8460971 5.203 90.5691842 2.98 100.83485340000001 2.717 90.4185394 9.349)
Error minima by case: (0.0 0 0.0 0 0.0 0 64.0 1 0.0 0 55.0 11 0.0 0 0.9658 1 29.0 2 15.0 1 15.0 2 0.0 0 17.0 1 0.0 0 84.0 2 0.0 0 1.6243 1 0.0 0 80.0 2 16.0 2 1.0 1 0.7104 1 0.0 0 48.0 2 0.0 0)
Average genome size in population (length): 116.739
Average program size in population (points): 117.739
Average percent parens in population: 0.009
Minimum age in population: 141.5126959909251
Maximum age in population: 146.0501318499648
Average age in population: 143.8983875860691
Median age in population: 143.9281454863157
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.156
Error (vector) diversity:			 0.171
Behavioral diversity:				 0.171
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 239261950
--- Timings ---
Current time: 1529616231582 milliseconds
Total Time:         482.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.7 seconds, 32.5%
Fitness Testing:    259.5 seconds, 53.7%
Report:              66.5 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction integer_fromfloat} {:instruction print_float} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (integer_fromfloat float_max tagged_869 integer_fromfloat float_max float_dup_items float_rot integer_swap integer_flush in1 float_inc integer_dup_times integer_fromfloat float_max tagged_869 integer_fromfloat print_float float_max tagged_869 float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 integer_sub float_inc integer_stackdepth integer_flush float_pop float_inc float_inc float_swap integer_rot float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_div float_inc float_shove float_inc in1 in2 float_shove float_inc float_inc integer_swap float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 128
Size: 129
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2580.8599317000003
Median total errors in population: 903.0
Error averages by case: (98.74683180000002 3.512 92.52742690000001 5.579 86.79206509999999 2.65 123.4840144 3.761 102.82006499999999 3.717 114.41981929999999 13.203 89.53927170000001 5.096 97.40244050000001 3.25 90.6535549 2.794 77.52625749999999 2.854 77.52345619999998 2.84 85.1822882 2.625 79.5317796 2.753 81.72153519999996 4.372 142.21197899999999 3.817 93.72330020000001 4.486 100.81231230000003 4.899 92.1876905 3.069 138.49344779999998 3.752 78.45679940000001 2.826 109.28177070000001 9.772 106.01466200000002 5.332 101.34595430000002 2.967 108.4755309 2.824 99.90667830000001 9.329)
Error minima by case: (0.0 0 0.0 0 0.0 0 39.9082 2 0.0 0 56.0 10 1.0 1 0.0 0 7.6166 2 16.0 2 16.0 2 0.0 0 18.0 2 0.0 0 85.0 2 0.0 0 0.0 0 1.0 1 81.0 2 17.0 1 0.0 0 2.049 1 0.0 0 20.3136 2 0.0 0)
Average genome size in population (length): 116.955
Average program size in population (points): 117.955
Average percent parens in population: 0.009
Minimum age in population: 142.7180796904673
Maximum age in population: 147.0788675625608
Average age in population: 145.1953510103733
Median age in population: 145.2556299417613
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.155
Error (vector) diversity:			 0.176
Behavioral diversity:				 0.176
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 242186000
--- Timings ---
Current time: 1529616237368 milliseconds
Total Time:         488.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.5 seconds, 32.4%
Fitness Testing:    262.5 seconds, 53.7%
Report:              67.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction float_max} {:instruction integer_flush} {:instruction tagged_291} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_stackdepth})
Best program: (integer_fromfloat float_max tagged_869 float_dup_times integer_swap in1 integer_max in1 integer_sub float_max float_dup_items float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 integer_sub float_inc float_max integer_flush tagged_291 float_inc float_inc integer_div integer_rot float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_stackdepth)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2523.8988993000003
Median total errors in population: 902.0
Error averages by case: (96.3534107 3.618 91.43402439999994 5.55 84.25150659999997 2.726 121.95472079999998 3.777 100.98296380000001 3.781 112.2459555 13.217 86.074372 5.033 95.1941226 3.346 89.14340800000001 2.814 74.8327041 2.84 75.0201616 2.865 81.60200040000001 2.688 77.6727604 2.783 77.71700469999996 4.205 140.5304325 3.845 92.14182590000003 4.474 95.92501139999996 4.721 88.74694909999998 3.134 136.79029740000001 3.776 76.7821608 2.849 109.88531170000005 9.884 104.1358093 5.246 98.41995330000002 3.064 106.98356020000003 2.836 96.40747209999999 9.599)
Error minima by case: (0.0 0 0.0 0 0.0 0 7.0918 2 0.0 0 1.0682 10 0.0 0 0.0 0 29.0 2 4.9431 1 10.8363 1 0.0 0 1.9574 2 0.0 0 45.5219 3 0.0 0 0.0157 1 0.0 0 34.9929 2 16.0 2 0.0 0 0.049 1 0.0 0 26.6864 2 0.0 0)
Average genome size in population (length): 117.729
Average program size in population (points): 118.729
Average percent parens in population: 0.008
Minimum age in population: 143.8838850909329
Maximum age in population: 148.6108821426609
Average age in population: 146.5144818808839
Median age in population: 146.5795260006069
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.175
Error (vector) diversity:			 0.196
Behavioral diversity:				 0.197
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 245129325
--- Timings ---
Current time: 1529616242719 milliseconds
Total Time:         494.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.1 seconds, 32.4%
Fitness Testing:    265.5 seconds, 53.7%
Report:              68.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 40950.0
Test mean error for best: 20.47500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 76.542920316  
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 98.9560456736 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 87.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 55.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 51.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 55.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_frominteger})
Best program: (integer_add integer_swap integer_flush integer_rot float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc integer_shove in1 integer_fromfloat float_max tagged_869 float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 float_frominteger float_inc integer_stackdepth integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_frominteger)
Errors: [11.0 2 15.0 2 4.0 1 65.0 3 18.0 2 56.0 13 12.0 2 40.0 2 30.0 2 16.0 2 16.0 2 29.0 2 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 39.0 2 81.0 3 17.0 2 59.0 12 30.0 1 20.0 1 49.0 2 46.0 11]
Total: 895.0
Mean: 17.9
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2371.9634355999997
Median total errors in population: 907.0
Error averages by case: (89.4634068 3.544 85.10618460000003 5.576 80.78077049999999 2.609 116.61693240000001 3.648 94.10176840000001 3.725 104.04017160000001 13.146 82.4077761 5.016 89.19181160000004 3.284 83.49762 2.712 69.21613169999999 2.814 69.9442175 2.776 74.8205334 2.656 70.0873751 2.66 71.3223307 4.363 135.11085759999997 3.759 86.42929430000002 4.682 91.38806650000002 4.949 81.7389318 3.082 130.79468509999998 3.689 70.2584894 2.747 102.202571 9.73 98.59358029999999 5.337 91.28672590000002 2.962 101.49680559999999 2.724 90.6143977 9.262)
Error minima by case: (0.0 0 0.0 0 0.0 0 64.0 2 0.0 0 24.1616 11 0.0 0 1.0 1 29.0 2 9.8271 2 9.3935 1 0.0 0 17.0 1 0.0 0 84.0 2 0.0 0 0.3757 1 0.0 0 80.0 2 16.0 1 0.0 0 0.2019 1 0.0 0 48.0 2 0.0 0)
Average genome size in population (length): 117.668
Average program size in population (points): 118.668
Average percent parens in population: 0.008
Minimum age in population: 145.5584122726477
Maximum age in population: 149.6075609936282
Average age in population: 147.8878315279389
Median age in population: 147.9307936278442
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.179
Error (vector) diversity:			 0.199
Behavioral diversity:				 0.199
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 248071075
--- Timings ---
Current time: 1529616248285 milliseconds
Total Time:         499.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.9 seconds, 32.4%
Fitness Testing:    268.5 seconds, 53.8%
Report:              69.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 40950.0
Test mean error for best: 20.47500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 76.542920316  
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 98.9560456736 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 87.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 55.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 51.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 55.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_frominteger})
Best program: (integer_add integer_swap integer_flush integer_rot float_inc integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc integer_shove in1 integer_fromfloat float_max tagged_869 float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 float_frominteger float_inc integer_stackdepth integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_frominteger)
Errors: [11.0 2 15.0 2 4.0 1 65.0 3 18.0 2 56.0 13 12.0 2 40.0 2 30.0 2 16.0 2 16.0 2 29.0 2 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 39.0 2 81.0 3 17.0 2 59.0 12 30.0 1 20.0 1 49.0 2 46.0 11]
Total: 895.0
Mean: 17.9
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2452.2694232
Median total errors in population: 907.0
Error averages by case: (91.92590829999997 3.609 88.05616019999998 5.806 82.44681489999994 2.799 118.8211548 3.704 96.53317280000003 3.785 109.25761619999999 13.201 85.67244329999998 5.298 93.37310350000004 3.411 85.8099534 2.734 71.50983319999999 2.776 71.54797620000001 2.79 80.51028110000004 2.799 73.4841828 2.702 77.50222439999996 4.523 136.7230448 3.745 87.98200640000005 4.525 97.02094399999999 5.078 88.138475 3.212 133.8553686 3.702 73.4988254 2.76 102.2041533 9.586 101.5223241 5.576 94.28648680000003 3.105 103.73952340000001 2.755 93.5884463 9.278)
Error minima by case: (0.0 1 0.1025 1 0.0 0 65.0 2 0.0 0 55.8081 12 0.0 0 2.0 1 30.0 2 16.0 2 16.0 2 0.0 0 18.0 2 0.0 0 85.0 2 1.0 1 0.6275 1 0.651 1 81.0 2 17.0 1 0.0 0 0.6632 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 117.885
Average program size in population (points): 118.885
Average percent parens in population: 0.008
Minimum age in population: 147.0380206422004
Maximum age in population: 151.1745893365245
Average age in population: 149.2461966802299
Median age in population: 149.2789692857794
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.171
Error (vector) diversity:			 0.191
Behavioral diversity:				 0.191
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 251018300
--- Timings ---
Current time: 1529616254057 milliseconds
Total Time:         505.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.4 seconds, 32.3%
Fitness Testing:    271.8 seconds, 53.8%
Report:              69.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction in1} {:instruction integer_inc} {:instruction integer_swap} {:instruction in1} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_mod})
Best program: (integer_fromfloat float_max float_dup float_dup_times integer_swap integer_flush in1 float_inc integer_max in1 integer_inc integer_swap in1 integer_max in1 integer_sub float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc float_inc in1 in2 float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_mod)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2221.7509012
Median total errors in population: 907.0
Error averages by case: (83.70592040000001 3.442 80.7882038 5.92 75.73534599999999 2.637 109.52909179999999 3.572 87.91210789999997 3.62 98.49755040000001 13.179 78.4594405 5.278 85.88018950000003 3.244 76.1713834 2.602 61.8367756 2.676 62.305230599999994 2.675 70.00041749999998 2.613 63.8119574 2.588 65.61545079999998 4.438 128.5435219 3.639 78.86505440000002 4.208 88.42739529999994 5.089 77.2981138 3.014 124.75100710000001 3.545 63.754958200000004 2.638 93.88998900000001 9.302 94.63491920000003 5.668 83.0803609 2.916 94.28468640000001 2.625 83.70982939999999 9.134)
Error minima by case: (0.0 0 1.0 1 0.0 0 65.0 2 0.0 0 26.9318 12 0.2829 1 1.0 1 30.0 2 7.0569 2 12.1637 1 0.0 0 18.0 2 0.0 0 85.0 2 1.0 1 0.0 0 0.0 0 81.0 2 17.0 2 0.0 0 1.4574 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 117.649
Average program size in population (points): 118.649
Average percent parens in population: 0.008
Minimum age in population: 148.0380206422004
Maximum age in population: 152.4639174916695
Average age in population: 150.5831992461312
Median age in population: 150.6213092650322
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.183
Error (vector) diversity:			 0.205
Behavioral diversity:				 0.206
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 253959725
--- Timings ---
Current time: 1529616259299 milliseconds
Total Time:         510.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.9 seconds, 32.3%
Fitness Testing:    274.8 seconds, 53.8%
Report:              70.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 41150.0
Test mean error for best: 20.57500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 102.542920316 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 124.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 113.5752307902
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_max} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction float_div} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup})
Best program: (float_min float_max float_dup_times float_max integer_swap integer_flush in1 float_div integer_max in1 integer_sub float_inc integer_mod integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc integer_div integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc float_inc float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup)
Errors: [37.0 3 15.0 2 4.0 1 65.0 3 44.0 3 56.0 13 12.0 2 14.0 2 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 897.0
Mean: 17.94
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2219.2122708999996
Median total errors in population: 907.0
Error averages by case: (81.98983320000002 3.466 76.85838240000002 5.679 71.5094585 2.65 110.8119146 3.625 86.35963380000001 3.661 100.55965690000002 13.134 75.47222140000001 5.16 83.0826949 3.24 77.4758495 2.667 63.720700199999996 2.71 63.8084323 2.704 70.66540210000004 2.625 65.8635918 2.622 67.35803250000001 4.383 129.57493100000002 3.686 78.09614390000002 4.514 86.62995559999999 4.981 78.52969470000002 3.043 125.819635 3.634 64.9224703 2.68 93.70264409999999 9.531 91.35431150000001 5.456 84.50570720000002 2.917 95.60083979999999 2.682 84.2791337 9.211)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 10.0682 11 0.461 1 1.0 1 30.0 1 7.5796 2 16.0 2 0.0 0 18.0 2 0.0 0 65.5219 2 0.2012 1 0.0 0 0.0 0 80.5355 2 12.9582 2 0.0 0 1.6064 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 118.325
Average program size in population (points): 119.325
Average percent parens in population: 0.008
Minimum age in population: 149.0380206422004
Maximum age in population: 153.8256799081621
Average age in population: 151.9295467520934
Median age in population: 151.99941686317
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.184
Error (vector) diversity:			 0.199
Behavioral diversity:				 0.199
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 256917925
--- Timings ---
Current time: 1529616264793 milliseconds
Total Time:         516.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.5 seconds, 32.3%
Fitness Testing:    277.9 seconds, 53.8%
Report:              71.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 44640.84580000002
Test mean error for best: 22.32042
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 80.4565243525 
Correct output: 36.9263823022  | Program output: 15.9263823022 
Correct output: -12.6268384926 | Program output: -22.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 80.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 25.2695047863 
Correct output: 127.5752307902 | Program output: 80.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 75.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 47.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -6.7988140078 
Correct output: 62.375676743   | Program output: 32.375676743  
Correct output: 90.6509578065  | Program output: 71.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 16.5749574162 
Correct output: 52.9510395124  | Program output: 16.9510395124 
Correct output: 35.7624010697  | Program output: 75.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 35.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_max} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (float_min float_max float_dup_times float_max integer_swap integer_flush in1 integer_min integer_max in1 integer_sub float_inc integer_mod integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc integer_div integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_yankdup integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup float_frominteger float_frominteger)
Errors: [14.9136 10 21.0 2 10.0 1 65.0 3 0.4995 8 56.0 13 18.0 2 47.1187 11 30.0 2 16.0 2 16.0 2 9.0 2 18.0 2 4.0 1 85.0 3 20.0 1 30.0 1 19.0 2 81.0 3 17.0 2 53.0 11 36.0 2 40.0 1 49.0 2 40.0 11]
Total: 895.5318
Mean: 17.910637
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2600.4929074
Median total errors in population: 906.0
Error averages by case: (99.19580779999998 3.562 96.36419669999995 5.785 90.7251185 2.715 123.58270540000001 3.769 103.322714 3.792 113.25373540000001 13.207 92.2260308 5.269 101.2305333 3.371 90.74960469999999 2.802 76.5464886 2.835 76.7729521 2.866 87.43757629999999 2.755 79.5684208 2.774 81.24629499999998 4.71 141.6869946 3.831 94.60333670000001 4.408 100.90895279999994 5.063 94.46162029999999 3.162 138.4988052 3.758 78.4685825 2.834 109.63986589999999 9.603 109.45345520000001 5.565 100.62992019999997 3.036 108.5778897 2.822 97.8493049 9.198)
Error minima by case: (0.0 0 0.0 0 0.0 0 39.9082 2 0.0 0 22.5598 8 0.0 0 1.0 1 7.6166 2 11.4289 1 7.7917 2 0.0 0 4.0426 1 0.0 0 84.0 2 0.0 0 0.1816 1 0.0 0 80.0 2 16.0 2 0.0 0 1.1755 1 0.0 0 20.3136 2 0.0 0)
Average genome size in population (length): 118.318
Average program size in population (points): 119.318
Average percent parens in population: 0.008
Minimum age in population: 150.3386228296082
Maximum age in population: 155.2050359068542
Average age in population: 153.2215821412821
Median age in population: 153.2927015009635
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.169
Error (vector) diversity:			 0.19
Behavioral diversity:				 0.191
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 259876100
--- Timings ---
Current time: 1529616270151 milliseconds
Total Time:         521.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.0 seconds, 32.2%
Fitness Testing:    280.9 seconds, 53.9%
Report:              72.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 44640.84580000002
Test mean error for best: 22.32042
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 80.4565243525 
Correct output: 36.9263823022  | Program output: 15.9263823022 
Correct output: -12.6268384926 | Program output: -22.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 80.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 25.2695047863 
Correct output: 127.5752307902 | Program output: 80.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 75.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 47.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -6.7988140078 
Correct output: 62.375676743   | Program output: 32.375676743  
Correct output: 90.6509578065  | Program output: 71.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 16.5749574162 
Correct output: 52.9510395124  | Program output: 16.9510395124 
Correct output: 35.7624010697  | Program output: 75.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 35.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_max} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_swap} {:instruction integer_flush} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (float_min float_max float_dup_times float_max integer_swap integer_flush in1 integer_min integer_max in1 integer_sub float_inc integer_mod integer_flush float_pop float_inc float_inc float_dup_items integer_div float_inc float_inc integer_div integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_yankdup integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup float_frominteger float_frominteger)
Errors: [14.9136 10 21.0 2 10.0 1 65.0 3 0.4995 8 56.0 13 18.0 2 47.1187 11 30.0 2 16.0 2 16.0 2 9.0 2 18.0 2 4.0 1 85.0 3 20.0 1 30.0 1 19.0 2 81.0 3 17.0 2 53.0 11 36.0 2 40.0 1 49.0 2 40.0 11]
Total: 895.5318
Mean: 17.910637
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2302.1673392
Median total errors in population: 907.0
Error averages by case: (85.4531482 3.637 82.31404370000003 5.822 75.29079059999997 2.796 113.42339379999999 3.651 89.97072470000003 3.826 103.71167950000002 13.148 78.96317089999998 5.229 88.20820370000006 3.444 80.2317132 2.691 66.63257610000001 2.728 66.70602160000001 2.714 74.61338450000002 2.805 68.6568012 2.642 70.08999110000002 4.564 132.18279840000002 3.702 80.58507850000001 4.603 89.79285739999996 5.08 82.41699990000001 3.203 128.487739 3.68 67.79686190000001 2.71 96.37350820000002 9.462 95.82443629999999 5.608 87.31656130000005 3.058 98.26888380000001 2.704 86.13997169999996 9.209)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 1.0682 10 0.0 0 1.0 1 30.0 2 4.9431 2 16.0 2 0.0 0 1.9574 2 0.0 0 45.5219 2 0.0 0 0.3757 1 1.0 1 65.0071 2 17.0 2 0.0 0 0.3152 1 0.0 0 49.0 1 0.0 0)
Average genome size in population (length): 117.976
Average program size in population (points): 118.976
Average percent parens in population: 0.008
Minimum age in population: 151.3386228296082
Maximum age in population: 156.8764645759228
Average age in population: 154.5334626380482
Median age in population: 154.6003006952327
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.185
Error (vector) diversity:			 0.2
Behavioral diversity:				 0.201
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 262825550
--- Timings ---
Current time: 1529616275541 milliseconds
Total Time:         526.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.8 seconds, 32.2%
Fitness Testing:    283.8 seconds, 53.9%
Report:              73.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 44783.72540000001
Test mean error for best: 22.39186
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 81.4565243525 
Correct output: 36.9263823022  | Program output: 19.9263823022 
Correct output: -12.6268384926 | Program output: -18.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 81.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 29.2695047863 
Correct output: 127.5752307902 | Program output: 81.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 79.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 51.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -2.7988140078 
Correct output: 62.375676743   | Program output: 36.375676743  
Correct output: 90.6509578065  | Program output: 75.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 20.5749574162 
Correct output: 52.9510395124  | Program output: 20.9510395124 
Correct output: 35.7624010697  | Program output: 79.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 39.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [15.9136 10 17.0 2 6.0 1 65.0 3 0.5005 9 56.0 13 14.0 2 46.1187 11 30.0 2 16.0 2 16.0 2 5.0 2 18.0 2 8.0 2 85.0 3 24.0 1 26.0 2 15.0 2 81.0 3 17.0 2 57.0 12 32.0 2 44.0 2 49.0 2 44.0 11]
Total: 892.5328
Mean: 17.850657
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2410.8791312
Median total errors in population: 907.0
Error averages by case: (92.00123519999995 3.687 86.2257551 5.481 81.19002170000002 2.764 116.95266169999998 3.693 96.8141966 3.933 107.2173516 13.126 83.9899127 5.005 92.74184210000004 3.504 83.8310129 2.753 69.50298260000001 2.89 70.1783019 2.845 78.84371090000002 2.816 72.1867665 2.686 74.05824680000002 4.381 135.26438689999998 3.847 85.7353871 4.259 94.4299237 4.853 85.24288609999998 3.201 131.3911507 3.714 70.4980927 2.798 101.53648099999997 9.787 99.85899329999998 5.22 94.45755900000002 3.087 101.83026790000001 2.762 92.43900450000001 9.369)
Error minima by case: (0.0 0 0.7421 1 0.0 0 65.0 2 0.0 0 54.4735 11 0.0 0 1.0 1 30.0 2 15.0083 2 16.0 2 0.0 0 6.9574 2 0.0 0 85.0 2 1.0 1 0.1111 1 0.0 0 81.0 2 17.0 1 0.0 0 0.3992 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 117.811
Average program size in population (points): 118.811
Average percent parens in population: 0.008
Minimum age in population: 152.3386228296082
Maximum age in population: 157.8220044920115
Average age in population: 155.8887580487674
Median age in population: 155.8677875969141
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.184
Error (vector) diversity:			 0.204
Behavioral diversity:				 0.205
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 265770900
--- Timings ---
Current time: 1529616281028 milliseconds
Total Time:         532.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.3 seconds, 32.2%
Fitness Testing:    286.9 seconds, 53.9%
Report:              73.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 44783.72540000001
Test mean error for best: 22.39186
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 81.4565243525 
Correct output: 36.9263823022  | Program output: 19.9263823022 
Correct output: -12.6268384926 | Program output: -18.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 81.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 29.2695047863 
Correct output: 127.5752307902 | Program output: 81.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 79.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 51.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -2.7988140078 
Correct output: 62.375676743   | Program output: 36.375676743  
Correct output: 90.6509578065  | Program output: 75.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 20.5749574162 
Correct output: 52.9510395124  | Program output: 20.9510395124 
Correct output: 35.7624010697  | Program output: 79.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 39.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 15} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc 15 integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [15.9136 10 17.0 2 6.0 1 65.0 3 0.5005 9 56.0 13 14.0 2 46.1187 11 30.0 2 16.0 2 16.0 2 5.0 2 18.0 2 8.0 2 85.0 3 24.0 1 26.0 2 15.0 2 81.0 3 17.0 2 57.0 12 32.0 2 44.0 2 49.0 2 44.0 11]
Total: 892.5328
Mean: 17.850657
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2599.5529920000004
Median total errors in population: 906.0
Error averages by case: (95.90571360000001 3.696 94.85248500000002 5.621 86.3355763 2.624 125.52118359999999 3.792 99.53986700000002 3.891 115.9427707 13.181 90.42276140000001 5.085 97.10356070000013 3.502 92.75576680000002 2.834 79.50873990000001 2.861 79.52467259999999 2.873 85.4356173 2.713 81.31086040000001 2.781 82.9671912 4.471 144.10452189999998 3.843 92.1109146 4.284 101.39639550000001 4.921 93.66478319999999 3.114 140.3800071 3.803 80.47195819999999 2.85 109.03119519999997 9.669 107.7835164 5.366 100.25356869999999 3.005 110.55237280000001 2.862 99.72099189999996 9.314)
Error minima by case: (0.0 0 0.0 0 0.0 0 38.9082 2 0.0 0 10.0682 11 0.0 0 0.0 0 6.6166 2 16.0 2 16.0 2 0.0 0 0.9574 2 0.0 0 65.5219 2 1.0 1 0.6243 1 0.0 0 80.9929 2 12.9582 1 0.0 0 3.3464 1 0.0 0 19.3136 2 0.0 0)
Average genome size in population (length): 117.31
Average program size in population (points): 118.31
Average percent parens in population: 0.008
Minimum age in population: 153.3386228296082
Maximum age in population: 159.3055120346196
Average age in population: 157.1851530145996
Median age in population: 157.2383814589658
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.167
Error (vector) diversity:			 0.191
Behavioral diversity:				 0.191
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 268703650
--- Timings ---
Current time: 1529616286324 milliseconds
Total Time:         537.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.9 seconds, 32.2%
Fitness Testing:    289.9 seconds, 53.9%
Report:              74.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 44854.37280000001
Test mean error for best: 22.42719
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 81.4565243525 
Correct output: 36.9263823022  | Program output: 20.9263823022 
Correct output: -12.6268384926 | Program output: -17.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 81.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 30.2695047863 
Correct output: 127.5752307902 | Program output: 81.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 80.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 52.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -1.7988140078 
Correct output: 62.375676743   | Program output: 37.375676743  
Correct output: 90.6509578065  | Program output: 76.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 21.5749574162 
Correct output: 52.9510395124  | Program output: 21.9510395124 
Correct output: 35.7624010697  | Program output: 80.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 40.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush})
Best program: (float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc integer_div float_inc in1 float_cos float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush)
Errors: [15.9136 10 16.0 2 5.0 1 65.0 3 0.5005 9 56.0 13 13.0 2 46.1187 11 30.0 2 16.0 2 16.0 2 4.0 1 18.0 2 9.0 2 85.0 3 25.0 2 25.0 2 14.0 2 81.0 3 17.0 2 58.0 12 31.0 2 45.0 2 49.0 2 45.0 11]
Total: 890.5328
Mean: 17.810656
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2462.4002846999997
Median total errors in population: 907.0
Error averages by case: (89.8212173 3.764 87.65192760000005 5.631 81.17578880000003 2.783 120.99579930000002 3.723 93.621414 4.016 110.9712236 13.211 84.8967038 5.066 91.24822080000007 3.608 88.15779769999999 2.761 74.8128443 2.846 74.8313801 2.864 78.54630730000001 2.778 75.7748377 2.749 76.2650958 4.378 139.70871899999997 3.853 86.69810260000006 4.369 95.4070075 4.867 86.46147629999997 3.177 135.97950319999998 3.719 75.88910560000001 2.813 104.47996199999999 9.757 101.06705359999998 5.416 93.97281820000003 3.097 105.998445 2.785 94.4525336 9.484)
Error minima by case: (0.0 0 0.0 0 0.0 0 17.0918 2 0.0 0 1.0682 11 0.0 0 1.0 1 29.0 2 4.9431 2 0.8363 2 0.0 0 2.4991 2 0.0 0 45.5219 2 0.0 0 0.4978 1 0.0 0 24.9929 2 16.0 2 0.0 0 0.9717 1 0.0 0 36.6864 2 0.0 0)
Average genome size in population (length): 117.321
Average program size in population (points): 118.321
Average percent parens in population: 0.008
Minimum age in population: 154.3386228296082
Maximum age in population: 160.559855104739
Average age in population: 158.5149312134511
Median age in population: 158.5723382008207
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.208
Error (vector) diversity:			 0.224
Behavioral diversity:				 0.225
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 271636825
--- Timings ---
Current time: 1529616291850 milliseconds
Total Time:         543.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.5 seconds, 32.1%
Fitness Testing:    292.9 seconds, 53.9%
Report:              75.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 44758.465800000005
Test mean error for best: 22.37923
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 83.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 83.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 83.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items float_add float_inc in1 integer_flush float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc integer_shove float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup float_frominteger float_frominteger)
Errors: [17.9136 10 15.0 2 4.0 1 65.0 3 2.5005 9 56.0 13 12.0 2 44.1187 11 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 888.5328
Mean: 17.770657
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2875.6134008
Median total errors in population: 903.0
Error averages by case: (107.39204039999998 4.111 102.6868445 5.427 96.67488159999998 2.901 136.820751 3.911 110.79207299999997 4.327 127.33165430000001 13.231 99.35491710000002 4.985 107.8004424000002 3.974 104.47737880000001 2.968 91.37103760000001 3.014 91.40916589999999 3.023 94.90736210000003 2.935 93.2387951 2.91 92.64293090000001 4.452 155.2038259 4.006 104.4655592 4.604 110.22819340000001 4.782 102.92507049999996 3.307 151.5575522 3.909 92.41871090000001 2.998 122.25769829999999 10.117 115.5881354 5.217 112.67257239999996 3.248 122.04569980000001 2.993 112.31210810000003 9.688)
Error minima by case: (0.5812 1 0.4448 1 0.0 0 65.0 2 0.0 0 54.968 11 0.0 0 0.0 0 30.0 2 16.0 2 16.0 2 0.0 0 12.4991 2 0.0 0 85.0 2 0.0 0 0.1989 1 0.349 1 81.0 1 17.0 2 0.0 0 1.2516 1 1.0 1 49.0 2 1.0 1)
Average genome size in population (length): 117.078
Average program size in population (points): 118.078
Average percent parens in population: 0.009
Minimum age in population: 155.3386228296082
Maximum age in population: 161.8686943159626
Average age in population: 159.852039739647
Median age in population: 159.9034016446807
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.193
Error (vector) diversity:			 0.215
Behavioral diversity:				 0.216
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 274563800
--- Timings ---
Current time: 1529616297270 milliseconds
Total Time:         548.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.1 seconds, 32.1%
Fitness Testing:    296.0 seconds, 54.0%
Report:              76.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 44758.465800000005
Test mean error for best: 22.37923
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 83.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 83.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 83.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items float_add float_inc in1 integer_flush float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc integer_shove float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup float_frominteger float_frominteger)
Errors: [17.9136 10 15.0 2 4.0 1 65.0 3 2.5005 9 56.0 13 12.0 2 44.1187 11 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 888.5328
Mean: 17.770657
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2701.5628265999994
Median total errors in population: 907.0
Error averages by case: (98.91391790000009 4.561 97.62453800000003 5.746 92.38126090000002 3.04 129.7009659 3.849 101.15616109999993 4.793 119.35754200000001 13.194 93.95700310000007 5.253 104.86497940000025 4.633 97.10497930000001 2.907 83.5863284 2.977 83.69550380000001 2.962 88.38041100000004 3.084 84.51068930000001 2.858 84.98382430000005 4.487 148.0090607 3.923 98.54778230000004 4.59 103.51245599999996 4.942 95.92915909999995 3.465 144.4564579 3.86 84.788738 2.941 114.84117479999995 9.835 110.3380585 5.511 103.66433979999996 3.401 114.82339180000001 2.925 103.10510329999998 9.592)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 1 0.0 0 1.0682 11 0.5671 1 0.0 0 30.0 2 4.9431 2 16.0 2 0.0 0 1.9574 2 0.0 0 45.5219 2 0.0 0 0.4978 1 1.0 1 65.0071 2 17.0 1 0.0 0 0.049 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 118.584
Average program size in population (points): 119.584
Average percent parens in population: 0.008
Minimum age in population: 158.3565555771485
Maximum age in population: 163.5209051228355
Average age in population: 161.2637709103019
Median age in population: 161.3279981865035
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.232
Error (vector) diversity:			 0.26
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 277528425
--- Timings ---
Current time: 1529616302628 milliseconds
Total Time:         554.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.7 seconds, 32.1%
Fitness Testing:    299.0 seconds, 54.0%
Report:              77.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 44758.465800000005
Test mean error for best: 22.37923
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 83.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 83.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 83.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items float_add float_inc in1 integer_flush float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc integer_shove float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup float_frominteger float_frominteger)
Errors: [17.9136 10 15.0 2 4.0 1 65.0 3 2.5005 9 56.0 13 12.0 2 44.1187 11 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 888.5328
Mean: 17.770657
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2725.6288415999998
Median total errors in population: 907.0
Error averages by case: (97.48700750000002 5.191 100.25945620000007 6.079 94.63918570000003 3.064 129.3045083 3.902 97.00501059999989 5.336 120.48996129999998 13.305 96.86567680000005 5.563 109.48210680000055 5.477 96.67227899999999 2.944 83.33123119999999 2.976 83.3727502 2.975 90.66725130000003 3.096 85.31573789999999 2.923 87.98392560000008 4.946 147.7575913 3.938 99.08629250000006 4.499 106.34822229999995 5.239 98.78299249999993 3.382 144.10051639999998 3.888 84.448058 2.951 113.90166689999991 9.561 113.06044600000001 5.961 104.0526660999999 3.397 114.4054808 2.969 103.87382039999999 9.373)
Error minima by case: (0.0 0 0.0 0 0.0 0 38.9082 2 0.0 0 7.8962 9 0.0 0 1.0 1 6.6166 2 9.198 1 6.8719 2 0.0 0 4.8163 1 0.0 0 83.4863 2 1.0 1 1.0808 1 0.0 0 80.0 2 16.0 2 0.0 0 0.7062 1 0.0 0 19.3136 2 0.0 0)
Average genome size in population (length): 120.076
Average program size in population (points): 121.076
Average percent parens in population: 0.008
Minimum age in population: 159.3565555771485
Maximum age in population: 164.8479158496263
Average age in population: 162.6585231749389
Median age in population: 162.7084645680152
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.25
Error (vector) diversity:			 0.292
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 280530325
--- Timings ---
Current time: 1529616308063 milliseconds
Total Time:         559.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       179.1 seconds, 32.0%
Fitness Testing:    302.1 seconds, 54.0%
Report:              77.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (float_min float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc print_integer float_dup_items integer_div float_inc integer_min float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_rot float_pop float_inc float_inc float_inc float_inc in1 in2 float_shove float_inc float_inc integer_swap float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2958.7237913
Median total errors in population: 907.0
Error averages by case: (106.37150240000005 6.578 108.65925460000007 5.92 106.67598500000008 3.364 137.1400918 3.908 102.62802649999956 6.607 127.131341 13.248 104.24120400000002 5.397 123.9913993000011 7.188 104.9023834 2.953 91.99705689999999 2.96 91.97783629999999 2.97 99.04015210000003 3.597 93.78502900000001 2.911 96.3880412 4.835 155.6434781 3.94 112.7476127 4.735 113.53125960000006 4.994 105.92263049999991 3.783 151.9319929 3.88 92.9019582 2.943 127.50431709999987 9.995 120.07659189999997 5.817 116.10440069999987 3.936 122.4076864 2.974 115.76855969999998 9.821)
Error minima by case: (0.0 0 0.0 0 0.0 0 1.0918 2 0.0156 1 56.0 11 0.0 0 0.0 0 30.0 2 16.0 2 16.0 2 0.0 0 5.4991 2 0.0 0 64.4781 2 1.0 1 1.1292 1 0.0 0 40.9929 2 17.0 2 0.0 0 1.951 1 0.0 0 20.6864 2 0.0 0)
Average genome size in population (length): 122.555
Average program size in population (points): 123.555
Average percent parens in population: 0.008
Minimum age in population: 160.3565555771485
Maximum age in population: 166.0197673880398
Average age in population: 164.0360313046134
Median age in population: 164.1044390419684
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.296
Error (vector) diversity:			 0.353
Behavioral diversity:				 0.355
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 283594300
--- Timings ---
Current time: 1529616313721 milliseconds
Total Time:         565.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.6 seconds, 32.0%
Fitness Testing:    305.5 seconds, 54.1%
Report:              78.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup float_frominteger float_frominteger)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2638.2578087999955
Median total errors in population: 905.7664
Error averages by case: (87.00793680000007 7.769 93.69629650000009 5.849 91.42151660000009 3.3 127.59192909999997 3.843 79.38171579999985 7.564 116.77496850000003 13.252 90.76295110000001 5.454 113.84701380000133 8.623 94.8437887 2.881 81.04238399999998 2.97 81.1983818 3.005 85.14801769999995 3.706 81.17785950000001 2.919 82.86303280000001 4.987 145.8608865 3.973 97.66161629999998 4.877 100.22247240000002 5.086 93.34659709999993 3.845 142.3416039 3.844 82.4719102 2.944 113.66944619999983 9.973 105.44433389999998 5.814 101.84718099999982 4.167 112.65911540000002 2.907 102.62185319999993 9.801)
Error minima by case: (0.0 0 0.3802 1 0.0 0 65.0 1 0.0 0 55.4664 8 0.0 0 1.0 1 30.0 2 16.0 2 16.0 2 0.0 0 4.367 2 0.0 0 85.0 2 0.0 0 0.0808 1 0.0 0 81.0 2 17.0 2 0.0 0 0.9373 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 125.118
Average program size in population (points): 126.118
Average percent parens in population: 0.008
Minimum age in population: 162.8861411257002
Maximum age in population: 167.2051882658363
Average age in population: 165.366700811072
Median age in population: 165.3909610184077
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.303
Error (vector) diversity:			 0.374
Behavioral diversity:				 0.374
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 286722275
--- Timings ---
Current time: 1529616319256 milliseconds
Total Time:         570.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.1 seconds, 31.9%
Fitness Testing:    308.9 seconds, 54.1%
Report:              79.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction integer_min} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items float_add float_inc in1 integer_flush float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop integer_min float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_div float_inc float_inc float_inc integer_add integer_div float_inc float_inc integer_shove float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup float_frominteger float_frominteger)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2509.3665189999956
Median total errors in population: 902.0535
Error averages by case: (81.54916340000004 8.426 89.17403790000012 5.516 86.08935330000007 3.191 121.36939199999999 3.795 71.69234589999988 8.114 112.44060060000001 13.265 85.45298750000006 5.099 110.39672580000163 9.362 88.4203546 2.829 74.8315129 2.885 74.9280936 2.888 78.32334710000005 3.751 75.99366230000001 2.833 78.40453420000006 4.841 139.9506041 3.873 94.28779300000001 5.057 94.94359300000004 4.843 86.08038029999992 3.822 136.29454389999998 3.804 76.05023270000001 2.859 111.92633259999984 10.222 100.80429899999997 5.456 98.91048099999975 4.322 106.33078879999998 2.86 100.83835949999995 9.97)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 55.0604 11 0.0 0 1.0 1 30.0 2 16.0 1 16.0 2 0.0 0 0.4991 1 0.0 0 85.0 2 0.0 0 2.0 1 0.0 0 81.0 2 17.0 2 0.0 0 3.0627 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 126.561
Average program size in population (points): 127.561
Average percent parens in population: 0.008
Minimum age in population: 164.1386324033637
Maximum age in population: 168.6268318156251
Average age in population: 166.7307872288733
Median age in population: 166.8109878261204
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.286
Error (vector) diversity:			 0.361
Behavioral diversity:				 0.361
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 289886300
--- Timings ---
Current time: 1529616324870 milliseconds
Total Time:         576.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       183.6 seconds, 31.9%
Fitness Testing:    312.1 seconds, 54.2%
Report:              80.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (float_min float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc print_integer float_dup_items integer_div float_inc integer_min float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_rot float_pop float_inc float_inc float_inc float_inc integer_dup in2 float_shove float_inc float_inc integer_swap float_inc float_inc float_inc float_inc float_inc in1 integer_min integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2456.413037799996
Median total errors in population: 901.5318
Error averages by case: (78.29681490000002 8.43 86.83836600000015 5.719 84.67208400000013 3.26 120.0632186 3.723 68.54064590000009 8.032 109.0721992 13.222 83.53123259999995 5.252 108.47150280000164 9.339 87.09029470000002 2.758 73.76447750000001 2.815 73.7897118 2.84 76.6914463 3.717 74.2769932 2.783 76.10195350000004 4.892 138.8120605 3.798 91.7302197 4.86 91.66902640000002 5.053 84.97887269999994 3.946 135.1091317 3.716 74.81693419999999 2.797 108.66741549999982 10.08 98.39943199999993 5.594 95.46864179999972 4.269 104.9945998 2.784 97.03776249999997 9.849)
Error minima by case: (0.0 0 0.5435 1 0.0 0 37.9082 2 0.0506 1 54.3143 9 0.9014 1 0.4565 1 5.6166 2 16.0 2 16.0 2 0.0 0 2.0734 2 0.0 0 85.0 2 0.0 0 0.6243 1 1.0 1 79.9929 2 17.0 2 0.0 0 0.049 1 0.9812 1 18.3136 2 1.0 1)
Average genome size in population (length): 126.531
Average program size in population (points): 127.531
Average percent parens in population: 0.008
Minimum age in population: 165.3466184460996
Maximum age in population: 170.1285342288821
Average age in population: 168.042657208473
Median age in population: 168.1030859771298
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.295
Error (vector) diversity:			 0.358
Behavioral diversity:				 0.359
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 293049575
--- Timings ---
Current time: 1529616330320 milliseconds
Total Time:         581.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       185.1 seconds, 31.8%
Fitness Testing:    315.3 seconds, 54.2%
Report:              81.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times})
Best program: (float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_dup_times)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2298.8126712999956
Median total errors in population: 900.2659
Error averages by case: (70.4736983 8.639 79.62962200000013 5.203 74.59946940000007 2.975 115.38111219999999 3.662 60.02196320000005 8.212 105.0932771 13.174 76.63566710000002 4.867 100.46209950000109 9.457 82.2248191 2.688 68.6377605 2.73 68.7118417 2.726 67.39489619999993 3.503 69.2159584 2.682 70.65889440000002 4.614 134.1067972 3.706 84.3590613 4.785 85.97174220000001 4.656 76.02333779999995 3.704 130.4302068 3.644 69.801363 2.724 104.1781759999999 10.24 91.56747319999997 5.079 89.23736099999991 4.174 100.2430071 2.711 93.24306660000003 9.955)
Error minima by case: (0.4571 1 1.0 1 0.0 0 65.0 2 0.0 0 50.2894 10 0.0 0 2.5752 1 30.0 2 16.0 1 16.0 1 0.0 0 11.4991 2 0.0 0 85.0 2 1.0 1 0.9192 1 1.0 1 81.0 2 17.0 2 0.0 0 0.4945 1 1.0 1 49.0 2 0.0222 1)
Average genome size in population (length): 127.158
Average program size in population (points): 128.158
Average percent parens in population: 0.008
Minimum age in population: 166.9861885531562
Maximum age in population: 171.2577789075415
Average age in population: 169.4393211305529
Median age in population: 169.4598094089665
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.262
Error (vector) diversity:			 0.332
Behavioral diversity:				 0.333
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 296228525
--- Timings ---
Current time: 1529616335838 milliseconds
Total Time:         587.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.7 seconds, 31.8%
Fitness Testing:    318.6 seconds, 54.3%
Report:              81.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times})
Best program: (float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_dup_times)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2463.1213874999944
Median total errors in population: 900.5328
Error averages by case: (79.623336 8.664 86.04962430000016 5.45 82.88041310000008 3.255 119.7777441 3.73 69.56927129999998 8.315 111.3470736 13.225 83.10225590000005 5.071 109.42670870000175 9.461 86.81035140000002 2.759 73.66256589999999 2.829 73.6635724 2.823 75.8556245 3.672 75.02330550000002 2.772 76.24902260000005 4.793 138.6624946 3.804 92.44973740000002 5.162 92.20233920000001 4.848 83.73315109999992 3.951 134.87509419999998 3.701 74.5929408 2.79 111.0377231999998 10.306 97.87010239999998 5.271 96.75635149999977 4.375 104.7020294 2.78 99.3805544 10.011)
Error minima by case: (0.0 0 0.1301 1 0.0 0 39.9082 3 0.0747 1 55.0 11 0.0 0 1.4565 1 7.6166 1 15.0 1 15.0 2 0.0 0 0.4991 1 0.0 0 84.0 2 0.0 0 0.1111 1 0.0 0 80.0 2 16.0 1 0.0 0 0.4945 1 0.0 0 20.3136 2 0.0 0)
Average genome size in population (length): 127.578
Average program size in population (points): 128.578
Average percent parens in population: 0.008
Minimum age in population: 168.5554876854542
Maximum age in population: 172.6372983850234
Average age in population: 170.7824210463524
Median age in population: 170.8221816861128
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.289
Error (vector) diversity:			 0.345
Behavioral diversity:				 0.345
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 299417975
--- Timings ---
Current time: 1529616341375 milliseconds
Total Time:         592.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.3 seconds, 31.8%
Fitness Testing:    321.9 seconds, 54.3%
Report:              82.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times})
Best program: (float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_dup_times)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2409.927656199994
Median total errors in population: 901.5328
Error averages by case: (75.37557869999995 8.419 84.69625550000016 5.592 79.84929940000008 3.08 118.9572038 3.733 64.96869160000024 8.041 110.11040240000001 13.211 81.77063330000003 5.057 105.77474000000146 9.135 85.942829 2.766 72.4850625 2.789 72.52055340000001 2.796 73.46682740000001 3.557 74.1655392 2.753 74.98784770000006 4.776 137.61862459999998 3.774 88.03797080000001 4.729 91.1913503 4.892 82.12050359999986 3.814 133.94278899999998 3.728 73.5704048 2.791 106.70686519999984 10.028 96.73182759999997 5.392 93.21829249999976 4.244 103.88500930000001 2.788 96.16555459999995 9.782)
Error minima by case: (0.0 0 0.5688 1 0.0 0 65.0 1 0.0747 1 2.7292 9 0.5671 1 10.0 1 30.0 2 16.0 2 16.0 2 0.0 0 12.4991 2 0.0 0 72.8609 2 0.0 0 0.0808 1 0.8056 1 81.0 2 17.0 2 0.0 0 1.6064 1 0.0195 1 49.0 2 1.0 1)
Average genome size in population (length): 127.308
Average program size in population (points): 128.308
Average percent parens in population: 0.008
Minimum age in population: 170.188779512194
Maximum age in population: 174.0790371337229
Average age in population: 172.113818279848
Median age in population: 172.173938429442
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.257
Error (vector) diversity:			 0.326
Behavioral diversity:				 0.326
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 302600675
--- Timings ---
Current time: 1529616347041 milliseconds
Total Time:         598.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       189.8 seconds, 31.7%
Fitness Testing:    325.1 seconds, 54.3%
Report:              83.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times})
Best program: (float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_dup_times)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2173.0526068999948
Median total errors in population: 900.5328
Error averages by case: (66.40288739999988 8.495 74.93717820000016 5.34 71.91934210000007 2.983 109.5368901 3.602 56.13933920000023 7.988 98.5835793 13.143 72.1321765 5.038 97.23781840000126 9.111 76.12932449999998 2.643 62.184978599999994 2.71 62.436104699999994 2.69 64.14257069999991 3.4 63.47324340000001 2.639 65.93632299999999 4.634 128.2968044 3.674 80.63397759999998 4.9 81.37841870000004 4.781 72.65315089999999 3.693 124.70481760000001 3.606 63.53313980000001 2.658 97.5840811999999 10.045 86.87030939999991 5.17 84.7884599999998 4.26 94.2994197 2.664 87.44227150000002 9.809)
Error minima by case: (0.0 0 0.6045 1 0.0 0 38.9082 2 0.1182 1 55.4135 9 0.0 0 2.0 1 6.6166 2 16.0 2 16.0 2 0.0 0 4.4991 2 0.0 0 85.0 2 1.0 1 1.9192 1 0.0669 1 80.9929 2 17.0 2 0.0 0 0.2759 1 0.0 0 19.3136 2 0.0 0)
Average genome size in population (length): 127.055
Average program size in population (points): 128.055
Average percent parens in population: 0.008
Minimum age in population: 171.5548358024546
Maximum age in population: 175.3098368126749
Average age in population: 173.3407236589349
Median age in population: 173.3598083628145
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.261
Error (vector) diversity:			 0.318
Behavioral diversity:				 0.318
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 305777075
--- Timings ---
Current time: 1529616352578 milliseconds
Total Time:         603.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       191.5 seconds, 31.7%
Fitness Testing:    328.2 seconds, 54.3%
Report:              84.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 44941.24959999999
Test mean error for best: 22.47062
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.0560754062 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.0560754062 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.0560754062 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction 49.05607540624237} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times float_max integer_min float_dup_times integer_mod integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc integer_div float_inc in1 float_cos float_pop float_inc 49.05607540624237 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc integer_mod float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc integer_shove float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc in1 float_pop float_inc float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [16.5132 11 15.0 2 4.0 1 65.0 3 1.1 7 56.0 13 12.0 2 45.5192 9 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 884.1324
Mean: 17.682648
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2333.399596899995
Median total errors in population: 900.5318
Error averages by case: (73.43950919999996 8.394 81.6558475000001 5.47 76.50158420000005 2.863 115.30459760000001 3.656 63.58595790000022 8.035 104.18988540000001 13.176 79.6036749 5.058 104.46030410000128 9.026 82.1492455 2.692 68.65409319999999 2.758 68.67498189999998 2.759 72.1317396 3.442 69.37545430000002 2.706 73.42458550000005 4.584 134.0163592 3.705 83.96093950000002 4.851 90.20965660000002 4.706 80.61261959999993 3.635 130.2867123 3.655 69.668283 2.724 102.49487319999987 9.976 94.30656689999996 5.258 90.88377859999976 4.128 100.1674376 2.718 93.83590959999997 9.83)
Error minima by case: (0.0 0 1.0 1 0.0 0 65.0 2 0.1182 1 0.7902 8 0.0 0 10.0 1 30.0 2 16.0 2 15.5582 2 0.0 0 7.5009 2 0.0 0 61.9232 2 0.0 0 0.1523 1 1.0 1 77.4084 2 9.3596 2 0.0 0 1.5055 1 1.0 1 49.0 2 0.172 1)
Average genome size in population (length): 127.206
Average program size in population (points): 128.206
Average percent parens in population: 0.008
Minimum age in population: 172.5548358024546
Maximum age in population: 176.5983056114401
Average age in population: 174.5396971912319
Median age in population: 174.5483326762862
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.251
Error (vector) diversity:			 0.31
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 308957250
--- Timings ---
Current time: 1529616358441 milliseconds
Total Time:         609.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       193.2 seconds, 31.7%
Fitness Testing:    331.5 seconds, 54.4%
Report:              84.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times integer_mod integer_flush in1 integer_fromfloat float_dup_items float_cos integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items float_inc float_inc in1 float_cos float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc integer_mod float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc integer_shove float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc in1 float_pop float_inc float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush print_float float_yankdup float_frominteger)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 128
Size: 129
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2662.5890579999946
Median total errors in population: 901.5318
Error averages by case: (85.20425069999989 8.763 92.06655850000016 5.361 93.23391940000013 3.149 131.25764049999998 3.828 74.8509431000001 8.272 116.03993129999999 13.222 88.75045640000003 5.065 114.93803840000182 9.315 98.72106250000002 2.892 84.0588603 2.997 84.5617404 2.992 82.27535990000004 3.657 81.30879060000001 2.918 83.84590790000004 4.851 149.4716594 3.961 100.5036802 5.057 98.09165250000001 4.879 90.19135249999987 3.867 145.9116152 3.836 86.4267188 2.982 116.34687839999987 10.301 103.64566479999996 5.184 103.64699099999969 4.458 116.42244870000003 2.923 106.11493659999992 9.972)
Error minima by case: (0.0 0 0.0 0 0.0 0 64.0 2 0.4995 1 1.0682 11 0.0 0 1.5435 1 29.0 2 4.9431 1 15.0 2 0.0 0 8.4991 1 0.0 0 45.5219 2 0.0 0 1.0808 1 0.9588 1 65.0071 2 16.0 2 0.0 0 0.5055 1 0.2391 1 48.0 2 1.0 1)
Average genome size in population (length): 127.06
Average program size in population (points): 128.06
Average percent parens in population: 0.008
Minimum age in population: 173.5548358024546
Maximum age in population: 177.8289180771697
Average age in population: 175.7751276090914
Median age in population: 175.8062375746943
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.253
Error (vector) diversity:			 0.304
Behavioral diversity:				 0.305
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 312133800
--- Timings ---
Current time: 1529616363833 milliseconds
Total Time:         615.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.7 seconds, 31.7%
Fitness Testing:    334.6 seconds, 54.4%
Report:              85.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times integer_mod integer_flush in1 integer_fromfloat float_stackdepth float_cos integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc integer_pop float_inc float_inc in1 float_cos float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc integer_mod float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc integer_shove float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc in1 float_pop float_inc float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2226.230394299995
Median total errors in population: 901.5318
Error averages by case: (69.38881269999993 8.453 76.9508040000001 5.386 74.0958649000001 2.861 111.4274565 3.587 59.32206750000006 7.984 100.88672929999998 13.195 74.59489320000003 5.006 99.95592160000113 8.935 78.14245649999998 2.615 64.6205899 2.711 63.9307 2.672 66.8735105999999 3.29 65.33844930000001 2.634 67.9948658 4.654 129.71877569999998 3.641 81.30824419999999 4.805 84.5534572 4.777 74.85665319999993 3.561 126.6434565 3.58 65.62307759999999 2.652 98.4429747999999 10.047 89.23271069999998 5.191 87.17405139999987 4.074 96.2114565 2.635 90.24241469999996 9.754)
Error minima by case: (0.0 0 1.9524 1 0.0 0 38.9082 2 0.4995 1 55.0 11 0.0 0 1.4565 1 6.6166 2 15.0 2 15.0 2 0.0 0 6.4991 2 0.0 0 84.0 2 0.2012 1 0.0808 1 0.1944 1 80.0 2 16.0 2 0.0 0 0.0959 1 0.5435 1 19.3136 2 0.5435 1)
Average genome size in population (length): 127.363
Average program size in population (points): 128.363
Average percent parens in population: 0.008
Minimum age in population: 175.078452287053
Maximum age in population: 179.043330977314
Average age in population: 177.0365415981405
Median age in population: 177.0657912439068
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.244
Error (vector) diversity:			 0.301
Behavioral diversity:				 0.301
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 315317900
--- Timings ---
Current time: 1529616369432 milliseconds
Total Time:         620.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       196.2 seconds, 31.6%
Fitness Testing:    337.8 seconds, 54.4%
Report:              86.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 float_dup_times integer_mod integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_dup_times)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2223.0577164999945
Median total errors in population: 901.5318
Error averages by case: (70.69923169999993 8.528 76.75597320000016 5.414 75.22187170000012 3.079 109.88198449999999 3.593 60.60908300000027 8.106 98.7787071 13.138 72.74922499999998 5.109 102.03439040000153 9.099 76.5500838 2.637 62.9486904 2.71 63.0162456 2.685 69.13848559999995 3.538 63.7928415 2.647 68.84974730000002 4.699 128.6952784 3.672 83.95472460000003 4.824 82.81686280000007 4.874 77.62195799999984 3.806 124.1504421 3.602 64.075416 2.679 99.21755219999987 10.084 88.29719849999998 5.247 88.81211529999973 4.272 94.6695038 2.651 89.19210399999997 9.835)
Error minima by case: (0.0 0 0.0 0 0.0 0 58.7886 2 0.2174 1 1.0682 6 0.0 0 0.3378 1 21.0802 2 4.9431 1 16.0 1 0.0 0 11.4991 2 0.0 0 33.2187 2 1.0 1 1.1816 1 1.0 1 48.7039 2 17.0 2 0.0 0 0.3152 1 0.0 0 46.3832 2 0.0 0)
Average genome size in population (length): 126.904
Average program size in population (points): 127.904
Average percent parens in population: 0.008
Minimum age in population: 176.078452287053
Maximum age in population: 180.267470072922
Average age in population: 178.3624077593081
Median age in population: 178.4264279772189
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.266
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 318490500
--- Timings ---
Current time: 1529616375017 milliseconds
Total Time:         626.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       197.9 seconds, 31.6%
Fitness Testing:    341.1 seconds, 54.5%
Report:              87.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 float_dup_times integer_mod integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_inc integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc integer_div float_inc in1 float_cos float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc integer_mod float_inc float_inc float_inc integer_mod integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc integer_shove float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc in1 float_pop float_inc float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_frominteger)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2486.9532435999936
Median total errors in population: 900.5328
Error averages by case: (77.43723089999993 8.644 85.87606290000014 5.3 80.76894930000012 2.994 124.75017349999999 3.734 67.27919780000022 8.219 110.5270153 13.201 82.58175390000005 5.026 107.80659640000135 9.156 91.9034636 2.775 78.24539619999999 2.881 78.3771392 2.885 75.0120009 3.596 75.18957610000002 2.809 77.55229400000009 4.671 143.2047187 3.872 90.49415680000006 4.907 92.6285061 4.777 83.52734899999986 3.783 139.6030987 3.731 79.54215729999999 2.865 109.09707639999985 10.217 97.90743789999998 5.094 96.60609169999975 4.353 109.76325760000002 2.805 99.10054339999996 9.877)
Error minima by case: (0.0 0 2.0 1 0.0 0 65.0 2 0.0 0 54.9318 10 1.0 1 2.4565 1 30.0 2 16.0 1 16.0 2 0.0 0 9.2814 1 0.0 0 85.0 2 3.0 1 0.4941 1 0.8056 1 81.0 2 17.0 2 0.1184 1 0.4945 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 127.069
Average program size in population (points): 128.069
Average percent parens in population: 0.008
Minimum age in population: 177.4587481316534
Maximum age in population: 181.4152846263302
Average age in population: 179.6244143479282
Median age in population: 179.6575459407345
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.255
Error (vector) diversity:			 0.307
Behavioral diversity:				 0.307
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 321667225
--- Timings ---
Current time: 1529616380900 milliseconds
Total Time:         632.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       199.4 seconds, 31.5%
Fitness Testing:    344.5 seconds, 54.5%
Report:              88.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction in1} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction tagged_740} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_inc})
Best program: (float_cos float_max tagged_869 in1 float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc print_integer print_integer float_dup_items integer_div float_inc integer_min float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_rot float_pop float_inc float_inc float_inc float_inc in1 in2 float_shove float_inc float_inc integer_swap float_inc float_inc float_inc float_inc float_inc in1 tagged_740 float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_inc)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2518.5295987999943
Median total errors in population: 902.37355
Error averages by case: (79.79233229999991 8.411 88.87466640000015 5.572 84.22386850000008 3.008 123.2183458 3.757 69.87476200000009 8.039 113.04048920000001 13.211 85.6861014 5.208 111.08013220000159 8.982 90.34288839999999 2.801 76.95082009999999 2.912 77.00785020000001 2.872 79.00783050000004 3.483 78.1540414 2.813 79.89478900000006 4.856 141.8582463 3.85 92.3002921 4.722 95.509753 4.921 87.56788019999982 3.727 138.161581 3.805 78.05815750000001 2.864 109.58443539999988 9.965 100.86255149999998 5.39 97.40824909999975 4.195 108.20275310000001 2.823 99.94978219999993 9.73)
Error minima by case: (0.0 0 0.4469 1 0.0 0 65.0 2 0.4995 1 55.2801 10 0.0 0 2.4565 1 30.0 2 16.0 2 16.0 2 0.0 0 10.4991 2 0.0 0 85.0 2 1.0 1 0.9192 1 1.0 1 81.0 2 17.0 2 0.0 0 0.5055 1 0.9702 1 49.0 2 0.516 1)
Average genome size in population (length): 126.914
Average program size in population (points): 127.914
Average percent parens in population: 0.008
Minimum age in population: 178.5131899033964
Maximum age in population: 183.0176417874567
Average age in population: 180.985192703952
Median age in population: 181.0203475741402
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.243
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 324840125
--- Timings ---
Current time: 1529616386448 milliseconds
Total Time:         637.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       201.0 seconds, 31.5%
Fitness Testing:    347.8 seconds, 54.5%
Report:              88.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction in1} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_div float_inc in1 float_cos float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc in1 in2 float_shove print_float float_dup_times in1 float_yankdup float_frominteger float_frominteger)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2416.7400755999947
Median total errors in population: 900.7664
Error averages by case: (75.80047189999993 8.552 84.89866240000016 5.192 82.0989177000001 2.968 119.7807321 3.661 65.79489620000014 8.198 106.0540138 13.146 81.10062010000006 4.928 106.21936880000128 9.112 86.8064339 2.701 72.4264292 2.719 72.8871644 2.727 72.77794859999999 3.472 73.5013071 2.684 74.79951100000002 4.453 138.44056270000002 3.707 91.41472170000002 4.863 90.45801989999997 4.676 81.1301278999999 3.706 134.7103341 3.682 74.4188601 2.712 108.59625339999987 10.199 96.65933889999995 5.035 93.83969929999977 4.232 104.7233263 2.727 97.38835409999993 9.962)
Error minima by case: (0.0 0 0.3093 1 0.0 0 65.0 2 0.0 0 25.0682 11 0.5914 1 2.4565 1 30.0 1 5.8325 2 16.0 2 0.0 0 7.4991 2 0.0 0 50.5219 2 0.0 0 0.0808 1 0.1944 1 66.0071 2 2.0418 2 0.0 0 1.5055 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 126.749
Average program size in population (points): 127.749
Average percent parens in population: 0.008
Minimum age in population: 180.08539620324
Maximum age in population: 184.5863629070726
Average age in population: 182.264218210349
Median age in population: 182.2470793625737
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.253
Error (vector) diversity:			 0.302
Behavioral diversity:				 0.302
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 328008850
--- Timings ---
Current time: 1529616392212 milliseconds
Total Time:         643.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       202.6 seconds, 31.5%
Fitness Testing:    351.2 seconds, 54.6%
Report:              89.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items float_add float_inc in1 integer_flush float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_dec float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc integer_shove float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 float_dec float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup float_frominteger float_frominteger)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 128
Size: 129
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2531.200133399995
Median total errors in population: 901.5318
Error averages by case: (80.59512609999993 8.657 89.08727410000017 5.428 84.7480457000001 3.059 123.3469982 3.767 70.51555389999986 8.248 112.42547420000001 13.227 86.64301820000006 4.985 111.68741110000175 9.266 90.46176320000002 2.812 76.70062940000001 2.847 76.83988169999999 2.86 78.65845040000006 3.582 78.16457070000001 2.809 80.1663188000001 4.544 141.6851985 3.83 93.01223420000012 5.134 96.1830294999999 4.704 86.46714419999981 3.767 138.09889219999997 3.766 77.98112079999999 2.833 113.39798329999977 10.161 101.06767889999998 5.226 99.28165359999959 4.412 108.35320379999999 2.832 102.89747869999987 9.978)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 28.534 9 0.0 0 1.4565 1 30.0 2 8.7934 2 16.0 2 0.0 0 2.4991 2 0.0 0 47.0561 2 0.0 0 0.6243 1 1.0 1 62.5413 2 5.5076 1 0.0 0 0.1448 1 1.0 1 49.0 2 0.656 1)
Average genome size in population (length): 126.921
Average program size in population (points): 127.921
Average percent parens in population: 0.008
Minimum age in population: 181.2363258416976
Maximum age in population: 185.7809775917758
Average age in population: 183.4960792647238
Median age in population: 183.5260622675072
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.253
Error (vector) diversity:			 0.298
Behavioral diversity:				 0.299
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 331181925
--- Timings ---
Current time: 1529616397672 milliseconds
Total Time:         649.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       204.1 seconds, 31.4%
Fitness Testing:    354.5 seconds, 54.6%
Report:              90.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float})
Best program: (float_min float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc in1 integer_flush float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc print_integer float_dup_items integer_div float_inc integer_min float_inc float_inc float_inc float_inc float_inc in1 integer_rot float_pop float_inc float_inc float_inc float_inc in1 in2 float_shove float_inc float_inc integer_swap float_inc float_inc float_inc float_inc float_inc in1 integer_min float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2306.2360326999956
Median total errors in population: 905.2269
Error averages by case: (70.60517339999991 8.475 80.21391540000016 5.395 75.93179100000009 3.041 115.33497599999998 3.657 60.64220090000022 8.091 104.58222669999998 13.165 77.12498410000006 5.041 101.88098290000129 9.044 82.17875009999999 2.694 68.5883691 2.709 68.66510240000001 2.71 69.21381439999995 3.562 70.13533500000001 2.664 70.63848820000001 4.675 134.0917113 3.695 84.59331970000004 4.971 86.27280889999997 4.769 77.77245259999987 3.783 130.3818288 3.661 69.75941060000001 2.715 103.46499479999983 10.02 91.83003489999996 5.247 88.85591309999965 4.389 100.1969441 2.708 92.51150429999994 9.888)
Error minima by case: (0.0 0 1.0 1 0.0 0 65.0 2 0.0 0 55.8081 10 0.4329 1 0.4565 1 30.0 2 16.0 1 16.0 1 0.0 0 10.4991 1 0.0 0 85.0 2 0.0 0 0.0808 1 1.349 1 81.0 2 17.0 2 0.0 0 1.5055 1 1.0 1 49.0 2 0.1401 1)
Average genome size in population (length): 126.36
Average program size in population (points): 127.36
Average percent parens in population: 0.008
Minimum age in population: 182.4595064633752
Maximum age in population: 187.0368817425127
Average age in population: 184.8356769085389
Median age in population: 184.8704897266798
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.26
Error (vector) diversity:			 0.309
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 334341050
--- Timings ---
Current time: 1529616403301 milliseconds
Total Time:         654.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       205.5 seconds, 31.4%
Fitness Testing:    357.7 seconds, 54.7%
Report:              91.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_min} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_shove} {:instruction float_flush} {:instruction float_frominteger})
Best program: (float_cos float_min float_cos integer_fromfloat float_max float_dup_items float_dup_times float_dup_items float_cos integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items float_inc float_inc in1 float_cos float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc integer_mod float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc integer_shove float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 float_dup_times float_pop float_inc float_inc float_inc in1 float_pop float_inc float_inc float_inc in1 in2 float_shove print_float float_shove float_flush float_frominteger)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2551.8141462999956
Median total errors in population: 901.5318
Error averages by case: (83.64511939999993 8.597 89.91990180000013 5.292 89.30632770000011 3.183 122.43747 3.695 73.69027349999989 8.169 109.54160399999999 13.179 87.62933770000012 5.038 113.77397180000176 9.178 89.6020314 2.736 75.3163414 2.753 75.8670317 2.755 81.50513200000005 3.558 77.2164415 2.704 81.95908460000011 4.588 141.1056159 3.733 97.29463600000005 5.027 97.64977959999999 4.817 89.05197999999983 3.802 137.39301429999998 3.704 77.35285010000001 2.751 113.3838467999998 10.18 101.68455849999992 5.172 101.66946639999972 4.378 107.4366863 2.759 104.73064389999992 9.903)
Error minima by case: (0.0 0 0.2568 1 0.0 0 64.0 2 0.3483 1 1.0682 10 0.0 0 3.0 1 29.0 2 4.9431 1 15.0 2 0.0 0 14.4991 1 0.0 0 45.5219 2 0.0 0 0.1816 1 0.0 0 65.0071 2 16.0 1 0.0 0 0.4945 1 0.0 0 48.0 2 0.0 0)
Average genome size in population (length): 126.589
Average program size in population (points): 127.589
Average percent parens in population: 0.008
Minimum age in population: 183.5885367338247
Maximum age in population: 188.5309343216807
Average age in population: 186.20495585832
Median age in population: 186.2394902280545
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.944
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.944
Total error diversity:				 0.26
Error (vector) diversity:			 0.314
Behavioral diversity:				 0.315
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 337505800
--- Timings ---
Current time: 1529616409047 milliseconds
Total Time:         660.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       207.1 seconds, 31.4%
Fitness Testing:    361.2 seconds, 54.7%
Report:              91.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_dup} {:instruction integer_div} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (float_min float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 integer_fromfloat float_max float_dup_items float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items float_yankdup float_inc in1 integer_flush float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc print_integer float_dup integer_div float_inc integer_min float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_rot float_pop float_inc float_inc float_inc float_inc in1 in2 float_shove float_inc float_inc integer_swap float_inc float_inc float_inc float_inc float_inc in1 integer_min float_pop float_inc float_inc in1 integer_shove integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup float_frominteger float_frominteger)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2615.1532037999946
Median total errors in population: 905.5323
Error averages by case: (82.89976439999994 8.585 91.6405759000002 5.586 89.0002833000001 3.307 127.53763409999999 3.834 73.21370169999956 8.191 115.9595451 13.199 89.52936210000004 5.28 114.00045660000143 9.204 94.86122019999998 2.889 81.10621590000001 3.007 81.24876870000001 2.946 81.72668209999999 3.791 81.1439478 2.872 83.74364510000004 4.977 145.8529528 3.934 97.05361310000005 5.061 99.2435986 5.061 89.95380099999986 4.006 142.28329739999998 3.83 82.4648686 2.928 114.02316849999987 10.107 103.08715909999997 5.429 100.4085681999997 4.515 112.6638445 2.927 105.17052899999992 9.87)
Error minima by case: (0.0 0 0.1906 1 0.0 0 65.0 2 0.4995 1 1.0682 11 0.0 0 1.4565 2 30.0 2 4.9431 2 16.0 2 0.0 0 7.4991 2 0.0 0 45.5219 2 2.0 1 1.7052 1 0.1944 1 65.0071 2 15.4624 1 0.0 0 1.4945 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 126.296
Average program size in population (points): 127.296
Average percent parens in population: 0.008
Minimum age in population: 184.9337634011592
Maximum age in population: 189.4167830009497
Average age in population: 187.503295321602
Median age in population: 187.5770520713939
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.278
Error (vector) diversity:			 0.324
Behavioral diversity:				 0.325
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 340663275
--- Timings ---
Current time: 1529616414901 milliseconds
Total Time:         666.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       208.7 seconds, 31.3%
Fitness Testing:    364.6 seconds, 54.7%
Report:              92.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 44819.802100000015
Test mean error for best: 22.40990
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 83.2950930002 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 83.2950930002 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 83.2950930002 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction 50.29509300022753} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float})
Best program: (float_cos float_max tagged_869 float_dup_times float_pop integer_flush in1 tagged_869 float_dup_times float_pop integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc integer_sub integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc integer_div float_inc in1 float_cos float_pop float_inc 50.29509300022753 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc integer_shove float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc in1 float_pop float_inc float_inc float_inc in1 in2 float_shove print_float)
Errors: [17.7522 10 15.0 2 4.0 1 65.0 3 2.339 9 56.0 13 12.0 2 44.2801 9 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.3713
Mean: 17.727427
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2557.6517602999947
Median total errors in population: 905.2269
Error averages by case: (82.7756453999999 8.597 89.06565250000018 5.421 89.48001400000015 3.199 124.28315560000001 3.76 73.34174230000015 8.173 110.6803388 13.201 86.67558939999999 5.08 113.01766120000151 9.112 91.442322 2.804 76.9855576 2.9 77.41169140000001 2.877 80.76238830000005 3.7 76.12278860000002 2.813 81.76404300000004 4.814 142.860876 3.852 95.15029079999996 5.211 96.38919700000008 4.867 88.95317429999989 3.876 139.18681680000003 3.762 79.1386214 2.833 114.02759229999981 10.179 100.58361539999994 5.278 100.60521419999976 4.428 109.28953400000002 2.828 104.16623799999998 9.927)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 56.0 11 0.0 0 5.0 1 30.0 2 8.9968 1 16.0 1 0.0 0 0.4991 1 0.0 0 85.0 1 0.0 0 0.1818 1 0.1944 1 81.0 1 17.0 1 0.0 0 0.562 1 0.0 0 49.0 1 0.0 0)
Average genome size in population (length): 125.935
Average program size in population (points): 126.935
Average percent parens in population: 0.008
Minimum age in population: 186.0085566227774
Maximum age in population: 190.8402743293512
Average age in population: 188.8168699144712
Median age in population: 188.8641012348579
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.95
Total error diversity:				 0.285
Error (vector) diversity:			 0.336
Behavioral diversity:				 0.337
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 343811650
--- Timings ---
Current time: 1529616420666 milliseconds
Total Time:         672.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       210.3 seconds, 31.3%
Fitness Testing:    368.0 seconds, 54.8%
Report:              93.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 44819.802100000015
Test mean error for best: 22.40990
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 83.2950930002 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 83.2950930002 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 83.2950930002 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction in1} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction 50.29509300022753} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float})
Best program: (float_min float_cos float_max tagged_869 float_dup_times in1 tagged_869 float_dup_times float_pop integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc integer_sub integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc integer_div float_inc in1 float_cos float_pop float_inc 50.29509300022753 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc integer_shove float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc in1 float_pop float_inc float_inc float_inc in1 in2 float_shove print_float)
Errors: [17.7522 10 15.0 2 4.0 1 65.0 3 2.339 9 56.0 13 12.0 2 44.2801 9 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.3713
Mean: 17.727427
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2573.857928799995
Median total errors in population: 904.5328
Error averages by case: (81.81933189999994 8.458 90.86516960000016 5.614 87.44170920000013 3.261 124.58687569999998 3.797 72.51195649999998 8.185 115.3657171 13.208 88.12452279999998 5.264 113.14056570000176 9.112 91.81671930000002 2.838 78.3663633 2.892 78.4530871 2.859 80.98830259999997 3.686 80.06477629999999 2.805 82.53819170000006 4.882 143.1238402 3.835 96.46942879999997 5.088 97.74686119999997 5.009 89.32539629999987 3.897 139.45761800000002 3.795 79.5396757 2.835 113.60225039999986 10.055 102.41965519999997 5.477 98.97243689999976 4.397 109.62626730000002 2.861 103.57120999999997 9.81)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 1.0682 11 0.0 0 1.0 1 30.0 1 4.9431 2 16.0 2 0.0 0 3.4991 2 0.0 0 45.5219 2 2.0 1 0.0808 1 0.0 0 65.0071 2 17.0 1 0.0 0 0.4945 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 125.243
Average program size in population (points): 126.243
Average percent parens in population: 0.008
Minimum age in population: 187.0085566227774
Maximum age in population: 192.2511099759991
Average age in population: 190.1349745167987
Median age in population: 190.2225654385905
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.281
Error (vector) diversity:			 0.33
Behavioral diversity:				 0.332
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 346942750
--- Timings ---
Current time: 1529616426355 milliseconds
Total Time:         677.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       211.9 seconds, 31.3%
Fitness Testing:    371.2 seconds, 54.8%
Report:              94.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 44819.802100000015
Test mean error for best: 22.40990
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 83.2950930002 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 83.2950930002 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 83.2950930002 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction in1} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction 50.29509300022753} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float})
Best program: (float_min float_cos float_max tagged_869 float_dup_times in1 tagged_869 float_dup_times float_pop integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc integer_sub integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc integer_div float_inc in1 float_cos float_pop float_inc 50.29509300022753 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc integer_shove float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc in1 float_pop float_inc float_inc float_inc in1 in2 float_shove print_float)
Errors: [17.7522 10 15.0 2 4.0 1 65.0 3 2.339 9 56.0 13 12.0 2 44.2801 9 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.3713
Mean: 17.727427
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2838.1806308999953
Median total errors in population: 905.5323
Error averages by case: (92.15057329999995 8.645 100.89797280000016 5.616 97.21149000000014 3.284 136.8330395 3.891 82.55844469999951 8.398 124.15981880000001 13.277 97.07703010000004 5.253 122.69664970000179 9.307 104.4844359 2.936 91.2614523 2.959 91.3458447 2.972 90.7990982000001 3.869 90.18133850000001 2.91 91.0745898000001 4.675 155.155148 3.946 105.16433610000001 5.218 105.56196930000002 4.894 99.08097199999978 4.104 151.5399666 3.889 92.38723629999998 2.975 124.31976499999983 10.14 111.54779289999995 5.45 110.03359019999961 4.637 122.0593709 2.964 112.32770529999993 10.062)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.1308 1 56.0 8 0.0 0 0.9681 1 30.0 2 8.5911 1 16.0 2 0.0 0 9.4991 1 0.0 0 85.0 2 1.0 1 1.7035 1 0.8056 1 81.0 2 17.0 2 0.0 0 0.4945 1 0.0 0 49.0 2 1.0 1)
Average genome size in population (length): 125.386
Average program size in population (points): 126.386
Average percent parens in population: 0.008
Minimum age in population: 188.0085566227774
Maximum age in population: 193.3201621142783
Average age in population: 191.4164793661135
Median age in population: 191.4936009001355
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.281
Error (vector) diversity:			 0.344
Behavioral diversity:				 0.344
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 350077400
--- Timings ---
Current time: 1529616431865 milliseconds
Total Time:         683.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       213.5 seconds, 31.2%
Fitness Testing:    374.5 seconds, 54.8%
Report:              95.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times float_dup_times integer_flush in1 integer_fromfloat float_stackdepth float_cos integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc integer_pop float_inc float_inc in1 float_cos float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc integer_mod float_inc float_inc float_inc float_dup_items integer_flush float_inc float_mod float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc in1 in2 float_shove float_inc float_inc integer_swap float_inc float_inc float_inc float_inc float_inc in1 integer_min float_pop float_inc float_inc in1 integer_shove float_pop float_inc in1 in2 float_shove print_float float_yankdup float_frominteger float_frominteger)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2504.201705599994
Median total errors in population: 900.5323
Error averages by case: (79.28097229999992 8.888 86.03334690000017 5.103 83.04152760000012 3.161 123.24971749999999 3.734 68.74516800000015 8.473 112.611401 13.213 83.39077130000007 4.854 109.73122440000168 9.49 90.3762 2.775 76.9812593 2.909 77.03877200000001 2.877 76.05751469999998 3.564 77.23404160000001 2.806 78.6261692000001 4.419 141.8920227 3.853 93.32397700000004 4.903 92.52345160000002 4.632 84.57538149999989 3.83 138.194655 3.761 78.08828570000001 2.838 113.24982409999986 10.421 97.34330319999997 4.903 98.92848149999973 4.375 108.23609100000002 2.807 102.70114649999998 10.158)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.1308 1 55.8081 11 0.0408 1 4.0 1 30.0 2 16.0 2 16.0 2 0.0 0 7.4991 1 0.0 0 85.0 2 0.0 0 0.3757 1 1.8056 1 81.0 2 17.0 2 0.0 0 0.5055 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 124.236
Average program size in population (points): 125.236
Average percent parens in population: 0.008
Minimum age in population: 190.1835565119603
Maximum age in population: 194.7212585995404
Average age in population: 192.6537573577531
Median age in population: 192.671510073273
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.257
Error (vector) diversity:			 0.313
Behavioral diversity:				 0.314
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 353183325
--- Timings ---
Current time: 1529616437453 milliseconds
Total Time:         688.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       215.1 seconds, 31.2%
Fitness Testing:    377.7 seconds, 54.8%
Report:              95.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_869} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times})
Best program: (tagged_869 float_tan integer_mod integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_dup_times)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2652.5524789999945
Median total errors in population: 901.5323
Error averages by case: (85.55685769999992 8.747 91.68452180000021 5.3 89.84713800000016 3.22 129.30479499999998 3.829 75.48431030000005 8.3 117.37564920000001 13.199 89.05202550000001 4.998 115.85336230000163 9.361 96.6780763 2.88 83.2934039 2.911 83.37195200000001 2.892 83.08470010000008 3.711 83.02826460000001 2.844 84.08768150000006 4.619 147.76488670000003 3.846 99.1130798 5.133 98.53523810000003 4.797 91.2252124999998 3.944 144.1131862 3.802 84.4504708 2.865 117.43358209999982 10.282 103.21852929999997 5.122 103.94385009999968 4.448 114.41158290000001 2.904 106.6411222999999 10.045)
Error minima by case: (0.0 0 0.0 0 0.0 0 64.0 2 0.0 0 55.0 11 0.0 0 0.5435 1 29.0 2 15.0 1 15.0 1 0.0 0 4.4991 1 0.0 0 84.0 2 0.0 0 0.0808 1 1.0 1 80.0 2 16.0 2 0.0 0 0.0176 1 0.0 0 48.0 2 0.0 0)
Average genome size in population (length): 124.643
Average program size in population (points): 125.643
Average percent parens in population: 0.008
Minimum age in population: 191.1835565119603
Maximum age in population: 196.2324467825445
Average age in population: 193.9527117493086
Median age in population: 194.0004993103461
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.261
Error (vector) diversity:			 0.311
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 356299400
--- Timings ---
Current time: 1529616442804 milliseconds
Total Time:         694.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       216.7 seconds, 31.2%
Fitness Testing:    380.8 seconds, 54.9%
Report:              96.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_pop} {:instruction float_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (float_dup_times float_pop float_flush in1 integer_fromfloat float_max float_dup_items float_cos integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_shove integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_dup_items integer_add float_inc in1 integer_flush float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc float_rot integer_inc float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_yankdup float_dup_times float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc integer_shove float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_min float_yankdup float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup float_frominteger float_frominteger)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2432.584994299994
Median total errors in population: 904.5328
Error averages by case: (75.87974709999988 8.512 84.64483510000015 5.237 81.55617420000014 3.044 120.9277464 3.668 66.42522730000033 8.16 107.42782570000001 13.139 80.69354620000006 4.9 106.21935450000159 9.082 87.98607519999999 2.715 74.56577189999999 2.75 74.62096989999999 2.738 73.46302680000001 3.679 74.21318090000001 2.672 75.16649800000003 4.536 139.5800324 3.73 91.69343030000003 5.043 89.85150609999994 4.655 81.79015139999987 3.857 135.9073573 3.675 75.6668324 2.729 109.82268179999986 10.207 95.14210559999998 5.057 94.2782271999997 4.511 105.88395189999999 2.731 98.13373869999991 10.018)
Error minima by case: (0.0 0 0.9306 1 0.0 0 64.0 2 0.0 0 26.1364 10 0.0 0 0.4565 1 29.0 2 15.0 2 15.0 2 0.0 0 9.4991 2 0.0 0 84.0 2 1.0 1 0.4978 1 0.0 0 80.0 2 16.0 2 0.0 0 0.5055 1 2.0 1 48.0 2 1.828 1)
Average genome size in population (length): 124.436
Average program size in population (points): 125.436
Average percent parens in population: 0.008
Minimum age in population: 192.1835565119603
Maximum age in population: 197.3662820475036
Average age in population: 195.1750661058412
Median age in population: 195.177588251634
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.273
Error (vector) diversity:			 0.315
Behavioral diversity:				 0.315
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 359410325
--- Timings ---
Current time: 1529616448320 milliseconds
Total Time:         699.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       218.3 seconds, 31.2%
Fitness Testing:    384.1 seconds, 54.9%
Report:              97.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_stackdepth})
Best program: (float_cos float_max tagged_869 float_dup_times float_pop integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc integer_pop float_inc float_inc float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc print_integer float_dup_items integer_div float_inc integer_min float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_rot float_pop float_inc float_inc float_inc float_inc in1 in2 float_shove float_inc float_inc integer_swap float_inc float_inc float_inc float_inc float_inc in1 in2 float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_stackdepth)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2758.9330277999943
Median total errors in population: 907.5328
Error averages by case: (90.0693375999999 8.515 97.90339490000018 5.529 95.00823540000013 3.273 132.6056917 3.825 81.08470329999976 8.164 117.92059720000002 13.207 95.4335223000001 5.241 120.77110970000162 9.091 100.0798581 2.865 86.74009680000002 2.927 86.81697930000001 2.916 88.96813010000008 3.796 86.805411 2.846 89.19466340000011 4.887 151.00341199999997 3.881 101.69428170000006 5.139 104.52695509999997 5.047 96.90243829999977 4.051 147.36535279999998 3.823 87.8931576 2.907 120.99007009999983 10.086 109.45752499999998 5.378 106.75299449999974 4.435 117.75607000000001 2.904 110.58503989999991 9.871)
Error minima by case: (0.0 0 0.0 0 0.0 0 39.9082 2 0.0 0 56.0 11 0.0 0 0.4565 1 7.6166 2 16.0 1 16.0 2 0.0 0 3.0025 1 0.0 0 85.0 2 1.0 1 0.0808 1 0.1944 1 81.0 2 17.0 2 0.0 0 0.049 1 0.0 0 20.3136 2 1.0 1)
Average genome size in population (length): 123.861
Average program size in population (points): 124.861
Average percent parens in population: 0.008
Minimum age in population: 194.1521325477341
Maximum age in population: 198.5487499117692
Average age in population: 196.4140795237704
Median age in population: 196.4543181232516
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.292
Error (vector) diversity:			 0.342
Behavioral diversity:				 0.344
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 362506850
--- Timings ---
Current time: 1529616454055 milliseconds
Total Time:         705.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       219.8 seconds, 31.2%
Fitness Testing:    387.3 seconds, 54.9%
Report:              97.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 44858.1132
Test mean error for best: 22.42906
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.4565243525 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.4565243525 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.4565243525 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_dup_times} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_cos} {:instruction float_pop} {:instruction float_inc} {:instruction 49.45652435254658} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float})
Best program: (float_mod float_cos float_max tagged_869 float_dup_times float_pop integer_dup_times in1 integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 integer_fromfloat float_stackdepth float_cos integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_items float_shove float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc integer_pop float_inc float_inc in1 float_cos float_pop float_inc 49.45652435254658 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc integer_mod float_inc float_inc float_inc float_yank integer_div float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_inc float_inc float_inc float_inc integer_shove in2 float_shove float_inc float_inc integer_swap integer_swap float_inc float_inc float_inc in1 integer_min float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float)
Errors: [16.9136 10 15.0 2 4.0 1 65.0 3 1.5005 9 56.0 13 12.0 2 45.1187 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 886.5328
Mean: 17.730656
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2531.2629544999945
Median total errors in population: 905.2269
Error averages by case: (80.40659409999995 8.56 88.78272920000015 5.382 87.64374950000013 3.185 123.70571949999997 3.714 70.62639679999984 8.152 109.3143687 13.177 86.64466570000008 5.109 110.6717850000016 9.1 90.8998661 2.761 77.4909503 2.822 77.53888569999998 2.797 78.12337579999999 3.682 76.82236630000001 2.745 79.38949880000004 4.737 142.2627915 3.779 95.88620479999996 5.008 94.49077550000001 4.826 86.20675099999985 3.946 138.59312079999998 3.69 78.608865 2.791 113.96612899999981 10.176 100.94872019999997 5.218 98.7233463999998 4.456 108.7281225 2.784 102.26117629999999 9.929)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0042 1 1.0682 10 0.0 0 1.0 1 30.0 2 4.9431 2 7.8363 2 0.0 0 10.4991 2 0.0 0 45.5219 2 0.8329 1 0.3776 1 0.0 0 65.0071 1 17.0 1 0.0 0 0.4945 1 0.7603 1 49.0 1 1.0 1)
Average genome size in population (length): 123.13
Average program size in population (points): 124.13
Average percent parens in population: 0.008
Minimum age in population: 195.6712627885538
Maximum age in population: 199.6998770610819
Average age in population: 197.6725036706712
Median age in population: 197.7227135403693
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.254
Error (vector) diversity:			 0.309
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 365585125
--- Timings ---
Current time: 1529616459822 milliseconds
Total Time:         711.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       221.4 seconds, 31.1%
Fitness Testing:    390.7 seconds, 54.9%
Report:              98.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2697.8368296999943
Median total errors in population: 905.2269
Error averages by case: (86.82274349999992 8.489 96.1168464000002 5.64 94.32289630000011 3.323 129.4761301 3.84 77.51304669999969 8.14 118.60270480000001 13.195 93.0027038000001 5.315 117.5814999000017 9.088 96.8448892 2.888 83.44500119999998 2.933 83.54242559999999 2.908 85.43809360000012 3.748 84.07925420000001 2.849 87.53347440000009 4.95 147.9372372 3.89 101.76873950000008 5.163 101.94198959999994 5.034 93.66459919999981 3.983 144.2841794 3.824 84.5700289 2.888 119.57200449999982 10.027 107.26156929999996 5.484 104.29186489999967 4.456 114.57805529999999 2.91 108.8178521999999 9.862)
Error minima by case: (0.0 0 0.9547 1 0.0 0 65.0 2 0.0106 1 55.4993 7 0.0 0 1.0 1 30.0 2 16.0 1 16.0 2 0.0 0 3.4991 1 0.0 0 85.0 2 0.0 0 0.0808 1 0.0 0 81.0 2 17.0 1 0.0 0 0.049 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 123.222
Average program size in population (points): 124.222
Average percent parens in population: 0.008
Minimum age in population: 196.8424034870655
Maximum age in population: 200.7320641540146
Average age in population: 198.9606731962116
Median age in population: 198.9885748757181
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.259
Error (vector) diversity:			 0.317
Behavioral diversity:				 0.318
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 368665675
--- Timings ---
Current time: 1529616465277 milliseconds
Total Time:         716.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       223.0 seconds, 31.1%
Fitness Testing:    393.9 seconds, 55.0%
Report:              99.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2941.2780136999945
Median total errors in population: 907.10815
Error averages by case: (96.7355694999999 8.639 104.63313260000018 5.608 102.54521000000014 3.445 139.64614779999997 3.959 87.01727029999947 8.21 129.56487090000002 13.248 101.5930859000001 5.32 126.846476600002 9.271 107.40257399999999 3.023 94.183196 3.044 94.2493405 3.045 95.14527880000018 3.87 94.7689943 2.97 96.71726310000015 5.057 157.8757609 4.0 110.54760200000004 5.309 110.61504019999998 5.137 103.31755209999979 4.118 154.2370489 3.964 95.2863495 3.011 128.34592819999983 10.197 115.69786179999996 5.468 114.00651869999966 4.646 124.92058750000001 3.039 117.8373535999999 9.944)
Error minima by case: (0.0 0 0.0 0 0.0 0 64.0 2 0.0 0 55.0 11 1.0 1 1.0 1 29.0 2 15.0 2 15.0 2 0.0 0 7.4991 2 0.0 0 84.0 2 0.0 0 0.0808 1 0.8056 1 80.0 2 16.0 2 0.0 0 0.562 1 0.0 0 48.0 2 0.0 0)
Average genome size in population (length): 123.138
Average program size in population (points): 124.138
Average percent parens in population: 0.008
Minimum age in population: 197.8424034870655
Maximum age in population: 202.0628881963506
Average age in population: 200.2225896868373
Median age in population: 200.226625415788
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.261
Error (vector) diversity:			 0.317
Behavioral diversity:				 0.318
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 371744125
--- Timings ---
Current time: 1529616470708 milliseconds
Total Time:         721.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       224.5 seconds, 31.1%
Fitness Testing:    397.0 seconds, 55.0%
Report:             100.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2662.1659326999948
Median total errors in population: 905.2269
Error averages by case: (86.63320579999993 8.605 92.58643660000016 5.375 90.42959700000011 3.29 128.6592028 3.807 77.4445695999999 8.33 117.6190524 13.201 89.72994720000007 5.022 116.72817440000168 9.275 95.9956181 2.867 82.68739939999999 2.954 82.7428603 2.903 83.98592580000009 3.865 83.8478132 2.833 84.80684910000011 4.702 147.15045770000003 3.881 100.21627780000006 5.282 98.84672520000001 4.753 92.04441019999986 4.025 143.5103821 3.791 83.78158719999999 2.871 118.40611799999981 10.297 103.96337129999995 5.216 104.5947000999997 4.574 113.7415031 2.879 107.33674829999993 10.079)
Error minima by case: (0.0 0 0.0 0 0.0 0 64.0 2 0.0 0 55.0 10 0.0 0 1.0 1 29.0 1 15.0 2 15.0 2 0.0 0 1.4991 2 0.0 0 84.0 2 0.0 0 0.0808 1 0.0 0 80.0 2 16.0 2 0.0 0 0.049 1 0.0 0 48.0 2 0.0 0)
Average genome size in population (length): 122.738
Average program size in population (points): 123.738
Average percent parens in population: 0.008
Minimum age in population: 199.3288893298565
Maximum age in population: 203.6832636044241
Average age in population: 201.5321253671579
Median age in population: 201.5636861499918
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.285
Error (vector) diversity:			 0.331
Behavioral diversity:				 0.332
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 374812600
--- Timings ---
Current time: 1529616476662 milliseconds
Total Time:         727.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       226.1 seconds, 31.1%
Fitness Testing:    400.4 seconds, 55.0%
Report:             101.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_stackdepth float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2518.2913163999947
Median total errors in population: 905.2163
Error averages by case: (79.06594169999993 8.617 88.89299160000016 5.388 84.79532810000009 3.255 124.0987193 3.757 69.60774399999993 8.258 112.9374499 13.089 84.9282095000001 5.094 110.24927380000157 9.253 91.26018289999999 2.828 77.0752073 2.873 77.7886877 2.848 77.6635231 3.695 78.2144847 2.792 77.87069830000007 4.782 142.7201336 3.853 92.81575700000003 5.012 93.85098099999996 4.901 85.90704939999985 3.987 139.02729970000001 3.758 78.9848485 2.856 111.73247789999982 10.161 99.09651339999996 5.217 96.69328989999977 4.334 109.1011349 2.838 100.60438919999989 9.863)
Error minima by case: (0.0 0 0.0486 1 0.0 0 37.9082 2 0.4995 1 55.8103 8 0.0 0 0.4565 1 5.6166 2 4.4642 2 16.0 2 0.0 0 4.4991 2 0.0 0 85.0 2 1.0 1 0.9192 1 1.651 1 79.9929 2 17.0 2 0.0 0 0.1721 1 0.0 0 18.3136 2 0.0 0)
Average genome size in population (length): 121.686
Average program size in population (points): 122.686
Average percent parens in population: 0.008
Minimum age in population: 200.4436628389773
Maximum age in population: 204.7877841533553
Average age in population: 202.8748798324942
Median age in population: 202.9395534070618
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.275
Error (vector) diversity:			 0.325
Behavioral diversity:				 0.325
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 377854750
--- Timings ---
Current time: 1529616482187 milliseconds
Total Time:         733.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       227.6 seconds, 31.0%
Fitness Testing:    403.8 seconds, 55.0%
Report:             102.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2372.317438099995
Median total errors in population: 905.2163
Error averages by case: (76.40668449999994 8.558 82.33296900000018 5.449 81.09185650000013 3.288 116.27756659999999 3.657 67.18245990000013 8.24 104.3105853 13.139 78.80966590000004 5.135 107.35218760000176 9.252 83.22671120000001 2.704 68.7116463 2.723 69.1097986 2.727 74.07473739999998 3.794 70.5404934 2.671 73.00263600000004 4.705 135.07352890000004 3.718 89.07865240000005 5.156 87.83676749999994 4.848 81.64276609999987 4.015 131.3289273 3.694 70.84467970000001 2.729 107.51844009999978 10.114 93.89297089999997 5.303 93.37497529999968 4.463 101.18797210000001 2.713 95.35375959999988 9.959)
Error minima by case: (0.0 0 0.0 0 0.0 0 16.0918 2 0.0 0 55.0 11 0.0 0 1.4565 1 29.0 2 8.7934 2 1.8363 2 0.0 0 4.4991 2 0.0 0 49.4781 2 1.0 1 1.0808 1 0.0 0 25.9929 2 16.0 2 0.0 0 0.7932 1 0.2376 1 35.6864 1 0.7156 1)
Average genome size in population (length): 121.253
Average program size in population (points): 122.253
Average percent parens in population: 0.008
Minimum age in population: 201.6446945829092
Maximum age in population: 206.2156668942534
Average age in population: 204.2148460833685
Median age in population: 204.2492024937656
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.304
Error (vector) diversity:			 0.358
Behavioral diversity:				 0.358
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 380886075
--- Timings ---
Current time: 1529616487895 milliseconds
Total Time:         739.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       229.2 seconds, 31.0%
Fitness Testing:    407.1 seconds, 55.1%
Report:             102.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_stackdepth float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2992.7396029999945
Median total errors in population: 905.2269
Error averages by case: (99.9224776 8.665 106.04817110000015 5.55 106.11116200000009 3.386 142.3714152 3.957 89.9345968999995 8.347 127.56280150000002 13.227 103.0399744000001 5.235 129.68633770000193 9.413 110.23597480000001 3.023 94.8008915 3.078 96.207878 3.062 97.39159650000018 3.88 96.006392 2.989 97.9102713000001 4.947 159.36553380000004 4.016 114.3730978000001 5.359 112.49984489999997 4.997 105.11051729999978 4.073 156.54344819999997 3.939 97.44409669999999 3.034 130.22325199999986 10.284 117.34161559999994 5.354 117.54792579999966 4.594 127.6906335 3.044 119.91269689999987 10.004)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.3412 1 54.9318 6 0.874 1 1.0 1 30.0 2 7.7819 1 16.0 2 0.0 0 11.4991 1 0.0 0 85.0 2 2.0 1 0.5059 1 0.0 0 81.0 2 17.0 2 0.0 0 0.4945 1 0.9484 1 49.0 2 0.9722 1)
Average genome size in population (length): 120.978
Average program size in population (points): 121.978
Average percent parens in population: 0.008
Minimum age in population: 203.336984720357
Maximum age in population: 207.4177777096024
Average age in population: 205.5459690560618
Median age in population: 205.5533113839909
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.287
Error (vector) diversity:			 0.339
Behavioral diversity:				 0.339
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 383910550
--- Timings ---
Current time: 1529616493188 milliseconds
Total Time:         744.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       230.8 seconds, 31.0%
Fitness Testing:    410.1 seconds, 55.1%
Report:             103.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_cos} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_min float_cos integer_mod float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc integer_dup_items float_inc float_inc float_inc float_dup_items float_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2902.183177199995
Median total errors in population: 904.5883
Error averages by case: (95.6303496 8.439 103.05713220000014 5.569 102.7157282000001 3.328 138.34814540000002 3.948 86.6264515999998 8.126 126.41144680000001 13.214 99.58403140000011 5.178 125.50813970000144 9.208 106.0377077 3.013 92.0901668 3.077 92.88125939999999 3.07 93.5443711000001 3.696 91.83857300000003 2.995 94.83119760000014 4.942 156.62610370000002 4.048 110.12236950000008 5.029 109.45468579999996 4.989 101.63716179999982 3.932 152.4132181 3.942 93.5827761 3.057 126.30016319999984 10.261 114.36765669999997 5.359 112.88100899999974 4.297 123.5930692 3.035 116.42726359999989 9.921)
Error minima by case: (0.0 0 0.0 0 0.0 0 28.9082 2 0.3869 1 56.0 10 0.0 0 2.4565 1 3.3834 2 16.0 1 16.0 2 0.0 0 5.4991 1 0.0 0 85.0 2 0.0 0 0.4978 1 0.0 1 70.9929 2 11.0418 2 0.0 0 1.9383 1 0.7156 1 9.3136 2 3.0 1)
Average genome size in population (length): 119.358
Average program size in population (points): 120.358
Average percent parens in population: 0.008
Minimum age in population: 204.3939919907496
Maximum age in population: 208.6707842390827
Average age in population: 206.9007311298902
Median age in population: 206.9551018152448
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.292
Error (vector) diversity:			 0.346
Behavioral diversity:				 0.347
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 386894550
--- Timings ---
Current time: 1529616498911 milliseconds
Total Time:         750.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       232.4 seconds, 31.0%
Fitness Testing:    413.3 seconds, 55.1%
Report:             104.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup float_frominteger float_frominteger)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2795.181626399996
Median total errors in population: 903.0
Error averages by case: (93.4109673000001 8.337 97.71557740000014 5.403 96.26473710000006 3.253 133.2353295 3.874 84.07911159999959 8.171 121.55211 13.221 94.74538100000008 5.077 123.60081180000142 9.259 100.79961910000002 2.922 87.51113500000001 2.943 87.5666332 2.971 91.43457730000007 3.807 88.39853550000001 2.908 90.09682660000004 4.75 151.64799169999998 3.952 105.96996260000007 5.129 104.69602179999998 4.923 99.35341629999985 4.09 148.0037983 3.88 88.6206996 2.95 121.9295556999999 10.286 109.25019879999998 5.229 110.88674949999975 4.452 118.42528560000001 2.95 111.26959409999992 9.98)
Error minima by case: (0.0 0 0.0 0 0.0 0 4.9082 2 0.0 0 13.8636 10 0.0 0 1.4248 1 27.3834 1 16.0 2 16.0 2 0.0 0 6.4991 2 0.0 0 70.4781 3 0.0 1 0.8889 1 1.0 1 46.9929 2 12.9582 2 0.0 0 1.9884 1 0.6889 1 14.6864 2 1.0 1)
Average genome size in population (length): 118.801
Average program size in population (points): 119.801
Average percent parens in population: 0.008
Minimum age in population: 205.3939919907496
Maximum age in population: 210.5046750937199
Average age in population: 208.2131974711894
Median age in population: 208.219145460105
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.301
Error (vector) diversity:			 0.367
Behavioral diversity:				 0.368
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 389864575
--- Timings ---
Current time: 1529616504227 milliseconds
Total Time:         755.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       233.8 seconds, 31.0%
Fitness Testing:    416.3 seconds, 55.1%
Report:             105.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_min float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc integer_dup_items float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2515.966467399996
Median total errors in population: 901.0
Error averages by case: (81.88757290000021 8.334 86.14517980000007 4.884 82.59948640000006 3.079 123.2039408 3.767 72.3817703999997 8.209 113.3384579 13.163 82.76961860000006 4.639 110.9114603000015 9.411 90.3765473 2.828 76.86564680000001 2.886 76.9043129 2.892 77.70781600000011 3.7 77.35527139999999 2.828 77.56780760000007 4.348 141.7975213 3.874 94.36487580000002 5.21 92.1723536 4.461 85.87621449999989 3.903 138.1411259 3.8 78.02643450000001 2.853 114.65630449999992 10.659 98.00897299999998 4.676 100.62122909999972 4.351 108.2678377 2.849 102.19870839999996 10.216)
Error minima by case: (0.0 0 1.0 1 0.0 0 65.0 2 0.3869 1 2.8547 10 0.973 1 4.0 1 30.0 2 16.0 2 11.9133 2 0.0 0 6.4991 2 0.0 0 78.4448 2 2.0 1 0.2657 1 0.0 0 81.0 2 17.0 1 1.0 1 0.3901 1 0.512 1 49.0 2 1.0 1)
Average genome size in population (length): 118.288
Average program size in population (points): 119.288
Average percent parens in population: 0.008
Minimum age in population: 206.3939919907496
Maximum age in population: 211.5962432761673
Average age in population: 209.6044275695875
Median age in population: 209.6591630126126
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.305
Error (vector) diversity:			 0.371
Behavioral diversity:				 0.371
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 392821800
--- Timings ---
Current time: 1529616509913 milliseconds
Total Time:         761.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       235.6 seconds, 31.0%
Fitness Testing:    419.4 seconds, 55.1%
Report:             106.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_869} {:instruction float_min} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction tagged_792} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (tagged_869 float_min integer_mod integer_dup_items float_cos float_max tagged_869 float_dup_times float_max tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 tagged_792 float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2790.3777579999955
Median total errors in population: 901.5883
Error averages by case: (92.43940050000032 8.058 99.04834800000009 5.338 94.8780699000001 3.164 132.9699142 3.895 82.5574392999993 7.974 122.7780538 13.267 96.00460230000006 4.913 122.22702940000144 9.352 100.48374549999998 2.929 86.0461463 2.979 87.3332402 2.966 89.79389230000028 3.808 88.95981700000002 2.914 89.5096323000001 4.633 151.2406897 3.945 103.94388000000014 5.273 105.9534763999999 4.751 97.78389319999984 3.944 146.35861749999998 3.895 87.59383039999999 2.957 124.73714389999992 10.367 110.85033579999998 5.084 110.93934489999967 4.369 118.128371 2.968 114.06884419999984 10.007)
Error minima by case: (0.0 0 0.0 0 0.0 0 38.9082 2 0.0 0 53.9363 10 0.0 0 2.0 1 6.6166 2 16.0 1 16.0 1 0.0 0 6.4991 1 0.0 0 85.0 2 1.0 1 1.0808 1 0.0 0 80.9929 2 17.0 1 0.0 0 0.2431 1 0.0 0 19.3136 2 0.0 0)
Average genome size in population (length): 117.576
Average program size in population (points): 118.576
Average percent parens in population: 0.008
Minimum age in population: 208.7284868292167
Maximum age in population: 213.0359642340622
Average age in population: 210.9522851126462
Median age in population: 210.9956823687489
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.296
Error (vector) diversity:			 0.365
Behavioral diversity:				 0.365
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 395761200
--- Timings ---
Current time: 1529616515437 milliseconds
Total Time:         766.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       237.2 seconds, 30.9%
Fitness Testing:    422.6 seconds, 55.1%
Report:             106.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 1941.8073556999973
Median total errors in population: 896.5605499999999
Error averages by case: (58.072989700000335 7.657 62.401730100000044 4.596 57.934918100000054 2.478 101.84099760000001 3.498 47.09654859999962 7.738 92.9084404 13.114 60.18476839999999 4.216 87.65825670000027 9.312 68.1638746 2.53 54.446385199999995 2.633 54.504146999999996 2.638 53.36881250000007 3.175 55.376369300000015 2.591 55.925178999999986 3.964 120.94408490000002 3.644 69.83798159999996 4.716 70.89418790000002 4.026 62.06810980000002 3.35 117.15427820000002 3.53 55.5760328 2.606 90.91091059999995 10.458 75.00523210000001 4.326 78.56680690000003 3.771 86.46076029999999 2.549 81.25055339999992 10.139)
Error minima by case: (0.0 0 1.0 1 0.0 0 65.0 2 0.3869 1 55.4135 11 0.4259 1 0.3429 1 30.0 2 16.0 2 16.0 2 0.0 0 6.3855 1 0.0 0 85.0 3 0.0 0 0.9192 1 1.0 1 81.0 2 17.0 2 0.0 0 0.8552 1 1.7169 1 49.0 2 2.0 1)
Average genome size in population (length): 116.926
Average program size in population (points): 117.926
Average percent parens in population: 0.009
Minimum age in population: 209.8353917636478
Maximum age in population: 214.3314153063586
Average age in population: 212.221042456551
Median age in population: 212.2697382494274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.279
Error (vector) diversity:			 0.337
Behavioral diversity:				 0.337
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 398684375
--- Timings ---
Current time: 1529616520745 milliseconds
Total Time:         772.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       238.8 seconds, 30.9%
Fitness Testing:    425.6 seconds, 55.1%
Report:             107.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_869} {:instruction float_min} {:instruction float_cos} {:instruction float_max} {:instruction tagged_953} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_flush} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (tagged_869 float_min float_cos float_max tagged_953 float_dup_times float_pop integer_flush integer_mod integer_fromfloat float_max float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup float_frominteger float_frominteger)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2320.621242999996
Median total errors in population: 896.5883
Error averages by case: (73.05032990000052 7.554 78.081854 4.888 73.38034210000004 2.947 116.83007529999999 3.683 63.007638799999384 7.714 106.9866554 13.158 74.9278927 4.472 103.12883010000083 9.442 83.7107629 2.744 69.16090120000003 2.824 69.5268327 2.818 68.74235910000006 3.5 71.1371206 2.763 70.5237236 4.317 135.0890366 3.806 85.28357140000007 4.819 85.06027819999993 4.425 77.20292920000001 3.759 131.68288370000002 3.734 71.1916991 2.809 106.28538870000006 10.576 90.33993460000003 4.59 91.75158609999983 4.001 101.7099486 2.76 94.54266839999994 10.183)
Error minima by case: (0.0 0 0.5866 1 0.0 0 64.0 2 0.444 1 55.0 10 0.0 0 7.0 1 29.0 2 15.0 1 15.0 1 0.0 0 5.253 2 0.0 0 84.0 2 0.0 0 0.1818 1 0.139 1 80.0 2 16.0 2 1.0 1 0.7599 1 0.2352 1 48.0 2 3.0 1)
Average genome size in population (length): 116.529
Average program size in population (points): 117.529
Average percent parens in population: 0.009
Minimum age in population: 210.9318144617785
Maximum age in population: 215.4561200659937
Average age in population: 213.5141872335404
Median age in population: 213.559261624401
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.256
Error (vector) diversity:			 0.301
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 401597625
--- Timings ---
Current time: 1529616526046 milliseconds
Total Time:         777.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       240.4 seconds, 30.9%
Fitness Testing:    428.5 seconds, 55.1%
Report:             108.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_tan} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc integer_mod integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 float_tan float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dup_times float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2186.946227099998
Median total errors in population: 895.5883
Error averages by case: (68.17120110000047 7.435 73.65889699999998 4.856 68.53278230000004 2.863 110.91988389999999 3.607 57.77303309999936 7.661 101.19105799999998 13.175 70.82467579999998 4.471 98.11235600000039 9.348 77.5907883 2.648 63.2570482 2.716 63.8687507 2.719 63.993543500000094 3.519 65.17319770000002 2.661 64.37967370000003 4.244 129.303975 3.693 79.30754890000006 4.82 80.23706599999994 4.336 72.16133840000005 3.707 125.6061641 3.604 64.3289068 2.683 102.58663280000007 10.603 85.63374440000005 4.493 87.53155359999997 3.985 95.69766899999999 2.663 90.39673879999991 10.198)
Error minima by case: (0.0 0 0.0 0 0.0 0 64.0 2 0.075 1 55.0 10 0.0 0 0.0 1 29.0 2 15.0 2 15.0 2 0.0 0 7.5546 2 0.0 0 84.0 2 1.0 1 0.3725 1 1.0 1 80.0 2 16.0 1 0.0 0 0.4574 1 0.0202 1 48.0 2 1.0 1)
Average genome size in population (length): 116.508
Average program size in population (points): 117.508
Average percent parens in population: 0.009
Minimum age in population: 212.7389914052383
Maximum age in population: 216.8380376139696
Average age in population: 214.7703707278855
Median age in population: 214.807992051462
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.255
Error (vector) diversity:			 0.299
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 404510350
--- Timings ---
Current time: 1529616531618 milliseconds
Total Time:         782.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       242.0 seconds, 30.9%
Fitness Testing:    431.7 seconds, 55.2%
Report:             109.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_min} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_tan} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos integer_min float_rot float_dup_times float_max tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc integer_mod integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 float_tan float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dup_times float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2075.7994969999977
Median total errors in population: 896.5883
Error averages by case: (62.76239340000047 7.29 68.58662009999999 5.013 64.59672760000002 2.826 107.1714213 3.535 52.38382459999961 7.489 96.8439045 13.174 65.40604269999999 4.515 93.38267840000016 9.215 73.7071231 2.569 60.0714322 2.663 60.129769 2.671 59.27121610000018 3.554 60.59072390000002 2.628 60.9802536 4.306 126.1567737 3.649 75.8644796 4.819 75.64908399999995 4.412 67.93161670000009 3.603 122.3900304 3.574 61.19442390000001 2.651 95.83209040000001 10.398 80.86991350000002 4.69 81.82983990000001 3.886 91.89001540000001 2.588 84.49709899999993 10.092)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 43.8636 11 0.0 0 1.0 1 30.0 1 16.0 1 16.0 2 0.0 0 7.5546 1 0.0 0 85.0 2 1.0 1 1.1332 1 1.0 1 81.0 1 17.0 2 0.0 0 1.561 1 0.0128 1 49.0 1 0.9363 1)
Average genome size in population (length): 116.357
Average program size in population (points): 117.357
Average percent parens in population: 0.009
Minimum age in population: 213.7389914052383
Maximum age in population: 218.1491900822957
Average age in population: 216.0818468966693
Median age in population: 216.1163542355245
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.24
Error (vector) diversity:			 0.287
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 407419275
--- Timings ---
Current time: 1529616536779 milliseconds
Total Time:         788.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       243.5 seconds, 30.9%
Fitness Testing:    434.6 seconds, 55.1%
Report:             109.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2457.8639979999975
Median total errors in population: 894.5883
Error averages by case: (79.18715570000076 7.411 83.53375620000003 4.855 78.94813150000004 2.856 121.9759981 3.745 68.72507599999905 7.597 112.3395527 13.172 80.28133659999993 4.459 108.23854120000075 9.397 89.0666001 2.792 74.9024216 2.82 75.4326278 2.841 74.7363648000002 3.504 76.96314130000002 2.785 76.54463609999998 4.251 139.6477858 3.822 90.06740940000007 4.757 90.80199209999994 4.345 83.1127121 3.755 136.211313 3.751 75.80321769999999 2.842 111.22204660000014 10.637 95.79957020000003 4.525 98.64303519999989 3.891 106.95178839999998 2.813 100.93278779999987 10.172)
Error minima by case: (0.1401 1 0.3093 1 0.0 0 64.0 2 0.444 1 54.9874 10 0.0 0 7.0 1 29.0 1 15.0 2 15.0 2 0.0 0 5.4454 2 0.0 0 84.0 3 1.0 1 0.9915 1 2.139 1 80.0 2 16.0 2 1.0 1 0.561 1 0.0348 1 48.0 2 0.1401 1)
Average genome size in population (length): 116.266
Average program size in population (points): 117.266
Average percent parens in population: 0.009
Minimum age in population: 214.7389914052383
Maximum age in population: 219.4712240367062
Average age in population: 217.3958007955484
Median age in population: 217.4453935341445
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.228
Error (vector) diversity:			 0.278
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 410325925
--- Timings ---
Current time: 1529616542285 milliseconds
Total Time:         793.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       245.0 seconds, 30.9%
Fitness Testing:    438.0 seconds, 55.2%
Report:             110.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_953} {:instruction float_dup_times} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_953 float_dup_times in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_shove float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup float_frominteger float_frominteger)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2524.536076299999
Median total errors in population: 896.5883
Error averages by case: (82.12285240000062 7.399 86.02790850000005 5.182 83.75273640000002 3.072 123.69048049999999 3.78 72.02256979999925 7.604 114.11147969999999 13.258 83.17203239999994 4.665 111.73744790000035 9.34 90.8200318 2.82 77.5075195 2.967 77.5459321 2.978 78.39155640000023 3.633 77.08479200000004 2.934 79.02074429999998 4.528 142.3791007 3.974 93.91748600000007 4.946 93.42406769999995 4.534 86.94385609999996 3.816 138.66209659999998 3.791 78.558522 2.942 112.78682620000008 10.518 98.08024410000009 4.857 100.91133559999989 4.035 108.67363220000001 2.853 102.6018253999999 10.163)
Error minima by case: (0.0 0 0.0 0 0.0 0 37.9082 2 0.3079 1 54.7632 9 0.0 0 1.512 1 5.6166 2 16.0 1 16.0 2 0.0 0 6.5546 1 0.0 0 85.0 2 0.0 0 0.4941 1 0.139 1 79.9929 2 17.0 2 0.0 0 0.2986 1 0.0 0 18.3136 2 0.0 0)
Average genome size in population (length): 116.362
Average program size in population (points): 117.362
Average percent parens in population: 0.009
Minimum age in population: 215.7389914052383
Maximum age in population: 220.6393965072124
Average age in population: 218.6870348842053
Median age in population: 218.7038042664716
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.256
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 413235025
--- Timings ---
Current time: 1529616547456 milliseconds
Total Time:         798.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       246.5 seconds, 30.9%
Fitness Testing:    441.0 seconds, 55.2%
Report:             111.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction float_min} {:instruction float_cos} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 integer_add float_min float_cos integer_mod float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc integer_dup_items float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2246.059087899998
Median total errors in population: 900.0
Error averages by case: (68.75048030000079 7.278 75.5727074 5.23 72.18800820000006 3.129 114.0622849 3.658 58.9859501999992 7.586 103.2667996 13.182 72.59227639999993 4.681 99.25959560000048 9.254 80.83326120000001 2.703 67.12215699999999 2.778 67.22607939999999 2.79 65.82217590000026 3.731 66.45594230000002 2.736 66.90846480000002 4.489 132.78167460000003 3.767 83.0305818000001 4.985 82.08201259999996 4.584 74.17103690000003 3.866 129.117004 3.669 68.3560437 2.75 103.54281660000014 10.415 87.1196896000001 4.879 87.48708489999994 4.112 98.8958018 2.721 91.29115819999986 10.165)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.1187 1 56.0 10 0.0 0 0.0 0 30.0 2 8.5911 2 16.0 2 0.0 0 8.5546 2 0.0 0 85.0 2 0.0 0 0.8637 1 1.0 1 81.0 2 17.0 2 0.0 0 0.439 1 0.488 1 49.0 2 1.0 1)
Average genome size in population (length): 116.462
Average program size in population (points): 117.462
Average percent parens in population: 0.009
Minimum age in population: 217.4766964630317
Maximum age in population: 222.039726200003
Average age in population: 219.9885197827901
Median age in population: 220.0239044230687
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.257
Error (vector) diversity:			 0.31
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 416146575
--- Timings ---
Current time: 1529616552797 milliseconds
Total Time:         804.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       248.2 seconds, 30.9%
Fitness Testing:    444.0 seconds, 55.2%
Report:             111.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2499.642930199997
Median total errors in population: 897.4763
Error averages by case: (78.5416559000004 7.453 85.69566100000006 5.035 80.61105240000002 3.06 124.29426149999999 3.842 67.96223989999942 7.69 114.93586439999999 13.226 82.82920099999993 4.58 107.97483870000035 9.47 91.43907779999999 2.911 77.4736502 2.971 77.6660847 2.991 74.26696500000018 3.563 78.10176740000001 2.923 77.15088929999997 4.312 142.5985531 3.965 92.27183360000006 5.028 92.17945569999993 4.456 82.74057029999999 3.723 139.0408815 3.875 78.9711084 2.962 114.3591850000001 10.637 97.44791310000006 4.712 98.57064609999992 3.943 109.3240732 2.931 102.66350099999991 10.273)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.2789 1 1.0682 10 0.0 0 3.0 1 30.0 2 4.9431 2 16.0 2 0.0 0 3.5546 2 0.0 0 45.5219 2 0.0 0 0.9809 1 0.0 0 65.0071 2 17.0 2 0.0 0 0.439 1 0.5376 1 49.0 2 2.0 1)
Average genome size in population (length): 116.645
Average program size in population (points): 117.645
Average percent parens in population: 0.009
Minimum age in population: 219.1822284347438
Maximum age in population: 223.1056929025601
Average age in population: 221.2742604632914
Median age in population: 221.3272072361456
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.25
Error (vector) diversity:			 0.306
Behavioral diversity:				 0.307
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 419062700
--- Timings ---
Current time: 1529616558182 milliseconds
Total Time:         809.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       249.7 seconds, 30.8%
Fitness Testing:    447.1 seconds, 55.2%
Report:             112.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 integer_add in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup float_frominteger)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 1976.3210145999979
Median total errors in population: 896.5883
Error averages by case: (60.312693800000396 7.448 65.55329739999992 4.887 61.744300800000026 3.025 101.53577299999999 3.494 49.81598399999958 7.718 91.73882699999999 13.138 61.86224160000004 4.449 91.00634210000007 9.476 67.8922555 2.532 53.46523829999999 2.611 54.1934202 2.613 56.07779690000016 3.68 55.37525860000001 2.588 57.7132226 4.276 120.37423710000002 3.607 72.95287669999999 4.989 71.49387459999996 4.344 64.47086520000009 3.86 115.97917880000001 3.524 54.486761900000005 2.592 95.17483220000005 10.61 77.3641074000001 4.561 80.10097910000005 4.052 86.1701465 2.543 82.54350329999983 10.306)
Error minima by case: (0.0 0 1.0 1 0.0 0 64.0 2 0.0077 1 1.0682 11 0.0 0 0.0 0 29.0 2 4.9431 2 15.0 2 0.0 0 6.5546 2 0.0 0 45.5219 2 0.0 0 0.6243 1 0.139 1 65.0071 2 16.0 2 0.0 0 0.561 1 1.2445 1 48.0 2 2.0 1)
Average genome size in population (length): 117.201
Average program size in population (points): 118.201
Average percent parens in population: 0.008
Minimum age in population: 220.6302256999516
Maximum age in population: 224.6061156540406
Average age in population: 222.6243035770255
Median age in population: 222.6545824892543
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.266
Error (vector) diversity:			 0.317
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 421992725
--- Timings ---
Current time: 1529616563628 milliseconds
Total Time:         815.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       251.2 seconds, 30.8%
Fitness Testing:    450.3 seconds, 55.3%
Report:             113.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_869} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_flush} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_rot})
Best program: (tagged_869 integer_fromfloat integer_mod float_cos float_max tagged_869 integer_sub float_pop integer_flush float_max tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc float_max float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_rot)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2524.456831199997
Median total errors in population: 896.5883
Error averages by case: (80.7409915000006 7.553 86.01723350000012 5.033 82.12346390000003 3.123 124.16708969999999 3.804 70.24853459999929 7.736 115.4108888 13.27 82.87372189999984 4.593 110.81133860000102 9.514 91.3276061 2.829 77.91798759999999 2.895 77.99134600000001 2.921 76.53757920000025 3.837 78.98369160000001 2.869 78.9839090999999 4.575 142.7718185 3.904 94.39328220000023 5.098 92.56088479999995 4.614 85.04342349999989 3.974 139.097432 3.788 79.05046089999999 2.907 115.05263990000023 10.693 97.59440650000009 4.682 100.3727053999997 4.239 109.1684767 2.868 103.67991869999983 10.217)
Error minima by case: (0.0 0 0.5633 1 0.0 0 37.9082 2 0.444 1 55.9318 10 0.0 0 4.0 1 5.6166 1 16.0 2 16.0 2 0.0 0 5.5546 2 0.0 0 85.0 3 1.0 1 0.3776 1 0.0 0 79.9929 2 17.0 2 0.0 0 0.561 1 0.8798 1 18.3136 2 5.0 1)
Average genome size in population (length): 117.097
Average program size in population (points): 118.097
Average percent parens in population: 0.008
Minimum age in population: 221.6836495962787
Maximum age in population: 225.7412025970273
Average age in population: 223.919226490043
Median age in population: 223.9609738171555
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.219
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 424920150
--- Timings ---
Current time: 1529616569156 milliseconds
Total Time:         820.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       252.6 seconds, 30.8%
Fitness Testing:    453.6 seconds, 55.3%
Report:             114.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 48.67866743613609} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 integer_dup integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 48.67866743613609 integer_add float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2434.521287499997
Median total errors in population: 894.5883
Error averages by case: (77.67549610000061 7.455 82.67629830000003 5.07 78.87033250000005 3.049 120.0001837 3.714 67.19142129999919 7.706 111.3504817 13.202 80.27870849999992 4.597 107.40676880000062 9.465 87.0616804 2.76 73.72011479999999 2.823 73.7588935 2.841 73.37434860000019 3.655 75.03800640000001 2.796 75.97529519999993 4.421 138.730075 3.825 90.69688240000012 4.905 90.00447639999994 4.497 82.00968839999997 3.908 135.00444589999998 3.737 74.7726182 2.803 111.70355830000011 10.594 94.43730790000009 4.7 97.33553749999983 4.021 104.95327809999999 2.779 100.90538959999988 10.267)
Error minima by case: (0.0 0 0.982 1 0.0 0 64.0 2 0.444 1 1.0682 11 0.0 0 9.0 1 29.0 2 4.9431 2 15.0 2 0.0 0 12.5546 2 0.0 0 45.5219 3 0.0 0 3.8869 1 0.0 0 65.0071 1 16.0 2 0.0 0 0.439 1 0.059 1 48.0 1 1.0 1)
Average genome size in population (length): 117.581
Average program size in population (points): 118.581
Average percent parens in population: 0.008
Minimum age in population: 222.6836495962787
Maximum age in population: 227.03800911078
Average age in population: 225.2580534432448
Median age in population: 225.2894036652999
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.224
Error (vector) diversity:			 0.269
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 427859675
--- Timings ---
Current time: 1529616574425 milliseconds
Total Time:         825.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       254.1 seconds, 30.8%
Fitness Testing:    456.6 seconds, 55.3%
Report:             114.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_pop} {:instruction float_flush} {:instruction tagged_869} {:instruction float_tan} {:instruction integer_mod} {:instruction float_cos} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_dup_times float_pop float_flush tagged_869 float_tan integer_mod float_cos float_cos integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_mod integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_stackdepth float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_frominteger integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2206.055428699997
Median total errors in population: 894.5883
Error averages by case: (69.27897550000056 7.619 71.6418459 4.681 68.2583886 2.967 111.84265389999999 3.624 58.98087579999945 7.803 103.009258 13.177 68.86619080000001 4.294 99.2895299000005 9.622 78.55060619999999 2.663 64.98949239999999 2.73 65.0446849 2.741 64.22686780000019 3.654 66.34204890000002 2.676 66.16931969999997 4.112 130.69532710000001 3.72 81.03056880000007 5.094 79.06118679999996 4.247 72.71632750000003 3.809 126.9827289 3.648 66.1007532 2.712 103.35712270000005 10.847 83.58044320000003 4.335 89.5777678999999 4.065 96.63849959999999 2.673 91.89796469999987 10.413)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 56.0 10 0.0 0 6.0 1 30.0 2 16.0 2 16.0 2 0.0 0 2.4454 2 0.0 0 85.0 2 1.0 1 0.8637 1 0.0 0 81.0 2 17.0 1 1.0 1 0.0617 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 118.042
Average program size in population (points): 119.042
Average percent parens in population: 0.008
Minimum age in population: 223.9639345013051
Maximum age in population: 228.9155458782451
Average age in population: 226.5748521994938
Median age in population: 226.6049471371032
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.24
Error (vector) diversity:			 0.279
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 430810750
--- Timings ---
Current time: 1529616580021 milliseconds
Total Time:         831.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       255.7 seconds, 30.8%
Fitness Testing:    459.8 seconds, 55.3%
Report:             115.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction float_dup})
Best program: (float_flush float_max tagged_869 float_dup_times integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_stackdepth float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float integer_stackdepth float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2328.2979167999974
Median total errors in population: 895.30475
Error averages by case: (73.65430920000053 7.393 78.22555809999999 4.986 74.88163570000002 2.935 116.2872514 3.679 63.25556369999941 7.627 106.83098579999998 13.212 75.81079669999997 4.442 103.91454970000038 9.385 83.16912619999998 2.702 69.15118369999999 2.779 69.86632800000001 2.78 69.70073910000023 3.675 71.08750340000002 2.732 71.79264300000001 4.342 135.00771469999998 3.746 84.87194230000007 4.883 85.88500419999994 4.37 78.10016000000002 3.831 130.4244808 3.675 70.1519568 2.757 106.52699500000011 10.54 90.10171210000006 4.625 93.64011209999991 4.096 101.14286069999999 2.744 96.70180439999983 10.179)
Error minima by case: (0.0 0 0.7768 1 0.0 0 38.9082 2 0.2774 1 55.0 10 0.0 0 2.512 1 6.6166 2 15.0 2 15.0 1 0.0 0 9.4454 2 0.0 0 84.0 3 0.0 0 0.4978 1 0.0 0 16.4541 2 16.0 1 0.0 0 1.1721 1 0.3872 1 19.3136 2 3.0 1)
Average genome size in population (length): 118.042
Average program size in population (points): 119.042
Average percent parens in population: 0.008
Minimum age in population: 225.1704331185333
Maximum age in population: 230.1317968294875
Average age in population: 227.9523290208466
Median age in population: 227.9919150424883
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.238
Error (vector) diversity:			 0.286
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 433761800
--- Timings ---
Current time: 1529616585169 milliseconds
Total Time:         836.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       257.2 seconds, 30.7%
Fitness Testing:    462.7 seconds, 55.3%
Report:             116.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos integer_swap integer_dup float_dup_times float_max integer_inc float_sub integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc float_max float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 128
Size: 129
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2383.347713699998
Median total errors in population: 898.4763
Error averages by case: (75.78993460000055 7.405 81.3655195 5.258 77.88441060000005 3.169 118.17980749999998 3.726 66.49516489999938 7.664 108.14910569999998 13.183 77.42902389999996 4.727 107.09681210000063 9.382 85.07778949999998 2.784 71.0132041 2.788 71.20543210000001 2.807 73.23193730000021 3.881 72.14163590000003 2.742 73.16525869999995 4.448 136.62424289999998 3.78 88.69532140000008 5.07 86.78053489999994 4.583 81.60723369999991 4.026 133.03906750000002 3.75 72.51835350000002 2.798 109.13798610000008 10.396 93.18698100000005 4.921 94.1385685999999 4.268 103.09582149999999 2.794 95.73156619999988 10.217)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 55.4135 9 0.0 0 2.0 1 30.0 2 16.0 2 16.0 2 0.0 0 8.3785 2 0.0 0 85.0 3 1.0 1 0.9915 1 0.861 1 81.0 3 17.0 2 0.0 0 0.4077 1 0.9872 1 49.0 2 1.0 1)
Average genome size in population (length): 118.328
Average program size in population (points): 119.328
Average percent parens in population: 0.008
Minimum age in population: 226.8136733835876
Maximum age in population: 231.5617874727424
Average age in population: 229.2872537793202
Median age in population: 229.3247355635774
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.276
Error (vector) diversity:			 0.321
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 436720025
--- Timings ---
Current time: 1529616590876 milliseconds
Total Time:         842.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       259.0 seconds, 30.8%
Fitness Testing:    465.7 seconds, 55.3%
Report:             117.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_cos} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction integer_min} {:instruction float_dup})
Best program: (float_min float_cos integer_mod float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc integer_dup_items float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup integer_min float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2334.232949899997
Median total errors in population: 896.79415
Error averages by case: (74.37670990000063 7.241 80.28147549999998 5.334 76.95768160000003 3.132 115.46577959999999 3.67 64.22298009999935 7.488 105.1113595 13.179 77.78514889999994 4.754 104.7059581000005 9.211 82.30677810000002 2.71 67.9965441 2.736 68.668209 2.745 71.32804850000021 3.63 70.13894400000002 2.703 72.10143840000002 4.651 133.82853169999998 3.715 86.45307460000008 5.058 87.08208900000001 4.696 79.53064740000003 3.832 129.765272 3.678 68.9024009 2.736 106.94099750000008 10.293 91.90848400000009 4.976 93.25898969999993 3.996 100.3312691 2.729 95.83313869999984 10.058)
Error minima by case: (0.0 0 0.0 0 0.0 0 64.0 2 0.0 0 9.9318 9 0.0 0 0.488 1 29.0 1 15.0 2 4.8363 2 0.0 0 3.5546 2 0.0 0 84.0 2 1.0 1 0.8637 1 0.139 1 80.0 2 16.0 2 2.0 1 0.439 1 0.5661 1 48.0 2 1.0 1)
Average genome size in population (length): 118.451
Average program size in population (points): 119.451
Average percent parens in population: 0.008
Minimum age in population: 227.8136733835876
Maximum age in population: 232.437167084933
Average age in population: 230.5285680712918
Median age in population: 230.5620700532279
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.247
Error (vector) diversity:			 0.298
Behavioral diversity:				 0.298
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 439681400
--- Timings ---
Current time: 1529616596504 milliseconds
Total Time:         847.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       260.5 seconds, 30.7%
Fitness Testing:    469.2 seconds, 55.3%
Report:             118.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_frominteger})
Best program: (float_cos float_max tagged_869 float_dup_times float_max tagged_869 integer_add in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_yankdup float_frominteger)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2456.800004799999
Median total errors in population: 900.3379
Error averages by case: (77.88924260000064 7.298 85.3183475 5.604 82.58711730000006 3.344 120.40282889999999 3.74 68.02925359999934 7.625 111.5066723 13.215 82.04665979999993 5.009 108.50026650000046 9.246 87.4709487 2.796 73.9008786 2.852 73.97798829999999 2.869 75.3140099000003 3.853 75.14733050000001 2.789 76.7263274 4.854 139.0081782 3.851 91.93026460000006 5.193 90.9601522999999 4.878 83.39963400000005 4.065 135.3353553 3.751 75.0883493 2.848 111.96511330000008 10.253 96.34597490000013 5.234 96.35027429999998 4.202 105.36771359999999 2.815 99.98712309999983 10.06)
Error minima by case: (0.0 0 0.8514 1 0.0 0 65.0 2 0.444 1 1.0682 11 0.0986 1 2.0 1 30.0 2 4.9431 2 16.0 2 0.0 0 2.5546 2 0.0 0 45.5219 3 1.0 1 0.0981 1 0.0 0 65.0071 2 17.0 1 0.0 0 0.439 1 0.2585 1 49.0 2 0.512 1)
Average genome size in population (length): 118.217
Average program size in population (points): 119.217
Average percent parens in population: 0.008
Minimum age in population: 229.3876095412454
Maximum age in population: 233.7476725679405
Average age in population: 231.8693019272654
Median age in population: 231.9037860970738
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.254
Error (vector) diversity:			 0.3
Behavioral diversity:				 0.301
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 442636875
--- Timings ---
Current time: 1529616601821 milliseconds
Total Time:         853.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       261.9 seconds, 30.7%
Fitness Testing:    472.3 seconds, 55.4%
Report:             118.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_max} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_frominteger})
Best program: (float_dup_times float_max tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_inc tag_integer_675 float_inc float_inc integer_dup_times float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_dec float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_max float_yankdup float_pop float_inc float_inc integer_min integer_shove float_pop float_inc float_inc in1 integer_dec float_shove integer_yank float_yankdup integer_swap float_frominteger)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2332.626575799997
Median total errors in population: 896.5883
Error averages by case: (74.22363120000061 7.432 77.41917590000004 5.076 75.23927640000002 3.072 117.14750289999999 3.716 64.20303069999922 7.689 106.50239619999999 13.189 74.7981588999999 4.599 104.06395840000053 9.391 84.04816310000001 2.766 69.3568432 2.811 70.0231655 2.84 70.00833910000021 3.724 71.27881110000003 2.799 71.11598449999997 4.383 134.99266360000004 3.831 86.66262520000012 5.02 84.48276799999991 4.527 78.08039009999997 3.975 131.7862018 3.74 70.9229158 2.851 106.37853390000012 10.55 89.2516381000001 4.709 93.51886559999997 4.064 102.05349180000002 2.786 95.26204479999987 10.266)
Error minima by case: (0.0 0 0.0706 1 0.0 0 64.0 2 0.0 0 1.0682 9 0.0 0 2.0 1 29.0 2 4.9431 1 15.0 1 0.0 0 11.5546 2 0.0 0 45.5219 3 0.0 0 1.0 1 0.0 0 65.0071 2 16.0 2 0.0 0 0.9717 1 0.0 0 48.0 2 0.0 0)
Average genome size in population (length): 118.393
Average program size in population (points): 119.393
Average percent parens in population: 0.008
Minimum age in population: 231.2008422712752
Maximum age in population: 234.9531309287256
Average age in population: 233.1950435040455
Median age in population: 233.2559699146782
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.264
Error (vector) diversity:			 0.312
Behavioral diversity:				 0.312
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 445596750
--- Timings ---
Current time: 1529616607103 milliseconds
Total Time:         858.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       263.3 seconds, 30.7%
Fitness Testing:    475.4 seconds, 55.4%
Report:             119.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_yank} {:instruction tagged_869} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_dup_times float_yank tagged_869 integer_fromfloat integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc integer_sub integer_dup_items float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_rot integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2257.2418784999973
Median total errors in population: 895.5883
Error averages by case: (70.18155120000067 7.384 75.37476190000002 4.99 70.84157610000004 2.913 114.06732339999999 3.657 59.70215349999918 7.616 105.2498434 13.191 72.79577939999994 4.536 99.96486910000031 9.328 80.84419820000001 2.702 67.30787729999999 2.78 67.36553909999999 2.791 66.15742450000023 3.459 68.1437218 2.737 68.35825060000003 4.315 132.9106137 3.789 82.66036980000004 4.802 82.78727799999992 4.43 74.74636570000003 3.761 129.1730693 3.695 68.4249226 2.783 103.60684280000007 10.504 87.41171890000007 4.62 89.80123089999992 3.848 98.8941072 2.721 92.99749009999988 10.121)
Error minima by case: (0.0 0 0.488 1 0.0 0 65.0 2 0.202 1 56.0 10 0.0 0 0.512 1 30.0 2 16.0 2 16.0 2 0.0 0 8.5546 2 0.0 0 85.0 3 0.0 0 0.1523 1 0.0 0 81.0 2 17.0 2 1.0 1 0.0 0 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 118.388
Average program size in population (points): 119.388
Average percent parens in population: 0.008
Minimum age in population: 232.5610490005965
Maximum age in population: 236.2435171952841
Average age in population: 234.5003564851758
Median age in population: 234.5461959225139
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.234
Error (vector) diversity:			 0.281
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 448556525
--- Timings ---
Current time: 1529616612249 milliseconds
Total Time:         863.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       264.8 seconds, 30.7%
Fitness Testing:    478.3 seconds, 55.4%
Report:             120.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_617} {:instruction float_mod} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_tan} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_617 float_mod float_max tagged_869 integer_add integer_mod integer_sub integer_inc in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc integer_mod integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 float_tan float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2759.563599399997
Median total errors in population: 900.73815
Error averages by case: (91.39527110000078 7.578 95.71908730000004 5.21 94.39217800000002 3.364 132.2079553 3.889 80.61031729999905 7.857 122.285647 13.232 93.53684529999988 4.754 120.32504530000065 9.572 99.6405177 2.963 86.00238960000001 3.042 86.15634299999999 3.062 87.6450364000003 4.13 85.95869680000001 2.974 88.60065219999993 4.637 150.48901189999998 4.015 105.19499250000015 5.378 102.83545019999997 4.717 95.61775819999997 4.236 146.9049855 3.911 87.35869079999999 3.006 124.06464860000013 10.659 107.40876930000012 4.868 110.16563389999983 4.449 117.35461230000001 2.977 112.91406389999983 10.299)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.444 1 55.4135 10 0.6321 1 2.5512 1 30.0 2 16.0 2 16.0 2 0.0 0 3.5546 2 0.0 0 85.0 2 1.0 1 0.3238 1 0.0 0 81.0 2 17.0 2 0.0 0 0.4077 1 0.2391 1 49.0 2 0.512 1)
Average genome size in population (length): 118.571
Average program size in population (points): 119.571
Average percent parens in population: 0.008
Minimum age in population: 233.5610490005965
Maximum age in population: 237.9427765211722
Average age in population: 235.7899458037189
Median age in population: 235.8166060823724
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.263
Error (vector) diversity:			 0.31
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 451520800
--- Timings ---
Current time: 1529616617747 milliseconds
Total Time:         868.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       266.4 seconds, 30.7%
Fitness Testing:    481.5 seconds, 55.4%
Report:             121.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_pop} {:instruction tagged_153} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_min float_cos float_max tagged_869 float_cos float_max tagged_869 float_dup_times float_pop tagged_153 in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_dup_items integer_div float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2656.388987899998
Median total errors in population: 898.4763
Error averages by case: (86.67585220000079 7.411 91.37532860000007 5.381 88.723479 3.304 129.37717039999998 3.889 77.21632899999922 7.704 118.70077669999999 13.295 88.93019469999986 4.918 116.54275880000088 9.363 96.692537 2.93 82.7957616 2.978 82.99426810000001 3.012 83.71218960000024 3.771 83.17640230000002 2.96 84.64358219999991 4.772 147.5129057 3.951 98.3081424000002 4.979 99.20615729999993 4.874 92.11251419999995 3.998 144.0439016 3.876 84.2883915 2.976 116.9272917000001 10.535 103.27522190000008 5.062 104.53804909999978 4.102 114.48251349999998 2.953 107.00726879999992 10.136)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 55.8081 10 0.0 0 2.0 1 30.0 2 5.2622 2 16.0 2 0.0 0 1.5546 2 0.0 0 85.0 2 0.0 0 1.1363 1 0.861 1 81.0 2 17.0 1 1.0 1 0.561 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 118.295
Average program size in population (points): 119.295
Average percent parens in population: 0.008
Minimum age in population: 234.7383715994144
Maximum age in population: 239.0426859291739
Average age in population: 237.0843367697448
Median age in population: 237.1216683530914
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.264
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.308
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 454478200
--- Timings ---
Current time: 1529616622938 milliseconds
Total Time:         874.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       267.9 seconds, 30.6%
Fitness Testing:    484.4 seconds, 55.4%
Report:             121.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_dup_times integer_mult tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2319.6112236999975
Median total errors in population: 897.5323000000001
Error averages by case: (71.78984720000068 7.512 76.47058140000003 5.044 74.32642650000003 3.285 117.44440780000001 3.681 63.01372949999925 7.813 106.18500590000001 13.168 73.86553279999993 4.623 103.41012530000064 9.554 84.35399829999999 2.717 70.6943861 2.765 70.80427739999999 2.786 67.9715462000002 3.904 70.80828750000002 2.731 69.29751610000001 4.445 136.06458429999998 3.763 85.61554620000004 5.331 83.43791709999994 4.545 76.36275350000008 4.035 132.4354625 3.712 71.9276143 2.753 107.07765300000007 10.609 88.24371750000007 4.747 90.52158039999999 4.163 102.3405449 2.744 94.39418199999986 10.324)
Error minima by case: (0.0 0 0.0 0 0.0 0 64.0 2 0.3294 1 33.8636 10 0.401 1 3.0 1 29.0 2 8.5911 2 15.0 2 0.0 0 3.5546 2 0.0 0 84.0 3 1.0 1 0.1363 1 0.0 0 80.0 2 16.0 1 0.0 0 0.561 1 0.0 0 48.0 2 0.0 0)
Average genome size in population (length): 118.581
Average program size in population (points): 119.581
Average percent parens in population: 0.008
Minimum age in population: 235.7383715994144
Maximum age in population: 240.4977774084604
Average age in population: 238.4137571775968
Median age in population: 238.4161777397886
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.273
Error (vector) diversity:			 0.327
Behavioral diversity:				 0.327
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 457442750
--- Timings ---
Current time: 1529616628566 milliseconds
Total Time:         879.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       269.5 seconds, 30.6%
Fitness Testing:    487.6 seconds, 55.4%
Report:             122.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_617} {:instruction float_mod} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_617 float_mod float_max tagged_869 integer_add integer_mod integer_sub integer_inc in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_dec float_inc float_inc tag_integer_675 float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2128.1029998999984
Median total errors in population: 896.4763
Error averages by case: (64.23981820000049 7.385 70.74464339999999 4.942 66.28053680000005 2.958 109.34419 3.605 53.79939549999953 7.632 100.21918489999999 13.171 67.82121039999998 4.441 93.99674480000016 9.42 75.9357065 2.657 62.01798229999999 2.704 62.1502987 2.724 60.181055000000185 3.577 63.2208224 2.667 62.538975200000024 4.324 128.1041481 3.688 77.83283650000004 4.804 77.05348709999994 4.379 68.57597100000007 3.833 124.44978510000001 3.62 63.3719429 2.689 100.02513050000009 10.513 82.42238060000007 4.608 84.36917110000002 3.91 94.09955249999999 2.672 88.17903039999987 10.206)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.444 1 55.8081 11 0.0 0 1.5512 1 30.0 1 8.7934 1 16.0 1 0.0 0 9.4454 2 0.0 0 85.0 3 0.6781 1 2.1363 1 0.7746 1 81.0 2 17.0 2 0.0 0 1.439 1 0.2271 1 49.0 2 1.0 1)
Average genome size in population (length): 117.836
Average program size in population (points): 118.836
Average percent parens in population: 0.008
Minimum age in population: 237.317653760537
Maximum age in population: 241.5186984612174
Average age in population: 239.6554264833154
Median age in population: 239.722406184064
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.251
Error (vector) diversity:			 0.31
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 460388700
--- Timings ---
Current time: 1529616633700 milliseconds
Total Time:         885.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       271.0 seconds, 30.6%
Fitness Testing:    490.5 seconds, 55.4%
Report:             123.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction float_max} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_dup_times integer_mult tagged_869 integer_add integer_mod float_rot float_max in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_sub float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div integer_sub float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_stackdepth float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2101.366786899997
Median total errors in population: 895.5883
Error averages by case: (64.02638830000048 7.433 70.12165119999996 4.859 66.173121 2.905 107.9711195 3.546 53.55255269999956 7.703 97.3761902 13.149 66.39424089999999 4.403 94.77358330000014 9.476 74.5437779 2.576 60.2956869 2.662 60.9824335 2.675 59.77947700000022 3.55 61.57038030000002 2.633 60.804143000000025 4.243 126.691636 3.665 77.24511290000005 4.845 75.84272259999992 4.354 67.91135120000007 3.797 122.43731280000002 3.577 61.1465122 2.656 99.71414570000013 10.555 81.99978850000005 4.51 83.80891999999999 3.93 92.695099 2.594 87.04444029999989 10.169)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.291 1 33.8636 11 0.0 0 0.512 1 30.0 1 16.0 2 16.0 2 0.0 0 3.5546 2 0.0 0 85.0 3 1.0 1 0.1363 1 0.0 0 81.0 1 17.0 2 0.0 0 0.439 1 0.0 0 49.0 1 0.0 0)
Average genome size in population (length): 118.047
Average program size in population (points): 119.047
Average percent parens in population: 0.008
Minimum age in population: 238.9197161080848
Maximum age in population: 243.2418841427494
Average age in population: 240.9611798422372
Median age in population: 241.0102203334874
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.242
Error (vector) diversity:			 0.297
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 463339925
--- Timings ---
Current time: 1529616639156 milliseconds
Total Time:         890.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       272.6 seconds, 30.6%
Fitness Testing:    493.7 seconds, 55.4%
Report:             124.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_dup_times integer_mod float_dup_items float_dup_times integer_dup_items integer_flush in1 float_inc float_inc float_inc float_inc integer_dup_items float_inc float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_inc float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2535.4175455999975
Median total errors in population: 897.4763
Error averages by case: (82.28331940000075 7.484 86.61507259999998 5.364 85.0400467 3.362 123.48194230000001 3.767 72.17067939999919 7.74 113.1388192 13.247 84.69681819999997 4.871 112.4141695000005 9.455 90.60452919999999 2.808 76.25012339999999 2.888 77.01364699999999 2.929 78.61616770000026 3.972 78.04529840000004 2.861 80.8533926 4.833 141.6982688 3.896 95.38662950000007 5.328 94.1262425999999 4.816 86.79867980000006 4.196 137.585809 3.798 77.3084182 2.903 115.14357380000011 10.534 97.71866950000008 4.99 101.44349649999985 4.321 108.4769999 2.832 105.13173239999983 10.18)
Error minima by case: (0.0 0 1.0 1 0.0 0 65.0 2 0.444 1 55.4135 11 0.0 0 2.4488 1 30.0 1 16.0 1 16.0 2 0.0 0 8.5546 1 0.0 0 85.0 2 0.7988 1 0.0 0 2.0 1 81.0 2 17.0 2 0.0 0 0.4077 1 0.3032 1 49.0 2 3.0 1)
Average genome size in population (length): 117.642
Average program size in population (points): 118.642
Average percent parens in population: 0.008
Minimum age in population: 239.9317807777621
Maximum age in population: 244.5351879420131
Average age in population: 242.2200069407528
Median age in population: 242.3080634045293
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.246
Error (vector) diversity:			 0.3
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 466280975
--- Timings ---
Current time: 1529616644408 milliseconds
Total Time:         895.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       274.0 seconds, 30.6%
Fitness Testing:    496.7 seconds, 55.5%
Report:             124.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_617} {:instruction float_dup_times} {:instruction float_cos} {:instruction float_max} {:instruction tagged_617} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_pop} {:instruction integer_flush} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_617 float_dup_times float_cos float_max tagged_617 float_dup_times float_inc float_pop integer_flush float_max tagged_869 integer_add integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2747.2437532999975
Median total errors in population: 898.4763
Error averages by case: (88.5381605000008 7.594 95.29518850000007 5.096 91.86141220000003 3.309 133.566659 3.927 78.50572179999914 7.853 122.83379999999998 13.247 92.54671579999989 4.618 117.56994750000065 9.658 101.06770019999999 2.98 87.6141175 3.023 87.71022040000003 3.039 83.86931960000032 4.047 86.88263580000002 2.964 87.6799975999999 4.466 151.80766959999997 3.995 103.07572870000017 5.291 101.45312869999991 4.539 92.21899979999989 4.176 148.2320661 3.904 88.8201929 3.008 124.99096960000014 10.75 106.69159630000011 4.754 108.5311470999998 4.297 118.74382119999999 3.01 113.21383689999985 10.378)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 43.117 10 0.0 0 0.4488 1 30.0 2 9.1283 2 16.0 2 0.0 0 2.5546 2 0.0 0 48.3291 2 0.0 0 0.1363 1 0.0 0 63.8143 2 4.2345 2 0.0 0 0.561 1 0.5913 1 49.0 2 1.0 1)
Average genome size in population (length): 117.916
Average program size in population (points): 118.916
Average percent parens in population: 0.008
Minimum age in population: 241.1718255949589
Maximum age in population: 245.8193177536172
Average age in population: 243.5677865529146
Median age in population: 243.5478300786103
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.255
Error (vector) diversity:			 0.314
Behavioral diversity:				 0.314
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 469228925
--- Timings ---
Current time: 1529616649893 milliseconds
Total Time:         901.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       275.6 seconds, 30.6%
Fitness Testing:    500.0 seconds, 55.5%
Report:             125.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_dup_times} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_919} {:instruction integer_add} {:instruction integer_mod} {:instruction float_add} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_pop} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos integer_dup_times tagged_869 float_dup_times float_max tagged_919 integer_add integer_mod float_add integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc float_inc float_inc float_dup_items integer_div float_inc integer_add float_inc float_dup_items integer_pop float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_stackdepth float_pop float_inc float_inc in1 float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2289.2796876999982
Median total errors in population: 896.4071
Error averages by case: (72.5985652000006 7.364 77.15548490000005 5.035 73.19823950000003 3.008 114.7625739 3.66 62.737810799999224 7.621 104.9210284 13.186 74.04225999999997 4.618 102.81989240000061 9.299 81.574386 2.705 67.0055999 2.796 67.6181542 2.788 68.37394470000021 3.713 69.19724400000001 2.75 69.5053875 4.461 133.50831839999998 3.766 84.71009110000013 4.778 84.01105719999997 4.55 76.73645770000002 3.907 129.823487 3.705 69.1346017 2.782 104.45516810000015 10.539 89.04071220000006 4.663 90.6725623999999 4.024 99.6115334 2.724 93.53412709999988 10.089)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 55.4135 10 0.0 0 1.0 1 30.0 2 16.0 2 16.0 2 0.0 0 4.4244 2 0.0 0 85.0 2 0.0 0 0.4588 1 0.0 0 81.0 2 17.0 1 0.0 0 0.714 1 0.0141 1 49.0 2 0.1401 1)
Average genome size in population (length): 118.064
Average program size in population (points): 119.064
Average percent parens in population: 0.008
Minimum age in population: 242.5525785537298
Maximum age in population: 247.2673760395258
Average age in population: 244.8538514946909
Median age in population: 244.867059497209
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.253
Error (vector) diversity:			 0.305
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 472180675
--- Timings ---
Current time: 1529616655319 milliseconds
Total Time:         906.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       277.0 seconds, 30.6%
Fitness Testing:    503.1 seconds, 55.5%
Report:             126.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction integer_min} {:instruction float_max} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction integer_flush} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 integer_min float_max integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min integer_flush float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2578.350742899998
Median total errors in population: 897.5883
Error averages by case: (82.58733410000056 7.517 88.29161330000002 5.079 84.5095682 3.167 127.37952619999999 3.841 72.24591219999921 7.764 116.49260059999997 13.195 85.15571769999997 4.631 112.5893962000006 9.457 94.63449789999999 2.902 79.3935468 2.966 81.09692500000001 2.991 79.26619270000023 3.793 80.39203500000002 2.931 81.14587129999995 4.49 145.33820570000003 3.954 95.32187650000004 5.218 94.9465128999999 4.545 87.015995 3.952 141.1904578 3.864 80.6912829 2.979 116.39920130000009 10.651 100.05349600000005 4.718 102.4968456999999 4.158 112.44415649999999 2.915 105.35297539999986 10.241)
Error minima by case: (0.0 0 1.0 1 0.0 0 48.488 2 0.444 1 32.5071 8 0.0 0 0.0 1 13.488 1 0.512 2 0.512 2 0.0 0 1.488 2 0.0 0 68.488 2 0.0 0 2.0 1 0.0 0 16.4541 2 0.488 2 0.0 0 0.561 1 0.512 1 32.488 2 0.512 1)
Average genome size in population (length): 117.902
Average program size in population (points): 118.902
Average percent parens in population: 0.008
Minimum age in population: 243.5525785537298
Maximum age in population: 248.2289545857413
Average age in population: 246.1596897951739
Median age in population: 246.1785294283597
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.243
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 475128275
--- Timings ---
Current time: 1529616660581 milliseconds
Total Time:         912.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       278.5 seconds, 30.5%
Fitness Testing:    506.2 seconds, 55.5%
Report:             127.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_add} {:instruction in1} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction tag_integer_763} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_479} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_yank} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction integer_shove} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_dup_times integer_mult tagged_869 integer_add in1 float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc float_max float_inc float_inc integer_mult float_inc float_inc float_sub integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_sub tag_integer_763 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_yankdup float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc integer_dup float_inc float_inc tagged_479 float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_yank float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float integer_shove float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2311.812378499997
Median total errors in population: 896.5883
Error averages by case: (72.67255030000037 7.384 77.46418019999999 4.849 73.58495830000003 2.89 115.98153229999998 3.69 62.194943799999436 7.654 106.910092 13.198 74.44152209999997 4.396 102.16819330000014 9.384 82.82161040000001 2.738 69.0646693 2.779 69.18091700000002 2.799 68.22583550000013 3.539 70.1623073 2.746 70.58031159999996 4.19 134.65232559999998 3.79 85.40761190000003 4.991 84.86253169999992 4.291 76.84398249999997 3.703 130.979826 3.739 70.3569881 2.801 106.76910630000006 10.652 89.51169570000006 4.494 92.62459740000001 3.918 100.85238490000002 2.751 95.89070499999988 10.241)
Error minima by case: (0.0 0 0.0 0 0.0 0 64.0 2 0.3935 1 55.0 11 0.0 0 4.0 1 29.0 1 15.0 1 15.0 1 0.0 0 10.5546 2 0.0 0 84.0 3 0.0 0 0.8282 1 0.0 0 80.0 2 16.0 2 0.0 0 0.561 1 0.0195 1 48.0 2 3.0 1)
Average genome size in population (length): 117.663
Average program size in population (points): 118.663
Average percent parens in population: 0.008
Minimum age in population: 244.5525785537298
Maximum age in population: 249.7356993483496
Average age in population: 247.4699154955897
Median age in population: 247.4806427165452
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.237
Error (vector) diversity:			 0.295
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 478069975
--- Timings ---
Current time: 1529616666262 milliseconds
Total Time:         917.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       279.9 seconds, 30.5%
Fitness Testing:    509.6 seconds, 55.5%
Report:             127.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 44881.78769999999
Test mean error for best: 22.44089
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 82.5120043686 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction integer_flush} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_dup_times float_max tagged_869 float_dup_times float_max tagged_869 integer_max integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_pop float_inc float_rot float_min integer_flush float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 1.556 8 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.5883
Mean: 17.671766
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2351.0022494999976
Median total errors in population: 898.4763
Error averages by case: (73.4167934000007 7.365 80.31401320000002 5.264 76.41293750000001 3.106 117.2426038 3.72 63.372416599999205 7.694 107.69200299999999 13.231 77.47649529999994 4.734 104.2788151000006 9.363 84.16404359999999 2.736 70.85668609999999 2.797 70.8729563 2.817 70.72348950000024 3.739 71.45018000000003 2.788 71.80787359999997 4.542 136.06401339999996 3.801 85.96188930000007 4.89 87.00983009999993 4.621 79.1931907 3.94 132.3371441 3.708 71.8502241 2.793 106.71664150000008 10.397 92.19798610000008 4.919 92.12499399999983 4.072 102.1253046 2.765 95.41772459999984 10.12)
Error minima by case: (0.0 0 0.0 0 0.0 0 32.9082 3 0.444 1 43.8636 10 0.1855 1 0.488 1 0.6166 1 16.0 2 16.0 2 0.0 0 1.4454 2 0.0 0 85.0 3 0.511 1 0.0 0 0.0 0 74.9929 2 15.0418 2 0.0 0 0.3901 1 0.5973 1 13.3136 2 2.0 1)
Average genome size in population (length): 117.647
Average program size in population (points): 118.647
Average percent parens in population: 0.008
Minimum age in population: 246.4664656150229
Maximum age in population: 251.1255111123062
Average age in population: 248.7978337488416
Median age in population: 248.8352736640549
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.254
Error (vector) diversity:			 0.31
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 481011200
--- Timings ---
Current time: 1529616671485 milliseconds
Total Time:         922.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       281.3 seconds, 30.5%
Fitness Testing:    512.5 seconds, 55.6%
Report:             128.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 41868.992499999986
Test mean error for best: 20.93450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 88.9560456736 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_617} {:instruction float_mod} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_617 float_mod float_max tagged_869 integer_add integer_mod integer_sub integer_inc in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_dec float_inc float_inc tag_integer_675 float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_max float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 8.0 1 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.0323
Mean: 17.660646
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2458.368798699998
Median total errors in population: 901.1359
Error averages by case: (79.21449940000075 7.261 85.40873900000004 5.367 81.98004540000004 3.104 120.2076261 3.734 69.35717449999919 7.539 110.42042300000001 13.241 82.79866799999994 4.788 108.85753660000057 9.167 87.2283653 2.773 73.0742053 2.843 73.82157930000001 2.875 76.37089490000028 3.744 75.1443203 2.819 77.91542839999998 4.629 138.7134629 3.831 90.22380520000011 4.986 92.36815459999994 4.689 84.55287730000002 3.85 134.19186119999998 3.754 74.1636735 2.822 111.26114800000005 10.311 97.10429920000007 5.062 97.84129149999994 4.014 105.15143079999999 2.801 100.93028899999989 10.063)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 5.765 9 0.0 0 2.0 1 30.0 1 16.0 1 16.0 2 0.0 0 5.4454 1 0.0 0 69.8251 2 0.0 0 0.8637 1 0.0 0 16.4541 2 17.0 1 1.0 1 0.4321 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 118.16
Average program size in population (points): 119.16
Average percent parens in population: 0.008
Minimum age in population: 247.7059791462539
Maximum age in population: 252.3789831233769
Average age in population: 250.1296105445969
Median age in population: 250.1818102763469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.26
Error (vector) diversity:			 0.313
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 483965250
--- Timings ---
Current time: 1529616677091 milliseconds
Total Time:         928.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       282.9 seconds, 30.5%
Fitness Testing:    515.9 seconds, 55.6%
Report:             129.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
;;******************************
;; -*- Number IO problem report - generation 184
Test total error for best: 41868.992499999986
Test mean error for best: 20.93450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 88.9560456736 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_617} {:instruction float_mod} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_617 float_mod float_max tagged_869 integer_add integer_mod integer_sub integer_inc in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_dec float_inc float_inc tag_integer_675 float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_max float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 8.0 1 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.0323
Mean: 17.660646
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2241.7294185999976
Median total errors in population: 896.4763
Error averages by case: (68.9832726000007 7.337 75.0227043 4.994 71.32385330000002 2.9 114.02989859999998 3.638 58.64235179999926 7.541 104.2712 13.198 71.87411689999996 4.509 99.12125600000047 9.313 80.80821710000001 2.68 67.2754016 2.797 67.33063100000001 2.804 65.29268580000023 3.532 67.10305310000003 2.758 67.27194070000002 4.365 132.84250100000003 3.791 81.70186170000012 4.718 81.63911849999994 4.473 73.90725160000004 3.687 129.1378067 3.679 68.38451770000002 2.765 102.66285120000013 10.492 86.9752466000001 4.64 88.42849659999987 3.9 98.858102 2.699 91.51308219999986 10.118)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 55.0051 10 0.0 0 0.0 0 30.0 2 16.0 2 16.0 2 0.0 0 3.5546 2 0.0 0 85.0 3 0.0 0 0.8637 1 1.0 1 81.0 2 17.0 2 1.0 1 0.561 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 118.024
Average program size in population (points): 119.024
Average percent parens in population: 0.008
Minimum age in population: 248.7950259880161
Maximum age in population: 253.3331560342834
Average age in population: 251.3284648660004
Median age in population: 251.3538894437439
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.247
Error (vector) diversity:			 0.297
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 486915900
--- Timings ---
Current time: 1529616682142 milliseconds
Total Time:         933.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       284.3 seconds, 30.5%
Fitness Testing:    518.9 seconds, 55.6%
Report:             130.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
;;******************************
;; -*- Number IO problem report - generation 185
Test total error for best: 41868.992499999986
Test mean error for best: 20.93450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 88.9560456736 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_617} {:instruction float_mod} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_617 float_mod float_max tagged_869 integer_add integer_mod integer_sub integer_inc in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_dec float_inc float_inc tag_integer_675 float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_max float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 8.0 1 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.0323
Mean: 17.660646
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2385.8742077999977
Median total errors in population: 898.4763
Error averages by case: (74.4201502000006 7.42 80.51274830000003 5.109 76.81597030000005 3.134 119.59300860000002 3.706 64.76676789999945 7.479 109.9552178 13.247 77.63677029999994 4.591 104.30689660000039 9.375 86.5803956 2.748 73.2144354 2.873 73.2517804 2.881 70.76385790000023 3.856 73.48254850000002 2.82 72.35711509999997 4.424 138.3655398 3.873 87.99705820000013 5.13 86.98922539999997 4.549 79.19328679999995 3.984 134.6293963 3.722 74.23410890000001 2.845 109.10184820000013 10.587 92.14476740000005 4.771 93.52833649999992 4.146 104.5102782 2.779 97.2126991999999 10.261)
Error minima by case: (0.0 0 0.0 0 0.0 0 64.0 2 0.0 0 33.8636 11 0.0 0 7.0 1 29.0 1 15.0 1 15.0 2 0.0 0 1.4454 1 0.0 0 84.0 2 0.0 0 0.4588 1 1.0 1 80.0 1 16.0 1 1.0 1 0.439 1 0.2376 1 48.0 1 1.0 1)
Average genome size in population (length): 117.923
Average program size in population (points): 118.923
Average percent parens in population: 0.008
Minimum age in population: 249.7950259880161
Maximum age in population: 254.5321117116146
Average age in population: 252.6200552712015
Median age in population: 252.642703626894
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.286
Error (vector) diversity:			 0.344
Behavioral diversity:				 0.344
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 489864075
--- Timings ---
Current time: 1529616687267 milliseconds
Total Time:         938.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       285.8 seconds, 30.5%
Fitness Testing:    521.8 seconds, 55.6%
Report:             130.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
;;******************************
;; -*- Number IO problem report - generation 186
Test total error for best: 41868.992499999986
Test mean error for best: 20.93450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 88.9560456736 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction integer_min} {:instruction float_max} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction integer_swap} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 integer_min float_max integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_dec float_inc float_inc tag_integer_675 float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_max float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float integer_swap float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 8.0 1 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.0323
Mean: 17.660646
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2436.196118599998
Median total errors in population: 901.4300499999999
Error averages by case: (78.26059730000048 7.333 83.31839550000002 5.251 80.0288097 3.322 120.55800500000001 3.72 68.5176338999995 7.085 109.68885470000001 13.144 80.31020419999994 4.792 107.86123890000049 9.283 87.57598420000001 2.79 73.17325509999999 2.834 73.91770720000001 2.843 74.47990400000022 4.002 75.11311610000001 2.786 76.19096069999996 4.645 138.7897948 3.838 89.9212462000001 5.28 89.80674109999993 4.728 82.51788819999994 4.065 134.7106801 3.737 74.17855379999999 2.826 110.27333340000018 10.447 94.8209123000001 4.904 96.16153919999982 4.291 105.5054729 2.797 99.62729009999985 10.145)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 55.4135 10 0.0 0 0.0 0 30.0 2 16.0 2 16.0 2 0.0 0 3.5546 2 0.0 0 85.0 3 2.0 1 0.8637 1 0.0 0 81.0 2 17.0 2 0.0 0 0.561 1 0.7838 1 49.0 2 1.0 1)
Average genome size in population (length): 117.733
Average program size in population (points): 118.733
Average percent parens in population: 0.008
Minimum age in population: 251.1425172307941
Maximum age in population: 256.1873373832346
Average age in population: 253.8683149858387
Median age in population: 253.8872990576816
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.303
Error (vector) diversity:			 0.357
Behavioral diversity:				 0.358
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 492807450
--- Timings ---
Current time: 1529616692973 milliseconds
Total Time:         944.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       287.5 seconds, 30.5%
Fitness Testing:    525.0 seconds, 55.6%
Report:             131.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
;;******************************
;; -*- Number IO problem report - generation 187
Test total error for best: 41868.992499999986
Test mean error for best: 20.93450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 88.9560456736 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction float_mod} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_869 float_mod float_max tagged_869 integer_add integer_mod integer_sub integer_inc in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_dec float_inc float_inc tag_integer_675 float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_max float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 8.0 1 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.0323
Mean: 17.660646
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2775.3416446999977
Median total errors in population: 897.5323000000001
Error averages by case: (91.80375610000085 7.583 95.8574665000001 4.994 91.45070700000002 3.208 133.78889610000002 3.913 82.5713860999992 6.903 124.89435409999999 13.2 93.09898369999988 4.572 121.00375520000107 9.642 101.33000240000001 2.987 87.8483286 3.045 87.96347140000002 3.056 87.3782938000003 3.91 89.03015510000002 2.941 88.34812619999988 4.322 152.0547547 4.041 102.87286400000018 5.394 102.81032629999989 4.444 95.63641589999988 4.001 148.4612534 3.934 89.11100449999999 3.034 124.92242610000017 10.748 107.74912700000009 4.661 111.13344879999974 4.261 118.9807681 3.008 113.01257359999985 10.427)
Error minima by case: (0.0 0 1.0 1 0.0 0 65.0 2 0.0 0 1.0682 10 0.0 0 0.0 0 30.0 2 4.9431 2 16.0 2 0.0 0 5.5546 2 0.0 0 45.5219 2 0.0 0 1.8637 1 0.0 0 65.0071 2 17.0 2 0.0 0 0.439 1 0.5376 1 49.0 2 0.4057 1)
Average genome size in population (length): 117.219
Average program size in population (points): 118.219
Average percent parens in population: 0.008
Minimum age in population: 252.9421127108756
Maximum age in population: 257.1462031367013
Average age in population: 255.1351063718713
Median age in population: 255.1611525890869
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.28
Error (vector) diversity:			 0.341
Behavioral diversity:				 0.341
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 495738000
--- Timings ---
Current time: 1529616698037 milliseconds
Total Time:         949.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       289.0 seconds, 30.4%
Fitness Testing:    527.9 seconds, 55.6%
Report:             132.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
;;******************************
;; -*- Number IO problem report - generation 188
Test total error for best: 41868.992499999986
Test mean error for best: 20.93450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 88.9560456736 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_cos} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction tagged_617} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_inc} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_min float_cos integer_mod integer_dup_items float_dup_times tagged_617 float_dup_times integer_add integer_mod float_rot integer_inc integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_dup_items integer_add float_inc float_inc float_inc float_inc float_inc float_dec float_inc float_inc tag_integer_675 float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_shove float_max float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 8.0 1 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 883.0323
Mean: 17.660646
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2306.666037399997
Median total errors in population: 896.4221
Error averages by case: (73.05138230000075 7.384 77.42242470000005 4.831 73.12052840000004 2.926 116.01461079999999 3.682 64.2194678999995 5.867 105.88867179999998 13.205 74.17705139999993 4.353 101.95202670000076 9.379 82.85097769999999 2.724 69.0136868 2.793 69.16102130000002 2.819 68.44577270000028 3.52 69.62532970000001 2.732 70.24743660000001 4.133 134.6025771 3.783 84.18923710000013 4.765 84.36838899999995 4.252 76.79937359999995 3.659 130.946076 3.731 70.3129604 2.799 106.16406990000019 10.659 89.35681050000005 4.504 93.04829509999988 3.884 100.88177939999999 2.751 95.33108049999984 10.34)
Error minima by case: (0.0 0 1.0 1 0.0 0 65.0 2 0.0 0 43.8636 11 0.0 0 1.9316 1 30.0 1 16.0 2 16.0 2 0.0 0 12.5546 2 0.0 0 85.0 3 1.7807 1 0.8637 1 0.139 1 81.0 2 17.0 2 0.0 0 0.439 1 0.941 1 49.0 2 1.0 1)
Average genome size in population (length): 116.36
Average program size in population (points): 117.36
Average percent parens in population: 0.009
Minimum age in population: 254.333817278725
Maximum age in population: 258.1462031367013
Average age in population: 256.3974066534934
Median age in population: 256.4643782307322
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.293
Error (vector) diversity:			 0.355
Behavioral diversity:				 0.355
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 498647125
--- Timings ---
Current time: 1529616703435 milliseconds
Total Time:         954.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       290.6 seconds, 30.4%
Fitness Testing:    531.1 seconds, 55.6%
Report:             133.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
;;******************************
;; -*- Number IO problem report - generation 189
Test total error for best: 41948.54119999999
Test mean error for best: 20.97427
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 87.9560456736 
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 82.5120043686 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_max} {:instruction tagged_869} {:instruction float_min} {:instruction float_cos} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction integer_add} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction float_pop} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction in1} {:instruction integer_shove} {:instruction float_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_swap float_max tagged_869 float_min float_cos integer_mod integer_dup_items float_dup_times integer_add in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc integer_mult float_inc float_inc float_dup_times float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_mod float_pop float_inc float_rot float_min in1 integer_shove float_max float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_frominteger integer_div integer_mult float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 7.0 1 56.0 13 12.0 2 45.0632 10 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 882.0323
Mean: 17.640646
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2386.090842199999
Median total errors in population: 894.5883
Error averages by case: (74.9679866000006 7.45 81.0799382 4.959 75.75988550000004 2.93 119.71194829999999 3.705 66.60975369999964 4.889 110.07290689999999 13.234 78.3571061 4.451 104.86527840000043 9.394 86.6988231 2.755 72.5174826 2.852 73.226593 2.874 70.75819660000025 3.502 74.20529990000001 2.77 72.72203590000004 4.326 138.14587560000004 3.858 86.55237370000009 4.813 87.89720889999994 4.377 79.12861410000005 3.731 133.9331696 3.774 73.4650102 2.856 109.24672030000012 10.598 93.13029800000007 4.614 94.91423149999993 3.909 104.6347321 2.778 97.88137339999986 10.209)
Error minima by case: (0.0 0 0.6198 1 0.0 0 65.0 1 0.0 0 56.0 12 1.0 1 3.7108 1 30.0 2 16.0 2 16.0 2 0.0 0 1.5546 2 0.0 0 85.0 2 0.0 0 1.0 1 1.0 1 81.0 2 17.0 2 0.0 0 0.439 1 1.0359 1 49.0 2 1.488 1)
Average genome size in population (length): 115.804
Average program size in population (points): 116.804
Average percent parens in population: 0.009
Minimum age in population: 255.4762115443673
Maximum age in population: 259.7287753609762
Average age in population: 257.7087980989233
Median age in population: 257.7875922479365
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.267
Error (vector) diversity:			 0.327
Behavioral diversity:				 0.329
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 501542300
--- Timings ---
Current time: 1529616708659 milliseconds
Total Time:         960.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       292.1 seconds, 30.4%
Fitness Testing:    534.0 seconds, 55.6%
Report:             133.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
;;******************************
;; -*- Number IO problem report - generation 190
Test total error for best: 41197.38819999999
Test mean error for best: 20.59869
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 100.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 89.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_max} {:instruction tagged_869} {:instruction float_min} {:instruction float_cos} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction integer_add} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_pop} {:instruction float_inc} {:instruction tagged_267} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction tagged_491} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float})
Best program: (float_swap float_max tagged_869 float_min float_cos integer_mod integer_dup_items float_dup_times integer_add in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc float_dup float_inc float_inc float_dup_times float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_dec float_pop float_inc tagged_267 float_min float_inc float_inc float_inc float_inc float_inc float_inc float_max float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 tagged_491 float_pop float_inc float_inc in1 in2 float_shove print_float)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 20.0 2 56.0 13 12.0 2 38.0 3 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 881.9691
Mean: 17.639381
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 1957.6822980999991
Median total errors in population: 893.5883
Error averages by case: (58.96401230000049 7.273 62.783058399999945 4.72 59.03460240000003 2.717 102.6992929 3.481 51.88969119999982 3.669 92.8568399 13.166 60.29924360000004 4.266 88.24611200000014 9.28 69.0907754 2.519 55.3868346 2.638 55.4593474 2.644 54.02603970000018 3.356 56.155638200000006 2.533 55.56000480000003 4.061 121.761598 3.63 70.9315049 4.622 70.34612859999994 4.227 62.69908500000008 3.57 117.9802303 3.562 56.529861000000004 2.639 91.90529250000004 10.577 75.49781180000006 4.378 79.06584690000003 3.693 87.3496663 2.54 81.19477999999992 10.208)
Error minima by case: (0.0 0 0.0 0 0.0 0 64.0 2 0.0 0 1.0682 11 0.0931 1 1.0 1 29.0 2 4.9431 2 15.0 2 0.0 0 13.5546 2 0.0 0 45.5219 2 1.0 1 2.8637 1 0.861 1 65.0071 2 16.0 2 0.0 0 0.2374 1 0.059 1 48.0 2 1.0 1)
Average genome size in population (length): 115.657
Average program size in population (points): 116.657
Average percent parens in population: 0.009
Minimum age in population: 256.8585339554145
Maximum age in population: 261.0777984520068
Average age in population: 258.9770790388741
Median age in population: 258.9814197074668
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.272
Error (vector) diversity:			 0.341
Behavioral diversity:				 0.342
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 504433775
--- Timings ---
Current time: 1529616714119 milliseconds
Total Time:         965.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       293.7 seconds, 30.4%
Fitness Testing:    537.3 seconds, 55.6%
Report:             134.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
;;******************************
;; -*- Number IO problem report - generation 191
Test total error for best: 41197.38819999999
Test mean error for best: 20.59869
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 100.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 89.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction integer_min} {:instruction float_max} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_pop} {:instruction float_inc} {:instruction tagged_267} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction tagged_491} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float})
Best program: (float_cos float_max tagged_869 integer_min float_max integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc float_dup float_inc float_inc float_dup_times float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_dec float_pop float_inc tagged_267 float_min float_inc float_inc float_inc float_inc float_inc float_inc float_max float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 tagged_491 float_pop float_inc float_inc in1 in2 float_shove print_float)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 20.0 2 56.0 13 12.0 2 38.0 3 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 881.9691
Mean: 17.639381
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2174.341221099999
Median total errors in population: 893.8103
Error averages by case: (68.19998210000026 7.403 71.26592189999992 4.729 67.56790110000003 2.865 111.0273138 3.602 61.00501039999995 3.069 101.2582959 13.15 68.6828802 4.342 97.06966469999996 9.382 77.6987291 2.646 63.304822599999994 2.72 63.7997047 2.72 62.58334830000012 3.546 65.5247446 2.617 64.84936349999998 4.141 129.0629433 3.714 80.19193459999998 4.865 78.33137129999994 4.288 70.86027730000009 3.705 126.17405360000001 3.651 64.8617342 2.707 101.42445350000004 10.694 83.21946760000007 4.387 88.57795050000003 3.91 95.8056141 2.665 90.25573819999988 10.22)
Error minima by case: (0.0 0 0.0736 1 0.0 0 65.0 2 0.0 0 56.0 10 0.5276 1 8.0 1 30.0 1 16.0 2 16.0 2 0.0 0 13.5546 2 0.0 0 85.0 3 0.0 0 0.1474 1 0.139 1 81.0 2 17.0 2 0.0 0 0.7443 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 115.716
Average program size in population (points): 116.716
Average percent parens in population: 0.009
Minimum age in population: 258.02688656067
Maximum age in population: 262.5291949704726
Average age in population: 260.2929776773439
Median age in population: 260.3457012965348
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.266
Error (vector) diversity:			 0.327
Behavioral diversity:				 0.327
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 507326775
--- Timings ---
Current time: 1529616719420 milliseconds
Total Time:         970.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       295.2 seconds, 30.4%
Fitness Testing:    540.2 seconds, 55.7%
Report:             135.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
;;******************************
;; -*- Number IO problem report - generation 192
Test total error for best: 41197.38819999999
Test mean error for best: 20.59869
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 100.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 89.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction integer_min} {:instruction float_max} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_pop} {:instruction float_inc} {:instruction tagged_267} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction tagged_491} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float})
Best program: (float_cos float_max tagged_869 integer_min float_max integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc float_dup float_inc float_inc float_dup_times float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_dec float_pop float_inc tagged_267 float_min float_inc float_inc float_inc float_inc float_inc float_inc float_max float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 tagged_491 float_pop float_inc float_inc in1 in2 float_shove print_float)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 20.0 2 56.0 13 12.0 2 38.0 3 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 881.9691
Mean: 17.639381
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2077.6771213
Median total errors in population: 893.0323000000001
Error averages by case: (62.77613330000052 7.349 67.49582159999994 4.662 63.348035800000034 2.86 107.76528569999998 3.613 56.304072199999965 2.554 98.49123299999998 13.136 65.05663190000001 4.216 91.30297010000025 9.379 74.28686619999999 2.665 60.3673367 2.736 60.4717451 2.751 56.78593850000014 3.508 61.9014634 2.613 60.19473670000005 3.971 126.48870539999997 3.7 76.23937770000003 4.955 74.51121589999994 4.091 65.46102580000013 3.596 122.8798193 3.616 61.60336610000001 2.709 99.79340170000012 10.77 79.42409890000008 4.281 83.83539959999993 3.89 92.49494429999997 2.69 87.60449639999985 10.482)
Error minima by case: (0.0 0 0.3737 1 0.0 0 39.9082 1 0.0 0 17.3154 10 0.0 0 2.512 1 7.6166 2 16.0 2 16.0 2 0.0 0 12.5546 2 0.0 0 58.2747 1 1.0 1 1.6243 1 1.0 1 73.7599 2 5.711 2 1.0 1 0.439 1 1.0 1 20.3136 2 1.0 1)
Average genome size in population (length): 115.324
Average program size in population (points): 116.324
Average percent parens in population: 0.009
Minimum age in population: 259.0887403056622
Maximum age in population: 263.5078413044245
Average age in population: 261.5970824852941
Median age in population: 261.6600181551091
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.262
Error (vector) diversity:			 0.325
Behavioral diversity:				 0.325
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 510209950
--- Timings ---
Current time: 1529616724563 milliseconds
Total Time:         975.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       296.7 seconds, 30.4%
Fitness Testing:    543.2 seconds, 55.7%
Report:             136.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
;;******************************
;; -*- Number IO problem report - generation 193
Test total error for best: 41197.38819999999
Test mean error for best: 20.59869
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 100.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 89.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction integer_min} {:instruction float_max} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_pop} {:instruction float_inc} {:instruction tagged_267} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction tagged_491} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float})
Best program: (float_cos float_max tagged_869 integer_min float_max integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc float_dup float_inc float_inc float_dup_times float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_dec float_pop float_inc tagged_267 float_min float_inc float_inc float_inc float_inc float_inc float_inc float_max float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 tagged_491 float_pop float_inc float_inc in1 in2 float_shove print_float)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 20.0 2 56.0 13 12.0 2 38.0 3 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 881.9691
Mean: 17.639381
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2306.4085144999995
Median total errors in population: 894.0323
Error averages by case: (72.66757220000036 7.4 76.44820939999998 4.746 72.31844860000005 2.897 116.35817609999998 3.719 66.14614329999993 2.584 107.09361510000002 13.178 73.6453246 4.254 101.49988570000018 9.407 83.1915899 2.77 69.30415020000001 2.836 69.44035369999999 2.866 67.35537320000017 3.469 70.6635515 2.719 70.27734690000001 4.013 134.8567724 3.832 84.98472890000004 4.977 84.0821351999999 4.144 75.89606470000007 3.674 131.2766589 3.753 70.6303738 2.83 106.8314140000001 10.727 88.55667710000007 4.385 93.2786478 3.917 101.24125360000002 2.787 96.02804769999985 10.452)
Error minima by case: (0.0 0 0.2682 1 0.0 0 65.0 1 0.0 0 16.9318 10 0.0 0 8.0 1 30.0 1 16.0 2 2.1637 2 0.0 0 14.9464 2 0.0 0 85.0 2 0.0 0 0.4978 1 0.861 1 81.0 2 17.0 2 1.575 1 0.845 1 1.0195 1 49.0 2 2.0 1)
Average genome size in population (length): 115.807
Average program size in population (points): 116.807
Average percent parens in population: 0.009
Minimum age in population: 260.7840593239034
Maximum age in population: 265.0990025549396
Average age in population: 262.989594146658
Median age in population: 263.0167238841511
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.271
Error (vector) diversity:			 0.347
Behavioral diversity:				 0.349
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 513105200
--- Timings ---
Current time: 1529616729892 milliseconds
Total Time:         981.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       298.2 seconds, 30.4%
Fitness Testing:    546.3 seconds, 55.7%
Report:             136.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
;;******************************
;; -*- Number IO problem report - generation 194
Test total error for best: 41197.38819999999
Test mean error for best: 20.59869
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 82.5120043686 
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 100.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 89.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_869} {:instruction integer_min} {:instruction float_max} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_pop} {:instruction float_inc} {:instruction tagged_267} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction tagged_491} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float})
Best program: (float_cos float_max tagged_869 integer_min float_max integer_mod float_rot integer_flush in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc float_dup float_inc float_inc float_dup_times float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_dec float_pop float_inc tagged_267 float_min float_inc float_inc float_inc float_inc float_inc float_inc float_max float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 tagged_491 float_pop float_inc float_inc in1 in2 float_shove print_float)
Errors: [16.9691 8 15.0 2 4.0 1 65.0 3 20.0 2 56.0 13 12.0 2 38.0 3 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 881.9691
Mean: 17.639381
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2084.3668807000004
Median total errors in population: 893.0323
Error averages by case: (63.30228210000039 7.315 68.24806339999995 4.79 63.99944580000004 2.893 107.82267619999999 3.589 57.106930000000006 2.481 98.58558329999998 13.107 65.52974040000001 4.402 92.97247500000033 9.209 74.3783251 2.657 60.42562319999999 2.715 60.560018299999996 2.721 58.60396240000018 3.394 61.62175520000002 2.582 61.149588000000016 4.153 126.6027018 3.711 75.47915610000003 4.859 75.34146349999993 4.319 67.29504980000009 3.738 122.91927490000002 3.61 61.77270990000001 2.704 97.56747480000014 10.592 80.22055320000008 4.492 83.32186399999998 3.772 92.56742810000001 2.661 86.29073619999986 10.216)
Error minima by case: (0.0 0 0.8699 1 0.0 0 64.0 2 0.0 0 1.0682 11 0.0 0 5.0 1 29.0 2 4.9431 2 15.0 2 0.0 0 4.0426 2 0.0 0 45.5219 2 3.0 1 0.8477 1 0.0 0 65.0071 2 16.0 1 0.0 0 0.4119 1 0.2376 1 48.0 2 1.0 1)
Average genome size in population (length): 116.622
Average program size in population (points): 117.622
Average percent parens in population: 0.009
Minimum age in population: 262.1135043073467
Maximum age in population: 266.2899187703673
Average age in population: 264.3123502376256
Median age in population: 264.314058484826
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.263
Error (vector) diversity:			 0.338
Behavioral diversity:				 0.339
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 516020850
--- Timings ---
Current time: 1529616735459 milliseconds
Total Time:         986.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       299.8 seconds, 30.4%
Fitness Testing:    549.6 seconds, 55.7%
Report:             137.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
;;******************************
;; -*- Number IO problem report - generation 195
Test total error for best: 41026.25809999999
Test mean error for best: 20.51313
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 84.542920316  
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 106.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 95.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_617} {:instruction float_mod} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_pop} {:instruction float_inc} {:instruction tagged_267} {:instruction float_min} {:instruction integer_shove} {:instruction float_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_617 float_mod float_max tagged_869 integer_add integer_mod integer_sub float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc float_dup float_inc float_inc float_dup_times float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_dec float_pop float_inc tagged_267 float_min integer_shove float_max float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_frominteger integer_div integer_mult float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [19.0 2 15.0 2 4.0 1 65.0 3 26.0 2 56.0 13 12.0 2 32.0 3 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 878.0
Mean: 17.56
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2273.292709199999
Median total errors in population: 895.0323
Error averages by case: (71.96304960000042 7.235 76.37005509999997 4.929 72.69009490000003 2.929 113.5983559 3.634 65.76768620000004 2.471 103.84514750000001 13.191 73.70091409999996 4.393 100.77979590000018 9.083 80.37382050000001 2.665 66.9020282 2.727 66.9210426 2.751 67.29830800000019 3.612 68.5632427 2.628 69.91863109999996 4.013 132.44129850000002 3.708 83.22062490000002 5.049 83.3278773999999 4.24 75.52961970000001 3.738 128.7041673 3.622 67.95484520000001 2.722 106.78364600000003 10.514 88.69284180000007 4.572 92.77677299999995 3.939 98.42374600000001 2.692 95.34909709999984 10.339)
Error minima by case: (0.0 0 0.4472 1 0.0 0 65.0 1 0.0 0 1.6465 9 0.0 0 0.512 1 30.0 2 16.0 2 13.1215 2 0.0 0 18.0 2 0.0 0 77.2366 1 1.0 1 0.4978 1 1.0 1 81.0 2 17.0 2 1.0 1 0.1131 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 117.83
Average program size in population (points): 118.83
Average percent parens in population: 0.008
Minimum age in population: 263.5778677286753
Maximum age in population: 267.7553486730712
Average age in population: 265.6277813836751
Median age in population: 265.6648343417513
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.289
Error (vector) diversity:			 0.386
Behavioral diversity:				 0.387
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 518966750
--- Timings ---
Current time: 1529616740955 milliseconds
Total Time:         992.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       301.3 seconds, 30.4%
Fitness Testing:    552.7 seconds, 55.7%
Report:             138.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
;;******************************
;; -*- Number IO problem report - generation 196
Test total error for best: 41026.25809999999
Test mean error for best: 20.51313
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 84.542920316  
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 106.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 95.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_max} {:instruction tagged_617} {:instruction float_mod} {:instruction float_max} {:instruction tagged_869} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_pop} {:instruction float_inc} {:instruction tagged_267} {:instruction float_min} {:instruction integer_shove} {:instruction float_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_cos float_max tagged_617 float_mod float_max tagged_869 integer_add integer_mod integer_sub float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc float_dup float_inc float_inc float_dup_times float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_dec float_pop float_inc tagged_267 float_min integer_shove float_max float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_frominteger integer_div integer_mult float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [19.0 2 15.0 2 4.0 1 65.0 3 26.0 2 56.0 13 12.0 2 32.0 3 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 878.0
Mean: 17.56
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2415.5520264999996
Median total errors in population: 894.0323000000001
Error averages by case: (76.54635780000035 7.266 82.22292750000007 5.072 78.47260230000003 3.108 120.07586009999999 3.756 70.6981021 2.691 111.03777140000001 13.161 79.50433489999988 4.546 105.50596200000031 8.965 87.05512580000001 2.823 73.3538267 2.91 73.469143 2.918 72.49158650000018 3.541 74.5620472 2.756 74.0385243999999 4.278 138.6617655 3.905 89.51511220000016 4.757 88.73380949999994 4.4 80.90876579999994 3.761 135.00658130000002 3.815 74.6326189 2.882 111.18415990000014 10.538 93.93790490000008 4.743 96.29052019999993 3.896 105.0099173 2.836 98.9746992999998 10.338)
Error minima by case: (0.0 0 0.0736 1 0.0 0 64.0 2 0.0 0 55.0 11 0.0 0 3.0 1 29.0 2 15.0 2 15.0 2 0.0 0 5.6201 2 0.0 0 84.0 3 0.0 0 0.3757 1 0.0 0 80.0 2 16.0 1 0.0 0 2.0791 1 0.9702 1 48.0 2 1.0 1)
Average genome size in population (length): 119.044
Average program size in population (points): 120.044
Average percent parens in population: 0.008
Minimum age in population: 265.003528239595
Maximum age in population: 268.8260193349158
Average age in population: 266.9893060723596
Median age in population: 267.0167177766067
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.298
Error (vector) diversity:			 0.397
Behavioral diversity:				 0.397
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 521942875
--- Timings ---
Current time: 1529616746380 milliseconds
Total Time:         997.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       302.8 seconds, 30.3%
Fitness Testing:    555.9 seconds, 55.7%
Report:             138.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
;;******************************
;; -*- Number IO problem report - generation 197
Test total error for best: 41026.25809999999
Test mean error for best: 20.51313
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 84.542920316  
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 106.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 95.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_max} {:instruction tagged_869} {:instruction tagged_869} {:instruction float_min} {:instruction float_cos} {:instruction float_swap} {:instruction float_max} {:instruction tagged_869} {:instruction float_min} {:instruction float_cos} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction integer_add} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_pop} {:instruction float_inc} {:instruction tagged_267} {:instruction float_min} {:instruction integer_shove} {:instruction float_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_swap float_max tagged_869 tagged_869 float_min float_cos float_swap float_max tagged_869 float_min float_cos integer_mod integer_dup_items float_dup_times integer_add in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup float_inc float_inc float_dup_times float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_dec float_pop float_inc tagged_267 float_min integer_shove float_max float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_frominteger integer_div integer_mult float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [19.0 2 15.0 2 4.0 1 65.0 3 26.0 2 56.0 13 12.0 2 32.0 3 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 878.0
Mean: 17.56
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2223.4612925999986
Median total errors in population: 894.0323
Error averages by case: (68.21667880000044 7.172 74.52673559999998 4.722 70.44675110000004 2.987 112.80730239999998 3.648 63.08599529999999 2.756 103.80763879999999 13.174 72.3210343 4.202 96.10218590000011 8.564 79.5787604 2.688 65.8755589 2.727 65.971662 2.751 63.37885770000017 3.45 67.5330812 2.649 66.12749070000004 3.914 131.55945289999997 3.732 81.83661490000003 4.638 81.77583409999993 4.085 72.0756437000001 3.734 127.86087890000002 3.668 67.10463450000002 2.718 105.36074440000013 10.735 86.58050600000009 4.374 88.5305591 3.82 97.6412754 2.701 93.1564155999999 10.59)
Error minima by case: (0.0 0 0.0736 1 0.0 0 65.0 1 0.0 0 1.0682 11 0.401 1 1.0 1 30.0 2 4.9431 2 16.0 2 0.0 0 17.5546 2 0.0 0 45.5219 3 0.0 0 2.8477 1 0.0 0 65.0071 2 17.0 2 1.0 1 3.1745 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 119.64
Average program size in population (points): 120.64
Average percent parens in population: 0.008
Minimum age in population: 266.003528239595
Maximum age in population: 270.3152365104137
Average age in population: 268.3739056018464
Median age in population: 268.3949324292239
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.324
Error (vector) diversity:			 0.419
Behavioral diversity:				 0.422
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 524934050
--- Timings ---
Current time: 1529616752033 milliseconds
Total Time:        1003.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       304.3 seconds, 30.3%
Fitness Testing:    559.1 seconds, 55.7%
Report:             139.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
;;******************************
;; -*- Number IO problem report - generation 198
Test total error for best: 41026.25809999999
Test mean error for best: 20.51313
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 84.542920316  
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 106.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 95.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_max} {:instruction tagged_869} {:instruction tagged_869} {:instruction float_min} {:instruction float_cos} {:instruction float_swap} {:instruction float_max} {:instruction tagged_869} {:instruction float_min} {:instruction float_cos} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction integer_add} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_pop} {:instruction float_inc} {:instruction tagged_267} {:instruction float_min} {:instruction integer_shove} {:instruction float_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_swap float_max tagged_869 tagged_869 float_min float_cos float_swap float_max tagged_869 float_min float_cos integer_mod integer_dup_items float_dup_times integer_add in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup float_inc float_inc float_dup_times float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_dec float_pop float_inc tagged_267 float_min integer_shove float_max float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_frominteger integer_div integer_mult float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [19.0 2 15.0 2 4.0 1 65.0 3 26.0 2 56.0 13 12.0 2 32.0 3 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 878.0
Mean: 17.56
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2435.4895093999985
Median total errors in population: 896.2543000000001
Error averages by case: (77.46386710000056 7.049 84.810283 5.149 79.79773870000004 3.133 120.27490399999999 3.717 73.43042019999996 3.094 110.6823728 13.152 82.04978279999996 4.647 105.99960450000056 7.767 87.29178569999999 2.781 73.17405869999999 2.863 73.9217144 2.866 74.68701200000022 3.599 75.5472737 2.72 74.63817049999997 4.318 138.77380659999997 3.838 88.79340610000001 4.922 91.52026249999994 4.54 83.10814390000003 3.791 134.3682619 3.756 74.2233326 2.823 111.06516500000014 10.48 96.79791940000001 4.792 96.18163609999989 3.976 105.202219 2.793 98.8943681999999 10.226)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 55.1179 10 0.1879 1 1.512 1 30.0 2 16.0 2 16.0 2 0.0 0 18.0 2 0.0 0 85.0 1 0.0 0 0.14 1 0.0 0 81.0 2 17.0 2 0.0 0 0.3559 1 0.0 0 49.0 2 0.0 0)
Average genome size in population (length): 120.327
Average program size in population (points): 121.327
Average percent parens in population: 0.008
Minimum age in population: 267.0966922387466
Maximum age in population: 271.6466624671537
Average age in population: 269.8025824174423
Median age in population: 269.8519923260016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.34
Error (vector) diversity:			 0.424
Behavioral diversity:				 0.425
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 527942475
--- Timings ---
Current time: 1529616757655 milliseconds
Total Time:        1009.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       305.8 seconds, 30.3%
Fitness Testing:    562.5 seconds, 55.7%
Report:             140.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
;;******************************
;; -*- Number IO problem report - generation 199
Test total error for best: 41026.25809999999
Test mean error for best: 20.51313
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 84.542920316  
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 106.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 95.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_max} {:instruction tagged_869} {:instruction tagged_869} {:instruction float_min} {:instruction float_cos} {:instruction float_swap} {:instruction float_max} {:instruction tagged_869} {:instruction float_min} {:instruction float_cos} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction integer_add} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_pop} {:instruction float_inc} {:instruction tagged_267} {:instruction float_min} {:instruction integer_shove} {:instruction float_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_swap float_max tagged_869 tagged_869 float_min float_cos float_swap float_max tagged_869 float_min float_cos integer_mod integer_dup_items float_dup_times integer_add in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup float_inc float_inc float_dup_times float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_dec float_pop float_inc tagged_267 float_min integer_shove float_max float_inc float_rot float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc float_frominteger integer_div integer_mult float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [19.0 2 15.0 2 4.0 1 65.0 3 26.0 2 56.0 13 12.0 2 32.0 3 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 878.0
Mean: 17.56
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2229.161855099998
Median total errors in population: 895.0323000000001
Error averages by case: (69.6293181000004 6.747 76.08026339999996 4.975 71.74625520000001 3.012 112.78777299999999 3.626 66.61107959999995 2.97 103.08021310000001 13.194 73.01696419999999 4.424 96.31177110000004 6.853 79.52925550000002 2.663 65.22163669999999 2.742 65.8152742 2.757 66.21222630000017 3.337 67.56504879999999 2.646 67.13361760000001 4.227 131.08758400000002 3.719 80.51710300000003 4.727 82.80017289999992 4.344 74.45057900000003 3.547 127.5102284 3.661 66.35662789999999 2.717 102.03573520000006 10.481 88.12140420000006 4.677 88.41829469999996 3.675 97.5981465 2.686 90.88928249999987 10.229)
Error minima by case: (0.0 0 0.9264 1 0.0 0 65.0 1 0.0 0 55.8081 11 0.4329 1 1.512 1 30.0 1 16.0 2 16.0 2 0.0 0 7.4454 2 0.0 0 85.0 3 0.0 0 0.1718 1 0.0 0 81.0 1 17.0 1 0.0 0 0.3175 1 0.2376 1 49.0 2 1.0 1)
Average genome size in population (length): 120.413
Average program size in population (points): 121.413
Average percent parens in population: 0.008
Minimum age in population: 268.8480913910854
Maximum age in population: 273.1992064805703
Average age in population: 271.1111840172032
Median age in population: 271.191134364585
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.329
Error (vector) diversity:			 0.432
Behavioral diversity:				 0.433
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 530953150
--- Timings ---
Current time: 1529616762907 milliseconds
Total Time:        1014.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       307.4 seconds, 30.3%
Fitness Testing:    565.5 seconds, 55.8%
Report:             141.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
;;******************************
;; -*- Number IO problem report - generation 200
Test total error for best: 41026.25809999999
Test mean error for best: 20.51313
;;------------------------------
Outputs of best individual on training cases:
Correct output: 65.542920316   | Program output: 84.542920316  
Correct output: 36.9263823022  | Program output: 21.9263823022 
Correct output: -12.6268384926 | Program output: -16.6268384926
Correct output: -156.0918084307 | Program output: -91.0918084307
Correct output: 80.9560456736  | Program output: 106.9560456736
Correct output: -54.9317847731 | Program output: 1.0682152269  
Correct output: 43.2695047863  | Program output: 31.2695047863 
Correct output: 127.5752307902 | Program output: 95.5752307902 
Correct output: -118.3834102551 | Program output: -88.3834102551
Correct output: -20.9430876309 | Program output: -4.9430876309 
Correct output: -40.1637221127 | Program output: -24.1637221127
Correct output: 84.4459340278  | Program output: 81.4459340278 
Correct output: 66.9574048532  | Program output: 84.9574048532 
Correct output: 43.0403227949  | Program output: 53.0403227949 
Correct output: -130.5218741194 | Program output: -45.5218741194
Correct output: -26.7988140078 | Program output: -0.7988140078 
Correct output: 62.375676743   | Program output: 38.375676743  
Correct output: 90.6509578065  | Program output: 77.6509578065 
Correct output: -146.0070943376 | Program output: -65.0070943376
Correct output: -77.9582317921 | Program output: -60.9582317921
Correct output: -36.4250425838 | Program output: 22.5749574162 
Correct output: 52.9510395124  | Program output: 22.9510395124 
Correct output: 35.7624010697  | Program output: 81.7624010697 
Correct output: -143.6863764074 | Program output: -94.6863764074
Correct output: -4.8279891918  | Program output: 41.1720108082 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_max} {:instruction tagged_869} {:instruction tagged_869} {:instruction float_min} {:instruction integer_div} {:instruction float_swap} {:instruction float_max} {:instruction tagged_869} {:instruction integer_min} {:instruction float_max} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_675} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 49.51200436862963} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_pop} {:instruction float_min} {:instruction integer_shove} {:instruction float_max} {:instruction float_inc} {:instruction tagged_267} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_pop} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_shove} {:instruction print_float} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dup})
Best program: (float_swap float_max tagged_869 tagged_869 float_min integer_div float_swap float_max tagged_869 integer_min float_max integer_mod float_rot integer_flush float_inc float_inc float_inc float_inc float_inc in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc integer_yankdup float_dup float_inc float_inc float_dup_times float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc tag_integer_675 float_inc float_inc float_inc float_inc float_inc 49.51200436862963 float_dup_items float_inc float_inc float_inc in1 integer_dec float_pop float_min integer_shove float_max float_inc tagged_267 float_min float_inc float_inc float_inc float_inc float_inc float_inc float_max float_inc float_inc float_dup_items integer_div float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_inc float_inc integer_sub integer_dec integer_dec float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in1 integer_pop integer_flush float_pop float_inc float_inc in1 integer_shove float_pop float_inc float_inc in1 in2 float_shove print_float float_dup_times float_flush float_dup)
Errors: [19.0 2 15.0 2 4.0 1 65.0 3 26.0 2 56.0 13 12.0 2 32.0 3 30.0 2 16.0 2 16.0 2 3.0 1 18.0 2 10.0 1 85.0 3 26.0 2 24.0 2 13.0 2 81.0 3 17.0 2 59.0 12 30.0 1 46.0 2 49.0 2 46.0 11]
Total: 878.0
Mean: 17.56
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2160.950988399997
Median total errors in population: 893.7011
Error averages by case: (68.32306460000042 6.143 74.45590270000002 5.105 70.7868497 2.953 109.43245900000001 3.581 66.74390989999992 3.234 100.4744632 13.139 70.90491779999996 4.533 91.77044520000017 5.432 76.0352322 2.641 62.3514925 2.76 62.430805799999995 2.754 63.20590050000019 3.353 63.7935465 2.606 62.71432170000004 4.307 128.3264734 3.746 79.68406360000003 4.555 79.82900729999992 4.508 71.71008950000005 3.654 124.5560725 3.632 63.4864957 2.721 100.1485533000001 10.303 86.37210570000008 4.818 85.111035 3.716 94.1801308 2.655 87.19865029999987 10.076)
Error minima by case: (0.0 0 0.0 0 0.0 0 65.0 2 0.0 0 55.7707 11 0.0 0 5.512 1 30.0 2 16.0 2 16.0 2 0.0 0 12.5546 2 0.0 0 85.0 3 0.0 0 1.7035 1 0.139 1 81.0 1 17.0 1 0.0 0 0.561 1 1.0 1 49.0 2 1.0 1)
Average genome size in population (length): 119.697
Average program size in population (points): 120.697
Average percent parens in population: 0.008
Minimum age in population: 270.4624076093513
Maximum age in population: 274.3406468142707
Average age in population: 272.4856063243751
Median age in population: 272.533669030627
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.317
Error (vector) diversity:			 0.407
Behavioral diversity:				 0.407
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 533946050
--- Timings ---
Current time: 1529616768063 milliseconds
Total Time:        1019.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       308.9 seconds, 30.3%
Fitness Testing:    568.5 seconds, 55.8%
Report:             142.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
