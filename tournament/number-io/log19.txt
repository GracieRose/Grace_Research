Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-92.04061967920477 -93] -185.04061967920478]
Train Case:   1 | Input/Output: [[-13.235258641791177 -50] -63.23525864179118]
Train Case:   2 | Input/Output: [[-26.76661874255808 54] 27.23338125744192]
Train Case:   3 | Input/Output: [[-93.3711223177685 -43] -136.37112231776848]
Train Case:   4 | Input/Output: [[-22.612263479291798 93] 70.3877365207082]
Train Case:   5 | Input/Output: [[-6.79986426290229 96] 89.20013573709771]
Train Case:   6 | Input/Output: [[51.760546182980676 96] 147.76054618298068]
Train Case:   7 | Input/Output: [[-40.38758042184148 -97] -137.38758042184148]
Train Case:   8 | Input/Output: [[79.15140331659234 82] 161.15140331659234]
Train Case:   9 | Input/Output: [[-6.959910044221232 -89] -95.95991004422123]
Train Case:  10 | Input/Output: [[-32.30805529903418 -88] -120.30805529903418]
Train Case:  11 | Input/Output: [[-67.08018346268665 -5] -72.08018346268665]
Train Case:  12 | Input/Output: [[-25.712207623484346 -84] -109.71220762348435]
Train Case:  13 | Input/Output: [[75.31387865688131 31] 106.31387865688131]
Train Case:  14 | Input/Output: [[-42.476849871351405 72] 29.523150128648595]
Train Case:  15 | Input/Output: [[37.1026822119878 48] 85.1026822119878]
Train Case:  16 | Input/Output: [[-25.27084787059033 -75] -100.27084787059033]
Train Case:  17 | Input/Output: [[71.08248481594646 -94] -22.917515184053542]
Train Case:  18 | Input/Output: [[-49.482083890475614 -45] -94.48208389047562]
Train Case:  19 | Input/Output: [[69.40468822746067 -81] -11.595311772539333]
Train Case:  20 | Input/Output: [[-89.74533266749918 76] -13.745332667499184]
Train Case:  21 | Input/Output: [[33.67964259212886 -54] -20.320357407871143]
Train Case:  22 | Input/Output: [[66.85292830546308 95] 161.85292830546308]
Train Case:  23 | Input/Output: [[-28.760481711513393 -27] -55.76048171151339]
Train Case:  24 | Input/Output: [[-71.62067028258792 43] -28.620670282587923]
Test Case:   0 | Input/Output: [[65.56233623616626 53] 118.56233623616626]
Test Case:   1 | Input/Output: [[-79.9755487530498 38] -41.97554875304979]
Test Case:   2 | Input/Output: [[38.33703295053658 26] 64.33703295053658]
Test Case:   3 | Input/Output: [[53.68806428866259 12] 65.68806428866259]
Test Case:   4 | Input/Output: [[73.5465641355033 -49] 24.546564135503303]
Test Case:   5 | Input/Output: [[67.58696523897879 21] 88.58696523897879]
Test Case:   6 | Input/Output: [[-17.608362964682755 -15] -32.608362964682755]
Test Case:   7 | Input/Output: [[89.23145685838881 85] 174.2314568583888]
Test Case:   8 | Input/Output: [[-94.45849652652217 -42] -136.45849652652217]
Test Case:   9 | Input/Output: [[-27.95676193523957 -61] -88.95676193523957]
Test Case:  10 | Input/Output: [[16.90888787816492 94] 110.90888787816492]
Test Case:  11 | Input/Output: [[-95.28282109848575 50] -45.282821098485755]
Test Case:  12 | Input/Output: [[85.70495070005265 -16] 69.70495070005265]
Test Case:  13 | Input/Output: [[-47.62970377837825 91] 43.37029622162175]
Test Case:  14 | Input/Output: [[-62.599100559306756 3] -59.599100559306756]
Test Case:  15 | Input/Output: [[56.737590498252445 21] 77.73759049825244]
Test Case:  16 | Input/Output: [[45.224920386065435 25] 70.22492038606543]
Test Case:  17 | Input/Output: [[83.77654109889875 32] 115.77654109889875]
Test Case:  18 | Input/Output: [[18.748668827522593 -23] -4.251331172477407]
Test Case:  19 | Input/Output: [[26.064476910203254 67] 93.06447691020325]
Test Case:  20 | Input/Output: [[-55.219796210915526 -50] -105.21979621091552]
Test Case:  21 | Input/Output: [[-97.50786068522142 -27] -124.50786068522142]
Test Case:  22 | Input/Output: [[-42.220349869982684 23] -19.220349869982684]
Test Case:  23 | Input/Output: [[24.910494109419318 -94] -69.08950589058068]
Test Case:  24 | Input/Output: [[-16.152587457474013 -81] -97.15258745747401]
Test Case:  25 | Input/Output: [[-76.72371834354195 -60] -136.72371834354195]
Test Case:  26 | Input/Output: [[40.881422643199954 -11] 29.881422643199954]
Test Case:  27 | Input/Output: [[54.05672868810285 -66] -11.94327131189715]
Test Case:  28 | Input/Output: [[-75.19586542619427 8] -67.19586542619427]
Test Case:  29 | Input/Output: [[29.271681116041805 -50] -20.728318883958195]
Test Case:  30 | Input/Output: [[60.72513589294445 74] 134.72513589294445]
Test Case:  31 | Input/Output: [[54.527761878866386 66] 120.52776187886639]
Test Case:  32 | Input/Output: [[5.360506365492014 100] 105.36050636549201]
Test Case:  33 | Input/Output: [[-94.32021920858647 68] -26.320219208586465]
Test Case:  34 | Input/Output: [[-39.60632760869407 16] -23.606327608694073]
Test Case:  35 | Input/Output: [[9.211538228337929 58] 67.21153822833793]
Test Case:  36 | Input/Output: [[-80.56123659298378 -24] -104.56123659298378]
Test Case:  37 | Input/Output: [[-15.203059216753772 -3] -18.203059216753772]
Test Case:  38 | Input/Output: [[6.989777498417894 -6] 0.9897774984178938]
Test Case:  39 | Input/Output: [[26.70279447389217 -13] 13.702794473892169]
Test Case:  40 | Input/Output: [[7.787052343702712 74] 81.78705234370271]
Test Case:  41 | Input/Output: [[-5.002582004567643 -53] -58.00258200456764]
Test Case:  42 | Input/Output: [[2.3705634417435846 -53] -50.629436558256415]
Test Case:  43 | Input/Output: [[-12.71040699977523 -89] -101.71040699977523]
Test Case:  44 | Input/Output: [[-30.848929145096378 -79] -109.84892914509638]
Test Case:  45 | Input/Output: [[-26.661729723635958 -75] -101.66172972363596]
Test Case:  46 | Input/Output: [[45.343687366528286 31] 76.34368736652829]
Test Case:  47 | Input/Output: [[-5.7293615560743945 -30] -35.729361556074394]
Test Case:  48 | Input/Output: [[-46.533214743605036 75] 28.466785256394964]
Test Case:  49 | Input/Output: [[73.93928357881904 7] 80.93928357881904]
Test Case:  50 | Input/Output: [[49.00580278895663 -45] 4.005802788956629]
Test Case:  51 | Input/Output: [[-18.1072507174175 -49] -67.1072507174175]
Test Case:  52 | Input/Output: [[52.12974914560945 87] 139.12974914560945]
Test Case:  53 | Input/Output: [[-99.52167266335215 60] -39.52167266335215]
Test Case:  54 | Input/Output: [[-83.63049189698366 78] -5.630491896983656]
Test Case:  55 | Input/Output: [[41.93959326350034 62] 103.93959326350034]
Test Case:  56 | Input/Output: [[-40.54858402032484 -46] -86.54858402032484]
Test Case:  57 | Input/Output: [[11.243303208944866 -70] -58.756696791055134]
Test Case:  58 | Input/Output: [[-31.79727402938677 81] 49.20272597061323]
Test Case:  59 | Input/Output: [[-86.2532446629722 57] -29.253244662972193]
Test Case:  60 | Input/Output: [[15.732794338003359 -99] -83.26720566199664]
Test Case:  61 | Input/Output: [[-95.3243842735525 81] -14.324384273552496]
Test Case:  62 | Input/Output: [[-50.436866184225735 64] 13.563133815774265]
Test Case:  63 | Input/Output: [[50.35963430823611 -57] -6.64036569176389]
Test Case:  64 | Input/Output: [[36.86786302163878 -10] 26.867863021638783]
Test Case:  65 | Input/Output: [[-33.32590275834497 -2] -35.32590275834497]
Test Case:  66 | Input/Output: [[-74.7214800221004 14] -60.721480022100394]
Test Case:  67 | Input/Output: [[-52.925248865644534 -49] -101.92524886564453]
Test Case:  68 | Input/Output: [[-90.58648660730739 -21] -111.58648660730739]
Test Case:  69 | Input/Output: [[-68.03379019431702 -26] -94.03379019431702]
Test Case:  70 | Input/Output: [[-75.4905071994626 32] -43.4905071994626]
Test Case:  71 | Input/Output: [[51.42001219394692 -52] -0.579987806053083]
Test Case:  72 | Input/Output: [[98.7302169485838 98] 196.7302169485838]
Test Case:  73 | Input/Output: [[85.24066493888756 -73] 12.240664938887562]
Test Case:  74 | Input/Output: [[64.3466908197467 49] 113.3466908197467]
Test Case:  75 | Input/Output: [[65.00274600069335 -93] -27.99725399930665]
Test Case:  76 | Input/Output: [[92.59555960642055 41] 133.59555960642055]
Test Case:  77 | Input/Output: [[4.329976530003222 -2] 2.329976530003222]
Test Case:  78 | Input/Output: [[96.06980658467648 -5] 91.06980658467648]
Test Case:  79 | Input/Output: [[-65.79458083065548 69] 3.2054191693445233]
Test Case:  80 | Input/Output: [[13.592679736771956 17] 30.592679736771956]
Test Case:  81 | Input/Output: [[-54.40942152900916 -99] -153.40942152900917]
Test Case:  82 | Input/Output: [[-41.85963487659543 -69] -110.85963487659544]
Test Case:  83 | Input/Output: [[16.556898624371968 -72] -55.44310137562803]
Test Case:  84 | Input/Output: [[-35.65659473075647 -13] -48.65659473075647]
Test Case:  85 | Input/Output: [[41.21508539254606 -12] 29.215085392546058]
Test Case:  86 | Input/Output: [[-54.76611577827668 -38] -92.76611577827668]
Test Case:  87 | Input/Output: [[-7.049908304337649 54] 46.95009169566235]
Test Case:  88 | Input/Output: [[34.79908103675339 98] 132.7990810367534]
Test Case:  89 | Input/Output: [[68.56601796539852 12] 80.56601796539852]
Test Case:  90 | Input/Output: [[-2.118989989769247 28] 25.881010010230753]
Test Case:  91 | Input/Output: [[-29.278726435896445 3] -26.278726435896445]
Test Case:  92 | Input/Output: [[62.00766886487423 -89] -26.992331135125767]
Test Case:  93 | Input/Output: [[12.576825506837253 34] 46.57682550683725]
Test Case:  94 | Input/Output: [[8.57561638053545 5] 13.57561638053545]
Test Case:  95 | Input/Output: [[50.42743957688572 95] 145.42743957688572]
Test Case:  96 | Input/Output: [[47.4577037641244 -27] 20.457703764124403]
Test Case:  97 | Input/Output: [[26.788731023000878 -37] -10.211268976999122]
Test Case:  98 | Input/Output: [[-72.40762548674073 -4] -76.40762548674073]
Test Case:  99 | Input/Output: [[-14.466164601021859 -23] -37.46616460102186]
Test Case: 100 | Input/Output: [[16.05081956463492 71] 87.05081956463492]
Test Case: 101 | Input/Output: [[76.19988736178897 29] 105.19988736178897]
Test Case: 102 | Input/Output: [[1.7398508736461906 43] 44.73985087364619]
Test Case: 103 | Input/Output: [[-44.5173924235374 -5] -49.5173924235374]
Test Case: 104 | Input/Output: [[87.4500397646103 69] 156.4500397646103]
Test Case: 105 | Input/Output: [[-34.430529741534514 -32] -66.43052974153451]
Test Case: 106 | Input/Output: [[-87.14097954729598 -86] -173.14097954729598]
Test Case: 107 | Input/Output: [[35.103640109063235 85] 120.10364010906324]
Test Case: 108 | Input/Output: [[86.64568137239019 36] 122.64568137239019]
Test Case: 109 | Input/Output: [[-39.3422410348524 84] 44.6577589651476]
Test Case: 110 | Input/Output: [[-94.51711939030464 -59] -153.51711939030463]
Test Case: 111 | Input/Output: [[83.39786180781331 -75] 8.397861807813314]
Test Case: 112 | Input/Output: [[73.90415799703894 -50] 23.904157997038936]
Test Case: 113 | Input/Output: [[75.77557020913562 -35] 40.77557020913562]
Test Case: 114 | Input/Output: [[-93.27827164855664 8] -85.27827164855664]
Test Case: 115 | Input/Output: [[-26.21013709467013 47] 20.78986290532987]
Test Case: 116 | Input/Output: [[-78.62778680532567 52] -26.62778680532567]
Test Case: 117 | Input/Output: [[17.925741564022275 94] 111.92574156402227]
Test Case: 118 | Input/Output: [[25.38585019787662 -47] -21.61414980212338]
Test Case: 119 | Input/Output: [[-73.55661556522344 65] -8.556615565223439]
Test Case: 120 | Input/Output: [[-51.30924210584207 56] 4.690757894157933]
Test Case: 121 | Input/Output: [[21.82343523218087 65] 86.82343523218087]
Test Case: 122 | Input/Output: [[-43.77663723205647 35] -8.776637232056473]
Test Case: 123 | Input/Output: [[-97.51789626191945 31] -66.51789626191945]
Test Case: 124 | Input/Output: [[-2.4518746340647795 -13] -15.45187463406478]
Test Case: 125 | Input/Output: [[90.00506269453473 39] 129.00506269453473]
Test Case: 126 | Input/Output: [[60.42191110774823 -24] 36.42191110774823]
Test Case: 127 | Input/Output: [[-68.29138543863434 -33] -101.29138543863434]
Test Case: 128 | Input/Output: [[-5.2972124332245585 -97] -102.29721243322456]
Test Case: 129 | Input/Output: [[51.10870221488693 -24] 27.108702214886932]
Test Case: 130 | Input/Output: [[8.701420515858828 -35] -26.29857948414117]
Test Case: 131 | Input/Output: [[91.28985957186327 74] 165.28985957186327]
Test Case: 132 | Input/Output: [[55.43137574816316 -50] 5.431375748163163]
Test Case: 133 | Input/Output: [[43.17080186650145 16] 59.17080186650145]
Test Case: 134 | Input/Output: [[24.685303892385278 54] 78.68530389238528]
Test Case: 135 | Input/Output: [[-2.246470786387974 -17] -19.246470786387974]
Test Case: 136 | Input/Output: [[38.121384425168344 43] 81.12138442516834]
Test Case: 137 | Input/Output: [[13.003760283851747 40] 53.00376028385175]
Test Case: 138 | Input/Output: [[93.44286167940643 47] 140.44286167940643]
Test Case: 139 | Input/Output: [[-69.86884717305348 -84] -153.8688471730535]
Test Case: 140 | Input/Output: [[71.79448138684879 94] 165.7944813868488]
Test Case: 141 | Input/Output: [[32.23676239698432 59] 91.23676239698432]
Test Case: 142 | Input/Output: [[44.213378269525634 66] 110.21337826952563]
Test Case: 143 | Input/Output: [[-80.69830087431797 83] 2.3016991256820347]
Test Case: 144 | Input/Output: [[-67.1228123256895 4] -63.122812325689495]
Test Case: 145 | Input/Output: [[-73.68108677857164 -88] -161.68108677857163]
Test Case: 146 | Input/Output: [[41.16566747000931 33] 74.16566747000931]
Test Case: 147 | Input/Output: [[97.8534125635174 -35] 62.853412563517395]
Test Case: 148 | Input/Output: [[98.9181133763293 46] 144.9181133763293]
Test Case: 149 | Input/Output: [[-93.58972201436495 -75] -168.58972201436495]
Test Case: 150 | Input/Output: [[82.56714374569427 97] 179.56714374569427]
Test Case: 151 | Input/Output: [[50.3291146568165 -5] 45.3291146568165]
Test Case: 152 | Input/Output: [[90.60480888467316 79] 169.60480888467316]
Test Case: 153 | Input/Output: [[-30.487193259493026 38] 7.512806740506974]
Test Case: 154 | Input/Output: [[-89.46616053930649 87] -2.466160539306486]
Test Case: 155 | Input/Output: [[49.55540364412835 81] 130.55540364412835]
Test Case: 156 | Input/Output: [[-98.43408301323389 -33] -131.43408301323387]
Test Case: 157 | Input/Output: [[-92.12019826197628 -3] -95.12019826197628]
Test Case: 158 | Input/Output: [[-66.25005520360128 19] -47.25005520360128]
Test Case: 159 | Input/Output: [[-18.220318712864696 26] 7.779681287135304]
Test Case: 160 | Input/Output: [[84.1355178414621 -5] 79.1355178414621]
Test Case: 161 | Input/Output: [[-4.065248880736448 -66] -70.06524888073645]
Test Case: 162 | Input/Output: [[94.44746535721873 -28] 66.44746535721873]
Test Case: 163 | Input/Output: [[-90.17625294550945 -64] -154.17625294550945]
Test Case: 164 | Input/Output: [[-71.15217324801844 -1] -72.15217324801844]
Test Case: 165 | Input/Output: [[-87.40989669911757 39] -48.40989669911757]
Test Case: 166 | Input/Output: [[-27.18163497222625 55] 27.81836502777375]
Test Case: 167 | Input/Output: [[-86.8191641218143 94] 7.180835878185704]
Test Case: 168 | Input/Output: [[-62.376292222151754 -34] -96.37629222215176]
Test Case: 169 | Input/Output: [[68.00642771374751 22] 90.00642771374751]
Test Case: 170 | Input/Output: [[-65.33809178000065 -69] -134.33809178000064]
Test Case: 171 | Input/Output: [[57.020435011012694 -27] 30.020435011012694]
Test Case: 172 | Input/Output: [[54.436227858170156 -38] 16.436227858170156]
Test Case: 173 | Input/Output: [[90.23431500545684 95] 185.23431500545684]
Test Case: 174 | Input/Output: [[32.7752147924964 70] 102.7752147924964]
Test Case: 175 | Input/Output: [[-83.7446657042099 -6] -89.7446657042099]
Test Case: 176 | Input/Output: [[7.237691070352355 -29] -21.762308929647645]
Test Case: 177 | Input/Output: [[7.104907233437018 -15] -7.895092766562982]
Test Case: 178 | Input/Output: [[-0.4211871702775909 -99] -99.42118717027759]
Test Case: 179 | Input/Output: [[87.5904681431499 -7] 80.5904681431499]
Test Case: 180 | Input/Output: [[-32.60885543147312 0] -32.60885543147312]
Test Case: 181 | Input/Output: [[-49.74039289829677 -93] -142.74039289829676]
Test Case: 182 | Input/Output: [[-84.30184354460314 -47] -131.30184354460314]
Test Case: 183 | Input/Output: [[76.51675315213134 5] 81.51675315213134]
Test Case: 184 | Input/Output: [[4.24733722311457 45] 49.24733722311457]
Test Case: 185 | Input/Output: [[-91.74605528104607 -89] -180.74605528104607]
Test Case: 186 | Input/Output: [[39.561609731178294 -85] -45.438390268821706]
Test Case: 187 | Input/Output: [[44.38985356083006 9] 53.38985356083006]
Test Case: 188 | Input/Output: [[68.98182611432131 9] 77.98182611432131]
Test Case: 189 | Input/Output: [[11.442687966177118 9] 20.442687966177118]
Test Case: 190 | Input/Output: [[-27.88745328100603 23] -4.887453281006032]
Test Case: 191 | Input/Output: [[-6.8852391769839585 54] 47.11476082301604]
Test Case: 192 | Input/Output: [[-52.95994901487664 56] 3.040050985123358]
Test Case: 193 | Input/Output: [[-15.300772022997577 -52] -67.30077202299758]
Test Case: 194 | Input/Output: [[-4.308619688669339 26] 21.69138031133066]
Test Case: 195 | Input/Output: [[-16.012641973202292 -56] -72.01264197320229]
Test Case: 196 | Input/Output: [[-57.02628815443449 7] -50.02628815443449]
Test Case: 197 | Input/Output: [[99.08027842668977 37] 136.08027842668977]
Test Case: 198 | Input/Output: [[92.91206181578241 21] 113.91206181578241]
Test Case: 199 | Input/Output: [[86.65907630448896 1] 87.65907630448896]
Test Case: 200 | Input/Output: [[-50.01476395955622 66] 15.98523604044378]
Test Case: 201 | Input/Output: [[-91.6062033244595 98] 6.3937966755405]
Test Case: 202 | Input/Output: [[-72.51020290734527 82] 9.489797092654726]
Test Case: 203 | Input/Output: [[17.853219343981408 -24] -6.146780656018592]
Test Case: 204 | Input/Output: [[-36.97341012903039 -6] -42.97341012903039]
Test Case: 205 | Input/Output: [[-57.600324828277216 57] -0.6003248282772162]
Test Case: 206 | Input/Output: [[-27.574296821084317 50] 22.425703178915683]
Test Case: 207 | Input/Output: [[-69.80658122874135 28] -41.80658122874135]
Test Case: 208 | Input/Output: [[75.13833972036653 -65] 10.138339720366531]
Test Case: 209 | Input/Output: [[15.647304534496143 92] 107.64730453449614]
Test Case: 210 | Input/Output: [[-95.01658997121174 40] -55.016589971211744]
Test Case: 211 | Input/Output: [[-36.3804293170483 -92] -128.3804293170483]
Test Case: 212 | Input/Output: [[82.11901294977281 16] 98.11901294977281]
Test Case: 213 | Input/Output: [[22.622042240572114 -59] -36.377957759427886]
Test Case: 214 | Input/Output: [[-17.50183179553271 -19] -36.50183179553271]
Test Case: 215 | Input/Output: [[-64.7484369675121 -79] -143.7484369675121]
Test Case: 216 | Input/Output: [[-99.13976450846327 -90] -189.13976450846326]
Test Case: 217 | Input/Output: [[20.775178633554447 30] 50.77517863355445]
Test Case: 218 | Input/Output: [[18.74296059370195 33] 51.74296059370195]
Test Case: 219 | Input/Output: [[-67.22095819439497 -51] -118.22095819439497]
Test Case: 220 | Input/Output: [[-5.609609164332866 7] 1.3903908356671337]
Test Case: 221 | Input/Output: [[72.24120409243139 -53] 19.24120409243139]
Test Case: 222 | Input/Output: [[99.07216159038086 -61] 38.07216159038086]
Test Case: 223 | Input/Output: [[92.8833195330482 -17] 75.8833195330482]
Test Case: 224 | Input/Output: [[-85.60203475143993 -68] -153.60203475143993]
Test Case: 225 | Input/Output: [[-36.165375103706786 -8] -44.165375103706786]
Test Case: 226 | Input/Output: [[-51.85345450515153 -16] -67.85345450515153]
Test Case: 227 | Input/Output: [[86.8215022568196 -8] 78.8215022568196]
Test Case: 228 | Input/Output: [[41.80768120186002 -70] -28.19231879813998]
Test Case: 229 | Input/Output: [[68.12487143868898 -27] 41.124871438688984]
Test Case: 230 | Input/Output: [[46.58728544015875 7] 53.58728544015875]
Test Case: 231 | Input/Output: [[-10.733046275282646 -15] -25.733046275282646]
Test Case: 232 | Input/Output: [[-67.6875299313156 -78] -145.6875299313156]
Test Case: 233 | Input/Output: [[30.93892581555673 57] 87.93892581555673]
Test Case: 234 | Input/Output: [[14.485050767820738 8] 22.485050767820738]
Test Case: 235 | Input/Output: [[-75.85742918714729 21] -54.85742918714729]
Test Case: 236 | Input/Output: [[-25.121325421387013 -8] -33.12132542138701]
Test Case: 237 | Input/Output: [[-71.50760549341983 -1] -72.50760549341983]
Test Case: 238 | Input/Output: [[-58.34023981031733 16] -42.34023981031733]
Test Case: 239 | Input/Output: [[-74.63847938611912 -25] -99.63847938611912]
Test Case: 240 | Input/Output: [[76.19869681784644 98] 174.19869681784644]
Test Case: 241 | Input/Output: [[-59.186810244623885 50] -9.186810244623885]
Test Case: 242 | Input/Output: [[14.68411254288793 -85] -70.31588745711207]
Test Case: 243 | Input/Output: [[-3.2151887776514343 23] 19.784811222348566]
Test Case: 244 | Input/Output: [[-1.6011461195070353 64] 62.398853880492965]
Test Case: 245 | Input/Output: [[29.37566146453176 48] 77.37566146453176]
Test Case: 246 | Input/Output: [[-95.83816247416934 -11] -106.83816247416934]
Test Case: 247 | Input/Output: [[-33.95531021711966 -53] -86.95531021711966]
Test Case: 248 | Input/Output: [[-91.30717503105849 37] -54.30717503105849]
Test Case: 249 | Input/Output: [[-61.91282546663144 -98] -159.91282546663143]
Test Case: 250 | Input/Output: [[-17.82550773835321 4] -13.82550773835321]
Test Case: 251 | Input/Output: [[-77.78020607833619 -19] -96.78020607833619]
Test Case: 252 | Input/Output: [[-39.03196304447734 100] 60.96803695552266]
Test Case: 253 | Input/Output: [[-52.218153019468836 75] 22.781846980531164]
Test Case: 254 | Input/Output: [[-22.30819162091204 39] 16.69180837908796]
Test Case: 255 | Input/Output: [[58.84497908010863 -95] -36.15502091989137]
Test Case: 256 | Input/Output: [[-32.39851011215006 2] -30.398510112150063]
Test Case: 257 | Input/Output: [[-1.8392980672706187 -87] -88.83929806727062]
Test Case: 258 | Input/Output: [[0.41697109321034986 -67] -66.58302890678965]
Test Case: 259 | Input/Output: [[54.49319845970763 59] 113.49319845970763]
Test Case: 260 | Input/Output: [[13.297035885283577 -60] -46.70296411471642]
Test Case: 261 | Input/Output: [[82.00693187396914 81] 163.00693187396914]
Test Case: 262 | Input/Output: [[-37.943934888843536 -41] -78.94393488884353]
Test Case: 263 | Input/Output: [[-86.42964481248245 -77] -163.42964481248245]
Test Case: 264 | Input/Output: [[-59.475570744870595 100] 40.524429255129405]
Test Case: 265 | Input/Output: [[75.41678111439055 -86] -10.583218885609455]
Test Case: 266 | Input/Output: [[11.407064335877834 -92] -80.59293566412217]
Test Case: 267 | Input/Output: [[92.80802429610938 11] 103.80802429610938]
Test Case: 268 | Input/Output: [[-40.91898791123712 -78] -118.91898791123711]
Test Case: 269 | Input/Output: [[-43.03312594456419 50] 6.9668740554358095]
Test Case: 270 | Input/Output: [[33.691132700617715 -29] 4.691132700617715]
Test Case: 271 | Input/Output: [[39.14195932393909 9] 48.14195932393909]
Test Case: 272 | Input/Output: [[-22.704755735939486 -7] -29.704755735939486]
Test Case: 273 | Input/Output: [[-2.7435258947778607 40] 37.25647410522214]
Test Case: 274 | Input/Output: [[-8.104184312109084 -89] -97.10418431210908]
Test Case: 275 | Input/Output: [[85.94872613465904 -2] 83.94872613465904]
Test Case: 276 | Input/Output: [[43.243447661706256 -46] -2.7565523382937442]
Test Case: 277 | Input/Output: [[-83.41168560035382 42] -41.41168560035382]
Test Case: 278 | Input/Output: [[61.06496155553654 -94] -32.93503844446346]
Test Case: 279 | Input/Output: [[-38.73423821304458 -99] -137.7342382130446]
Test Case: 280 | Input/Output: [[45.57201994909471 3] 48.57201994909471]
Test Case: 281 | Input/Output: [[-63.158345519493 -87] -150.158345519493]
Test Case: 282 | Input/Output: [[-79.49388274615433 57] -22.493882746154327]
Test Case: 283 | Input/Output: [[66.8753378890309 65] 131.8753378890309]
Test Case: 284 | Input/Output: [[20.917815641338237 67] 87.91781564133824]
Test Case: 285 | Input/Output: [[86.08821145679465 94] 180.08821145679465]
Test Case: 286 | Input/Output: [[-14.438629796694784 -51] -65.43862979669478]
Test Case: 287 | Input/Output: [[26.076550373637787 -8] 18.076550373637787]
Test Case: 288 | Input/Output: [[21.802200222948215 -9] 12.802200222948215]
Test Case: 289 | Input/Output: [[-78.31040773163932 40] -38.310407731639316]
Test Case: 290 | Input/Output: [[-51.658830208270686 10] -41.658830208270686]
Test Case: 291 | Input/Output: [[78.33467653972559 -41] 37.33467653972559]
Test Case: 292 | Input/Output: [[-33.972193616366894 -100] -133.9721936163669]
Test Case: 293 | Input/Output: [[60.87701802336389 -73] -12.122981976636112]
Test Case: 294 | Input/Output: [[81.39651727211395 8] 89.39651727211395]
Test Case: 295 | Input/Output: [[-45.280692668261516 -55] -100.28069266826151]
Test Case: 296 | Input/Output: [[-12.853219486177196 3] -9.853219486177196]
Test Case: 297 | Input/Output: [[94.08317487020423 -39] 55.08317487020423]
Test Case: 298 | Input/Output: [[88.25994557955144 -54] 34.25994557955144]
Test Case: 299 | Input/Output: [[-12.636794791485457 -72] -84.63679479148546]
Test Case: 300 | Input/Output: [[-73.34090754793476 -28] -101.34090754793476]
Test Case: 301 | Input/Output: [[-65.48286021221745 77] 11.517139787782554]
Test Case: 302 | Input/Output: [[-57.276979659230506 -8] -65.2769796592305]
Test Case: 303 | Input/Output: [[-58.20979337735284 -13] -71.20979337735284]
Test Case: 304 | Input/Output: [[-82.21446787283644 -46] -128.21446787283645]
Test Case: 305 | Input/Output: [[56.32310481632422 -31] 25.323104816324218]
Test Case: 306 | Input/Output: [[-60.96498653511371 -5] -65.96498653511371]
Test Case: 307 | Input/Output: [[-37.79167710140969 21] -16.79167710140969]
Test Case: 308 | Input/Output: [[-61.26067130096724 -48] -109.26067130096723]
Test Case: 309 | Input/Output: [[-13.542107406243858 8] -5.542107406243858]
Test Case: 310 | Input/Output: [[-50.05633183518938 16] -34.05633183518938]
Test Case: 311 | Input/Output: [[73.78507963235467 -20] 53.785079632354666]
Test Case: 312 | Input/Output: [[41.92038332675486 57] 98.92038332675486]
Test Case: 313 | Input/Output: [[-40.12376394978043 55] 14.876236050219568]
Test Case: 314 | Input/Output: [[-7.172452835917966 -19] -26.172452835917966]
Test Case: 315 | Input/Output: [[-64.49724646661855 -78] -142.49724646661855]
Test Case: 316 | Input/Output: [[73.32114221514595 23] 96.32114221514595]
Test Case: 317 | Input/Output: [[-93.03880504911439 -67] -160.0388050491144]
Test Case: 318 | Input/Output: [[-7.0675765423321195 75] 67.93242345766788]
Test Case: 319 | Input/Output: [[45.10832336283963 25] 70.10832336283963]
Test Case: 320 | Input/Output: [[77.94877122837613 -28] 49.94877122837613]
Test Case: 321 | Input/Output: [[6.555043630754099 84] 90.5550436307541]
Test Case: 322 | Input/Output: [[8.986694536999693 15] 23.986694536999693]
Test Case: 323 | Input/Output: [[9.66787414163521 36] 45.66787414163521]
Test Case: 324 | Input/Output: [[-32.83260308097499 74] 41.16739691902501]
Test Case: 325 | Input/Output: [[58.267431561771986 34] 92.26743156177199]
Test Case: 326 | Input/Output: [[57.158258463927865 90] 147.15825846392787]
Test Case: 327 | Input/Output: [[-68.02195438486433 -29] -97.02195438486433]
Test Case: 328 | Input/Output: [[-58.077821448652834 -62] -120.07782144865283]
Test Case: 329 | Input/Output: [[-52.67778078190197 -30] -82.67778078190197]
Test Case: 330 | Input/Output: [[-87.70069260923586 68] -19.70069260923586]
Test Case: 331 | Input/Output: [[-74.14842912958319 71] -3.1484291295831923]
Test Case: 332 | Input/Output: [[-15.071767478047349 22] 6.928232521952651]
Test Case: 333 | Input/Output: [[38.42787236357276 62] 100.42787236357276]
Test Case: 334 | Input/Output: [[-7.055950268496616 -31] -38.055950268496616]
Test Case: 335 | Input/Output: [[10.689459531928122 91] 101.68945953192812]
Test Case: 336 | Input/Output: [[-46.863683933076985 88] 41.136316066923015]
Test Case: 337 | Input/Output: [[-31.98842253958172 -9] -40.98842253958172]
Test Case: 338 | Input/Output: [[-90.98461024800608 43] -47.98461024800608]
Test Case: 339 | Input/Output: [[82.66046438937914 -47] 35.66046438937914]
Test Case: 340 | Input/Output: [[-91.83638994133032 -16] -107.83638994133032]
Test Case: 341 | Input/Output: [[-18.236312809354985 -98] -116.23631280935498]
Test Case: 342 | Input/Output: [[3.8756540765517684 13] 16.87565407655177]
Test Case: 343 | Input/Output: [[13.77834821915826 36] 49.77834821915826]
Test Case: 344 | Input/Output: [[73.31741610268315 6] 79.31741610268315]
Test Case: 345 | Input/Output: [[-94.91185842727981 -86] -180.9118584272798]
Test Case: 346 | Input/Output: [[-3.09279643382294 -47] -50.09279643382294]
Test Case: 347 | Input/Output: [[17.703437975055863 -71] -53.29656202494414]
Test Case: 348 | Input/Output: [[-22.011080682476702 82] 59.9889193175233]
Test Case: 349 | Input/Output: [[55.88545846928213 81] 136.88545846928213]
Test Case: 350 | Input/Output: [[-86.90689475491686 -53] -139.90689475491686]
Test Case: 351 | Input/Output: [[3.411479587500949 15] 18.41147958750095]
Test Case: 352 | Input/Output: [[47.427730473603106 -96] -48.572269526396894]
Test Case: 353 | Input/Output: [[12.054816543317145 3] 15.054816543317145]
Test Case: 354 | Input/Output: [[-42.42959328966025 -46] -88.42959328966025]
Test Case: 355 | Input/Output: [[-19.968803943778 -95] -114.968803943778]
Test Case: 356 | Input/Output: [[14.16453908700015 -63] -48.83546091299985]
Test Case: 357 | Input/Output: [[-65.91071944934612 5] -60.91071944934612]
Test Case: 358 | Input/Output: [[-33.38688980325712 -49] -82.38688980325712]
Test Case: 359 | Input/Output: [[-46.78448073739159 28] -18.78448073739159]
Test Case: 360 | Input/Output: [[86.18433528772354 -100] -13.815664712276458]
Test Case: 361 | Input/Output: [[52.18876526617575 1] 53.18876526617575]
Test Case: 362 | Input/Output: [[-43.25938131797851 -61] -104.25938131797851]
Test Case: 363 | Input/Output: [[-82.60274236527192 1] -81.60274236527192]
Test Case: 364 | Input/Output: [[41.60725629659788 -85] -43.39274370340212]
Test Case: 365 | Input/Output: [[9.474606539754006 62] 71.474606539754]
Test Case: 366 | Input/Output: [[4.877691801161092 -52] -47.12230819883891]
Test Case: 367 | Input/Output: [[-1.9597243542609561 -49] -50.959724354260956]
Test Case: 368 | Input/Output: [[-12.835502190521055 70] 57.164497809478945]
Test Case: 369 | Input/Output: [[76.38295466890756 -20] 56.38295466890756]
Test Case: 370 | Input/Output: [[5.793291468766284 -53] -47.206708531233716]
Test Case: 371 | Input/Output: [[52.80192649788876 22] 74.80192649788876]
Test Case: 372 | Input/Output: [[-38.73645863305515 43] 4.26354136694485]
Test Case: 373 | Input/Output: [[1.7306284078846659 -39] -37.269371592115334]
Test Case: 374 | Input/Output: [[-62.757130865444125 -45] -107.75713086544413]
Test Case: 375 | Input/Output: [[92.92011582738903 98] 190.92011582738903]
Test Case: 376 | Input/Output: [[48.30155636983807 -9] 39.30155636983807]
Test Case: 377 | Input/Output: [[78.89905908009385 99] 177.89905908009385]
Test Case: 378 | Input/Output: [[21.45698567407672 -84] -62.54301432592328]
Test Case: 379 | Input/Output: [[-37.02914178841308 -1] -38.02914178841308]
Test Case: 380 | Input/Output: [[-96.84337133377885 -48] -144.84337133377886]
Test Case: 381 | Input/Output: [[-25.509916869857193 -69] -94.5099168698572]
Test Case: 382 | Input/Output: [[-53.63159489929845 93] 39.36840510070155]
Test Case: 383 | Input/Output: [[-99.23398588780836 44] -55.23398588780836]
Test Case: 384 | Input/Output: [[13.492101189187082 -63] -49.50789881081292]
Test Case: 385 | Input/Output: [[63.91402326305021 -40] 23.91402326305021]
Test Case: 386 | Input/Output: [[82.27684268171208 -50] 32.27684268171208]
Test Case: 387 | Input/Output: [[-62.8263920799027 94] 31.173607920097297]
Test Case: 388 | Input/Output: [[38.79589900351107 42] 80.79589900351107]
Test Case: 389 | Input/Output: [[-23.93098084376109 -32] -55.93098084376109]
Test Case: 390 | Input/Output: [[-77.36391502065723 -18] -95.36391502065723]
Test Case: 391 | Input/Output: [[40.68984435219281 99] 139.6898443521928]
Test Case: 392 | Input/Output: [[-73.53237481253767 38] -35.53237481253767]
Test Case: 393 | Input/Output: [[-29.41915967780892 69] 39.58084032219108]
Test Case: 394 | Input/Output: [[65.94981602945401 86] 151.949816029454]
Test Case: 395 | Input/Output: [[-83.36473336202593 -53] -136.36473336202593]
Test Case: 396 | Input/Output: [[8.18090427048486 14] 22.18090427048486]
Test Case: 397 | Input/Output: [[-59.31664107388854 81] 21.68335892611146]
Test Case: 398 | Input/Output: [[-68.40055505483383 -42] -110.40055505483383]
Test Case: 399 | Input/Output: [[-38.00071674747099 81] 42.99928325252901]
Test Case: 400 | Input/Output: [[67.38622536932922 0] 67.38622536932922]
Test Case: 401 | Input/Output: [[-79.15775428864795 -86] -165.15775428864794]
Test Case: 402 | Input/Output: [[70.41920539257157 -67] 3.4192053925715697]
Test Case: 403 | Input/Output: [[-64.68704136445626 -29] -93.68704136445626]
Test Case: 404 | Input/Output: [[59.38553664541885 78] 137.38553664541885]
Test Case: 405 | Input/Output: [[85.45313374833631 -11] 74.45313374833631]
Test Case: 406 | Input/Output: [[-88.1953389393814 12] -76.1953389393814]
Test Case: 407 | Input/Output: [[14.026524578015028 -99] -84.97347542198497]
Test Case: 408 | Input/Output: [[91.90283368769036 -68] 23.90283368769036]
Test Case: 409 | Input/Output: [[49.515374477767494 -6] 43.515374477767494]
Test Case: 410 | Input/Output: [[-73.46603150806723 -66] -139.46603150806723]
Test Case: 411 | Input/Output: [[32.9725175968467 72] 104.9725175968467]
Test Case: 412 | Input/Output: [[-87.57029480484182 64] -23.570294804841822]
Test Case: 413 | Input/Output: [[-88.65614057407167 74] -14.65614057407167]
Test Case: 414 | Input/Output: [[84.4450904072676 -76] 8.4450904072676]
Test Case: 415 | Input/Output: [[23.524755700055962 -62] -38.47524429994404]
Test Case: 416 | Input/Output: [[32.34204711664407 -20] 12.342047116644068]
Test Case: 417 | Input/Output: [[59.986667946203994 -54] 5.986667946203994]
Test Case: 418 | Input/Output: [[27.929920330772646 6] 33.929920330772646]
Test Case: 419 | Input/Output: [[90.71681022242461 -24] 66.71681022242461]
Test Case: 420 | Input/Output: [[-72.38527422175325 1] -71.38527422175325]
Test Case: 421 | Input/Output: [[-82.45035800512235 4] -78.45035800512235]
Test Case: 422 | Input/Output: [[2.6310944345486575 -9] -6.3689055654513425]
Test Case: 423 | Input/Output: [[-22.75502342403341 14] -8.75502342403341]
Test Case: 424 | Input/Output: [[41.52899513122165 -57] -15.471004868778351]
Test Case: 425 | Input/Output: [[23.793749122479937 5] 28.793749122479937]
Test Case: 426 | Input/Output: [[-56.66234759386275 -68] -124.66234759386275]
Test Case: 427 | Input/Output: [[-35.7092578127272 -31] -66.7092578127272]
Test Case: 428 | Input/Output: [[-78.81623639192831 90] 11.183763608071686]
Test Case: 429 | Input/Output: [[66.58892934358875 59] 125.58892934358875]
Test Case: 430 | Input/Output: [[73.98728243576522 -77] -3.0127175642347765]
Test Case: 431 | Input/Output: [[65.7588817962606 76] 141.7588817962606]
Test Case: 432 | Input/Output: [[69.94016942050072 92] 161.94016942050072]
Test Case: 433 | Input/Output: [[28.110222361934376 -90] -61.889777638065624]
Test Case: 434 | Input/Output: [[99.35031589851536 81] 180.35031589851536]
Test Case: 435 | Input/Output: [[32.67187714220225 -42] -9.328122857797752]
Test Case: 436 | Input/Output: [[71.75633290309489 -80] -8.243667096905114]
Test Case: 437 | Input/Output: [[5.271490976342037 80] 85.27149097634204]
Test Case: 438 | Input/Output: [[-61.021920044421464 7] -54.021920044421464]
Test Case: 439 | Input/Output: [[74.3998439998239 -84] -9.6001560001761]
Test Case: 440 | Input/Output: [[19.773417201817068 -77] -57.22658279818293]
Test Case: 441 | Input/Output: [[-9.10086060916609 70] 60.89913939083391]
Test Case: 442 | Input/Output: [[-9.344369396016845 -39] -48.344369396016845]
Test Case: 443 | Input/Output: [[-71.26154395462245 29] -42.261543954622454]
Test Case: 444 | Input/Output: [[-4.871543948653965 46] 41.128456051346035]
Test Case: 445 | Input/Output: [[64.64863717772954 83] 147.64863717772954]
Test Case: 446 | Input/Output: [[85.1825722911062 -97] -11.817427708893803]
Test Case: 447 | Input/Output: [[53.391433943393594 -90] -36.608566056606406]
Test Case: 448 | Input/Output: [[50.148237511965704 49] 99.1482375119657]
Test Case: 449 | Input/Output: [[48.4510885494027 19] 67.4510885494027]
Test Case: 450 | Input/Output: [[58.47479806768192 -25] 33.47479806768192]
Test Case: 451 | Input/Output: [[90.43908883554639 -84] 6.439088835546386]
Test Case: 452 | Input/Output: [[-99.95728505844248 67] -32.95728505844248]
Test Case: 453 | Input/Output: [[-47.90390574449732 1] -46.90390574449732]
Test Case: 454 | Input/Output: [[21.05084482894661 96] 117.05084482894661]
Test Case: 455 | Input/Output: [[17.629056617872436 -37] -19.370943382127564]
Test Case: 456 | Input/Output: [[24.838959799412223 41] 65.83895979941222]
Test Case: 457 | Input/Output: [[-14.236358217003882 -89] -103.23635821700388]
Test Case: 458 | Input/Output: [[92.03328904130646 -47] 45.03328904130646]
Test Case: 459 | Input/Output: [[44.049902367119074 7] 51.049902367119074]
Test Case: 460 | Input/Output: [[-24.445205652136593 32] 7.554794347863407]
Test Case: 461 | Input/Output: [[-95.47018065738406 -50] -145.47018065738405]
Test Case: 462 | Input/Output: [[-6.520384605148337 78] 71.47961539485166]
Test Case: 463 | Input/Output: [[39.92575362160599 43] 82.92575362160599]
Test Case: 464 | Input/Output: [[-47.832178334626605 -90] -137.8321783346266]
Test Case: 465 | Input/Output: [[-83.14741732844249 -40] -123.14741732844249]
Test Case: 466 | Input/Output: [[-17.871482367455144 -98] -115.87148236745514]
Test Case: 467 | Input/Output: [[-4.627799648844302 -77] -81.6277996488443]
Test Case: 468 | Input/Output: [[-6.067692181377723 7] 0.9323078186222773]
Test Case: 469 | Input/Output: [[47.26685819974949 -31] 16.266858199749493]
Test Case: 470 | Input/Output: [[86.03250266532558 2] 88.03250266532558]
Test Case: 471 | Input/Output: [[95.7283306497539 -21] 74.7283306497539]
Test Case: 472 | Input/Output: [[-19.017358223580416 -48] -67.01735822358042]
Test Case: 473 | Input/Output: [[-5.993528101022676 53] 47.006471898977324]
Test Case: 474 | Input/Output: [[-97.74934680129668 83] -14.749346801296682]
Test Case: 475 | Input/Output: [[-49.372353353092336 -46] -95.37235335309234]
Test Case: 476 | Input/Output: [[91.4981441012205 64] 155.4981441012205]
Test Case: 477 | Input/Output: [[-9.067107528517312 -100] -109.06710752851731]
Test Case: 478 | Input/Output: [[95.39509047151762 -44] 51.39509047151762]
Test Case: 479 | Input/Output: [[28.35558171783171 -48] -19.64441828216829]
Test Case: 480 | Input/Output: [[-68.99927947974865 -30] -98.99927947974865]
Test Case: 481 | Input/Output: [[-80.1750505189842 -84] -164.1750505189842]
Test Case: 482 | Input/Output: [[-52.33860298971924 -4] -56.33860298971924]
Test Case: 483 | Input/Output: [[-96.74644627568856 36] -60.746446275688555]
Test Case: 484 | Input/Output: [[-88.10526782148149 -51] -139.1052678214815]
Test Case: 485 | Input/Output: [[43.709871642145714 -42] 1.709871642145714]
Test Case: 486 | Input/Output: [[87.22477719633935 54] 141.22477719633935]
Test Case: 487 | Input/Output: [[-26.766902774128056 34] 7.233097225871944]
Test Case: 488 | Input/Output: [[55.856665220179934 72] 127.85666522017993]
Test Case: 489 | Input/Output: [[-99.40159208514916 82] -17.40159208514916]
Test Case: 490 | Input/Output: [[95.81693279525263 79] 174.81693279525263]
Test Case: 491 | Input/Output: [[-17.333937148132406 -86] -103.3339371481324]
Test Case: 492 | Input/Output: [[84.2084036908251 -92] -7.791596309174906]
Test Case: 493 | Input/Output: [[36.31984077870868 43] 79.31984077870868]
Test Case: 494 | Input/Output: [[-50.13036732367797 54] 3.869632676322027]
Test Case: 495 | Input/Output: [[-22.831921242892932 30] 7.168078757107068]
Test Case: 496 | Input/Output: [[-32.44062616756669 51] 18.55937383243331]
Test Case: 497 | Input/Output: [[-61.043113048525214 -55] -116.04311304852521]
Test Case: 498 | Input/Output: [[-77.04451921549726 99] 21.95548078450274]
Test Case: 499 | Input/Output: [[60.640529038979025 38] 98.64052903897903]
Test Case: 500 | Input/Output: [[78.01375580546724 -93] -14.986244194532759]
Test Case: 501 | Input/Output: [[-64.04295355193912 -6] -70.04295355193912]
Test Case: 502 | Input/Output: [[-52.04786798686285 -56] -108.04786798686285]
Test Case: 503 | Input/Output: [[-13.84125977125494 -2] -15.84125977125494]
Test Case: 504 | Input/Output: [[-99.52729736370631 -89] -188.5272973637063]
Test Case: 505 | Input/Output: [[54.62741100799511 -95] -40.37258899200489]
Test Case: 506 | Input/Output: [[-12.795947080924194 50] 37.20405291907581]
Test Case: 507 | Input/Output: [[25.461580564539616 46] 71.46158056453962]
Test Case: 508 | Input/Output: [[-74.01836955458214 -87] -161.01836955458214]
Test Case: 509 | Input/Output: [[1.3469503822729934 94] 95.346950382273]
Test Case: 510 | Input/Output: [[98.421297576565 90] 188.421297576565]
Test Case: 511 | Input/Output: [[-46.27521081808881 20] -26.27521081808881]
Test Case: 512 | Input/Output: [[-12.918213273012213 -58] -70.91821327301221]
Test Case: 513 | Input/Output: [[-35.012311931444145 -11] -46.012311931444145]
Test Case: 514 | Input/Output: [[-87.84423809218158 87] -0.844238092181584]
Test Case: 515 | Input/Output: [[-27.96311640445144 17] -10.96311640445144]
Test Case: 516 | Input/Output: [[-44.49925711628222 1] -43.49925711628222]
Test Case: 517 | Input/Output: [[-55.49302997927299 -62] -117.49302997927299]
Test Case: 518 | Input/Output: [[95.08865549968104 -89] 6.088655499681039]
Test Case: 519 | Input/Output: [[-39.168544314286976 19] -20.168544314286976]
Test Case: 520 | Input/Output: [[-94.40047135470925 -91] -185.40047135470925]
Test Case: 521 | Input/Output: [[-13.403464659828117 97] 83.59653534017188]
Test Case: 522 | Input/Output: [[96.8884456477806 33] 129.8884456477806]
Test Case: 523 | Input/Output: [[-12.538994184365393 13] 0.4610058156346071]
Test Case: 524 | Input/Output: [[-15.367028975832994 -13] -28.367028975832994]
Test Case: 525 | Input/Output: [[15.916960578189986 -8] 7.916960578189986]
Test Case: 526 | Input/Output: [[59.65180993662321 57] 116.65180993662321]
Test Case: 527 | Input/Output: [[19.7931735359832 16] 35.7931735359832]
Test Case: 528 | Input/Output: [[-38.76491264590278 32] -6.764912645902783]
Test Case: 529 | Input/Output: [[47.37532423917773 -40] 7.375324239177729]
Test Case: 530 | Input/Output: [[36.695237699096936 -20] 16.695237699096936]
Test Case: 531 | Input/Output: [[-64.60736928965937 59] -5.607369289659374]
Test Case: 532 | Input/Output: [[94.95961208165303 45] 139.95961208165303]
Test Case: 533 | Input/Output: [[-64.37825500055519 -91] -155.37825500055519]
Test Case: 534 | Input/Output: [[-90.1744239026864 77] -13.1744239026864]
Test Case: 535 | Input/Output: [[-10.006789314493261 19] 8.993210685506739]
Test Case: 536 | Input/Output: [[-12.22918105031394 52] 39.77081894968606]
Test Case: 537 | Input/Output: [[-41.10817756818794 -36] -77.10817756818794]
Test Case: 538 | Input/Output: [[73.29192317420154 -59] 14.291923174201543]
Test Case: 539 | Input/Output: [[54.129671571299866 -75] -20.870328428700134]
Test Case: 540 | Input/Output: [[-65.64795591515647 9] -56.64795591515647]
Test Case: 541 | Input/Output: [[97.82282935846163 -50] 47.82282935846163]
Test Case: 542 | Input/Output: [[43.84531448836651 77] 120.84531448836651]
Test Case: 543 | Input/Output: [[-35.7283099865392 -94] -129.72830998653922]
Test Case: 544 | Input/Output: [[66.80505857975993 -100] -33.19494142024007]
Test Case: 545 | Input/Output: [[-22.36715224754478 16] -6.36715224754478]
Test Case: 546 | Input/Output: [[36.920810642421486 92] 128.9208106424215]
Test Case: 547 | Input/Output: [[32.440554359737064 -73] -40.559445640262936]
Test Case: 548 | Input/Output: [[16.47107347395331 -64] -47.52892652604669]
Test Case: 549 | Input/Output: [[37.517167236363974 -21] 16.517167236363974]
Test Case: 550 | Input/Output: [[64.9008038335576 68] 132.9008038335576]
Test Case: 551 | Input/Output: [[8.683456649429772 100] 108.68345664942977]
Test Case: 552 | Input/Output: [[-56.781338352454426 67] 10.218661647545574]
Test Case: 553 | Input/Output: [[4.3952603188243415 -52] -47.60473968117566]
Test Case: 554 | Input/Output: [[-69.56352654078815 -99] -168.56352654078813]
Test Case: 555 | Input/Output: [[-79.2021132148873 67] -12.202113214887305]
Test Case: 556 | Input/Output: [[87.82748979787016 -60] 27.827489797870157]
Test Case: 557 | Input/Output: [[-81.72728505951963 -93] -174.72728505951963]
Test Case: 558 | Input/Output: [[93.29973858189678 88] 181.29973858189678]
Test Case: 559 | Input/Output: [[-58.63796671209827 73] 14.362033287901731]
Test Case: 560 | Input/Output: [[-44.00745821817231 -71] -115.0074582181723]
Test Case: 561 | Input/Output: [[2.8857304423873416 -52] -49.11426955761266]
Test Case: 562 | Input/Output: [[16.77399039449159 16] 32.77399039449159]
Test Case: 563 | Input/Output: [[-89.84845040995424 76] -13.84845040995424]
Test Case: 564 | Input/Output: [[22.827495836790376 -83] -60.172504163209624]
Test Case: 565 | Input/Output: [[68.20896916666356 49] 117.20896916666356]
Test Case: 566 | Input/Output: [[-94.03681843956986 13] -81.03681843956986]
Test Case: 567 | Input/Output: [[6.3129797915295995 -62] -55.6870202084704]
Test Case: 568 | Input/Output: [[-72.75579617650794 87] 14.244203823492057]
Test Case: 569 | Input/Output: [[-34.96436749675131 65] 30.035632503248692]
Test Case: 570 | Input/Output: [[-37.988565567156215 85] 47.011434432843785]
Test Case: 571 | Input/Output: [[29.60218188570539 -24] 5.6021818857053916]
Test Case: 572 | Input/Output: [[-89.47805568084183 -29] -118.47805568084183]
Test Case: 573 | Input/Output: [[79.75147975352024 -46] 33.75147975352024]
Test Case: 574 | Input/Output: [[60.28171940268635 -44] 16.28171940268635]
Test Case: 575 | Input/Output: [[-3.296732798959084 63] 59.703267201040916]
Test Case: 576 | Input/Output: [[-48.31125510392704 -98] -146.31125510392704]
Test Case: 577 | Input/Output: [[-64.49588492636039 30] -34.49588492636039]
Test Case: 578 | Input/Output: [[74.84064492406739 16] 90.84064492406739]
Test Case: 579 | Input/Output: [[-37.28982762766962 87] 49.71017237233038]
Test Case: 580 | Input/Output: [[45.63293784453242 -8] 37.63293784453242]
Test Case: 581 | Input/Output: [[45.96124204608489 -75] -29.03875795391511]
Test Case: 582 | Input/Output: [[20.530250380548182 -27] -6.469749619451818]
Test Case: 583 | Input/Output: [[-97.20549417172508 66] -31.20549417172508]
Test Case: 584 | Input/Output: [[11.348015893159882 70] 81.34801589315988]
Test Case: 585 | Input/Output: [[-3.8148490344881623 -18] -21.814849034488162]
Test Case: 586 | Input/Output: [[41.06121483614848 -49] -7.93878516385152]
Test Case: 587 | Input/Output: [[5.287995646754837 66] 71.28799564675484]
Test Case: 588 | Input/Output: [[-48.316071540368675 7] -41.316071540368675]
Test Case: 589 | Input/Output: [[77.31452597406246 13] 90.31452597406246]
Test Case: 590 | Input/Output: [[-7.758729826193985 -59] -66.75872982619398]
Test Case: 591 | Input/Output: [[-65.62153999799494 80] 14.378460002005056]
Test Case: 592 | Input/Output: [[12.781336977416771 53] 65.78133697741677]
Test Case: 593 | Input/Output: [[-91.48726490621672 29] -62.48726490621672]
Test Case: 594 | Input/Output: [[62.555119023648984 -11] 51.555119023648984]
Test Case: 595 | Input/Output: [[-11.918498524801862 100] 88.08150147519814]
Test Case: 596 | Input/Output: [[80.26004959012943 100] 180.26004959012943]
Test Case: 597 | Input/Output: [[10.695502203800757 79] 89.69550220380076]
Test Case: 598 | Input/Output: [[45.60234097150328 42] 87.60234097150328]
Test Case: 599 | Input/Output: [[-91.37584518463042 91] -0.37584518463042116]
Test Case: 600 | Input/Output: [[-66.18466596902857 -25] -91.18466596902857]
Test Case: 601 | Input/Output: [[-43.937368200491925 -42] -85.93736820049193]
Test Case: 602 | Input/Output: [[-40.49972922249972 97] 56.50027077750028]
Test Case: 603 | Input/Output: [[-81.64735891950765 89] 7.352641080492347]
Test Case: 604 | Input/Output: [[98.71025748120493 18] 116.71025748120493]
Test Case: 605 | Input/Output: [[-34.0098432221597 6] -28.009843222159702]
Test Case: 606 | Input/Output: [[12.953545486133478 32] 44.95354548613348]
Test Case: 607 | Input/Output: [[-78.23401705082935 40] -38.23401705082935]
Test Case: 608 | Input/Output: [[31.31411393579927 -14] 17.31411393579927]
Test Case: 609 | Input/Output: [[-65.22084543311465 64] -1.220845433114647]
Test Case: 610 | Input/Output: [[-98.74741526558897 71] -27.74741526558897]
Test Case: 611 | Input/Output: [[-60.026270843214924 81] 20.973729156785076]
Test Case: 612 | Input/Output: [[52.2220885049085 -67] -14.777911495091502]
Test Case: 613 | Input/Output: [[98.93000134850155 35] 133.93000134850155]
Test Case: 614 | Input/Output: [[-23.11304871882058 19] -4.113048718820579]
Test Case: 615 | Input/Output: [[63.58111179789287 -7] 56.58111179789287]
Test Case: 616 | Input/Output: [[44.770350298880174 9] 53.770350298880174]
Test Case: 617 | Input/Output: [[4.145332271528929 -13] -8.854667728471071]
Test Case: 618 | Input/Output: [[-79.42285707420713 9] -70.42285707420713]
Test Case: 619 | Input/Output: [[-33.84435830970544 0] -33.84435830970544]
Test Case: 620 | Input/Output: [[55.51028206776982 -46] 9.510282067769822]
Test Case: 621 | Input/Output: [[89.93445450638816 40] 129.93445450638816]
Test Case: 622 | Input/Output: [[-48.56973230191623 -34] -82.56973230191623]
Test Case: 623 | Input/Output: [[-44.832798619387404 62] 17.167201380612596]
Test Case: 624 | Input/Output: [[0.6725255651105329 -39] -38.32747443488947]
Test Case: 625 | Input/Output: [[95.03560496880607 32] 127.03560496880607]
Test Case: 626 | Input/Output: [[-86.63521248692211 -80] -166.63521248692211]
Test Case: 627 | Input/Output: [[19.325151372112387 72] 91.32515137211239]
Test Case: 628 | Input/Output: [[-35.30535682530049 -100] -135.3053568253005]
Test Case: 629 | Input/Output: [[-76.30391230942732 -64] -140.30391230942732]
Test Case: 630 | Input/Output: [[50.05652733402303 -63] -12.94347266597697]
Test Case: 631 | Input/Output: [[53.531372282298065 2] 55.531372282298065]
Test Case: 632 | Input/Output: [[-65.39057332067267 51] -14.390573320672672]
Test Case: 633 | Input/Output: [[0.39659066398836273 -38] -37.60340933601164]
Test Case: 634 | Input/Output: [[26.79983260625076 -83] -56.20016739374924]
Test Case: 635 | Input/Output: [[-39.544866632062934 -43] -82.54486663206293]
Test Case: 636 | Input/Output: [[74.53582740394913 -84] -9.464172596050872]
Test Case: 637 | Input/Output: [[41.9432198090185 58] 99.9432198090185]
Test Case: 638 | Input/Output: [[-75.74834553831053 75] -0.7483455383105309]
Test Case: 639 | Input/Output: [[-51.01016642458518 -98] -149.01016642458518]
Test Case: 640 | Input/Output: [[68.1232758173364 -16] 52.123275817336406]
Test Case: 641 | Input/Output: [[91.64087011911565 -60] 31.640870119115647]
Test Case: 642 | Input/Output: [[39.63006975102667 -27] 12.630069751026667]
Test Case: 643 | Input/Output: [[-4.516158517054848 92] 87.48384148294515]
Test Case: 644 | Input/Output: [[-55.114692460309115 -33] -88.11469246030912]
Test Case: 645 | Input/Output: [[-61.86830748827785 23] -38.86830748827785]
Test Case: 646 | Input/Output: [[99.22137115727122 0] 99.22137115727122]
Test Case: 647 | Input/Output: [[21.418212203275758 -23] -1.5817877967242424]
Test Case: 648 | Input/Output: [[-63.28954928920956 34] -29.28954928920956]
Test Case: 649 | Input/Output: [[18.53703556588178 -64] -45.46296443411822]
Test Case: 650 | Input/Output: [[72.7850793734159 10] 82.7850793734159]
Test Case: 651 | Input/Output: [[-36.79562680263595 30] -6.795626802635951]
Test Case: 652 | Input/Output: [[62.4583115563164 -54] 8.458311556316403]
Test Case: 653 | Input/Output: [[22.515753924832154 -63] -40.484246075167846]
Test Case: 654 | Input/Output: [[-18.943769912763116 1] -17.943769912763116]
Test Case: 655 | Input/Output: [[15.54273402230342 -75] -59.45726597769658]
Test Case: 656 | Input/Output: [[-73.83260383255157 -73] -146.83260383255157]
Test Case: 657 | Input/Output: [[-94.25485834931007 2] -92.25485834931007]
Test Case: 658 | Input/Output: [[30.61068305309263 -27] 3.610683053092629]
Test Case: 659 | Input/Output: [[-0.39481392300811535 56] 55.605186076991885]
Test Case: 660 | Input/Output: [[95.8107484399763 -60] 35.810748439976294]
Test Case: 661 | Input/Output: [[1.9776253309491665 -82] -80.02237466905083]
Test Case: 662 | Input/Output: [[6.2160230546846265 -43] -36.78397694531537]
Test Case: 663 | Input/Output: [[-17.857475086029467 10] -7.857475086029467]
Test Case: 664 | Input/Output: [[-55.49478387481584 11] -44.49478387481584]
Test Case: 665 | Input/Output: [[9.249021793796857 13] 22.249021793796857]
Test Case: 666 | Input/Output: [[-31.20813073962485 45] 13.791869260375151]
Test Case: 667 | Input/Output: [[-83.97194568767469 68] -15.97194568767469]
Test Case: 668 | Input/Output: [[-33.98476051127368 -79] -112.98476051127368]
Test Case: 669 | Input/Output: [[11.803571035149503 75] 86.8035710351495]
Test Case: 670 | Input/Output: [[17.237628865442815 -35] -17.762371134557185]
Test Case: 671 | Input/Output: [[77.9208918707034 -97] -19.0791081292966]
Test Case: 672 | Input/Output: [[-32.76339007955727 93] 60.23660992044273]
Test Case: 673 | Input/Output: [[45.89184606129473 69] 114.89184606129473]
Test Case: 674 | Input/Output: [[14.113629994184265 99] 113.11362999418427]
Test Case: 675 | Input/Output: [[-25.19901219614124 -6] -31.19901219614124]
Test Case: 676 | Input/Output: [[-36.54836322519692 -72] -108.54836322519692]
Test Case: 677 | Input/Output: [[70.56186685240473 -65] 5.561866852404734]
Test Case: 678 | Input/Output: [[18.329341353630113 30] 48.32934135363011]
Test Case: 679 | Input/Output: [[-93.84727939421924 25] -68.84727939421924]
Test Case: 680 | Input/Output: [[52.22337996720216 -12] 40.22337996720216]
Test Case: 681 | Input/Output: [[-30.452028799691405 24] -6.452028799691405]
Test Case: 682 | Input/Output: [[-66.02151208996511 65] -1.021512089965114]
Test Case: 683 | Input/Output: [[-59.96008786522176 -41] -100.96008786522177]
Test Case: 684 | Input/Output: [[-85.04087123226947 25] -60.04087123226947]
Test Case: 685 | Input/Output: [[-11.664741217426425 -68] -79.66474121742642]
Test Case: 686 | Input/Output: [[58.77373755192906 23] 81.77373755192906]
Test Case: 687 | Input/Output: [[-29.61606246513317 -40] -69.61606246513317]
Test Case: 688 | Input/Output: [[-7.596137512717789 97] 89.40386248728221]
Test Case: 689 | Input/Output: [[54.656054902478076 34] 88.65605490247808]
Test Case: 690 | Input/Output: [[-50.00635845554173 -39] -89.00635845554173]
Test Case: 691 | Input/Output: [[42.60975972606502 21] 63.60975972606502]
Test Case: 692 | Input/Output: [[-45.06146222750993 36] -9.061462227509928]
Test Case: 693 | Input/Output: [[-66.14180796285987 87] 20.858192037140128]
Test Case: 694 | Input/Output: [[-24.09046562495689 -39] -63.09046562495689]
Test Case: 695 | Input/Output: [[79.08757929335616 -98] -18.912420706643843]
Test Case: 696 | Input/Output: [[68.33853109319995 -77] -8.661468906800053]
Test Case: 697 | Input/Output: [[97.31700236433588 56] 153.31700236433588]
Test Case: 698 | Input/Output: [[27.936319898745566 1] 28.936319898745566]
Test Case: 699 | Input/Output: [[-36.89482727798572 8] -28.89482727798572]
Test Case: 700 | Input/Output: [[93.76487103095153 -11] 82.76487103095153]
Test Case: 701 | Input/Output: [[1.1112575130134843 31] 32.111257513013484]
Test Case: 702 | Input/Output: [[75.4189339431729 77] 152.4189339431729]
Test Case: 703 | Input/Output: [[-45.18962705776695 5] -40.18962705776695]
Test Case: 704 | Input/Output: [[-12.65644693111932 13] 0.3435530688806807]
Test Case: 705 | Input/Output: [[49.42329054605108 -67] -17.576709453948922]
Test Case: 706 | Input/Output: [[-76.24997152666421 99] 22.75002847333579]
Test Case: 707 | Input/Output: [[-86.80641640987533 -54] -140.80641640987534]
Test Case: 708 | Input/Output: [[58.204254770229 -5] 53.204254770229]
Test Case: 709 | Input/Output: [[19.609537644267846 67] 86.60953764426785]
Test Case: 710 | Input/Output: [[65.7828435634271 -73] -7.217156436572907]
Test Case: 711 | Input/Output: [[48.86340252908039 -17] 31.86340252908039]
Test Case: 712 | Input/Output: [[86.9948941893091 -37] 49.99489418930909]
Test Case: 713 | Input/Output: [[-18.814070569671614 3] -15.814070569671614]
Test Case: 714 | Input/Output: [[-65.36214433539027 7] -58.36214433539027]
Test Case: 715 | Input/Output: [[-40.44800520478109 20] -20.44800520478109]
Test Case: 716 | Input/Output: [[76.11364127350203 83] 159.11364127350203]
Test Case: 717 | Input/Output: [[34.84309327630464 -91] -56.15690672369536]
Test Case: 718 | Input/Output: [[47.95804690663627 -94] -46.04195309336373]
Test Case: 719 | Input/Output: [[-14.107216526419847 78] 63.89278347358015]
Test Case: 720 | Input/Output: [[-83.90936725438529 88] 4.0906327456147125]
Test Case: 721 | Input/Output: [[27.82935601708354 -75] -47.17064398291646]
Test Case: 722 | Input/Output: [[-48.11372166305552 100] 51.88627833694448]
Test Case: 723 | Input/Output: [[38.55629094764984 57] 95.55629094764984]
Test Case: 724 | Input/Output: [[99.70898897308967 -37] 62.708988973089674]
Test Case: 725 | Input/Output: [[-11.02476864279491 -71] -82.02476864279491]
Test Case: 726 | Input/Output: [[96.72250226266462 100] 196.72250226266462]
Test Case: 727 | Input/Output: [[-53.39707164724208 2] -51.39707164724208]
Test Case: 728 | Input/Output: [[-6.5225842325698125 -89] -95.52258423256981]
Test Case: 729 | Input/Output: [[81.46630445246288 83] 164.46630445246288]
Test Case: 730 | Input/Output: [[33.74799492679517 78] 111.74799492679517]
Test Case: 731 | Input/Output: [[78.3462055431535 -21] 57.3462055431535]
Test Case: 732 | Input/Output: [[33.19157534884957 -31] 2.191575348849568]
Test Case: 733 | Input/Output: [[-44.96358535935101 83] 38.03641464064899]
Test Case: 734 | Input/Output: [[13.132862020888439 -12] 1.1328620208884388]
Test Case: 735 | Input/Output: [[-37.6541311010355 20] -17.654131101035503]
Test Case: 736 | Input/Output: [[-39.670264195874935 -56] -95.67026419587494]
Test Case: 737 | Input/Output: [[-35.30671474196927 -2] -37.30671474196927]
Test Case: 738 | Input/Output: [[15.425450967939142 -22] -6.574549032060858]
Test Case: 739 | Input/Output: [[-62.3019166292808 -15] -77.3019166292808]
Test Case: 740 | Input/Output: [[-52.985023468597106 85] 32.014976531402894]
Test Case: 741 | Input/Output: [[5.8114824874259625 78] 83.81148248742596]
Test Case: 742 | Input/Output: [[-86.31185098019407 2] -84.31185098019407]
Test Case: 743 | Input/Output: [[-12.779574366989976 27] 14.220425633010024]
Test Case: 744 | Input/Output: [[69.60137998786013 5] 74.60137998786013]
Test Case: 745 | Input/Output: [[-71.32941542341473 -97] -168.32941542341473]
Test Case: 746 | Input/Output: [[-60.69586176716475 47] -13.69586176716475]
Test Case: 747 | Input/Output: [[94.86635715136197 12] 106.86635715136197]
Test Case: 748 | Input/Output: [[8.386838810009706 19] 27.386838810009706]
Test Case: 749 | Input/Output: [[80.0340824763837 -87] -6.965917523616298]
Test Case: 750 | Input/Output: [[53.753186508198354 -77] -23.246813491801646]
Test Case: 751 | Input/Output: [[-3.4221711114920623 63] 59.57782888850794]
Test Case: 752 | Input/Output: [[-21.109067319021648 -49] -70.10906731902165]
Test Case: 753 | Input/Output: [[-65.9700518515414 77] 11.029948148458601]
Test Case: 754 | Input/Output: [[42.0837754576452 13] 55.0837754576452]
Test Case: 755 | Input/Output: [[-86.57608169181697 -27] -113.57608169181697]
Test Case: 756 | Input/Output: [[49.30401498270015 -13] 36.30401498270015]
Test Case: 757 | Input/Output: [[52.689101166068525 -1] 51.689101166068525]
Test Case: 758 | Input/Output: [[-49.49135510383624 10] -39.49135510383624]
Test Case: 759 | Input/Output: [[52.660114172798956 17] 69.66011417279896]
Test Case: 760 | Input/Output: [[72.80908786616689 -77] -4.190912133833109]
Test Case: 761 | Input/Output: [[25.237393625496424 -75] -49.76260637450358]
Test Case: 762 | Input/Output: [[-73.39969314271082 16] -57.39969314271082]
Test Case: 763 | Input/Output: [[-62.63073379764994 -71] -133.63073379764995]
Test Case: 764 | Input/Output: [[-60.18945821103054 71] 10.81054178896946]
Test Case: 765 | Input/Output: [[59.65280433676648 -77] -17.34719566323352]
Test Case: 766 | Input/Output: [[-74.76327316752325 -32] -106.76327316752325]
Test Case: 767 | Input/Output: [[-95.77490886079161 -50] -145.7749088607916]
Test Case: 768 | Input/Output: [[-78.51407369687354 84] 5.485926303126462]
Test Case: 769 | Input/Output: [[70.2673541644564 -68] 2.267354164456407]
Test Case: 770 | Input/Output: [[25.69670862728553 37] 62.69670862728553]
Test Case: 771 | Input/Output: [[-67.35047351685388 42] -25.35047351685388]
Test Case: 772 | Input/Output: [[9.481227391982117 -67] -57.51877260801788]
Test Case: 773 | Input/Output: [[39.563809208201434 -22] 17.563809208201434]
Test Case: 774 | Input/Output: [[-91.15020925276893 97] 5.849790747231069]
Test Case: 775 | Input/Output: [[-36.522433192877315 -47] -83.52243319287732]
Test Case: 776 | Input/Output: [[-52.45738978017871 43] -9.457389780178708]
Test Case: 777 | Input/Output: [[-81.86490577638375 85] 3.1350942236162496]
Test Case: 778 | Input/Output: [[60.044134839267485 -62] -1.9558651607325146]
Test Case: 779 | Input/Output: [[-66.20351280913218 -71] -137.20351280913218]
Test Case: 780 | Input/Output: [[-7.938485155442947 -32] -39.93848515544295]
Test Case: 781 | Input/Output: [[-82.28849990587332 84] 1.7115000941266771]
Test Case: 782 | Input/Output: [[25.235440337579746 -45] -19.764559662420254]
Test Case: 783 | Input/Output: [[-27.55363736080838 10] -17.55363736080838]
Test Case: 784 | Input/Output: [[-16.07869357119651 89] 72.92130642880349]
Test Case: 785 | Input/Output: [[-11.742474832148915 77] 65.25752516785109]
Test Case: 786 | Input/Output: [[-31.759719727100318 -34] -65.75971972710032]
Test Case: 787 | Input/Output: [[27.184792078152654 -1] 26.184792078152654]
Test Case: 788 | Input/Output: [[32.455324356213424 -70] -37.544675643786576]
Test Case: 789 | Input/Output: [[73.39723653333786 64] 137.39723653333786]
Test Case: 790 | Input/Output: [[-78.1179510216985 76] -2.1179510216985022]
Test Case: 791 | Input/Output: [[0.1557173615776435 -16] -15.844282638422357]
Test Case: 792 | Input/Output: [[-31.857962215926563 -79] -110.85796221592656]
Test Case: 793 | Input/Output: [[-10.91191373769496 -26] -36.91191373769496]
Test Case: 794 | Input/Output: [[-21.79813317979415 -57] -78.79813317979415]
Test Case: 795 | Input/Output: [[-15.57768500758354 77] 61.42231499241646]
Test Case: 796 | Input/Output: [[54.49624302237635 96] 150.49624302237635]
Test Case: 797 | Input/Output: [[20.91530680081857 -74] -53.08469319918143]
Test Case: 798 | Input/Output: [[-42.50581453778859 48] 5.494185462211412]
Test Case: 799 | Input/Output: [[79.72447824785996 -42] 37.72447824785996]
Test Case: 800 | Input/Output: [[45.47197014928042 72] 117.47197014928042]
Test Case: 801 | Input/Output: [[44.65941284459063 -9] 35.65941284459063]
Test Case: 802 | Input/Output: [[-74.71047435390162 -94] -168.71047435390162]
Test Case: 803 | Input/Output: [[-99.275299847225 -14] -113.275299847225]
Test Case: 804 | Input/Output: [[-49.505215285292856 -44] -93.50521528529285]
Test Case: 805 | Input/Output: [[65.29217822174525 61] 126.29217822174525]
Test Case: 806 | Input/Output: [[82.29980560906648 2] 84.29980560906648]
Test Case: 807 | Input/Output: [[45.59033787469809 -17] 28.590337874698093]
Test Case: 808 | Input/Output: [[-66.51439588936691 1] -65.51439588936691]
Test Case: 809 | Input/Output: [[-20.32543243947849 6] -14.32543243947849]
Test Case: 810 | Input/Output: [[-44.42927672388046 41] -3.429276723880463]
Test Case: 811 | Input/Output: [[81.24316532504196 -41] 40.24316532504196]
Test Case: 812 | Input/Output: [[14.55169020655714 -49] -34.44830979344286]
Test Case: 813 | Input/Output: [[-75.86278938898019 -49] -124.86278938898019]
Test Case: 814 | Input/Output: [[-88.94397666060804 -67] -155.94397666060803]
Test Case: 815 | Input/Output: [[-61.28701410342337 21] -40.28701410342337]
Test Case: 816 | Input/Output: [[83.26486648326156 -64] 19.264866483261557]
Test Case: 817 | Input/Output: [[93.01513142937074 -37] 56.01513142937074]
Test Case: 818 | Input/Output: [[-93.46680026644296 50] -43.46680026644296]
Test Case: 819 | Input/Output: [[-46.11890291327785 -47] -93.11890291327785]
Test Case: 820 | Input/Output: [[48.45061759419153 13] 61.45061759419153]
Test Case: 821 | Input/Output: [[59.80186161795925 76] 135.80186161795925]
Test Case: 822 | Input/Output: [[77.99481384397575 -50] 27.99481384397575]
Test Case: 823 | Input/Output: [[-47.723220639274274 -6] -53.723220639274274]
Test Case: 824 | Input/Output: [[-95.45407230788238 46] -49.454072307882385]
Test Case: 825 | Input/Output: [[-47.08788925545375 -39] -86.08788925545375]
Test Case: 826 | Input/Output: [[-55.37007545616894 84] 28.62992454383106]
Test Case: 827 | Input/Output: [[-67.10217796856153 -79] -146.10217796856153]
Test Case: 828 | Input/Output: [[-36.100518968331954 -83] -119.10051896833195]
Test Case: 829 | Input/Output: [[86.35790697856595 73] 159.35790697856595]
Test Case: 830 | Input/Output: [[-63.36981637892225 80] 16.630183621077748]
Test Case: 831 | Input/Output: [[78.67296352997113 -77] 1.6729635299711276]
Test Case: 832 | Input/Output: [[99.23209353649929 19] 118.23209353649929]
Test Case: 833 | Input/Output: [[94.48475937198674 -68] 26.48475937198674]
Test Case: 834 | Input/Output: [[4.389307716204584 54] 58.389307716204584]
Test Case: 835 | Input/Output: [[-33.15725144287292 -83] -116.15725144287292]
Test Case: 836 | Input/Output: [[-86.69969582587478 74] -12.699695825874784]
Test Case: 837 | Input/Output: [[25.557902351010114 -16] 9.557902351010114]
Test Case: 838 | Input/Output: [[-53.55737922923802 22] -31.557379229238023]
Test Case: 839 | Input/Output: [[71.61832561150715 -63] 8.618325611507146]
Test Case: 840 | Input/Output: [[-76.3193327385856 87] 10.6806672614144]
Test Case: 841 | Input/Output: [[66.02351155068342 87] 153.02351155068342]
Test Case: 842 | Input/Output: [[64.80804930922409 7] 71.80804930922409]
Test Case: 843 | Input/Output: [[56.61535605849039 94] 150.6153560584904]
Test Case: 844 | Input/Output: [[-79.01048445379632 -39] -118.01048445379632]
Test Case: 845 | Input/Output: [[61.094978722941505 45] 106.0949787229415]
Test Case: 846 | Input/Output: [[78.48077833913248 20] 98.48077833913248]
Test Case: 847 | Input/Output: [[34.30927795118035 17] 51.30927795118035]
Test Case: 848 | Input/Output: [[69.58464859536684 -78] -8.415351404633157]
Test Case: 849 | Input/Output: [[-69.09295670392497 37] -32.09295670392497]
Test Case: 850 | Input/Output: [[56.641916818056046 -79] -22.358083181943954]
Test Case: 851 | Input/Output: [[58.39354853380084 78] 136.39354853380084]
Test Case: 852 | Input/Output: [[80.36868949166353 52] 132.36868949166353]
Test Case: 853 | Input/Output: [[-50.055834468492286 -28] -78.0558344684923]
Test Case: 854 | Input/Output: [[20.06819477286072 52] 72.06819477286072]
Test Case: 855 | Input/Output: [[30.37449566920455 -56] -25.62550433079545]
Test Case: 856 | Input/Output: [[-89.02106716132572 93] 3.9789328386742824]
Test Case: 857 | Input/Output: [[67.25098866757608 -59] 8.250988667576081]
Test Case: 858 | Input/Output: [[-25.46733338528088 -97] -122.46733338528088]
Test Case: 859 | Input/Output: [[-3.9750403672676384 73] 69.02495963273236]
Test Case: 860 | Input/Output: [[8.336805798477798 45] 53.3368057984778]
Test Case: 861 | Input/Output: [[-93.71489675517886 -69] -162.71489675517887]
Test Case: 862 | Input/Output: [[-70.67180897280087 70] -0.6718089728008749]
Test Case: 863 | Input/Output: [[-9.908262715107526 92] 82.09173728489247]
Test Case: 864 | Input/Output: [[-8.183054098867785 -14] -22.183054098867785]
Test Case: 865 | Input/Output: [[15.793412676341106 94] 109.7934126763411]
Test Case: 866 | Input/Output: [[57.961701119554874 90] 147.96170111955487]
Test Case: 867 | Input/Output: [[-96.51327096986955 -84] -180.51327096986955]
Test Case: 868 | Input/Output: [[-67.71574468032574 -97] -164.71574468032574]
Test Case: 869 | Input/Output: [[54.83745200046204 55] 109.83745200046204]
Test Case: 870 | Input/Output: [[88.86980872621456 16] 104.86980872621456]
Test Case: 871 | Input/Output: [[-85.82058920643743 -8] -93.82058920643743]
Test Case: 872 | Input/Output: [[-80.08470736089302 -22] -102.08470736089302]
Test Case: 873 | Input/Output: [[56.46262895726471 -10] 46.46262895726471]
Test Case: 874 | Input/Output: [[-20.067389170244113 24] 3.9326108297558875]
Test Case: 875 | Input/Output: [[32.343524976065595 63] 95.3435249760656]
Test Case: 876 | Input/Output: [[58.77532457964068 45] 103.77532457964068]
Test Case: 877 | Input/Output: [[-67.53212834926839 11] -56.53212834926839]
Test Case: 878 | Input/Output: [[-82.81485890943827 72] -10.814858909438271]
Test Case: 879 | Input/Output: [[27.90339674625055 -31] -3.09660325374945]
Test Case: 880 | Input/Output: [[31.853501870110705 50] 81.8535018701107]
Test Case: 881 | Input/Output: [[83.43769970929435 -82] 1.4376997092943498]
Test Case: 882 | Input/Output: [[-64.7028382780294 -9] -73.7028382780294]
Test Case: 883 | Input/Output: [[56.14493067954689 61] 117.14493067954689]
Test Case: 884 | Input/Output: [[3.7937842750898056 -8] -4.206215724910194]
Test Case: 885 | Input/Output: [[66.66689818597447 -58] 8.666898185974475]
Test Case: 886 | Input/Output: [[-91.2217309933396 -15] -106.2217309933396]
Test Case: 887 | Input/Output: [[85.24427756738251 -21] 64.24427756738251]
Test Case: 888 | Input/Output: [[35.53777117719815 98] 133.53777117719815]
Test Case: 889 | Input/Output: [[-28.789944165336777 51] 22.210055834663223]
Test Case: 890 | Input/Output: [[49.46258249363541 29] 78.46258249363541]
Test Case: 891 | Input/Output: [[-16.362910019785332 33] 16.637089980214668]
Test Case: 892 | Input/Output: [[-78.68740869433233 93] 14.312591305667667]
Test Case: 893 | Input/Output: [[-35.639680123338564 -66] -101.63968012333856]
Test Case: 894 | Input/Output: [[-60.031063516011265 -46] -106.03106351601127]
Test Case: 895 | Input/Output: [[27.58598866830218 33] 60.58598866830218]
Test Case: 896 | Input/Output: [[-12.206188162055724 -68] -80.20618816205572]
Test Case: 897 | Input/Output: [[-66.9516630312552 -93] -159.95166303125518]
Test Case: 898 | Input/Output: [[69.05681553157456 -94] -24.943184468425443]
Test Case: 899 | Input/Output: [[45.8817795707547 27] 72.8817795707547]
Test Case: 900 | Input/Output: [[86.15973225732398 35] 121.15973225732398]
Test Case: 901 | Input/Output: [[26.87591264069205 -28] -1.12408735930795]
Test Case: 902 | Input/Output: [[-18.293356952359673 -34] -52.29335695235967]
Test Case: 903 | Input/Output: [[-3.194691867748787 2] -1.1946918677487872]
Test Case: 904 | Input/Output: [[-59.576186394455256 84] 24.423813605544744]
Test Case: 905 | Input/Output: [[-15.725422603584988 -54] -69.72542260358499]
Test Case: 906 | Input/Output: [[88.68784559708809 80] 168.68784559708809]
Test Case: 907 | Input/Output: [[-40.36151275121451 84] 43.63848724878549]
Test Case: 908 | Input/Output: [[35.83946985820481 28] 63.83946985820481]
Test Case: 909 | Input/Output: [[85.69391419756366 -48] 37.69391419756366]
Test Case: 910 | Input/Output: [[81.75934280985777 18] 99.75934280985777]
Test Case: 911 | Input/Output: [[95.29260913244073 -39] 56.29260913244073]
Test Case: 912 | Input/Output: [[38.07778356880917 4] 42.07778356880917]
Test Case: 913 | Input/Output: [[-71.19356521720835 -80] -151.19356521720835]
Test Case: 914 | Input/Output: [[96.04440051727363 -71] 25.04440051727363]
Test Case: 915 | Input/Output: [[1.6912648690618823 10] 11.691264869061882]
Test Case: 916 | Input/Output: [[-74.80946887965179 -22] -96.80946887965179]
Test Case: 917 | Input/Output: [[3.243028340626708 0] 3.243028340626708]
Test Case: 918 | Input/Output: [[50.089907358840094 8] 58.089907358840094]
Test Case: 919 | Input/Output: [[-5.540832353109721 -21] -26.54083235310972]
Test Case: 920 | Input/Output: [[-62.9076498109808 -34] -96.9076498109808]
Test Case: 921 | Input/Output: [[81.07388299480442 -4] 77.07388299480442]
Test Case: 922 | Input/Output: [[13.66726032152718 26] 39.66726032152718]
Test Case: 923 | Input/Output: [[77.95668564254143 -35] 42.95668564254143]
Test Case: 924 | Input/Output: [[51.55498458705881 -98] -46.44501541294119]
Test Case: 925 | Input/Output: [[-0.9169592993435032 -98] -98.9169592993435]
Test Case: 926 | Input/Output: [[50.65323003966785 -35] 15.653230039667847]
Test Case: 927 | Input/Output: [[-31.332259285467302 -91] -122.3322592854673]
Test Case: 928 | Input/Output: [[39.32936587605414 94] 133.32936587605414]
Test Case: 929 | Input/Output: [[53.904096676068605 37] 90.9040966760686]
Test Case: 930 | Input/Output: [[-48.89190133119601 9] -39.89190133119601]
Test Case: 931 | Input/Output: [[-31.514725764368066 4] -27.514725764368066]
Test Case: 932 | Input/Output: [[47.43577442589219 17] 64.43577442589219]
Test Case: 933 | Input/Output: [[81.43148510292477 54] 135.43148510292477]
Test Case: 934 | Input/Output: [[24.932215673943062 -76] -51.06778432605694]
Test Case: 935 | Input/Output: [[-1.2203616356224956 -35] -36.220361635622496]
Test Case: 936 | Input/Output: [[-11.060127258358136 11] -0.06012725835813626]
Test Case: 937 | Input/Output: [[-47.44878790585976 87] 39.55121209414024]
Test Case: 938 | Input/Output: [[27.083103890275567 90] 117.08310389027557]
Test Case: 939 | Input/Output: [[85.15327687204874 -3] 82.15327687204874]
Test Case: 940 | Input/Output: [[16.66747472310435 7] 23.66747472310435]
Test Case: 941 | Input/Output: [[-78.20966291633009 84] 5.790337083669911]
Test Case: 942 | Input/Output: [[41.30836538832256 -35] 6.3083653883225566]
Test Case: 943 | Input/Output: [[21.337920983871328 -59] -37.66207901612867]
Test Case: 944 | Input/Output: [[-95.5877651506482 -17] -112.5877651506482]
Test Case: 945 | Input/Output: [[-34.71086305695536 -93] -127.71086305695536]
Test Case: 946 | Input/Output: [[28.527534144644733 30] 58.52753414464473]
Test Case: 947 | Input/Output: [[-5.929727319380177 -55] -60.92972731938018]
Test Case: 948 | Input/Output: [[8.819739331261772 -63] -54.18026066873823]
Test Case: 949 | Input/Output: [[-2.280339872576903 70] 67.7196601274231]
Test Case: 950 | Input/Output: [[56.52479264126015 -30] 26.52479264126015]
Test Case: 951 | Input/Output: [[-54.56102446206259 -90] -144.5610244620626]
Test Case: 952 | Input/Output: [[-31.525253456767558 84] 52.47474654323244]
Test Case: 953 | Input/Output: [[78.47217063763591 25] 103.47217063763591]
Test Case: 954 | Input/Output: [[-58.94554762377804 42] -16.94554762377804]
Test Case: 955 | Input/Output: [[-86.48771834057753 99] 12.51228165942247]
Test Case: 956 | Input/Output: [[74.81292923358492 74] 148.81292923358492]
Test Case: 957 | Input/Output: [[-23.82979683818843 -43] -66.82979683818843]
Test Case: 958 | Input/Output: [[-37.61097123849204 -22] -59.61097123849204]
Test Case: 959 | Input/Output: [[20.71936404779653 86] 106.71936404779653]
Test Case: 960 | Input/Output: [[36.805491518569056 -75] -38.194508481430944]
Test Case: 961 | Input/Output: [[-49.06317372644735 34] -15.063173726447353]
Test Case: 962 | Input/Output: [[-87.03050892321889 -32] -119.03050892321889]
Test Case: 963 | Input/Output: [[-56.86590041931729 -68] -124.86590041931728]
Test Case: 964 | Input/Output: [[13.45635463911698 24] 37.45635463911698]
Test Case: 965 | Input/Output: [[44.113435277370996 71] 115.113435277371]
Test Case: 966 | Input/Output: [[22.223417311043008 -2] 20.223417311043008]
Test Case: 967 | Input/Output: [[-37.98018547234068 40] 2.019814527659321]
Test Case: 968 | Input/Output: [[-88.16410561219759 -54] -142.1641056121976]
Test Case: 969 | Input/Output: [[-69.42003360661192 -70] -139.42003360661192]
Test Case: 970 | Input/Output: [[79.10102037504944 -68] 11.101020375049444]
Test Case: 971 | Input/Output: [[68.45272346503327 -14] 54.45272346503327]
Test Case: 972 | Input/Output: [[98.87848447765205 -53] 45.87848447765205]
Test Case: 973 | Input/Output: [[37.19370892675951 66] 103.19370892675951]
Test Case: 974 | Input/Output: [[54.182287585480594 -1] 53.182287585480594]
Test Case: 975 | Input/Output: [[48.04849034354419 0] 48.04849034354419]
Test Case: 976 | Input/Output: [[-19.887428678825316 4] -15.887428678825316]
Test Case: 977 | Input/Output: [[53.43851958977078 69] 122.43851958977078]
Test Case: 978 | Input/Output: [[-56.99639169317574 -62] -118.99639169317574]
Test Case: 979 | Input/Output: [[25.747640677522824 56] 81.74764067752282]
Test Case: 980 | Input/Output: [[38.503347838204775 -86] -47.496652161795225]
Test Case: 981 | Input/Output: [[11.964040239878585 -19] -7.035959760121415]
Test Case: 982 | Input/Output: [[49.529420576240454 -9] 40.529420576240454]
Test Case: 983 | Input/Output: [[56.361573740607696 60] 116.3615737406077]
Test Case: 984 | Input/Output: [[-89.24244371931258 -60] -149.24244371931258]
Test Case: 985 | Input/Output: [[43.67848907278952 79] 122.67848907278952]
Test Case: 986 | Input/Output: [[-84.86281231420192 99] 14.137187685798082]
Test Case: 987 | Input/Output: [[-94.71466002301257 -5] -99.71466002301257]
Test Case: 988 | Input/Output: [[58.520432638027984 43] 101.52043263802798]
Test Case: 989 | Input/Output: [[89.29134734037484 -26] 63.29134734037484]
Test Case: 990 | Input/Output: [[-23.746649176200336 40] 16.253350823799664]
Test Case: 991 | Input/Output: [[39.81516506376883 24] 63.81516506376883]
Test Case: 992 | Input/Output: [[-68.40171360582919 -44] -112.40171360582919]
Test Case: 993 | Input/Output: [[-15.234027221563423 -16] -31.234027221563423]
Test Case: 994 | Input/Output: [[77.10962342662009 -49] 28.10962342662009]
Test Case: 995 | Input/Output: [[-9.997815390091418 15] 5.002184609908582]
Test Case: 996 | Input/Output: [[1.1791490306874834 -100] -98.82085096931252]
Test Case: 997 | Input/Output: [[59.98545745042222 62] 121.98545745042222]
Test Case: 998 | Input/Output: [[-86.48628598849635 -99] -185.48628598849635]
Test Case: 999 | Input/Output: [[-59.268223356380645 -84] -143.26822335638064]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -114 105 81 -123 -36 34 63 -114 1 -54 68 -84 -14 -87 -78 93
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 62009.56730000002
Test mean error for best: 31.00478
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -92.0         
Correct output: -63.2352586418 | Program output: -49.0         
Correct output: 27.2333812574  | Program output: 55.0          
Correct output: -136.3711223178 | Program output: -42.0         
Correct output: 70.3877365207  | Program output: 94.0          
Correct output: 89.2001357371  | Program output: 97.0          
Correct output: 147.760546183  | Program output: 97.0          
Correct output: -137.3875804218 | Program output: -96.0         
Correct output: 161.1514033166 | Program output: 83.0          
Correct output: -95.9599100442 | Program output: -88.0         
Correct output: -120.308055299 | Program output: -87.0         
Correct output: -72.0801834627 | Program output: -4.0          
Correct output: -109.7122076235 | Program output: -83.0         
Correct output: 106.3138786569 | Program output: 32.0          
Correct output: 29.5231501286  | Program output: 73.0          
Correct output: 85.102682212   | Program output: 49.0          
Correct output: -100.2708478706 | Program output: -74.0         
Correct output: -22.9175151841 | Program output: -93.0         
Correct output: -94.4820838905 | Program output: -44.0         
Correct output: -11.5953117725 | Program output: -80.0         
Correct output: -13.7453326675 | Program output: 77.0          
Correct output: -20.3203574079 | Program output: -53.0         
Correct output: 161.8529283055 | Program output: 96.0          
Correct output: -55.7604817115 | Program output: -26.0         
Correct output: -28.6206702826 | Program output: 44.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_dec} {:instruction in2} {:instruction integer_inc} {:instruction float_add} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction 16} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_float} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction in2} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_div} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_cos} {:instruction print_float} {:instruction float_max} {:instruction -58.301778125360016} {:instruction integer_yank})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_dec in2 integer_inc float_add float_frominteger float_frominteger 16 float_sub float_dup_items integer_inc integer_dup float_pop integer_swap integer_shove print_float float_min float_dup_times integer_max float_stackdepth integer_swap in2 integer_dup_times float_pop float_dec integer_flush float_inc integer_inc integer_stackdepth integer_pop float_div float_swap integer_fromfloat float_dup_items integer_dup_items float_cos print_float float_max -58.301778125360016 integer_yank)
Errors: [93.0406 12 14.2353 12 27.7666 12 94.3711 13 23.6123 11 7.7999 11 50.7605 10 41.3876 12 78.1514 12 7.9599 11 33.3081 11 68.0802 11 26.7122 12 74.3139 13 43.4768 11 36.1027 10 26.2708 11 70.0825 12 50.4821 10 68.4047 12 90.7453 13 32.6796 11 65.8529 11 29.7605 11 72.6207 12]
Total: 1514.9782
Mean: 30.299564
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 18401.910988400003
Median total errors in population: 25348.0
Error averages by case: (751.0774711999976 14.049 718.5980174999972 13.264 705.2907416000008 13.212 735.6223905999988 14.156 716.0254727000001 13.158 719.1196060000003 13.148 731.2550649999974 12.518 739.7664462000016 14.074 734.5839151999971 13.393 728.9994734000019 13.26 734.8657784000026 13.18 717.3073557999995 13.226 731.9978818999982 14.047 716.6818905999978 13.278 708.4056533999996 13.194 712.973179100001 11.726 729.0370340000032 14.032 718.4644427999995 13.892 725.4645647000023 13.196 713.8135625000001 13.903 709.5671814999985 13.336 710.7498393000003 13.777 735.8370717000029 13.254 715.0782052999973 13.266 706.4357480000003 13.354)
Error minima by case: (0.9594 2 4.7647 1 1.7666 9 30.0 2 1.3877 8 0.2001 8 36.7605 3 32.6124 2 1.8486 2 0.0401 1 22.3081 2 1.0802 2 11.7122 3 4.3139 2 0.4768 8 0.4577 2 2.2708 3 0.3366 8 0.5179 2 0.6394 8 0.4114 2 1.3204 8 27.1471 2 1.7605 2 3.201 2)
Average genome size in population (length): 49.897
Average program size in population (points): 50.897
Average percent parens in population: 0.043
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.31
Error (vector) diversity:			 0.336
Behavioral diversity:				 0.356
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1250633
--- Timings ---
Current time: 1529614887734 milliseconds
Total Time:           3.9 seconds
Initialization:       0.1 seconds,  3.0%
Reproduction:         0.5 seconds, 14.0%
Fitness Testing:      3.3 seconds, 83.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 62020.85090000003
Test mean error for best: 31.01043
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -93.0         
Correct output: -63.2352586418 | Program output: -50.0         
Correct output: 27.2333812574  | Program output: 54.0          
Correct output: -136.3711223178 | Program output: -43.0         
Correct output: 70.3877365207  | Program output: 93.0          
Correct output: 89.2001357371  | Program output: 96.0          
Correct output: 147.760546183  | Program output: 96.0          
Correct output: -137.3875804218 | Program output: -97.0         
Correct output: 161.1514033166 | Program output: 82.0          
Correct output: -95.9599100442 | Program output: -89.0         
Correct output: -120.308055299 | Program output: -88.0         
Correct output: -72.0801834627 | Program output: -5.0          
Correct output: -109.7122076235 | Program output: -84.0         
Correct output: 106.3138786569 | Program output: 31.0          
Correct output: 29.5231501286  | Program output: 72.0          
Correct output: 85.102682212   | Program output: 48.0          
Correct output: -100.2708478706 | Program output: -75.0         
Correct output: -22.9175151841 | Program output: -94.0         
Correct output: -94.4820838905 | Program output: -45.0         
Correct output: -11.5953117725 | Program output: -81.0         
Correct output: -13.7453326675 | Program output: 76.0          
Correct output: -20.3203574079 | Program output: -54.0         
Correct output: 161.8529283055 | Program output: 95.0          
Correct output: -55.7604817115 | Program output: -27.0         
Correct output: -28.6206702826 | Program output: 43.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_dec} {:instruction in2} {:instruction float_sin} {:instruction float_add} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction 16} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_float} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction in2} {:instruction float_sub} {:instruction float_sin} {:instruction float_swap} {:instruction integer_div} {:instruction float_rot} {:instruction float_yankdup} {:instruction in2} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_pop} {:instruction in2} {:instruction float_pop} {:instruction float_mod} {:instruction float_dec} {:instruction float_swap})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_dec in2 float_sin float_add float_frominteger float_frominteger 16 float_sub float_dup_items integer_inc integer_dup float_pop integer_swap integer_shove print_float float_min float_dup_times integer_max float_stackdepth integer_swap in2 float_sub float_sin float_swap integer_div float_rot float_yankdup in2 float_dup_items integer_dup_items float_dup_items float_pop in2 float_pop float_mod float_dec float_swap)
Errors: [92.0406 12 13.2353 12 26.7666 12 93.3711 12 22.6123 11 6.7999 11 51.7605 11 40.3876 11 79.1514 12 6.9599 11 32.3081 11 67.0802 11 25.7122 12 75.3139 12 42.4768 11 37.1027 10 25.2708 12 71.0825 12 49.4821 11 69.4047 11 89.7453 12 33.6796 11 66.8529 12 28.7605 11 71.6207 12]
Total: 1504.9782
Mean: 30.099564
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 6218.5064561999825
Median total errors in population: 2425.8482999999997
Error averages by case: (298.21895710000103 11.567 222.7870261000002 10.748 203.09341880000005 12.121 267.74620779999793 11.667 227.86950100000018 12.305 231.99991010000008 12.195 257.95075530000116 10.456 267.03770169999757 11.566 266.3162496000007 11.262 242.0205457999979 10.805 257.22632369999843 10.691 229.21509489999886 10.905 250.78520410000107 11.637 232.69306100000097 10.898 211.37877060000002 12.381 219.67902379999876 9.799 244.91251049999963 11.526 224.5942790999996 12.609 241.0148313999983 10.643 216.55078960000003 12.722 217.2803398000011 10.874 206.76702980000024 12.489 266.9400585999992 10.751 218.79978250000076 10.836 211.0350834999998 11.141)
Error minima by case: (0.9594 2 4.7647 1 1.7666 4 30.0 2 1.7197 4 0.2001 8 4.0 2 32.6124 2 1.8486 2 0.0401 1 22.3081 2 1.0802 2 11.7122 3 4.3139 2 0.4768 8 0.4577 2 2.2708 3 0.3366 3 0.5179 2 0.3414 2 0.4114 2 1.3204 8 5.0 1 1.7605 2 3.201 2)
Average genome size in population (length): 56.268
Average program size in population (points): 57.268
Average percent parens in population: 0.023
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.527
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.278
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.32
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2660583
--- Timings ---
Current time: 1529614891745 milliseconds
Total Time:           8.2 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         2.6 seconds, 31.8%
Fitness Testing:      4.9 seconds, 59.8%
Report:               0.6 seconds,  7.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 62020.85090000003
Test mean error for best: 31.01043
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -93.0         
Correct output: -63.2352586418 | Program output: -50.0         
Correct output: 27.2333812574  | Program output: 54.0          
Correct output: -136.3711223178 | Program output: -43.0         
Correct output: 70.3877365207  | Program output: 93.0          
Correct output: 89.2001357371  | Program output: 96.0          
Correct output: 147.760546183  | Program output: 96.0          
Correct output: -137.3875804218 | Program output: -97.0         
Correct output: 161.1514033166 | Program output: 82.0          
Correct output: -95.9599100442 | Program output: -89.0         
Correct output: -120.308055299 | Program output: -88.0         
Correct output: -72.0801834627 | Program output: -5.0          
Correct output: -109.7122076235 | Program output: -84.0         
Correct output: 106.3138786569 | Program output: 31.0          
Correct output: 29.5231501286  | Program output: 72.0          
Correct output: 85.102682212   | Program output: 48.0          
Correct output: -100.2708478706 | Program output: -75.0         
Correct output: -22.9175151841 | Program output: -94.0         
Correct output: -94.4820838905 | Program output: -45.0         
Correct output: -11.5953117725 | Program output: -81.0         
Correct output: -13.7453326675 | Program output: 76.0          
Correct output: -20.3203574079 | Program output: -54.0         
Correct output: 161.8529283055 | Program output: 95.0          
Correct output: -55.7604817115 | Program output: -27.0         
Correct output: -28.6206702826 | Program output: 43.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_dec} {:instruction in2} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction 16} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_float} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction in2} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_div} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_cos} {:instruction print_float} {:instruction float_max} {:instruction -58.301778125360016} {:instruction integer_yank})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_dec in2 integer_swap integer_yank float_frominteger float_frominteger 16 float_sub float_dup_items integer_inc integer_dup float_pop integer_swap integer_shove print_float float_min float_dup_times integer_max float_stackdepth integer_swap in2 integer_dup_times float_pop float_dec integer_flush float_inc integer_inc integer_stackdepth integer_pop float_div float_swap integer_fromfloat float_dup_items integer_dup_items float_cos print_float float_max -58.301778125360016 integer_yank)
Errors: [92.0406 12 13.2353 12 26.7666 12 93.3711 12 22.6123 11 6.7999 11 51.7605 11 40.3876 11 79.1514 12 6.9599 11 32.3081 11 67.0802 11 25.7122 12 75.3139 12 42.4768 11 37.1027 10 25.2708 12 71.0825 12 49.4821 11 69.4047 11 89.7453 12 33.6796 11 66.8529 12 28.7605 11 71.6207 12]
Total: 1504.9782
Mean: 30.099564
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 4427.886448700004
Median total errors in population: 1526.9782
Error averages by case: (205.02254930000032 11.813 139.18201440000013 10.832 143.55608600000136 11.678 195.04331769999828 11.869 150.23066579999883 12.23 140.71236969999998 12.021 172.37982930000143 10.709 168.1715456999987 11.862 188.89031390000136 12.107 143.10499010000018 10.879 161.2695953999978 10.869 166.34182889999818 11.419 155.66203659999962 12.457 174.99283759999997 11.095 158.09380810000138 12.218 150.97341280000026 9.966 153.42046979999907 11.757 185.47361649999849 11.933 164.4383617999975 10.422 180.87343140000212 12.417 191.02188380000092 10.887 151.1579620000016 11.874 183.09471299999902 10.877 145.1843329000012 10.903 172.46547619999964 12.035)
Error minima by case: (0.9594 2 2.2353 1 11.4018 8 1.3711 2 2.3877 9 4.7999 8 3.0 2 2.3876 2 1.8486 2 0.0401 1 14.6919 2 4.0 2 18.7122 3 11.3139 2 14.2425 9 9.8973 2 18.2708 3 0.3366 8 4.4821 2 0.5953 8 0.4114 2 1.3204 9 4.0 1 1.7605 2 3.201 2)
Average genome size in population (length): 50.045
Average program size in population (points): 51.045
Average percent parens in population: 0.024
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.038
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.673
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.119
Error (vector) diversity:			 0.121
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3915058
--- Timings ---
Current time: 1529614895149 milliseconds
Total Time:          11.5 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.1 seconds, 36.0%
Fitness Testing:      6.3 seconds, 55.0%
Report:               0.9 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 63941.08330000001
Test mean error for best: 31.97054
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -110          
Correct output: -63.2352586418 | Program output: -67           
Correct output: 27.2333812574  | Program output: 37            
Correct output: -136.3711223178 | Program output: -60           
Correct output: 70.3877365207  | Program output: 76            
Correct output: 89.2001357371  | Program output: 79            
Correct output: 147.760546183  | Program output: 79            
Correct output: -137.3875804218 | Program output: -114          
Correct output: 161.1514033166 | Program output: 65            
Correct output: -95.9599100442 | Program output: -106          
Correct output: -120.308055299 | Program output: -105          
Correct output: -72.0801834627 | Program output: -22           
Correct output: -109.7122076235 | Program output: -101          
Correct output: 106.3138786569 | Program output: 14            
Correct output: 29.5231501286  | Program output: 55            
Correct output: 85.102682212   | Program output: 31            
Correct output: -100.2708478706 | Program output: -92           
Correct output: -22.9175151841 | Program output: -111          
Correct output: -94.4820838905 | Program output: -62           
Correct output: -11.5953117725 | Program output: -98           
Correct output: -13.7453326675 | Program output: 59            
Correct output: -20.3203574079 | Program output: -71           
Correct output: 161.8529283055 | Program output: 78            
Correct output: -55.7604817115 | Program output: -44           
Correct output: -28.6206702826 | Program output: 26            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction -17} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_rot} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_tan} {:instruction float_pop} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 -17 integer_fromfloat float_flush integer_stackdepth integer_sub integer_shove float_rot float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_mult integer_dec in2 tag_float_134 integer_add float_tan float_pop float_shove integer_mult integer_inc integer_mult float_mod integer_max integer_mod print_integer)
Errors: [75.0406 12 3.7647 12 9.7666 11 76.3711 13 5.6123 11 10.2001 12 68.7605 12 23.3876 12 96.1514 12 10.0401 11 15.3081 10 50.0802 11 8.7122 11 92.3139 13 25.4768 11 54.1027 11 8.2708 13 88.0825 10 32.4821 12 86.4047 12 72.7453 13 50.6796 12 83.8529 13 11.7605 12 54.6207 12]
Total: 1407.9880000000003
Mean: 28.15976
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3571.957030500008
Median total errors in population: 1520.9782
Error averages by case: (173.44541539999983 12.78 100.65120000000024 11.96 107.2401651000017 11.73 173.20456629999788 13.216 104.6968989999976 11.726 90.80687259999937 11.545 131.88833240000133 11.446 126.66018330000108 12.703 156.46615520000174 13.07 96.09770470000132 11.604 119.06388979999791 11.628 148.27210019999757 12.178 112.95862569999814 13.326 151.48278299999916 12.519 121.66710190000116 11.711 117.1410531000021 10.904 112.29663489999874 12.519 152.29598179999928 11.623 133.4111960999971 11.205 150.44392940000156 12.067 164.0832924000009 12.317 118.27977020000205 11.436 145.61467119999867 12.042 114.073344400001 11.802 147.58716239999958 13.071)
Error minima by case: (75.0406 3 3.7647 1 7.2334 10 42.0 2 5.6123 9 4.7999 8 11.2395 3 23.3876 3 16.1514 3 4.9599 2 15.3081 2 4.0 2 8.7122 3 12.3139 3 9.5232 10 25.8973 2 8.2708 3 8.0825 10 32.4821 2 6.4047 11 5.276 2 19.3204 9 3.8529 2 11.7605 2 27.6207 2)
Average genome size in population (length): 44.068
Average program size in population (points): 45.068
Average percent parens in population: 0.026
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.57575
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 60
Genome diversity (% unique Plush genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.046
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5018358
--- Timings ---
Current time: 1529614898461 milliseconds
Total Time:          14.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.0 seconds, 40.1%
Fitness Testing:      7.5 seconds, 50.0%
Report:               1.4 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 63179.2969
Test mean error for best: 31.58965
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -109.0
       
Correct output: -63.2352586418 | Program output: -66.0
        
Correct output: 27.2333812574  | Program output: 38.0
         
Correct output: -136.3711223178 | Program output: -59.0
        
Correct output: 70.3877365207  | Program output: 77.0
         
Correct output: 89.2001357371  | Program output: 80.0
         
Correct output: 147.760546183  | Program output: 80.0
         
Correct output: -137.3875804218 | Program output: -113.0
       
Correct output: 161.1514033166 | Program output: 66.0
         
Correct output: -95.9599100442 | Program output: -105.0
       
Correct output: -120.308055299 | Program output: -104.0
       
Correct output: -72.0801834627 | Program output: -21.0
        
Correct output: -109.7122076235 | Program output: -100.0
       
Correct output: 106.3138786569 | Program output: 15.0
         
Correct output: 29.5231501286  | Program output: 56.0
         
Correct output: 85.102682212   | Program output: 32.0
         
Correct output: -100.2708478706 | Program output: -91.0
        
Correct output: -22.9175151841 | Program output: -110.0
       
Correct output: -94.4820838905 | Program output: -61.0
        
Correct output: -11.5953117725 | Program output: -97.0
        
Correct output: -13.7453326675 | Program output: 60.0
         
Correct output: -20.3203574079 | Program output: -70.0
        
Correct output: 161.8529283055 | Program output: 79.0
         
Correct output: -55.7604817115 | Program output: -43.0
        
Correct output: -28.6206702826 | Program output: 27.0
         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_dec} {:instruction in2} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction 16} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction 16} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_float} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction in2} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction print_newline} {:instruction float_div} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_cos} {:instruction print_float} {:instruction float_max} {:instruction -58.301778125360016} {:instruction integer_yank})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_dec in2 integer_swap integer_yank float_frominteger float_frominteger 16 integer_sub float_frominteger float_frominteger 16 float_sub float_dup_items integer_inc integer_dup float_pop integer_swap integer_shove print_float float_min float_dup_times integer_max float_stackdepth integer_swap in2 integer_dup_times float_pop float_dec integer_flush float_inc integer_inc integer_stackdepth print_newline float_div float_swap integer_fromfloat float_dup_items integer_dup_items float_cos print_float float_max -58.301778125360016 integer_yank)
Errors: [76.0406 11 2.7647 11 10.7666 11 77.3711 13 6.6123 10 9.2001 10 67.7605 11 24.3876 11 95.1514 11 9.0401 11 16.3081 10 51.0802 11 9.7122 10 91.3139 12 26.4768 11 53.1027 10 9.2708 12 87.0825 11 33.4821 11 85.4047 11 73.7453 13 49.6796 10 82.8529 12 12.7605 11 55.6207 11]
Total: 1392.9880000000003
Mean: 27.85976
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3895.0207304000073
Median total errors in population: 1514.9782
Error averages by case: (185.8128093999993 12.433 113.58042220000023 12.003 121.3723810000014 12.067 184.87904209999874 13.015 119.47792079999823 11.417 106.27100059999935 11.228 146.7915752000011 10.995 139.79378930000038 12.18 170.78057910000152 12.331 109.75133860000103 11.272 132.20122099999836 11.314 158.82184199999793 11.451 126.14153869999872 12.513 164.83783449999927 12.699 135.631954600001 11.375 131.46345290000156 10.528 125.37730149999895 11.966 164.37970139999956 12.015 145.62497699999764 11.099 162.462959400001 11.879 176.75736940000047 12.487 130.77799090000156 11.469 160.29491899999894 11.939 126.11202010000068 11.492 160.11778969999955 12.34)
Error minima by case: (1.0406 2 1.7647 5 9.7666 10 38.5967 3 5.6123 9 4.7999 9 36.7605 5 23.3876 6 4.8486 4 1.8145 4 15.3081 6 0.6146 2 8.7122 6 4.6861 3 12.5232 10 12.8973 5 2.4965 6 20.9175 10 3.2923 2 9.5953 9 11.7453 2 2.1452 9 30.1471 4 3.7605 2 14.3793 3)
Average genome size in population (length): 45.136
Average program size in population (points): 46.136
Average percent parens in population: 0.023
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.1115
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.053
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6146883
--- Timings ---
Current time: 1529614901499 milliseconds
Total Time:          17.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.5 seconds, 42.0%
Fitness Testing:      8.6 seconds, 48.0%
Report:               1.7 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 63160.2969
Test mean error for best: 31.58015
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -109.0        
Correct output: -63.2352586418 | Program output: -66.0         
Correct output: 27.2333812574  | Program output: 38.0          
Correct output: -136.3711223178 | Program output: -59.0         
Correct output: 70.3877365207  | Program output: 77.0          
Correct output: 89.2001357371  | Program output: 80.0          
Correct output: 147.760546183  | Program output: 80.0          
Correct output: -137.3875804218 | Program output: -113.0        
Correct output: 161.1514033166 | Program output: 66.0          
Correct output: -95.9599100442 | Program output: -105.0        
Correct output: -120.308055299 | Program output: -104.0        
Correct output: -72.0801834627 | Program output: -21.0         
Correct output: -109.7122076235 | Program output: -100.0        
Correct output: 106.3138786569 | Program output: 15.0          
Correct output: 29.5231501286  | Program output: 56.0          
Correct output: 85.102682212   | Program output: 32.0          
Correct output: -100.2708478706 | Program output: -91.0         
Correct output: -22.9175151841 | Program output: -110.0        
Correct output: -94.4820838905 | Program output: -61.0         
Correct output: -11.5953117725 | Program output: -97.0         
Correct output: -13.7453326675 | Program output: 60.0          
Correct output: -20.3203574079 | Program output: -70.0         
Correct output: 161.8529283055 | Program output: 79.0          
Correct output: -55.7604817115 | Program output: -43.0         
Correct output: -28.6206702826 | Program output: 27.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_dec} {:instruction in2} {:instruction float_sin} {:instruction float_frominteger} {:instruction 16} {:instruction float_sub} {:instruction float_frominteger} {:instruction 16} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_shove} {:instruction print_float} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_max} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_div} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_cos} {:instruction print_float} {:instruction float_max} {:instruction -58.301778125360016})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_dec in2 float_sin float_frominteger 16 float_sub float_frominteger 16 float_sub float_dup_items integer_inc integer_dup float_pop integer_swap integer_shove print_float float_min float_dup_times integer_max integer_flush float_inc integer_inc integer_stackdepth integer_pop float_div float_swap integer_fromfloat float_dup_items integer_dup_items float_cos print_float float_max -58.301778125360016)
Errors: [76.0406 11 2.7647 11 10.7666 11 77.3711 13 6.6123 10 9.2001 10 67.7605 11 24.3876 11 95.1514 11 9.0401 11 16.3081 10 51.0802 11 9.7122 10 91.3139 12 26.4768 11 53.1027 10 9.2708 12 87.0825 11 33.4821 11 85.4047 11 73.7453 13 49.6796 10 82.8529 12 12.7605 11 55.6207 11]
Total: 1392.9880000000003
Mean: 27.85976
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3958.106603900007
Median total errors in population: 1504.9782
Error averages by case: (188.6045272999998 12.281 116.7411438000002 12.114 122.22713420000159 12.01 187.58938929999803 12.54 121.0240908999979 11.207 108.97286299999928 11.148 150.30637960000118 11.217 142.81769190000003 11.64 173.8577983000017 12.108 113.70618780000109 11.198 135.19825889999797 11.246 160.6511588999977 11.317 129.13185919999822 12.259 166.82203179999996 12.255 136.46350410000096 11.207 134.34478460000165 10.295 128.3129340999988 12.261 168.26591989999852 12.001 148.4408005999974 11.333 166.23422320000213 11.491 177.19058060000086 12.237 135.05560510000197 11.321 163.69368279999875 12.202 129.1202998000009 11.375 160.9877541999996 12.083)
Error minima by case: (0.9594 4 1.7647 10 0.7666 7 50.3711 4 5.6123 9 4.7999 8 29.7605 9 23.3876 10 2.8486 9 4.9599 8 15.3081 9 3.3919 3 8.7122 10 11.3139 4 2.4768 9 9.8973 9 8.2708 10 20.8838 9 4.4821 3 9.5616 10 0.2547 3 6.1518 8 28.1471 9 1.7605 3 6.5071 4)
Average genome size in population (length): 45.307
Average program size in population (points): 46.307
Average percent parens in population: 0.023
Minimum age in population: 5.125
Maximum age in population: 9.3125
Average age in population: 7.6276875
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.063
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7279583
--- Timings ---
Current time: 1529614904571 milliseconds
Total Time:          21.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.2 seconds, 43.5%
Fitness Testing:      9.7 seconds, 46.1%
Report:               2.1 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 29766.739100000006
Test mean error for best: 14.88337
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -167          
Correct output: -63.2352586418 | Program output: -45           
Correct output: 27.2333812574  | Program output: 46            
Correct output: -136.3711223178 | Program output: -118          
Correct output: 70.3877365207  | Program output: 89            
Correct output: 89.2001357371  | Program output: 108           
Correct output: 147.760546183  | Program output: 165           
Correct output: -137.3875804218 | Program output: -119          
Correct output: 161.1514033166 | Program output: 179           
Correct output: -95.9599100442 | Program output: -77           
Correct output: -120.308055299 | Program output: -102          
Correct output: -72.0801834627 | Program output: -54           
Correct output: -109.7122076235 | Program output: -91           
Correct output: 106.3138786569 | Program output: 124           
Correct output: 29.5231501286  | Program output: 48            
Correct output: 85.102682212   | Program output: 103           
Correct output: -100.2708478706 | Program output: -82           
Correct output: -22.9175151841 | Program output: -5            
Correct output: -94.4820838905 | Program output: -76           
Correct output: -11.5953117725 | Program output: 6             
Correct output: -13.7453326675 | Program output: 5             
Correct output: -20.3203574079 | Program output: -3            
Correct output: 161.8529283055 | Program output: 179           
Correct output: -55.7604817115 | Program output: -37           
Correct output: -28.6206702826 | Program output: -10           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction -17} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_rot} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_tan} {:instruction float_pop} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 -17 integer_fromfloat float_flush integer_swap integer_sub integer_shove float_rot float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_mult float_dec in2 tag_float_134 integer_add float_tan float_pop float_shove float_div integer_inc integer_mult float_mod integer_max integer_mod print_integer)
Errors: [18.0406 11 18.2353 12 18.7666 13 18.3711 11 18.6123 12 18.7999 12 17.2395 10 18.3876 12 17.8486 13 18.9599 13 18.3081 10 18.0802 12 18.7122 12 17.6861 13 18.4768 12 17.8973 10 18.2708 13 17.9175 12 18.4821 13 17.5953 14 18.7453 13 17.3204 12 17.1471 12 18.7605 12 18.6207 12]
Total: 756.2818
Mean: 15.125636
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3672.1411452000066
Median total errors in population: 1494.9782
Error averages by case: (180.41737299999951 12.01 107.94239030000013 11.94 101.87091430000125 11.806 179.36376809999842 12.742 99.90541519999888 11.03 91.05348619999981 10.945 137.78908240000086 11.213 133.77797150000086 11.744 162.24910570000156 11.713 107.06301730000055 10.943 125.87120269999832 10.919 152.11255989999776 11.155 119.55536299999866 11.847 155.91089899999906 12.2 116.5281306000006 11.151 121.6997778000018 10.253 118.77946219999887 12.239 165.43647149999913 11.533 139.80883089999776 11.294 163.53091580000134 11.69 158.01844429999994 12.36 131.9415322000017 11.219 151.64032729999872 12.22 119.06052830000058 11.314 141.78717569999955 11.547)
Error minima by case: (0.0111 3 1.7647 1 4.2334 10 18.3711 2 4.6123 8 1.7999 8 17.2395 3 9.3876 3 3.1618 3 4.9599 2 1.3081 2 3.0802 1 5.2878 3 15.3139 3 11.4768 9 5.8973 2 5.7292 3 6.9175 8 3.6312 1 2.5625 9 2.2547 2 4.3204 9 17.1471 2 0.8041 2 12.6207 2)
Average genome size in population (length): 46.016
Average program size in population (points): 47.016
Average percent parens in population: 0.022
Minimum age in population: 6.5
Maximum age in population: 11.03125
Average age in population: 9.16578125
Median age in population: 9.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.087
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 8430008
--- Timings ---
Current time: 1529614907638 milliseconds
Total Time:          24.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.7 seconds, 44.7%
Fitness Testing:     10.9 seconds, 45.1%
Report:               2.3 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 28791.73910000001
Test mean error for best: 14.39587
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -168          
Correct output: -63.2352586418 | Program output: -46           
Correct output: 27.2333812574  | Program output: 45            
Correct output: -136.3711223178 | Program output: -119          
Correct output: 70.3877365207  | Program output: 88            
Correct output: 89.2001357371  | Program output: 107           
Correct output: 147.760546183  | Program output: 164           
Correct output: -137.3875804218 | Program output: -120          
Correct output: 161.1514033166 | Program output: 178           
Correct output: -95.9599100442 | Program output: -78           
Correct output: -120.308055299 | Program output: -103          
Correct output: -72.0801834627 | Program output: -55           
Correct output: -109.7122076235 | Program output: -92           
Correct output: 106.3138786569 | Program output: 123           
Correct output: 29.5231501286  | Program output: 47            
Correct output: 85.102682212   | Program output: 102           
Correct output: -100.2708478706 | Program output: -83           
Correct output: -22.9175151841 | Program output: -6            
Correct output: -94.4820838905 | Program output: -77           
Correct output: -11.5953117725 | Program output: 5             
Correct output: -13.7453326675 | Program output: 4             
Correct output: -20.3203574079 | Program output: -4            
Correct output: 161.8529283055 | Program output: 178           
Correct output: -55.7604817115 | Program output: -38           
Correct output: -28.6206702826 | Program output: -11           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_inc} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction -17} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_rot} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_max} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_tan} {:instruction float_pop} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_mult float_dup integer_inc print_integer float_cos float_yank float_cos float_sin in1 -17 integer_fromfloat float_flush integer_swap integer_sub integer_shove float_rot float_flush float_yank integer_mult float_dup_times float_add integer_max float_swap integer_shove float_yank integer_mult integer_dec in2 tag_float_134 integer_add float_tan float_pop float_shove float_div integer_inc integer_mult float_mod integer_max integer_mod print_integer)
Errors: [17.0406 12 17.2353 12 17.7666 12 17.3711 12 17.6123 12 17.7999 11 16.2395 10 17.3876 12 16.8486 13 17.9599 13 17.3081 10 17.0802 13 17.7122 12 16.6861 12 17.4768 13 16.8973 9 17.2708 13 16.9175 13 17.4821 13 16.5953 13 17.7453 13 16.3204 12 16.1471 12 17.7605 12 17.6207 13]
Total: 732.2818
Mean: 14.645636
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3894.7220214000054
Median total errors in population: 1393.9880000000003
Error averages by case: (187.19245209999957 11.628 116.40266839999987 11.57 101.2703415000014 11.448 185.17864829999826 13.061 100.25039779999877 10.604 100.02109180000056 10.653 154.43874520000153 11.241 141.16040300000023 11.686 178.53252610000177 11.472 121.69810649999926 11.106 132.8466265999982 10.43 158.0940014999976 11.148 126.31482559999857 11.103 169.74990309999956 12.164 116.00235280000047 11.171 136.98982170000156 10.32 125.27516679999877 12.259 185.15166599999856 11.336 146.33265739999712 11.434 182.8112853000024 11.702 156.54744729999942 12.748 151.58032480000196 10.962 168.20155529999863 12.246 125.37567920000059 11.431 141.05832729999955 11.322)
Error minima by case: (17.0406 9 0.2353 10 0.7666 9 17.3711 10 4.6123 8 4.2001 8 12.2395 9 8.3876 10 16.8486 8 4.0401 9 0.3081 7 5.0802 9 6.2878 9 16.6861 9 10.4768 9 16.8973 8 6.7292 9 5.9175 8 17.4821 10 4.4047 9 2.2547 9 3.3204 8 3.8529 9 3.2395 8 4.3793 8)
Average genome size in population (length): 47.821
Average program size in population (points): 48.821
Average percent parens in population: 0.021
Minimum age in population: 8.375
Maximum age in population: 12.5
Average age in population: 10.547625
Median age in population: 10.59375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.1
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 9625533
--- Timings ---
Current time: 1529614910637 milliseconds
Total Time:          27.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.2 seconds, 45.2%
Fitness Testing:     12.1 seconds, 44.5%
Report:               2.7 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 12963.7391
Test mean error for best: 6.48187
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: 
-184         
Correct output: -63.2352586418 | Program output: 
-62          
Correct output: 27.2333812574  | Program output: 
29           
Correct output: -136.3711223178 | Program output: 
-135         
Correct output: 70.3877365207  | Program output: 
72           
Correct output: 89.2001357371  | Program output: 
91           
Correct output: 147.760546183  | Program output: 
148          
Correct output: -137.3875804218 | Program output: 
-136         
Correct output: 161.1514033166 | Program output: 
162          
Correct output: -95.9599100442 | Program output: 
-94          
Correct output: -120.308055299 | Program output: 
-119         
Correct output: -72.0801834627 | Program output: 
-71          
Correct output: -109.7122076235 | Program output: 
-108         
Correct output: 106.3138786569 | Program output: 
107          
Correct output: 29.5231501286  | Program output: 
31           
Correct output: 85.102682212   | Program output: 
86           
Correct output: -100.2708478706 | Program output: 
-99          
Correct output: -22.9175151841 | Program output: 
-22          
Correct output: -94.4820838905 | Program output: 
-93          
Correct output: -11.5953117725 | Program output: 
-11          
Correct output: -13.7453326675 | Program output: 
-12          
Correct output: -20.3203574079 | Program output: 
-20          
Correct output: 161.8529283055 | Program output: 
162          
Correct output: -55.7604817115 | Program output: 
-54          
Correct output: -28.6206702826 | Program output: 
-27          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_rot} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_tan} {:instruction float_pop} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction float_cos} {:instruction print_newline} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 float_dup_times integer_fromfloat float_flush integer_swap integer_sub integer_shove float_rot float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank float_dec float_dec in2 tag_float_134 integer_add float_tan float_pop float_shove float_div integer_inc float_cos print_newline integer_max integer_mod print_integer)
Errors: [1.0406 12 1.2353 12 1.7666 12 1.3711 13 1.6123 11 1.7999 11 0.2395 11 1.3876 13 0.8486 12 1.9599 12 1.3081 12 1.0802 12 1.7122 13 0.6861 12 1.4768 11 0.8973 11 1.2708 15 0.9175 12 1.4821 12 0.5953 12 1.7453 12 0.3204 12 0.1471 12 1.7605 12 1.6207 12]
Total: 331.28180000000003
Mean: 6.625636
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3170.1944571999975
Median total errors in population: 1392.9880000000003
Error averages by case: (154.51775099999819 11.298 87.02732269999981 11.315 75.00548540000098 11.263 152.95755439999982 12.993 74.20839300000019 10.335 76.94110410000037 10.191 128.90596640000072 11.038 109.0917361000009 11.364 152.6069712000014 11.28 93.70527499999913 11.262 101.43432069999915 10.295 126.70127339999794 11.143 95.40175719999982 10.611 144.2420080999985 12.047 88.45311739999948 11.136 112.56478640000161 10.108 94.48517849999895 12.129 154.48992669999998 11.319 114.18048919999815 11.247 150.50054560000075 11.463 126.9962709999985 12.895 123.03742940000161 10.507 142.37112319999895 12.034 94.92775329999968 11.269 113.78091779999961 11.118)
Error minima by case: (0.0406 9 1.2353 9 1.7666 9 1.3711 9 1.6123 7 1.7999 8 0.2395 7 1.3876 10 0.8486 9 1.9599 9 0.3081 8 1.0802 9 1.7122 9 0.6861 9 1.4768 8 0.8973 8 1.2708 8 0.9175 9 1.3164 8 0.5953 9 1.4303 8 0.3204 8 0.1471 9 0.6996 8 1.6207 9)
Average genome size in population (length): 47.925
Average program size in population (points): 48.925
Average percent parens in population: 0.021
Minimum age in population: 9.75
Maximum age in population: 13.7109375
Average age in population: 12.083296875
Median age in population: 12.140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.093
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 10823658
--- Timings ---
Current time: 1529614913865 milliseconds
Total Time:          30.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.8 seconds, 45.8%
Fitness Testing:     13.3 seconds, 43.9%
Report:               3.0 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 11494.85090000002
Test mean error for best: 5.74743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185          
Correct output: -63.2352586418 | Program output: -63           
Correct output: 27.2333812574  | Program output: 28            
Correct output: -136.3711223178 | Program output: -136          
Correct output: 70.3877365207  | Program output: 71            
Correct output: 89.2001357371  | Program output: 90            
Correct output: 147.760546183  | Program output: 147           
Correct output: -137.3875804218 | Program output: -137          
Correct output: 161.1514033166 | Program output: 161           
Correct output: -95.9599100442 | Program output: -95           
Correct output: -120.308055299 | Program output: -120          
Correct output: -72.0801834627 | Program output: -72           
Correct output: -109.7122076235 | Program output: -109          
Correct output: 106.3138786569 | Program output: 106           
Correct output: 29.5231501286  | Program output: 30            
Correct output: 85.102682212   | Program output: 85            
Correct output: -100.2708478706 | Program output: -100          
Correct output: -22.9175151841 | Program output: -23           
Correct output: -94.4820838905 | Program output: -94           
Correct output: -11.5953117725 | Program output: -12           
Correct output: -13.7453326675 | Program output: -13           
Correct output: -20.3203574079 | Program output: -21           
Correct output: 161.8529283055 | Program output: 161           
Correct output: -55.7604817115 | Program output: -55           
Correct output: -28.6206702826 | Program output: -28           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_rot} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 float_rot integer_fromfloat float_flush integer_swap integer_sub integer_shove float_rot float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_mult float_dec in2 tag_float_134 integer_add float_tan integer_stackdepth float_shove float_div integer_mult integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 11 0.2353 11 0.7666 11 0.3711 11 0.6123 12 0.7999 11 0.7605 10 0.3876 11 0.1514 11 0.9599 11 0.3081 10 0.0802 11 0.7122 11 0.3139 11 0.4768 11 0.1027 10 0.2708 11 0.0825 12 0.4821 11 0.4047 11 0.7453 11 0.6796 12 0.8529 11 0.7605 11 0.6207 11]
Total: 286.97819999999996
Mean: 5.739564
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3207.399449100005
Median total errors in population: 1389.9880000000003
Error averages by case: (158.15510029999857 11.139 98.64822779999986 11.406 73.02489450000078 11.346 155.8025101999994 12.78 73.34939319999991 10.594 76.48123280000023 10.071 121.28712930000023 10.854 119.23137780000096 11.495 141.65985980000076 11.431 106.00679219999938 11.376 112.44706539999872 10.185 130.84535509999785 10.954 107.06612719999936 10.866 133.92544179999888 11.983 85.49284909999965 11.19 106.10555840000085 9.986 105.95257849999882 12.072 156.18298879999972 11.357 122.47407419999794 11.28 152.3639526000007 11.977 117.34234369999889 12.729 128.05818620000124 10.8 132.97501059999928 11.97 104.88151170000005 11.341 105.4908878999997 10.967)
Error minima by case: (0.0406 2 0.2353 2 0.7666 3 0.3711 2 0.6123 2 0.7999 3 0.2395 3 0.3876 3 0.1514 2 0.9599 2 0.3081 3 0.0802 1 0.7122 3 0.3139 2 0.4768 9 0.1027 2 0.2708 3 0.0825 9 0.4821 2 0.4047 8 0.7453 2 0.3204 8 0.1471 3 0.7605 2 0.6207 2)
Average genome size in population (length): 48.547
Average program size in population (points): 49.547
Average percent parens in population: 0.021
Minimum age in population: 11.5
Maximum age in population: 15.6328125
Average age in population: 13.70646875
Median age in population: 13.7890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.143
Error (vector) diversity:			 0.148
Behavioral diversity:				 0.159
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 12037333
--- Timings ---
Current time: 1529614917025 milliseconds
Total Time:          33.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.3 seconds, 45.6%
Fitness Testing:     14.6 seconds, 43.8%
Report:               3.4 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 11494.85090000002
Test mean error for best: 5.74743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185          
Correct output: -63.2352586418 | Program output: -63           
Correct output: 27.2333812574  | Program output: 28            
Correct output: -136.3711223178 | Program output: -136          
Correct output: 70.3877365207  | Program output: 71            
Correct output: 89.2001357371  | Program output: 90            
Correct output: 147.760546183  | Program output: 147           
Correct output: -137.3875804218 | Program output: -137          
Correct output: 161.1514033166 | Program output: 161           
Correct output: -95.9599100442 | Program output: -95           
Correct output: -120.308055299 | Program output: -120          
Correct output: -72.0801834627 | Program output: -72           
Correct output: -109.7122076235 | Program output: -109          
Correct output: 106.3138786569 | Program output: 106           
Correct output: 29.5231501286  | Program output: 30            
Correct output: 85.102682212   | Program output: 85            
Correct output: -100.2708478706 | Program output: -100          
Correct output: -22.9175151841 | Program output: -23           
Correct output: -94.4820838905 | Program output: -94           
Correct output: -11.5953117725 | Program output: -12           
Correct output: -13.7453326675 | Program output: -13           
Correct output: -20.3203574079 | Program output: -21           
Correct output: 161.8529283055 | Program output: 161           
Correct output: -55.7604817115 | Program output: -55           
Correct output: -28.6206702826 | Program output: -28           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_rot} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_mult float_dup float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 float_rot integer_fromfloat float_flush integer_swap integer_sub integer_shove float_rot float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_mult float_dec in2 tag_float_134 integer_add float_tan integer_stackdepth float_shove float_div integer_mult integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 11 0.2353 11 0.7666 11 0.3711 11 0.6123 12 0.7999 11 0.7605 10 0.3876 11 0.1514 11 0.9599 11 0.3081 10 0.0802 11 0.7122 11 0.3139 11 0.4768 11 0.1027 10 0.2708 11 0.0825 12 0.4821 11 0.4047 11 0.7453 11 0.6796 12 0.8529 11 0.7605 11 0.6207 11]
Total: 286.97819999999996
Mean: 5.739564
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2742.4034112000036
Median total errors in population: 771.2818
Error averages by case: (125.53903199999732 11.419 86.08362530000008 11.797 68.24982170000071 11.831 124.00357900000084 12.262 68.01779050000042 11.397 72.63434369999968 10.871 96.38843509999991 10.502 105.33016630000091 11.936 106.73637249999932 12.237 95.30371980000041 12.214 101.14950189999884 10.29 105.78719169999819 11.681 95.88585729999933 11.71 102.00828960000045 12.202 79.74998779999935 11.682 86.98272369999948 9.819 94.44866429999895 12.59 121.9906812999997 11.971 106.5149506999982 12.089 118.9140991000002 12.793 96.8517573999994 12.688 106.09088489999971 11.495 102.43243200000019 12.002 91.49245340000004 11.773 90.7040501999998 11.862)
Error minima by case: (0.0406 2 0.2353 6 0.7666 9 0.3711 2 0.6123 9 0.7999 3 0.2395 4 0.3876 2 0.1514 3 0.9599 7 0.3081 2 0.0802 2 0.7122 3 0.3139 4 0.4768 10 0.1027 3 0.2708 3 0.0825 9 0.4821 2 0.4047 10 0.7453 3 0.3204 8 0.1471 4 0.7605 2 0.6207 3)
Average genome size in population (length): 48.522
Average program size in population (points): 49.522
Average percent parens in population: 0.020
Minimum age in population: 12.5
Maximum age in population: 17.078125
Average age in population: 15.15258984375
Median age in population: 15.2109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.149
Error (vector) diversity:			 0.152
Behavioral diversity:				 0.156
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 13250383
--- Timings ---
Current time: 1529614920348 milliseconds
Total Time:          36.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.7 seconds, 45.6%
Fitness Testing:     16.1 seconds, 43.8%
Report:               3.8 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 11494.85090000002
Test mean error for best: 5.74743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185          
Correct output: -63.2352586418 | Program output: -63           
Correct output: 27.2333812574  | Program output: 28            
Correct output: -136.3711223178 | Program output: -136          
Correct output: 70.3877365207  | Program output: 71            
Correct output: 89.2001357371  | Program output: 90            
Correct output: 147.760546183  | Program output: 147           
Correct output: -137.3875804218 | Program output: -137          
Correct output: 161.1514033166 | Program output: 161           
Correct output: -95.9599100442 | Program output: -95           
Correct output: -120.308055299 | Program output: -120          
Correct output: -72.0801834627 | Program output: -72           
Correct output: -109.7122076235 | Program output: -109          
Correct output: 106.3138786569 | Program output: 106           
Correct output: 29.5231501286  | Program output: 30            
Correct output: 85.102682212   | Program output: 85            
Correct output: -100.2708478706 | Program output: -100          
Correct output: -22.9175151841 | Program output: -23           
Correct output: -94.4820838905 | Program output: -94           
Correct output: -11.5953117725 | Program output: -12           
Correct output: -13.7453326675 | Program output: -13           
Correct output: -20.3203574079 | Program output: -21           
Correct output: 161.8529283055 | Program output: 161           
Correct output: -55.7604817115 | Program output: -55           
Correct output: -28.6206702826 | Program output: -28           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_rot} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 float_dup_times integer_fromfloat float_flush integer_swap integer_sub integer_shove float_rot float_flush float_yank integer_mult float_dup_times float_add integer_shove float_yank integer_mult float_dec in2 tag_float_134 integer_add float_tan integer_stackdepth float_shove float_div integer_mult integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 11 0.2353 11 0.7666 11 0.3711 11 0.6123 12 0.7999 11 0.7605 10 0.3876 11 0.1514 11 0.9599 11 0.3081 10 0.0802 11 0.7122 11 0.3139 11 0.4768 11 0.1027 10 0.2708 11 0.0825 12 0.4821 11 0.4047 11 0.7453 11 0.6796 12 0.8529 11 0.7605 11 0.6207 11]
Total: 286.97819999999996
Mean: 5.739564
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2583.8043406999996
Median total errors in population: 732.2818
Error averages by case: (101.07677419999752 11.966 74.76870200000022 12.001 82.08891880000137 12.06 99.78853770000075 12.134 82.76705659999872 11.892 85.1644588999993 11.255 95.8097089999998 10.391 95.03389080000085 12.242 98.49129439999906 12.783 87.27040610000113 12.665 92.41639669999876 10.549 87.59205479999814 12.514 88.74161299999915 12.226 96.55087980000117 12.201 90.88950480000032 12.344 91.95516199999882 9.695 87.23073199999882 13.062 97.17336249999953 12.53 94.31521469999848 12.583 94.36187750000055 12.828 95.03386689999897 12.659 90.5357179999987 11.987 97.22153240000063 12.03 81.27165199999978 12.001 95.0390250999996 12.618)
Error minima by case: (0.0406 10 0.2353 10 0.7666 9 0.3711 9 0.6123 9 0.7999 8 0.2395 9 0.3876 10 0.1514 9 0.9599 10 0.3081 9 0.0802 9 0.7122 9 0.3139 10 0.4768 9 0.1027 8 0.2708 10 0.0825 9 0.4821 10 0.4047 9 0.7453 10 0.3204 9 0.1471 10 0.7605 10 0.6207 9)
Average genome size in population (length): 48.411
Average program size in population (points): 49.411
Average percent parens in population: 0.020
Minimum age in population: 13.5
Maximum age in population: 18.642578125
Average age in population: 16.673423828125
Median age in population: 16.728515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.093
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 14460658
--- Timings ---
Current time: 1529614923195 milliseconds
Total Time:          39.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.1 seconds, 45.7%
Fitness Testing:     17.2 seconds, 43.4%
Report:               4.2 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 11494.85090000002
Test mean error for best: 5.74743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185          
Correct output: -63.2352586418 | Program output: -63           
Correct output: 27.2333812574  | Program output: 28            
Correct output: -136.3711223178 | Program output: -136          
Correct output: 70.3877365207  | Program output: 71            
Correct output: 89.2001357371  | Program output: 90            
Correct output: 147.760546183  | Program output: 147           
Correct output: -137.3875804218 | Program output: -137          
Correct output: 161.1514033166 | Program output: 161           
Correct output: -95.9599100442 | Program output: -95           
Correct output: -120.308055299 | Program output: -120          
Correct output: -72.0801834627 | Program output: -72           
Correct output: -109.7122076235 | Program output: -109          
Correct output: 106.3138786569 | Program output: 106           
Correct output: 29.5231501286  | Program output: 30            
Correct output: 85.102682212   | Program output: 85            
Correct output: -100.2708478706 | Program output: -100          
Correct output: -22.9175151841 | Program output: -23           
Correct output: -94.4820838905 | Program output: -94           
Correct output: -11.5953117725 | Program output: -12           
Correct output: -13.7453326675 | Program output: -13           
Correct output: -20.3203574079 | Program output: -21           
Correct output: 161.8529283055 | Program output: 161           
Correct output: -55.7604817115 | Program output: -55           
Correct output: -28.6206702826 | Program output: -28           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_rot} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 float_rot integer_fromfloat float_flush integer_swap integer_sub integer_shove float_rot float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_mult float_dec in2 tag_float_134 integer_add float_tan integer_stackdepth float_shove float_div integer_mult integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 11 0.2353 11 0.7666 11 0.3711 11 0.6123 12 0.7999 11 0.7605 10 0.3876 11 0.1514 11 0.9599 11 0.3081 10 0.0802 11 0.7122 11 0.3139 11 0.4768 11 0.1027 10 0.2708 11 0.0825 12 0.4821 11 0.4047 11 0.7453 11 0.6796 12 0.8529 11 0.7605 11 0.6207 11]
Total: 286.97819999999996
Mean: 5.739564
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2186.305593299999
Median total errors in population: 341.28180000000003
Error averages by case: (84.77894599999863 11.84 65.78524050000023 11.733 69.18034240000135 11.757 82.96818539999934 12.173 71.3002517999999 11.701 67.7877168999993 11.227 79.69195900000028 10.534 78.22665400000088 12.162 82.35045279999967 12.275 69.62755160000111 12.009 75.86891150000014 10.919 73.00318499999823 11.967 74.29166300000038 12.153 79.6124084 11.757 73.73538559999902 11.679 74.30414659999961 10.106 73.23978199999887 12.99 80.3580850000003 12.121 77.48604989999963 11.888 78.28518530000024 12.049 78.8301563000001 12.015 71.62951799999955 11.9 81.59148080000023 11.738 69.88922299999845 11.76 77.96311249999958 12.067)
Error minima by case: (0.0406 10 0.2353 10 0.2334 10 0.3711 10 0.3877 10 0.2001 10 0.2395 9 0.3876 10 0.1514 10 0.0401 10 0.3081 10 0.0802 10 0.2878 10 0.3139 10 0.4768 9 0.1027 8 0.2708 11 0.0825 10 0.4821 10 0.4047 9 0.2547 9 0.3204 10 0.1471 10 0.2395 10 0.3793 10)
Average genome size in population (length): 48.735
Average program size in population (points): 49.735
Average percent parens in population: 0.020
Minimum age in population: 14.5
Maximum age in population: 20.16357421875
Average age in population: 18.284546875
Median age in population: 18.33544921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.087
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 15679033
--- Timings ---
Current time: 1529614926127 milliseconds
Total Time:          42.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.6 seconds, 46.0%
Fitness Testing:     18.3 seconds, 43.1%
Report:               4.5 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 11494.85090000002
Test mean error for best: 5.74743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185          
Correct output: -63.2352586418 | Program output: -63           
Correct output: 27.2333812574  | Program output: 28            
Correct output: -136.3711223178 | Program output: -136          
Correct output: 70.3877365207  | Program output: 71            
Correct output: 89.2001357371  | Program output: 90            
Correct output: 147.760546183  | Program output: 147           
Correct output: -137.3875804218 | Program output: -137          
Correct output: 161.1514033166 | Program output: 161           
Correct output: -95.9599100442 | Program output: -95           
Correct output: -120.308055299 | Program output: -120          
Correct output: -72.0801834627 | Program output: -72           
Correct output: -109.7122076235 | Program output: -109          
Correct output: 106.3138786569 | Program output: 106           
Correct output: 29.5231501286  | Program output: 30            
Correct output: 85.102682212   | Program output: 85            
Correct output: -100.2708478706 | Program output: -100          
Correct output: -22.9175151841 | Program output: -23           
Correct output: -94.4820838905 | Program output: -94           
Correct output: -11.5953117725 | Program output: -12           
Correct output: -13.7453326675 | Program output: -13           
Correct output: -20.3203574079 | Program output: -21           
Correct output: 161.8529283055 | Program output: 161           
Correct output: -55.7604817115 | Program output: -55           
Correct output: -28.6206702826 | Program output: -28           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_rot} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub float_cos print_float float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 float_rot integer_fromfloat float_flush integer_swap integer_sub integer_shove float_rot float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_mult float_dec in2 tag_float_134 integer_add float_tan integer_stackdepth float_shove float_div integer_mult integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 11 0.2353 11 0.7666 11 0.3711 11 0.6123 12 0.7999 11 0.7605 10 0.3876 11 0.1514 11 0.9599 11 0.3081 10 0.0802 11 0.7122 11 0.3139 11 0.4768 11 0.1027 10 0.2708 11 0.0825 12 0.4821 11 0.4047 11 0.7453 11 0.6796 12 0.8529 11 0.7605 11 0.6207 11]
Total: 286.97819999999996
Mean: 5.739564
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2111.662076300002
Median total errors in population: 286.97819999999996
Error averages by case: (81.43749939999866 11.408 67.30388760000024 11.308 67.87467640000114 11.28 79.79510329999987 11.634 69.56451649999956 11.843 63.76211759999959 11.182 74.75841349999983 10.361 76.79606480000065 11.605 75.79556900000073 11.553 68.59531100000109 11.322 75.1776737999993 10.58 68.59654339999841 11.307 74.12255559999973 11.61 73.37457319999953 11.295 70.82271039999962 11.129 70.08207950000086 10.242 73.18617839999892 11.912 76.86789999999989 11.908 75.57433629999917 11.203 75.39103929999959 11.312 76.43921269999956 11.319 71.61007160000084 11.911 75.95794649999952 11.312 70.41729449999947 11.293 75.14480199999961 11.385)
Error minima by case: (0.0406 6 0.2353 4 0.2334 10 0.3711 5 0.3877 10 0.2001 10 0.2395 5 0.3876 6 0.1514 5 0.0401 5 0.3081 5 0.0802 4 0.2878 6 0.3139 5 0.4768 9 0.1027 4 0.2708 6 0.0825 10 0.4821 5 0.4047 9 0.2547 4 0.3204 10 0.1471 4 0.2395 5 0.3793 4)
Average genome size in population (length): 49.091
Average program size in population (points): 50.091
Average percent parens in population: 0.020
Minimum age in population: 17.142578125
Maximum age in population: 21.77490234375
Average age in population: 19.85438232421875
Median age in population: 19.8885498046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.07
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 16906308
--- Timings ---
Current time: 1529614929216 milliseconds
Total Time:          45.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.2 seconds, 46.4%
Fitness Testing:     19.5 seconds, 42.7%
Report:               4.9 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 11494.85090000002
Test mean error for best: 5.74743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185          
Correct output: -63.2352586418 | Program output: -63           
Correct output: 27.2333812574  | Program output: 28            
Correct output: -136.3711223178 | Program output: -136          
Correct output: 70.3877365207  | Program output: 71            
Correct output: 89.2001357371  | Program output: 90            
Correct output: 147.760546183  | Program output: 147           
Correct output: -137.3875804218 | Program output: -137          
Correct output: 161.1514033166 | Program output: 161           
Correct output: -95.9599100442 | Program output: -95           
Correct output: -120.308055299 | Program output: -120          
Correct output: -72.0801834627 | Program output: -72           
Correct output: -109.7122076235 | Program output: -109          
Correct output: 106.3138786569 | Program output: 106           
Correct output: 29.5231501286  | Program output: 30            
Correct output: 85.102682212   | Program output: 85            
Correct output: -100.2708478706 | Program output: -100          
Correct output: -22.9175151841 | Program output: -23           
Correct output: -94.4820838905 | Program output: -94           
Correct output: -11.5953117725 | Program output: -12           
Correct output: -13.7453326675 | Program output: -13           
Correct output: -20.3203574079 | Program output: -21           
Correct output: 161.8529283055 | Program output: 161           
Correct output: -55.7604817115 | Program output: -55           
Correct output: -28.6206702826 | Program output: -28           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_dup_items} {:instruction float_sin} {:instruction in1} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_rot} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub float_cos float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_dup_items float_sin in1 float_rot integer_fromfloat float_dup_times integer_fromfloat float_flush integer_swap integer_sub integer_shove float_rot float_add float_shove float_swap integer_shove integer_max integer_mult float_dec in2 tag_float_134 integer_add float_tan integer_stackdepth float_shove float_div integer_mult integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 11 0.2353 11 0.7666 11 0.3711 11 0.6123 12 0.7999 11 0.7605 10 0.3876 11 0.1514 11 0.9599 11 0.3081 10 0.0802 11 0.7122 11 0.3139 11 0.4768 11 0.1027 10 0.2708 11 0.0825 12 0.4821 11 0.4047 11 0.7453 11 0.6796 12 0.8529 11 0.7605 11 0.6207 11]
Total: 286.97819999999996
Mean: 5.739564
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2116.035666600005
Median total errors in population: 286.97819999999996
Error averages by case: (79.67649939999889 11.368 66.01300530000023 11.266 70.63707480000149 11.113 78.68355649999933 11.441 72.3823747999998 12.002 64.40231569999935 11.186 76.37008449999927 10.324 76.15384000000087 11.39 77.34074600000135 11.41 66.83186990000114 11.28 74.96429000000015 10.384 66.28950579999817 11.29 73.83169220000049 11.421 75.51282389999957 11.263 73.51863039999891 11.137 72.29619760000172 10.202 72.95699079999886 11.405 76.57428999999938 11.978 74.68712149999989 11.153 75.18139969999933 11.25 76.31835460000008 11.264 72.11933960000167 12.013 77.62308099999906 11.263 69.17550449999838 11.251 75.06707809999959 11.374)
Error minima by case: (0.0406 10 0.2353 11 0.2334 9 0.3711 9 0.3877 10 0.2001 10 0.2395 9 0.3876 10 0.1514 10 0.0401 10 0.3081 9 0.0802 10 0.2878 10 0.3139 11 0.4768 9 0.1027 9 0.2708 10 0.0825 9 0.4821 10 0.4047 9 0.2547 9 0.3204 10 0.1471 10 0.2395 10 0.3793 10)
Average genome size in population (length): 49.07
Average program size in population (points): 50.07
Average percent parens in population: 0.020
Minimum age in population: 18.142578125
Maximum age in population: 23.0916748046875
Average age in population: 21.3081240234375
Median age in population: 21.35174560546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.055
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 18133058
--- Timings ---
Current time: 1529614932274 milliseconds
Total Time:          48.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.7 seconds, 46.6%
Fitness Testing:     20.6 seconds, 42.4%
Report:               5.2 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 11494.85090000002
Test mean error for best: 5.74743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185          
Correct output: -63.2352586418 | Program output: -63           
Correct output: 27.2333812574  | Program output: 28            
Correct output: -136.3711223178 | Program output: -136          
Correct output: 70.3877365207  | Program output: 71            
Correct output: 89.2001357371  | Program output: 90            
Correct output: 147.760546183  | Program output: 147           
Correct output: -137.3875804218 | Program output: -137          
Correct output: 161.1514033166 | Program output: 161           
Correct output: -95.9599100442 | Program output: -95           
Correct output: -120.308055299 | Program output: -120          
Correct output: -72.0801834627 | Program output: -72           
Correct output: -109.7122076235 | Program output: -109          
Correct output: 106.3138786569 | Program output: 106           
Correct output: 29.5231501286  | Program output: 30            
Correct output: 85.102682212   | Program output: 85            
Correct output: -100.2708478706 | Program output: -100          
Correct output: -22.9175151841 | Program output: -23           
Correct output: -94.4820838905 | Program output: -94           
Correct output: -11.5953117725 | Program output: -12           
Correct output: -13.7453326675 | Program output: -13           
Correct output: -20.3203574079 | Program output: -21           
Correct output: 161.8529283055 | Program output: 161           
Correct output: -55.7604817115 | Program output: -55           
Correct output: -28.6206702826 | Program output: -28           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_cos} {:instruction print_float} {:instruction float_dup_items} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_rot} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_max} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_dec} {:instruction in2} {:instruction tag_float_159} {:instruction integer_add} {:instruction float_tan} {:instruction float_pop} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_flush float_cos print_float float_dup_items float_rot print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 float_dup_times integer_fromfloat integer_shove float_rot float_flush float_yank integer_mult float_dup_times float_add integer_max float_swap integer_shove float_yank integer_mult integer_dec in2 tag_float_159 integer_add float_tan float_pop float_shove float_div integer_inc integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 11 0.2353 11 0.7666 11 0.3711 11 0.6123 12 0.7999 11 0.7605 10 0.3876 11 0.1514 11 0.9599 11 0.3081 10 0.0802 11 0.7122 11 0.3139 11 0.4768 11 0.1027 10 0.2708 11 0.0825 12 0.4821 11 0.4047 11 0.7453 11 0.6796 12 0.8529 11 0.7605 11 0.6207 11]
Total: 286.97819999999996
Mean: 5.739564
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 1938.463370100004
Median total errors in population: 286.97819999999996
Error averages by case: (74.19121519999918 11.37 61.92865230000022 11.267 60.369198800001016 11.117 72.04924779999926 11.445 61.73358480000049 11.999 57.246171899999645 11.185 67.09906159999882 10.304 70.69757640000067 11.395 67.770050600001 11.385 62.49631100000111 11.273 69.37490090000024 10.384 62.092821599998494 11.266 68.17257020000073 11.418 64.39033820000063 11.233 63.020073599998774 11.126 62.5689617000012 10.191 67.23928279999893 11.417 70.7867224999993 11.997 68.54247950000021 11.146 69.44711509999938 11.258 69.15490160000023 11.257 66.3814660000013 12.004 68.25068409999939 11.243 64.2517314999985 11.247 67.91525039999962 11.366)
Error minima by case: (0.0406 6 0.2353 4 0.2334 10 0.3711 5 0.3877 10 0.2001 10 0.2395 5 0.3876 6 0.1514 5 0.0401 5 0.3081 5 0.0802 4 0.2878 6 0.3139 5 0.4768 9 0.1027 4 0.2708 6 0.0825 10 0.4821 5 0.4047 9 0.2547 4 0.3204 10 0.1471 4 0.2395 5 0.3793 4)
Average genome size in population (length): 49.098
Average program size in population (points): 50.098
Average percent parens in population: 0.020
Minimum age in population: 20.3203125
Maximum age in population: 24.6966552734375
Average age in population: 22.7398623046875
Median age in population: 22.76077270507812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.797
Total error diversity:				 0.056
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 19360508
--- Timings ---
Current time: 1529614935292 milliseconds
Total Time:          51.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.1 seconds, 46.5%
Fitness Testing:     21.9 seconds, 42.4%
Report:               5.6 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 11494.85090000002
Test mean error for best: 5.74743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185          
Correct output: -63.2352586418 | Program output: -63           
Correct output: 27.2333812574  | Program output: 28            
Correct output: -136.3711223178 | Program output: -136          
Correct output: 70.3877365207  | Program output: 71            
Correct output: 89.2001357371  | Program output: 90            
Correct output: 147.760546183  | Program output: 147           
Correct output: -137.3875804218 | Program output: -137          
Correct output: 161.1514033166 | Program output: 161           
Correct output: -95.9599100442 | Program output: -95           
Correct output: -120.308055299 | Program output: -120          
Correct output: -72.0801834627 | Program output: -72           
Correct output: -109.7122076235 | Program output: -109          
Correct output: 106.3138786569 | Program output: 106           
Correct output: 29.5231501286  | Program output: 30            
Correct output: 85.102682212   | Program output: 85            
Correct output: -100.2708478706 | Program output: -100          
Correct output: -22.9175151841 | Program output: -23           
Correct output: -94.4820838905 | Program output: -94           
Correct output: -11.5953117725 | Program output: -12           
Correct output: -13.7453326675 | Program output: -13           
Correct output: -20.3203574079 | Program output: -21           
Correct output: 161.8529283055 | Program output: 161           
Correct output: -55.7604817115 | Program output: -55           
Correct output: -28.6206702826 | Program output: -28           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction -8.50686796945321} {:instruction integer_shove} {:instruction float_rot} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_tan} {:instruction print_integer} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_sub float_cos print_float float_dec float_rot float_min float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_sin in1 integer_stackdepth integer_fromfloat float_flush integer_swap -8.50686796945321 integer_shove float_rot float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_mult float_dec in2 tag_float_134 integer_add float_tan print_integer float_shove float_div integer_inc integer_mult float_mod integer_max integer_swap print_integer)
Errors: [0.0406 11 0.2353 11 0.7666 11 0.3711 11 0.6123 12 0.7999 11 0.7605 10 0.3876 11 0.1514 11 0.9599 11 0.3081 10 0.0802 11 0.7122 11 0.3139 11 0.4768 11 0.1027 10 0.2708 11 0.0825 12 0.4821 11 0.4047 11 0.7453 11 0.6796 12 0.8529 11 0.7605 11 0.6207 11]
Total: 286.97819999999996
Mean: 5.739564
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2113.0272788000043
Median total errors in population: 286.97819999999996
Error averages by case: (80.28780919999875 11.345 66.85771110000023 11.233 69.10404260000114 11.117 78.45253679999985 11.386 70.1455779999998 12.002 62.85991599999972 11.199 74.85008449999953 10.287 76.61425080000055 11.372 75.32629180000103 11.365 67.715431300001 11.264 75.04405229999972 10.352 69.67301959999855 11.24 73.4920092000002 11.383 73.12468489999964 11.218 72.4335711999995 11.132 70.6439922000013 10.196 72.63292879999904 11.381 77.39146499999998 11.995 75.01606899999965 11.122 76.02835269999936 11.256 78.57246739999947 11.256 72.40690280000122 12.005 75.85752229999935 11.243 70.37240799999927 11.23 77.19718129999961 11.348)
Error minima by case: (0.0406 4 0.2353 3 0.2334 9 0.3711 4 0.3877 10 0.2001 10 0.2395 4 0.3876 4 0.1514 4 0.0401 3 0.3081 4 0.0802 3 0.2878 4 0.3139 4 0.4768 9 0.1027 3 0.2708 4 0.0825 10 0.4821 3 0.4047 9 0.2547 3 0.3204 10 0.1471 3 0.2395 3 0.3793 3)
Average genome size in population (length): 49.18
Average program size in population (points): 50.18
Average percent parens in population: 0.020
Minimum age in population: 21.6044921875
Maximum age in population: 26.23117065429688
Average age in population: 24.18221640014648
Median age in population: 24.20858764648438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.058
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 20590008
--- Timings ---
Current time: 1529614938214 milliseconds
Total Time:          54.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.5 seconds, 46.7%
Fitness Testing:     23.1 seconds, 42.2%
Report:               6.0 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 11494.85090000002
Test mean error for best: 5.74743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185          
Correct output: -63.2352586418 | Program output: -63           
Correct output: 27.2333812574  | Program output: 28            
Correct output: -136.3711223178 | Program output: -136          
Correct output: 70.3877365207  | Program output: 71            
Correct output: 89.2001357371  | Program output: 90            
Correct output: 147.760546183  | Program output: 147           
Correct output: -137.3875804218 | Program output: -137          
Correct output: 161.1514033166 | Program output: 161           
Correct output: -95.9599100442 | Program output: -95           
Correct output: -120.308055299 | Program output: -120          
Correct output: -72.0801834627 | Program output: -72           
Correct output: -109.7122076235 | Program output: -109          
Correct output: 106.3138786569 | Program output: 106           
Correct output: 29.5231501286  | Program output: 30            
Correct output: 85.102682212   | Program output: 85            
Correct output: -100.2708478706 | Program output: -100          
Correct output: -22.9175151841 | Program output: -23           
Correct output: -94.4820838905 | Program output: -94           
Correct output: -11.5953117725 | Program output: -12           
Correct output: -13.7453326675 | Program output: -13           
Correct output: -20.3203574079 | Program output: -21           
Correct output: 161.8529283055 | Program output: 161           
Correct output: -55.7604817115 | Program output: -55           
Correct output: -28.6206702826 | Program output: -28           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction float_mod} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat float_cos float_yank float_cos float_sin in1 float_dup_times integer_fromfloat float_add float_shove float_swap integer_shove float_yank integer_mult float_dec in2 tag_float_134 integer_add float_tan integer_stackdepth float_shove float_div float_mod integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 11 0.2353 11 0.7666 11 0.3711 11 0.6123 12 0.7999 11 0.7605 10 0.3876 11 0.1514 11 0.9599 11 0.3081 10 0.0802 11 0.7122 11 0.3139 11 0.4768 11 0.1027 10 0.2708 11 0.0825 12 0.4821 11 0.4047 11 0.7453 11 0.6796 12 0.8529 11 0.7605 11 0.6207 11]
Total: 286.97819999999996
Mean: 5.739564
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 2125.1328302000043
Median total errors in population: 286.97819999999996
Error averages by case: (79.90097159999868 11.351 66.77135820000022 11.25 70.94854160000112 11.117 78.89650559999994 11.402 71.35537479999986 12.008 63.33151479999958 11.195 74.90408449999995 10.313 76.64341360000057 11.366 75.69559460000097 11.373 66.56615060000095 11.263 75.50497659999927 10.374 68.17006219999868 11.263 74.36943359999972 11.405 74.08394049999919 11.243 73.8652464 11.135 71.2430949000013 10.189 73.65347039999897 11.392 77.2822800000001 12.004 75.73496159999924 11.146 76.54766079999936 11.236 79.85788279999942 11.246 73.29581520000137 12.009 76.0982280999994 11.247 70.98353399999925 11.236 78.31473319999962 11.351)
Error minima by case: (0.0406 3 0.2353 1 0.2334 10 0.3711 2 0.3877 10 0.2001 10 0.2395 3 0.3876 3 0.1514 3 0.0401 2 0.3081 2 0.0802 2 0.2878 3 0.3139 3 0.4768 9 0.1027 2 0.2708 3 0.0825 10 0.4821 2 0.4047 9 0.2547 2 0.3204 10 0.1471 2 0.2395 2 0.3793 2)
Average genome size in population (length): 49.21
Average program size in population (points): 50.21
Average percent parens in population: 0.020
Minimum age in population: 22.6044921875
Maximum age in population: 27.61973571777344
Average age in population: 25.63553987121582
Median age in population: 25.65992736816406
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.047
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 21820258
--- Timings ---
Current time: 1529614941096 milliseconds
Total Time:          57.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.0 seconds, 46.8%
Fitness Testing:     24.2 seconds, 42.1%
Report:               6.3 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 11494.85090000002
Test mean error for best: 5.74743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185          
Correct output: -63.2352586418 | Program output: -63           
Correct output: 27.2333812574  | Program output: 28            
Correct output: -136.3711223178 | Program output: -136          
Correct output: 70.3877365207  | Program output: 71            
Correct output: 89.2001357371  | Program output: 90            
Correct output: 147.760546183  | Program output: 147           
Correct output: -137.3875804218 | Program output: -137          
Correct output: 161.1514033166 | Program output: 161           
Correct output: -95.9599100442 | Program output: -95           
Correct output: -120.308055299 | Program output: -120          
Correct output: -72.0801834627 | Program output: -72           
Correct output: -109.7122076235 | Program output: -109          
Correct output: 106.3138786569 | Program output: 106           
Correct output: 29.5231501286  | Program output: 30            
Correct output: 85.102682212   | Program output: 85            
Correct output: -100.2708478706 | Program output: -100          
Correct output: -22.9175151841 | Program output: -23           
Correct output: -94.4820838905 | Program output: -94           
Correct output: -11.5953117725 | Program output: -12           
Correct output: -13.7453326675 | Program output: -13           
Correct output: -20.3203574079 | Program output: -21           
Correct output: 161.8529283055 | Program output: 161           
Correct output: -55.7604817115 | Program output: -55           
Correct output: -28.6206702826 | Program output: -28           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction integer_min} {:instruction float_sin} {:instruction in1} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_rot} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_max} {:instruction float_swap} {:instruction integer_shove} {:instruction float_add} {:instruction integer_max} {:instruction float_sub} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_dec} {:instruction in2} {:instruction tag_float_159} {:instruction integer_add} {:instruction float_tan} {:instruction float_pop} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_flush float_cos integer_fromfloat float_dec float_rot print_integer float_dec float_rot print_integer float_inc print_integer float_cos float_yank integer_min float_sin in1 float_dup_times integer_fromfloat integer_shove float_rot float_flush float_yank integer_mult float_dup_times float_add integer_max float_swap integer_shove float_add integer_max float_sub integer_shove float_yank integer_mult integer_dec in2 tag_float_159 integer_add float_tan float_pop float_shove float_div integer_inc integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 11 0.2353 11 0.7666 11 0.3711 11 0.6123 12 0.7999 11 0.7605 10 0.3876 11 0.1514 11 0.9599 11 0.3081 10 0.0802 11 0.7122 11 0.3139 11 0.4768 11 0.1027 10 0.2708 11 0.0825 12 0.4821 11 0.4047 11 0.7453 11 0.6796 12 0.8529 11 0.7605 11 0.6207 11]
Total: 286.97819999999996
Mean: 5.739564
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2216.5941357000042
Median total errors in population: 286.97819999999996
Error averages by case: (85.42340319999835 11.41 73.84706400000024 11.285 70.69898360000094 11.126 82.91582580000015 11.458 72.9145886999999 12.006 67.3552908999997 11.215 77.5818472999997 10.332 82.53737480000055 11.425 77.78719130000103 11.421 74.6006719000011 11.309 81.28497129999894 10.4 73.80721759999852 11.276 80.14817499999958 11.432 74.82293449999997 11.26 73.44588989999929 11.132 72.95688930000134 10.23 79.19494999999888 11.436 83.23447500000026 12.007 80.10876589999921 11.165 81.52949629999934 11.279 78.27482479999952 11.301 78.84874760000132 12.028 78.50692719999937 11.294 75.9805634999997 11.274 76.89806629999963 11.388)
Error minima by case: (0.0406 10 0.2353 10 0.2334 9 0.3711 10 0.3877 10 0.2001 10 0.2395 9 0.3876 10 0.1514 10 0.0401 9 0.3081 9 0.0802 10 0.2878 10 0.3139 9 0.4768 9 0.1027 9 0.2708 10 0.0825 10 0.4821 9 0.4047 9 0.2547 9 0.3204 10 0.1471 9 0.2395 9 0.3793 10)
Average genome size in population (length): 49.408
Average program size in population (points): 50.408
Average percent parens in population: 0.020
Minimum age in population: 24.86514282226562
Maximum age in population: 29.40608978271484
Average age in population: 27.12152425384521
Median age in population: 27.16323852539062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.057
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 23055458
--- Timings ---
Current time: 1529614944092 milliseconds
Total Time:          60.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.3 seconds, 46.8%
Fitness Testing:     25.5 seconds, 42.1%
Report:               6.6 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 11494.85090000002
Test mean error for best: 5.74743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185          
Correct output: -63.2352586418 | Program output: -63           
Correct output: 27.2333812574  | Program output: 28            
Correct output: -136.3711223178 | Program output: -136          
Correct output: 70.3877365207  | Program output: 71            
Correct output: 89.2001357371  | Program output: 90            
Correct output: 147.760546183  | Program output: 147           
Correct output: -137.3875804218 | Program output: -137          
Correct output: 161.1514033166 | Program output: 161           
Correct output: -95.9599100442 | Program output: -95           
Correct output: -120.308055299 | Program output: -120          
Correct output: -72.0801834627 | Program output: -72           
Correct output: -109.7122076235 | Program output: -109          
Correct output: 106.3138786569 | Program output: 106           
Correct output: 29.5231501286  | Program output: 30            
Correct output: 85.102682212   | Program output: 85            
Correct output: -100.2708478706 | Program output: -100          
Correct output: -22.9175151841 | Program output: -23           
Correct output: -94.4820838905 | Program output: -94           
Correct output: -11.5953117725 | Program output: -12           
Correct output: -13.7453326675 | Program output: -13           
Correct output: -20.3203574079 | Program output: -21           
Correct output: 161.8529283055 | Program output: 161           
Correct output: -55.7604817115 | Program output: -55           
Correct output: -28.6206702826 | Program output: -28           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_mult} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_mult} {:instruction float_dup} {:instruction integer_inc} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_rot} {:instruction float_flush} {:instruction float_yank} {:instruction integer_max} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_dec} {:instruction in2} {:instruction tag_float_159} {:instruction integer_add} {:instruction float_tan} {:instruction float_pop} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub float_cos print_float float_mult float_rot print_integer float_inc float_yank float_yank float_mult float_mult float_dup integer_inc print_integer float_cos float_yank float_cos float_sin in1 integer_rot integer_fromfloat float_flush integer_swap integer_sub integer_shove float_rot float_flush float_yank integer_max float_swap integer_shove float_yank integer_mult integer_dec in2 tag_float_159 integer_add float_tan float_pop float_shove float_div integer_inc integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 11 0.2353 11 0.7666 11 0.3711 11 0.6123 12 0.7999 11 0.7605 10 0.3876 11 0.1514 11 0.9599 11 0.3081 10 0.0802 11 0.7122 11 0.3139 11 0.4768 11 0.1027 10 0.2708 11 0.0825 12 0.4821 11 0.4047 11 0.7453 11 0.6796 12 0.8529 11 0.7605 11 0.6207 11]
Total: 286.97819999999996
Mean: 5.739564
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2176.3936148000043
Median total errors in population: 286.97819999999996
Error averages by case: (83.34548439999917 11.401 69.70382870000022 11.284 70.19087960000104 11.135 80.66631019999944 11.463 72.1948080000001 12.001 65.77027329999963 11.221 78.0221168999993 10.335 80.13676240000055 11.432 78.47373210000099 11.434 71.28375210000108 11.313 78.8442793999998 10.397 71.04753839999859 11.282 77.52788720000045 11.432 74.97374700000017 11.268 73.07613009999908 11.139 71.97636410000133 10.234 76.40322079999895 11.439 79.21307249999946 12.001 77.07273010000014 11.158 78.12542579999942 11.284 81.13928789999993 11.297 75.09651480000127 12.01 79.08251369999931 11.29 72.59508449999888 11.269 78.51887079999966 11.394)
Error minima by case: (0.0406 10 0.2353 11 0.2334 10 0.3711 11 0.3877 8 0.2001 10 0.2395 9 0.3876 10 0.1514 9 0.0401 10 0.3081 9 0.0802 10 0.2878 10 0.3139 10 0.4768 9 0.1027 9 0.2708 10 0.0825 10 0.4821 10 0.4047 9 0.2547 9 0.3204 10 0.1471 10 0.2395 10 0.3793 9)
Average genome size in population (length): 49.463
Average program size in population (points): 50.463
Average percent parens in population: 0.020
Minimum age in population: 26.0291748046875
Maximum age in population: 30.82086563110352
Average age in population: 28.60046642303467
Median age in population: 28.62666511535645
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.058
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 24292033
--- Timings ---
Current time: 1529614947273 milliseconds
Total Time:          63.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.9 seconds, 47.0%
Fitness Testing:     26.7 seconds, 41.9%
Report:               6.9 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 11494.85090000002
Test mean error for best: 5.74743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185          
Correct output: -63.2352586418 | Program output: -63           
Correct output: 27.2333812574  | Program output: 28            
Correct output: -136.3711223178 | Program output: -136          
Correct output: 70.3877365207  | Program output: 71            
Correct output: 89.2001357371  | Program output: 90            
Correct output: 147.760546183  | Program output: 147           
Correct output: -137.3875804218 | Program output: -137          
Correct output: 161.1514033166 | Program output: 161           
Correct output: -95.9599100442 | Program output: -95           
Correct output: -120.308055299 | Program output: -120          
Correct output: -72.0801834627 | Program output: -72           
Correct output: -109.7122076235 | Program output: -109          
Correct output: 106.3138786569 | Program output: 106           
Correct output: 29.5231501286  | Program output: 30            
Correct output: 85.102682212   | Program output: 85            
Correct output: -100.2708478706 | Program output: -100          
Correct output: -22.9175151841 | Program output: -23           
Correct output: -94.4820838905 | Program output: -94           
Correct output: -11.5953117725 | Program output: -12           
Correct output: -13.7453326675 | Program output: -13           
Correct output: -20.3203574079 | Program output: -21           
Correct output: 161.8529283055 | Program output: 161           
Correct output: -55.7604817115 | Program output: -55           
Correct output: -28.6206702826 | Program output: -28           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction integer_swap} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_rot} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_mult} {:instruction tag_float_564} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_max} {:instruction integer_yank} {:instruction print_integer})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos integer_swap in1 integer_stackdepth integer_fromfloat float_flush integer_swap integer_shove integer_shove float_rot float_flush float_yank integer_mult float_dup_times float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_mult tag_float_564 float_dec in2 tag_float_134 integer_add float_tan integer_stackdepth float_shove float_div integer_mult integer_mult float_yank integer_max integer_yank print_integer)
Errors: [0.0406 11 0.2353 11 0.7666 11 0.3711 11 0.6123 12 0.7999 11 0.7605 10 0.3876 11 0.1514 11 0.9599 11 0.3081 10 0.0802 11 0.7122 11 0.3139 11 0.4768 11 0.1027 10 0.2708 11 0.0825 12 0.4821 11 0.4047 11 0.7453 11 0.6796 12 0.8529 11 0.7605 11 0.6207 11]
Total: 286.97819999999996
Mean: 5.739564
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2054.4666860000043
Median total errors in population: 286.97819999999996
Error averages by case: (78.7046873999992 11.385 64.14906400000024 11.278 66.38193270000133 11.132 77.16090789999919 11.439 67.86338910000029 12.003 62.33813929999949 11.22 72.17970539999885 10.326 75.08931280000076 11.423 72.94110950000123 11.428 65.76363180000118 11.303 73.81551179999998 10.396 67.44185919999842 11.289 72.02673600000045 11.442 70.61810820000015 11.256 69.80308729999877 11.159 66.5629020000014 10.241 70.97630399999886 11.438 73.67720749999916 11.997 73.0881047999999 11.147 72.88499499999931 11.281 75.89333640000028 11.309 68.96201920000152 12.015 73.32653409999915 11.298 67.84792899999867 11.263 73.0851715999996 11.417)
Error minima by case: (0.0406 10 0.2353 11 0.2334 9 0.3711 11 0.3877 11 0.2001 10 0.2395 9 0.3876 10 0.1514 10 0.0401 10 0.3081 9 0.0802 10 0.2878 10 0.3139 11 0.4768 9 0.1027 9 0.2708 10 0.0825 10 0.4821 10 0.4047 10 0.2547 11 0.3204 11 0.1471 10 0.2395 10 0.3793 10)
Average genome size in population (length): 49.685
Average program size in population (points): 50.685
Average percent parens in population: 0.020
Minimum age in population: 27.163330078125
Maximum age in population: 31.9681510925293
Average age in population: 30.08716362380981
Median age in population: 30.13219833374023
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.834
Total error diversity:				 0.046
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 25534158
--- Timings ---
Current time: 1529614950448 milliseconds
Total Time:          66.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.4 seconds, 47.0%
Fitness Testing:     27.9 seconds, 41.8%
Report:               7.3 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 11494.85090000002
Test mean error for best: 5.74743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185          
Correct output: -63.2352586418 | Program output: -63           
Correct output: 27.2333812574  | Program output: 28            
Correct output: -136.3711223178 | Program output: -136          
Correct output: 70.3877365207  | Program output: 71            
Correct output: 89.2001357371  | Program output: 90            
Correct output: 147.760546183  | Program output: 147           
Correct output: -137.3875804218 | Program output: -137          
Correct output: 161.1514033166 | Program output: 161           
Correct output: -95.9599100442 | Program output: -95           
Correct output: -120.308055299 | Program output: -120          
Correct output: -72.0801834627 | Program output: -72           
Correct output: -109.7122076235 | Program output: -109          
Correct output: 106.3138786569 | Program output: 106           
Correct output: 29.5231501286  | Program output: 30            
Correct output: 85.102682212   | Program output: 85            
Correct output: -100.2708478706 | Program output: -100          
Correct output: -22.9175151841 | Program output: -23           
Correct output: -94.4820838905 | Program output: -94           
Correct output: -11.5953117725 | Program output: -12           
Correct output: -13.7453326675 | Program output: -13           
Correct output: -20.3203574079 | Program output: -21           
Correct output: 161.8529283055 | Program output: 161           
Correct output: -55.7604817115 | Program output: -55           
Correct output: -28.6206702826 | Program output: -28           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction print_float} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_rot} {:instruction float_flush} {:instruction float_tan} {:instruction integer_mult} {:instruction float_dup_times} {:instruction integer_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_tan} {:instruction float_div} {:instruction float_shove} {:instruction float_div} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_mult float_dup float_mult float_dup integer_fromfloat print_integer float_cos print_float float_cos float_sin in1 float_rot integer_fromfloat integer_sub integer_swap integer_sub integer_shove float_rot float_flush float_tan integer_mult float_dup_times integer_dec in2 tag_float_134 integer_add float_tan float_div float_shove float_div integer_inc integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 11 0.2353 11 0.7666 11 0.3711 11 0.6123 12 0.7999 11 0.7605 10 0.3876 11 0.1514 11 0.9599 11 0.3081 10 0.0802 11 0.7122 11 0.3139 11 0.4768 11 0.1027 10 0.2708 11 0.0825 12 0.4821 11 0.4047 11 0.7453 11 0.6796 12 0.8529 11 0.7605 11 0.6207 11]
Total: 286.97819999999996
Mean: 5.739564
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2316.180215300004
Median total errors in population: 286.97819999999996
Error averages by case: (89.0369309999982 11.42 76.83953460000025 11.286 75.02131020000132 11.144 87.0583923000003 11.469 77.17461809999918 12.012 71.90171689999931 11.23 81.86115600000014 10.358 85.83202600000071 11.452 82.43602080000113 11.46 78.15359170000106 11.315 84.52797659999901 10.425 79.13793939999843 11.301 83.22300919999934 11.473 79.703859799999 11.275 77.75641919999977 11.175 77.01845170000148 10.242 82.14792879999897 11.466 84.9916500000002 12.018 83.32455109999879 11.166 84.17244929999933 11.317 86.1157596999993 11.315 80.85295160000143 12.024 82.91772879999928 11.311 79.10464749999983 11.272 83.52959499999959 11.414)
Error minima by case: (0.0406 7 0.2353 4 0.2334 9 0.3711 6 0.3877 11 0.2001 10 0.2395 6 0.3876 7 0.1514 6 0.0401 5 0.3081 6 0.0802 5 0.2878 7 0.3139 6 0.4768 10 0.1027 4 0.2708 7 0.0825 10 0.4821 5 0.4047 9 0.2547 5 0.3204 10 0.1471 5 0.2395 5 0.3793 5)
Average genome size in population (length): 49.291
Average program size in population (points): 50.291
Average percent parens in population: 0.020
Minimum age in population: 29.0192985534668
Maximum age in population: 33.64150428771973
Average age in population: 31.55510742473602
Median age in population: 31.58914995193481
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.054
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 26766458
--- Timings ---
Current time: 1529614953587 milliseconds
Total Time:          70.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.0 seconds, 47.1%
Fitness Testing:     29.1 seconds, 41.6%
Report:               7.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 11494.85090000002
Test mean error for best: 5.74743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185          
Correct output: -63.2352586418 | Program output: -63           
Correct output: 27.2333812574  | Program output: 28            
Correct output: -136.3711223178 | Program output: -136          
Correct output: 70.3877365207  | Program output: 71            
Correct output: 89.2001357371  | Program output: 90            
Correct output: 147.760546183  | Program output: 147           
Correct output: -137.3875804218 | Program output: -137          
Correct output: 161.1514033166 | Program output: 161           
Correct output: -95.9599100442 | Program output: -95           
Correct output: -120.308055299 | Program output: -120          
Correct output: -72.0801834627 | Program output: -72           
Correct output: -109.7122076235 | Program output: -109          
Correct output: 106.3138786569 | Program output: 106           
Correct output: 29.5231501286  | Program output: 30            
Correct output: 85.102682212   | Program output: 85            
Correct output: -100.2708478706 | Program output: -100          
Correct output: -22.9175151841 | Program output: -23           
Correct output: -94.4820838905 | Program output: -94           
Correct output: -11.5953117725 | Program output: -12           
Correct output: -13.7453326675 | Program output: -13           
Correct output: -20.3203574079 | Program output: -21           
Correct output: 161.8529283055 | Program output: 161           
Correct output: -55.7604817115 | Program output: -55           
Correct output: -28.6206702826 | Program output: -28           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction print_float} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_rot} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub float_cos print_float float_dec float_rot print_integer float_inc float_yank float_yank float_mult float_yank integer_fromfloat print_integer float_cos float_yank float_yank float_cos float_sin in1 float_dup_times integer_fromfloat float_flush integer_swap integer_sub integer_shove float_rot float_flush float_yank integer_mult float_dup_times float_add integer_shove float_yank integer_mult float_dec in2 tag_float_134 integer_add float_tan integer_stackdepth float_shove float_div integer_mult integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 11 0.2353 11 0.7666 11 0.3711 11 0.6123 12 0.7999 11 0.7605 10 0.3876 11 0.1514 11 0.9599 11 0.3081 10 0.0802 11 0.7122 11 0.3139 11 0.4768 11 0.1027 10 0.2708 11 0.0825 12 0.4821 11 0.4047 11 0.7453 11 0.6796 12 0.8529 11 0.7605 11 0.6207 11]
Total: 286.97819999999996
Mean: 5.739564
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2140.4878511000043
Median total errors in population: 286.97819999999996
Error averages by case: (83.98464679999822 11.362 70.15618160000024 11.223 65.80271060000098 11.104 81.72682580000006 11.401 68.12755660000029 12.0 61.36771839999992 11.223 74.32832399999967 10.297 79.92092520000058 11.385 75.12929180000108 11.385 72.02295260000113 11.241 78.51120369999917 10.356 72.1039769999985 11.239 77.18859939999967 11.41 71.59080149999974 11.206 69.00051199999906 11.143 68.6519922000013 10.194 76.0994915999989 11.389 79.68438250000001 11.979 77.56283749999915 11.093 78.70894799999934 11.271 78.27901439999947 11.247 75.41922320000134 11.997 75.60852229999931 11.244 72.7654794999997 11.212 75.79073289999963 11.354)
Error minima by case: (0.0406 6 0.2353 4 0.2334 10 0.3711 5 0.3877 10 0.2001 10 0.2395 5 0.3876 6 0.1514 5 0.0401 5 0.3081 5 0.0802 4 0.2878 6 0.3139 5 0.4768 10 0.1027 4 0.2708 6 0.0825 10 0.4821 5 0.4047 9 0.2547 4 0.3204 10 0.1471 4 0.2395 5 0.3793 4)
Average genome size in population (length): 49.422
Average program size in population (points): 50.422
Average percent parens in population: 0.020
Minimum age in population: 30.140380859375
Maximum age in population: 34.97599315643311
Average age in population: 32.95613468599319
Median age in population: 32.99032592773438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.059
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 28002033
--- Timings ---
Current time: 1529614956639 milliseconds
Total Time:          73.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.4 seconds, 47.1%
Fitness Testing:     30.4 seconds, 41.6%
Report:               8.2 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 10054.850900000005
Test mean error for best: 5.02743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0        
Correct output: -63.2352586418 | Program output: -63.0         
Correct output: 27.2333812574  | Program output: 28.0          
Correct output: -136.3711223178 | Program output: -136.0        
Correct output: 70.3877365207  | Program output: 71.0          
Correct output: 89.2001357371  | Program output: 90.0          
Correct output: 147.760546183  | Program output: 147.0         
Correct output: -137.3875804218 | Program output: -137.0        
Correct output: 161.1514033166 | Program output: 161.0         
Correct output: -95.9599100442 | Program output: -95.0         
Correct output: -120.308055299 | Program output: -120.0        
Correct output: -72.0801834627 | Program output: -72.0         
Correct output: -109.7122076235 | Program output: -109.0        
Correct output: 106.3138786569 | Program output: 106.0         
Correct output: 29.5231501286  | Program output: 30.0          
Correct output: 85.102682212   | Program output: 85.0          
Correct output: -100.2708478706 | Program output: -100.0        
Correct output: -22.9175151841 | Program output: -23.0         
Correct output: -94.4820838905 | Program output: -94.0         
Correct output: -11.5953117725 | Program output: -12.0         
Correct output: -13.7453326675 | Program output: -13.0         
Correct output: -20.3203574079 | Program output: -21.0         
Correct output: 161.8529283055 | Program output: 161.0         
Correct output: -55.7604817115 | Program output: -55.0         
Correct output: -28.6206702826 | Program output: -28.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction float_min} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank float_min float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_div print_float float_shove float_div print_float integer_mult float_mod integer_mult integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 9 0.2353 10 0.7666 11 0.3711 10 0.6123 10 0.7999 11 0.7605 8 0.3876 9 0.1514 9 0.9599 9 0.3081 8 0.0802 9 0.7122 9 0.3139 10 0.4768 11 0.1027 8 0.2708 9 0.0825 11 0.4821 9 0.4047 11 0.7453 10 0.6796 10 0.8529 9 0.7605 9 0.6207 9]
Total: 249.9782
Mean: 4.999564
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2645.4575761000037
Median total errors in population: 286.97819999999996
Error averages by case: (102.53203779999778 11.454 90.00206390000021 11.319 88.5893252000013 11.149 100.27674370000051 11.509 91.66886209999856 12.015 84.84400089999929 11.248 95.32274190000035 10.38 99.0837236000008 11.495 95.79007040000126 11.501 90.78643380000112 11.351 97.71827409999862 10.454 91.35109479999822 11.324 96.65891639999894 11.504 94.25462179999853 11.302 92.16821460000024 11.17 90.4098180000016 10.274 95.6844295999989 11.501 97.90674250000062 12.002 95.37153439999854 11.193 95.7809975999994 11.327 98.15808959999885 11.335 93.24171880000155 12.014 96.65092339999909 11.332 90.93839550000024 11.307 97.34380169999963 11.464)
Error minima by case: (0.0406 9 0.2353 10 0.2334 9 0.3711 10 0.3877 9 0.2001 10 0.2395 8 0.3876 9 0.1514 8 0.0401 9 0.3081 8 0.0802 9 0.2878 9 0.3139 9 0.4768 10 0.1027 8 0.2708 9 0.0825 10 0.4821 9 0.4047 9 0.2547 9 0.3204 10 0.1471 9 0.2395 9 0.3793 9)
Average genome size in population (length): 49.109
Average program size in population (points): 50.109
Average percent parens in population: 0.020
Minimum age in population: 31.140380859375
Maximum age in population: 36.49766087532043
Average age in population: 34.46703349375725
Median age in population: 34.52168262004852
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.065
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 29229758
--- Timings ---
Current time: 1529614959906 milliseconds
Total Time:          76.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.9 seconds, 47.1%
Fitness Testing:     31.8 seconds, 41.7%
Report:               8.5 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 10054.850900000005
Test mean error for best: 5.02743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0        
Correct output: -63.2352586418 | Program output: -63.0         
Correct output: 27.2333812574  | Program output: 28.0          
Correct output: -136.3711223178 | Program output: -136.0        
Correct output: 70.3877365207  | Program output: 71.0          
Correct output: 89.2001357371  | Program output: 90.0          
Correct output: 147.760546183  | Program output: 147.0         
Correct output: -137.3875804218 | Program output: -137.0        
Correct output: 161.1514033166 | Program output: 161.0         
Correct output: -95.9599100442 | Program output: -95.0         
Correct output: -120.308055299 | Program output: -120.0        
Correct output: -72.0801834627 | Program output: -72.0         
Correct output: -109.7122076235 | Program output: -109.0        
Correct output: 106.3138786569 | Program output: 106.0         
Correct output: 29.5231501286  | Program output: 30.0          
Correct output: 85.102682212   | Program output: 85.0          
Correct output: -100.2708478706 | Program output: -100.0        
Correct output: -22.9175151841 | Program output: -23.0         
Correct output: -94.4820838905 | Program output: -94.0         
Correct output: -11.5953117725 | Program output: -12.0         
Correct output: -13.7453326675 | Program output: -13.0         
Correct output: -20.3203574079 | Program output: -21.0         
Correct output: 161.8529283055 | Program output: 161.0         
Correct output: -55.7604817115 | Program output: -55.0         
Correct output: -28.6206702826 | Program output: -28.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction float_min} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_fromfloat integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank float_min float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_div print_float float_shove float_div print_float integer_mult float_mod integer_mult integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 9 0.2353 10 0.7666 11 0.3711 10 0.6123 10 0.7999 11 0.7605 8 0.3876 9 0.1514 9 0.9599 9 0.3081 8 0.0802 9 0.7122 9 0.3139 10 0.4768 11 0.1027 8 0.2708 9 0.0825 11 0.4821 9 0.4047 11 0.7453 10 0.6796 10 0.8529 9 0.7605 9 0.6207 9]
Total: 249.9782
Mean: 4.999564
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2266.5843778000044
Median total errors in population: 286.97819999999996
Error averages by case: (85.25911899999835 11.367 75.57582860000024 11.272 75.44814320000133 11.14 83.79419690000009 11.423 76.75429189999959 12.006 71.32711659999936 11.213 79.4531139999995 10.305 82.92672360000066 11.384 79.51241520000121 11.352 77.29743380000126 11.263 81.94427409999933 10.384 74.33945819999818 11.255 81.05262859999995 11.395 77.4645458999997 11.242 77.54627999999924 11.153 75.6181436000016 10.195 80.1357003999988 11.41 83.59971250000015 12.024 80.72080169999937 11.15 83.05237619999933 11.275 83.6566844999992 11.272 80.19326200000161 12.046 80.19931719999919 11.249 77.20304249999947 11.243 81.1317675999996 11.36)
Error minima by case: (0.0406 6 0.2353 4 0.2334 10 0.3711 5 0.3877 10 0.2001 10 0.2395 5 0.3876 6 0.1514 5 0.0401 5 0.3081 5 0.0802 4 0.2878 6 0.3139 5 0.4768 9 0.1027 4 0.2708 6 0.0825 10 0.4821 5 0.4047 9 0.2547 4 0.3204 10 0.1471 4 0.2395 5 0.3793 4)
Average genome size in population (length): 48.954
Average program size in population (points): 49.954
Average percent parens in population: 0.020
Minimum age in population: 32.73112106323242
Maximum age in population: 37.80249214172363
Average age in population: 35.92449193620682
Median age in population: 35.97342044115067
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.055
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 30453608
--- Timings ---
Current time: 1529614962831 milliseconds
Total Time:          79.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.3 seconds, 47.1%
Fitness Testing:     32.9 seconds, 41.5%
Report:               8.9 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 9846.850900000003
Test mean error for best: 4.92343
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.00       
Correct output: -63.2352586418 | Program output: -63.00        
Correct output: 27.2333812574  | Program output: 28.00         
Correct output: -136.3711223178 | Program output: -136.00       
Correct output: 70.3877365207  | Program output: 71.00         
Correct output: 89.2001357371  | Program output: 90.00         
Correct output: 147.760546183  | Program output: 147.00        
Correct output: -137.3875804218 | Program output: -137.00       
Correct output: 161.1514033166 | Program output: 161.00        
Correct output: -95.9599100442 | Program output: -95.00        
Correct output: -120.308055299 | Program output: -120.00       
Correct output: -72.0801834627 | Program output: -72.00        
Correct output: -109.7122076235 | Program output: -109.00       
Correct output: 106.3138786569 | Program output: 106.00        
Correct output: 29.5231501286  | Program output: 30.00         
Correct output: 85.102682212   | Program output: 85.00         
Correct output: -100.2708478706 | Program output: -100.00       
Correct output: -22.9175151841 | Program output: -23.00        
Correct output: -94.4820838905 | Program output: -94.00        
Correct output: -11.5953117725 | Program output: -12.00        
Correct output: -13.7453326675 | Program output: -13.00        
Correct output: -20.3203574079 | Program output: -21.00        
Correct output: 161.8529283055 | Program output: 161.00        
Correct output: -55.7604817115 | Program output: -55.00        
Correct output: -28.6206702826 | Program output: -28.00        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_dec} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_mult} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_min} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub integer_yankdup print_float float_dec float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_mult integer_shove integer_mult float_min float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_div print_float float_shove float_div print_float float_stackdepth float_mod integer_mult integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 8 0.2353 10 0.7666 11 0.3711 10 0.6123 10 0.7999 10 0.7605 8 0.3876 9 0.1514 9 0.9599 8 0.3081 7 0.0802 8 0.7122 9 0.3139 10 0.4768 11 0.1027 8 0.2708 8 0.0825 11 0.4821 8 0.4047 11 0.7453 10 0.6796 9 0.8529 9 0.7605 9 0.6207 8]
Total: 240.9782
Mean: 4.819564
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2382.778730500004
Median total errors in population: 286.97819999999996
Error averages by case: (91.66568739999849 11.371 81.29771100000023 11.268 78.7749980000011 11.152 89.51068130000004 11.442 80.03981269999929 11.954 76.56561329999957 11.212 83.41300049999985 10.29 88.18737480000061 11.403 83.96038340000102 11.362 83.2711130000011 11.247 86.98697129999915 10.381 82.38081659999848 11.236 85.89217499999978 11.412 81.59917369999931 11.252 81.23508159999983 11.157 79.39347870000125 10.184 84.98394999999894 11.404 86.37573249999993 12.012 86.02880169999925 11.135 85.43025869999937 11.308 88.00748619999945 11.292 82.85095160000125 11.985 84.41840489999939 11.25 82.99871899999984 11.224 86.22135359999962 11.356)
Error minima by case: (0.0406 8 0.2353 5 0.2334 9 0.3711 7 0.3877 10 0.2001 10 0.2395 7 0.3876 8 0.1514 7 0.0401 6 0.3081 7 0.0802 6 0.2878 8 0.3139 7 0.4768 9 0.1027 5 0.2708 8 0.0825 10 0.4821 6 0.4047 9 0.2547 6 0.3204 9 0.1471 6 0.2395 6 0.3793 6)
Average genome size in population (length): 49.284
Average program size in population (points): 50.284
Average percent parens in population: 0.020
Minimum age in population: 34.56222915649414
Maximum age in population: 39.37718719244003
Average age in population: 37.41862107700109
Median age in population: 37.40250048041344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.062
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 31685708
--- Timings ---
Current time: 1529614965704 milliseconds
Total Time:          82.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.7 seconds, 47.1%
Fitness Testing:     34.1 seconds, 41.5%
Report:               9.2 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 9846.850900000003
Test mean error for best: 4.92343
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.00       
Correct output: -63.2352586418 | Program output: -63.00        
Correct output: 27.2333812574  | Program output: 28.00         
Correct output: -136.3711223178 | Program output: -136.00       
Correct output: 70.3877365207  | Program output: 71.00         
Correct output: 89.2001357371  | Program output: 90.00         
Correct output: 147.760546183  | Program output: 147.00        
Correct output: -137.3875804218 | Program output: -137.00       
Correct output: 161.1514033166 | Program output: 161.00        
Correct output: -95.9599100442 | Program output: -95.00        
Correct output: -120.308055299 | Program output: -120.00       
Correct output: -72.0801834627 | Program output: -72.00        
Correct output: -109.7122076235 | Program output: -109.00       
Correct output: 106.3138786569 | Program output: 106.00        
Correct output: 29.5231501286  | Program output: 30.00         
Correct output: 85.102682212   | Program output: 85.00         
Correct output: -100.2708478706 | Program output: -100.00       
Correct output: -22.9175151841 | Program output: -23.00        
Correct output: -94.4820838905 | Program output: -94.00        
Correct output: -11.5953117725 | Program output: -12.00        
Correct output: -13.7453326675 | Program output: -13.00        
Correct output: -20.3203574079 | Program output: -21.00        
Correct output: 161.8529283055 | Program output: 161.00        
Correct output: -55.7604817115 | Program output: -55.00        
Correct output: -28.6206702826 | Program output: -28.00        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_min} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_mult} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_min} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub integer_yankdup print_float integer_min float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_mult integer_shove integer_mult float_min float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_div print_float float_shove float_div print_float float_stackdepth float_mod integer_mult integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 8 0.2353 10 0.7666 11 0.3711 10 0.6123 10 0.7999 10 0.7605 8 0.3876 9 0.1514 9 0.9599 8 0.3081 7 0.0802 8 0.7122 9 0.3139 10 0.4768 11 0.1027 8 0.2708 8 0.0825 11 0.4821 8 0.4047 11 0.7453 10 0.6796 9 0.8529 9 0.7605 9 0.6207 8]
Total: 240.9782
Mean: 4.819564
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2064.7180348000043
Median total errors in population: 286.97819999999996
Error averages by case: (80.78537759999905 11.06 68.23106410000024 11.115 63.48937100000086 11.145 79.10773219999916 11.252 65.56145890000039 11.725 60.663520299999774 11.167 70.78384829999877 10.027 77.28906480000055 11.091 71.48836880000098 11.093 69.32391000000116 10.976 75.95167380000002 10.082 71.42774139999854 10.954 74.66255560000062 11.116 69.03414810000037 11.113 66.43806019999889 11.135 65.91844910000124 9.906 73.65417839999888 11.104 76.81929999999929 11.898 75.48285420000006 10.867 75.98235269999935 11.258 71.88555390000037 11.122 72.28890280000122 11.731 71.93976869999939 10.984 70.82901299999877 10.951 69.75976689999963 11.048)
Error minima by case: (0.0406 6 0.2353 4 0.2334 9 0.3711 5 0.3877 9 0.2001 9 0.2395 5 0.3876 6 0.0684 5 0.0401 5 0.3081 5 0.0802 4 0.2878 6 0.2519 5 0.4768 9 0.0067 4 0.2708 6 0.0825 9 0.4821 5 0.4047 9 0.2547 4 0.3204 8 0.1471 4 0.2395 5 0.3793 4)
Average genome size in population (length): 49.344
Average program size in population (points): 50.344
Average percent parens in population: 0.020
Minimum age in population: 36.02539348602295
Maximum age in population: 41.10369443893433
Average age in population: 38.88784752106667
Median age in population: 38.93566606938839
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.062
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 32919308
--- Timings ---
Current time: 1529614968769 milliseconds
Total Time:          85.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.2 seconds, 47.2%
Fitness Testing:     35.2 seconds, 41.4%
Report:               9.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 9846.850900000003
Test mean error for best: 4.92343
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.00       
Correct output: -63.2352586418 | Program output: -63.00        
Correct output: 27.2333812574  | Program output: 28.00         
Correct output: -136.3711223178 | Program output: -136.00       
Correct output: 70.3877365207  | Program output: 71.00         
Correct output: 89.2001357371  | Program output: 90.00         
Correct output: 147.760546183  | Program output: 147.00        
Correct output: -137.3875804218 | Program output: -137.00       
Correct output: 161.1514033166 | Program output: 161.00        
Correct output: -95.9599100442 | Program output: -95.00        
Correct output: -120.308055299 | Program output: -120.00       
Correct output: -72.0801834627 | Program output: -72.00        
Correct output: -109.7122076235 | Program output: -109.00       
Correct output: 106.3138786569 | Program output: 106.00        
Correct output: 29.5231501286  | Program output: 30.00         
Correct output: 85.102682212   | Program output: 85.00         
Correct output: -100.2708478706 | Program output: -100.00       
Correct output: -22.9175151841 | Program output: -23.00        
Correct output: -94.4820838905 | Program output: -94.00        
Correct output: -11.5953117725 | Program output: -12.00        
Correct output: -13.7453326675 | Program output: -13.00        
Correct output: -20.3203574079 | Program output: -21.00        
Correct output: 161.8529283055 | Program output: 161.00        
Correct output: -55.7604817115 | Program output: -55.00        
Correct output: -28.6206702826 | Program output: -28.00        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_dec} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_mult} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_min} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub integer_yankdup print_float float_dec float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_mult integer_shove integer_mult float_min float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_div print_float float_shove float_div print_float float_stackdepth float_mod integer_mult integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0406 8 0.2353 10 0.7666 11 0.3711 10 0.6123 10 0.7999 10 0.7605 8 0.3876 9 0.1514 9 0.9599 8 0.3081 7 0.0802 8 0.7122 9 0.3139 10 0.4768 11 0.1027 8 0.2708 8 0.0825 11 0.4821 8 0.4047 11 0.7453 10 0.6796 9 0.8529 9 0.7605 9 0.6207 8]
Total: 240.9782
Mean: 4.819564
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1945.4390056000043
Median total errors in population: 286.97819999999996
Error averages by case: (76.32177729999935 10.221 63.506437300000236 10.711 60.00933880000094 11.129 75.0045947999992 10.829 61.31074460000047 10.927 53.51030349999976 11.061 66.59045399999869 9.229 72.45596660000064 10.228 67.59294770000099 10.259 63.82041400000107 10.097 71.28676040000012 9.235 62.411329499998494 10.122 70.52387970000069 10.312 65.3585510000007 10.726 62.12229069999862 11.069 61.591680400001366 9.099 69.70599649999892 10.225 74.66107409999938 11.516 70.9083971000001 10.03 74.09868229999935 11.198 70.21550570000042 10.696 70.68204010000147 10.902 67.83375159999935 10.184 65.99777519999864 10.14 67.58531269999965 10.188)
Error minima by case: (0.0406 4 0.1453 2 0.2334 9 0.2811 3 0.3877 9 0.2001 9 0.2395 4 0.2976 4 0.0614 4 0.0401 3 0.2181 3 0.0098 3 0.2878 4 0.2239 4 0.4768 9 0.0127 3 0.1808 4 0.0825 9 0.3921 3 0.4047 9 0.2547 3 0.3204 8 0.1471 3 0.2395 3 0.3793 3)
Average genome size in population (length): 50.51
Average program size in population (points): 51.51
Average percent parens in population: 0.020
Minimum age in population: 37.63100624084473
Maximum age in population: 42.81915120780468
Average age in population: 40.3961430220753
Median age in population: 40.44159428030252
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 67
Genome diversity (% unique Plush genomes):	 0.736
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.079
Error (vector) diversity:			 0.079
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 34182058
--- Timings ---
Current time: 1529614971890 milliseconds
Total Time:          88.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.7 seconds, 47.2%
Fitness Testing:     36.5 seconds, 41.3%
Report:              10.0 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 9540.822300000009
Test mean error for best: 4.77041
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.01       
Correct output: -63.2352586418 | Program output: -63.01        
Correct output: 27.2333812574  | Program output: 28.01         
Correct output: -136.3711223178 | Program output: -136.01       
Correct output: 70.3877365207  | Program output: 71.01         
Correct output: 89.2001357371  | Program output: 90.01         
Correct output: 147.760546183  | Program output: 147.01        
Correct output: -137.3875804218 | Program output: -137.01       
Correct output: 161.1514033166 | Program output: 161.01        
Correct output: -95.9599100442 | Program output: -95.01        
Correct output: -120.308055299 | Program output: -120.01       
Correct output: -72.0801834627 | Program output: -72.01        
Correct output: -109.7122076235 | Program output: -109.01       
Correct output: 106.3138786569 | Program output: 106.01        
Correct output: 29.5231501286  | Program output: 30.01         
Correct output: 85.102682212   | Program output: 85.01         
Correct output: -100.2708478706 | Program output: -100.01       
Correct output: -22.9175151841 | Program output: -23.01        
Correct output: -94.4820838905 | Program output: -94.01        
Correct output: -11.5953117725 | Program output: -12.01        
Correct output: -13.7453326675 | Program output: -13.01        
Correct output: -20.3203574079 | Program output: -21.01        
Correct output: 161.8529283055 | Program output: 161.01        
Correct output: -55.7604817115 | Program output: -55.01        
Correct output: -28.6206702826 | Program output: -28.01        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction float_min} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank float_min float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float integer_mult float_mod integer_mult integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0306 8 0.2253 9 0.7766 10 0.3611 9 0.6223 10 0.8099 10 0.7505 7 0.3776 8 0.1414 8 0.9499 9 0.2981 8 0.0702 8 0.7022 9 0.3039 9 0.4868 10 0.0927 7 0.2608 9 0.0925 10 0.4721 9 0.4147 10 0.7353 10 0.6896 10 0.8429 9 0.7505 8 0.6107 9]
Total: 234.8682
Mean: 4.697364
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1217.974328800004
Median total errors in population: 249.9782
Error averages by case: (44.05206420000021 9.255 36.7308355000002 10.288 35.43969490000013 11.113 42.809734499999536 10.333 37.03253470000042 10.187 33.82684620000042 10.819 38.361287899999674 8.427 41.07701859999966 9.393 38.962920000000054 9.452 38.92347750000079 9.152 40.008123099999786 8.237 39.0402811999997 9.149 39.70874980000088 9.474 36.83648950000038 10.303 37.23264449999974 10.999 34.259756500000044 8.346 38.84256799999921 9.253 42.09748139999959 11.165 39.27582910000048 9.125 41.57214599999942 11.092 43.294785300000086 10.314 37.8593860000002 9.996 39.42704450000022 9.422 37.13046569999973 9.355 40.29616419999969 9.227)
Error minima by case: (0.0306 8 0.1453 9 0.2334 9 0.2811 8 0.3877 9 0.2001 8 0.2395 7 0.2976 8 0.0614 8 0.0401 7 0.2181 7 0.0098 8 0.2878 7 0.2239 9 0.4768 9 0.0127 7 0.1808 7 0.0825 10 0.3921 8 0.4047 10 0.2547 9 0.3204 8 0.1471 8 0.2395 8 0.3793 8)
Average genome size in population (length): 51.658
Average program size in population (points): 52.658
Average percent parens in population: 0.019
Minimum age in population: 39.09576958417892
Maximum age in population: 44.31221325695515
Average age in population: 41.87509729351848
Median age in population: 41.90555352717638
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.051
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 35473508
--- Timings ---
Current time: 1529614975059 milliseconds
Total Time:          91.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.1 seconds, 47.1%
Fitness Testing:     37.8 seconds, 41.4%
Report:              10.4 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 9319.04849999999
Test mean error for best: 4.65952
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.022      
Correct output: -63.2352586418 | Program output: -63.022       
Correct output: 27.2333812574  | Program output: 28.022        
Correct output: -136.3711223178 | Program output: -136.022      
Correct output: 70.3877365207  | Program output: 71.022        
Correct output: 89.2001357371  | Program output: 90.022        
Correct output: 147.760546183  | Program output: 147.022       
Correct output: -137.3875804218 | Program output: -137.022      
Correct output: 161.1514033166 | Program output: 161.022       
Correct output: -95.9599100442 | Program output: -95.022       
Correct output: -120.308055299 | Program output: -120.022      
Correct output: -72.0801834627 | Program output: -72.022       
Correct output: -109.7122076235 | Program output: -109.022      
Correct output: 106.3138786569 | Program output: 106.022       
Correct output: 29.5231501286  | Program output: 30.022        
Correct output: 85.102682212   | Program output: 85.022        
Correct output: -100.2708478706 | Program output: -100.022      
Correct output: -22.9175151841 | Program output: -23.022       
Correct output: -94.4820838905 | Program output: -94.022       
Correct output: -11.5953117725 | Program output: -12.022       
Correct output: -13.7453326675 | Program output: -13.022       
Correct output: -20.3203574079 | Program output: -21.022       
Correct output: 161.8529283055 | Program output: 161.022       
Correct output: -55.7604817115 | Program output: -55.022       
Correct output: -28.6206702826 | Program output: -28.022       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_max} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_pop} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction float_min} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_mult} {:instruction 22} {:instruction float_pop} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub integer_yankdup print_float integer_max float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush float_pop integer_sub float_div integer_mod integer_dup_times float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank float_min float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_div print_float float_stackdepth float_mod integer_mult 22 float_pop integer_max integer_mod print_integer)
Errors: [0.0186 8 0.2133 9 0.7886 10 0.3491 8 0.6343 10 0.8219 11 0.7385 8 0.3656 8 0.1294 9 0.9379 8 0.2861 7 0.0582 8 0.6902 8 0.2919 10 0.4988 10 0.0807 6 0.2488 9 0.1045 11 0.4601 9 0.4267 10 0.7233 9 0.7016 10 0.8309 8 0.7385 9 0.5987 7]
Total: 231.73620000000003
Mean: 4.634724
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1714.370293500003
Median total errors in population: 240.9782
Error averages by case: (67.6459543 8.93 54.60920760000018 10.4 54.03200650000065 11.175 65.44861629999858 10.473 55.98543070000045 10.25 49.291056600000054 10.435 58.87496429999871 8.534 63.612995200000455 9.527 59.852332200000895 9.545 56.049521200000996 8.81 62.20536650000052 7.929 57.483858099998756 8.823 60.980832800001075 9.622 56.916485900000495 10.384 56.37770049999892 11.038 53.68891670000096 8.422 59.95391809999904 8.947 60.765471699998926 11.255 60.98855630000055 8.78 60.03417089999941 11.178 62.8808346000008 10.417 56.826218000000964 9.634 60.25008569999952 9.527 56.68962199999877 9.456 60.538170799999634 8.897)
Error minima by case: (0.0186 6 0.1453 6 0.2334 9 0.2811 6 0.3877 9 0.2001 8 0.2395 5 0.2976 6 0.0614 5 0.0401 5 0.2181 6 0.0098 6 0.2878 6 0.2239 5 0.4768 9 0.0127 5 0.1808 6 0.0825 10 0.3921 6 0.4047 10 0.2547 6 0.3204 8 0.1471 5 0.2395 6 0.3793 6)
Average genome size in population (length): 53.43
Average program size in population (points): 54.43
Average percent parens in population: 0.019
Minimum age in population: 40.09576958417892
Maximum age in population: 45.24947780743241
Average age in population: 43.42545362213627
Median age in population: 43.47016122937202
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.065
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 36809258
--- Timings ---
Current time: 1529614978240 milliseconds
Total Time:          94.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.6 seconds, 47.1%
Fitness Testing:     39.1 seconds, 41.3%
Report:              10.8 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 9319.04849999999
Test mean error for best: 4.65952
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.022      
Correct output: -63.2352586418 | Program output: -63.022       
Correct output: 27.2333812574  | Program output: 28.022        
Correct output: -136.3711223178 | Program output: -136.022      
Correct output: 70.3877365207  | Program output: 71.022        
Correct output: 89.2001357371  | Program output: 90.022        
Correct output: 147.760546183  | Program output: 147.022       
Correct output: -137.3875804218 | Program output: -137.022      
Correct output: 161.1514033166 | Program output: 161.022       
Correct output: -95.9599100442 | Program output: -95.022       
Correct output: -120.308055299 | Program output: -120.022      
Correct output: -72.0801834627 | Program output: -72.022       
Correct output: -109.7122076235 | Program output: -109.022      
Correct output: 106.3138786569 | Program output: 106.022       
Correct output: 29.5231501286  | Program output: 30.022        
Correct output: 85.102682212   | Program output: 85.022        
Correct output: -100.2708478706 | Program output: -100.022      
Correct output: -22.9175151841 | Program output: -23.022       
Correct output: -94.4820838905 | Program output: -94.022       
Correct output: -11.5953117725 | Program output: -12.022       
Correct output: -13.7453326675 | Program output: -13.022       
Correct output: -20.3203574079 | Program output: -21.022       
Correct output: 161.8529283055 | Program output: 161.022       
Correct output: -55.7604817115 | Program output: -55.022       
Correct output: -28.6206702826 | Program output: -28.022       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_flush} {:instruction float_dup} {:instruction print_float} {:instruction integer_max} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_pop} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction float_min} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_mult} {:instruction 22} {:instruction float_pop} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (integer_stackdepth float_dup_items float_flush float_dup print_float integer_max float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush float_pop integer_sub float_div integer_mod integer_dup_times float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank float_min float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_div print_float float_stackdepth float_mod integer_mult 22 float_pop integer_max integer_mod print_integer)
Errors: [0.0186 8 0.2133 9 0.7886 10 0.3491 8 0.6343 10 0.8219 11 0.7385 8 0.3656 8 0.1294 9 0.9379 8 0.2861 7 0.0582 8 0.6902 8 0.2919 10 0.4988 10 0.0807 6 0.2488 9 0.1045 11 0.4601 9 0.4267 10 0.7233 9 0.7016 10 0.8309 8 0.7385 9 0.5987 7]
Total: 231.73620000000003
Mean: 4.634724
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1159.4849326000035
Median total errors in population: 240.9782
Error averages by case: (42.085633300000154 8.548 33.360936500000165 10.25 32.81554959999976 11.105 40.37652429999971 10.303 34.81107350000027 10.188 32.22460660000057 10.159 39.12035139999978 8.374 38.76718619999965 9.355 39.748292900000116 9.368 35.512580700000555 8.476 37.61033039999978 7.572 34.96699450000009 8.435 37.26292800000064 9.454 37.40803740000029 10.275 34.137553900000064 10.998 34.705596999999884 8.26 36.338542099999444 8.579 39.25267249999989 11.171 36.605540000000346 8.475 38.7408988999996 11.127 39.01370989999992 10.3 36.056437699999954 9.392 40.23132800000018 9.381 33.88927150000018 9.302 37.06935579999979 8.526)
Error minima by case: (0.0094 4 0.1853 2 0.2114 9 0.3211 3 0.3657 9 0.1781 8 0.6905 4 0.3376 4 0.1014 4 0.0401 3 0.2581 3 0.0302 3 0.2878 4 0.2239 4 0.4768 8 0.0527 3 0.2208 4 0.0825 10 0.4321 3 0.4047 10 0.2547 3 0.6796 8 0.8029 3 0.2395 3 0.3793 3)
Average genome size in population (length): 54.181
Average program size in population (points): 55.181
Average percent parens in population: 0.018
Minimum age in population: 42.38135568797588
Maximum age in population: 46.77139986306429
Average age in population: 44.8753849944286
Median age in population: 44.94396205153316
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.05
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 38163783
--- Timings ---
Current time: 1529614981454 milliseconds
Total Time:          97.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.1 seconds, 47.1%
Fitness Testing:     40.5 seconds, 41.3%
Report:              11.1 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 9371.822300000007
Test mean error for best: 4.68591
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.010      
Correct output: -63.2352586418 | Program output: -63.010       
Correct output: 27.2333812574  | Program output: 28.010        
Correct output: -136.3711223178 | Program output: -136.010      
Correct output: 70.3877365207  | Program output: 71.010        
Correct output: 89.2001357371  | Program output: 90.010        
Correct output: 147.760546183  | Program output: 147.010       
Correct output: -137.3875804218 | Program output: -137.010      
Correct output: 161.1514033166 | Program output: 161.010       
Correct output: -95.9599100442 | Program output: -95.010       
Correct output: -120.308055299 | Program output: -120.010      
Correct output: -72.0801834627 | Program output: -72.010       
Correct output: -109.7122076235 | Program output: -109.010      
Correct output: 106.3138786569 | Program output: 106.010       
Correct output: 29.5231501286  | Program output: 30.010        
Correct output: 85.102682212   | Program output: 85.010        
Correct output: -100.2708478706 | Program output: -100.010      
Correct output: -22.9175151841 | Program output: -23.010       
Correct output: -94.4820838905 | Program output: -94.010       
Correct output: -11.5953117725 | Program output: -12.010       
Correct output: -13.7453326675 | Program output: -13.010       
Correct output: -20.3203574079 | Program output: -21.010       
Correct output: 161.8529283055 | Program output: 161.010       
Correct output: -55.7604817115 | Program output: -55.010       
Correct output: -28.6206702826 | Program output: -28.010       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction float_min} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_swap} {:instruction float_div} {:instruction print_float} {:instruction float_shove} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction float_div} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank float_min float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_swap float_div print_float float_shove print_integer print_float float_div float_div print_float float_stackdepth float_mod integer_mult integer_mult float_flush integer_max integer_mod print_integer)
Errors: [0.0306 8 0.2253 9 0.7766 10 0.3611 9 0.6223 10 0.8099 10 0.7505 7 0.3776 8 0.1414 8 0.9499 8 0.2981 7 0.0702 8 0.7022 8 0.3039 9 0.4868 10 0.0927 7 0.2608 8 0.0925 10 0.4721 8 0.4147 10 0.7353 10 0.6896 9 0.8429 9 0.7505 8 0.6107 8]
Total: 227.86820000000003
Mean: 4.557364
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 1165.760434100003
Median total errors in population: 240.9782
Error averages by case: (43.52932400000007 8.602 33.71387650000004 10.118 32.677449699999826 10.952 41.01550389999943 10.15 35.32301040000037 10.202 33.567599100000564 10.192 39.07714309999949 8.299 39.89360089999974 9.235 39.815193700000265 9.313 36.586225500000616 8.646 38.48797209999977 7.756 35.41361069999978 8.479 38.00385190000075 9.474 36.4568687000002 10.21 34.399972899999845 10.823 33.72720139999988 8.112 36.92070429999932 8.812 38.73879649999976 11.043 36.97585910000029 8.671 37.99257139999965 10.969 39.703510300000076 10.321 34.88766630000005 9.557 40.34902030000015 9.399 34.00463149999988 9.213 37.27426989999972 8.677)
Error minima by case: (0.0094 8 0.1853 7 0.2234 9 0.3211 8 0.3777 9 0.1901 8 0.2395 7 0.3376 8 0.1014 8 0.0401 7 0.2581 7 0.0302 8 0.2878 8 0.2639 9 0.4768 8 0.0527 6 0.2208 7 0.0825 10 0.4321 8 0.4047 10 0.2547 8 0.3204 8 0.1471 8 0.2395 8 0.3793 7)
Average genome size in population (length): 53.86
Average program size in population (points): 54.86
Average percent parens in population: 0.018
Minimum age in population: 43.96436152607203
Maximum age in population: 48.50254675000906
Average age in population: 46.37222476661764
Median age in population: 46.43488844670355
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.763
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.763
Total error diversity:				 0.066
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 39510283
--- Timings ---
Current time: 1529614984801 milliseconds
Total Time:         101.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.5 seconds, 47.0%
Fitness Testing:     42.0 seconds, 41.5%
Report:              11.5 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 9135.521299999986
Test mean error for best: 4.56776
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.021      
Correct output: -63.2352586418 | Program output: -63.021       
Correct output: 27.2333812574  | Program output: 28.021        
Correct output: -136.3711223178 | Program output: -136.021      
Correct output: 70.3877365207  | Program output: 71.021        
Correct output: 89.2001357371  | Program output: 90.021        
Correct output: 147.760546183  | Program output: 147.021       
Correct output: -137.3875804218 | Program output: -137.021      
Correct output: 161.1514033166 | Program output: 161.021       
Correct output: -95.9599100442 | Program output: -95.021       
Correct output: -120.308055299 | Program output: -120.021      
Correct output: -72.0801834627 | Program output: -72.021       
Correct output: -109.7122076235 | Program output: -109.021      
Correct output: 106.3138786569 | Program output: 106.021       
Correct output: 29.5231501286  | Program output: 30.021        
Correct output: 85.102682212   | Program output: 85.021        
Correct output: -100.2708478706 | Program output: -100.021      
Correct output: -22.9175151841 | Program output: -23.021       
Correct output: -94.4820838905 | Program output: -94.021       
Correct output: -11.5953117725 | Program output: -12.021       
Correct output: -13.7453326675 | Program output: -13.021       
Correct output: -20.3203574079 | Program output: -21.021       
Correct output: 161.8529283055 | Program output: 161.021       
Correct output: -55.7604817115 | Program output: -55.021       
Correct output: -28.6206702826 | Program output: -28.021       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction float_dup} {:instruction float_sub} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_yank} {:instruction float_mult} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_pop} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction float_min} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_mult} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub float_cos float_dup float_sub integer_yankdup print_float float_mult float_dup integer_fromfloat print_integer float_yank float_mult integer_mod integer_fromfloat print_integer float_cos float_sin in1 integer_max integer_fromfloat float_flush float_pop integer_sub float_div integer_mod integer_dup_times float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank float_min float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_div print_float float_stackdepth float_mod integer_mult 21 float_pop integer_max integer_mod print_integer)
Errors: [0.0196 8 0.2143 8 0.7876 10 0.3501 8 0.6333 10 0.8209 10 0.7395 7 0.3666 7 0.1304 8 0.9389 9 0.2871 7 0.0592 8 0.6912 8 0.2929 10 0.4978 10 0.0817 6 0.2498 9 0.1035 10 0.4611 9 0.4257 10 0.7243 9 0.7006 10 0.8319 9 0.7395 8 0.5997 8]
Total: 227.74720000000002
Mean: 4.554944
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1501.2079785000024
Median total errors in population: 234.8682
Error averages by case: (59.00923739999963 8.706 44.76171169999967 9.715 45.694740099999834 10.521 56.33336639999961 9.615 47.52516020000046 10.245 42.81768180000023 10.357 53.468498399999625 8.046 53.871975999999805 8.857 54.99324040000032 9.058 47.02880610000006 9.017 52.30222319999996 8.143 50.041910699999704 8.557 50.60013920000007 9.393 51.464463399999644 9.936 48.324143699999496 10.38 48.08870850000047 7.571 49.54584469999923 9.322 52.19286059999953 10.746 51.370122899999735 9.181 51.42672230000045 10.544 53.29254290000018 10.238 48.13656570000007 10.031 55.122138800000656 9.311 47.28962279999969 8.964 51.131550599999684 8.92)
Error minima by case: (0.0094 5 0.1853 5 0.2334 10 0.3211 5 0.3877 9 0.2001 8 0.7105 4 0.3376 5 0.1014 4 0.0401 4 0.2581 5 0.0302 5 0.2878 5 0.2639 4 0.4768 9 0.0527 4 0.2208 5 0.0825 9 0.4321 5 0.4047 8 0.2547 5 0.6796 8 0.8029 4 0.2395 5 0.3793 5)
Average genome size in population (length): 52.156
Average program size in population (points): 53.156
Average percent parens in population: 0.019
Minimum age in population: 45.56950832903385
Maximum age in population: 49.76375116175041
Average age in population: 47.89508450508909
Median age in population: 47.95687079266645
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 93
Genome diversity (% unique Plush genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.079
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 40814208
--- Timings ---
Current time: 1529614987862 milliseconds
Total Time:         104.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.8 seconds, 46.9%
Fitness Testing:     43.3 seconds, 41.5%
Report:              12.0 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 8718.668000000009
Test mean error for best: 4.35933
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.05184    
Correct output: -63.2352586418 | Program output: -63.05184     
Correct output: 27.2333812574  | Program output: 28.05184      
Correct output: -136.3711223178 | Program output: -136.05184    
Correct output: 70.3877365207  | Program output: 71.05184      
Correct output: 89.2001357371  | Program output: 90.05184      
Correct output: 147.760546183  | Program output: 147.05184     
Correct output: -137.3875804218 | Program output: -137.05184    
Correct output: 161.1514033166 | Program output: 161.05184     
Correct output: -95.9599100442 | Program output: -95.05184     
Correct output: -120.308055299 | Program output: -120.05184    
Correct output: -72.0801834627 | Program output: -72.05184     
Correct output: -109.7122076235 | Program output: -109.05184    
Correct output: 106.3138786569 | Program output: 106.05184     
Correct output: 29.5231501286  | Program output: 30.05184      
Correct output: 85.102682212   | Program output: 85.05184      
Correct output: -100.2708478706 | Program output: -100.05184    
Correct output: -22.9175151841 | Program output: -23.05184     
Correct output: -94.4820838905 | Program output: -94.05184     
Correct output: -11.5953117725 | Program output: -12.05184     
Correct output: -13.7453326675 | Program output: -13.05184     
Correct output: -20.3203574079 | Program output: -21.05184     
Correct output: 161.8529283055 | Program output: 161.05184     
Correct output: -55.7604817115 | Program output: -55.05184     
Correct output: -28.6206702826 | Program output: -28.05184     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction float_min} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank float_min float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0112 8 0.1834 7 0.8185 9 0.3193 9 0.6641 10 0.8517 10 0.7087 5 0.3357 8 0.0996 8 0.9081 7 0.2562 7 0.0283 6 0.6604 9 0.262 9 0.5287 9 0.0508 7 0.219 8 0.1343 7 0.4302 8 0.4565 9 0.6935 9 0.7315 9 0.8011 8 0.7086 8 0.5688 8]
Total: 213.4302
Mean: 4.268604
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1271.9820924000005
Median total errors in population: 231.73620000000003
Error averages by case: (50.215663200000144 8.62 38.853682799999916 9.436 33.76830909999996 10.247 48.32045099999977 8.913 35.564014900000124 10.217 31.335196999999923 10.684 40.740942399999774 8.179 45.948575599999614 8.559 41.85818760000007 9.181 41.1103304999998 8.769 44.552328599999754 7.849 42.19158429999979 8.475 43.75734509999967 8.892 39.20555459999946 10.094 35.91177340000009 10.099 35.91474839999977 6.887 42.7550655999999 9.463 46.21836870000013 10.853 43.58860689999942 9.327 45.54454580000077 10.25 45.69366209999994 9.83 42.16123620000011 10.145 42.14021600000061 8.887 40.10665489999976 9.101 43.329047699999904 8.239)
Error minima by case: (0.0112 7 0.1834 7 0.2114 9 0.3193 7 0.3657 9 0.1781 8 0.2495 5 0.3357 7 0.0996 7 0.0501 7 0.2562 6 0.0283 6 0.2978 7 0.2239 9 0.4768 8 0.0508 5 0.219 8 0.0825 7 0.4302 8 0.4047 9 0.2647 9 0.3104 8 0.1571 7 0.2495 7 0.3893 6)
Average genome size in population (length): 51.398
Average program size in population (points): 52.398
Average percent parens in population: 0.019
Minimum age in population: 47.03200367838144
Maximum age in population: 51.26930680172518
Average age in population: 49.43647203836823
Median age in population: 49.48421745444648
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.074
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 42099158
--- Timings ---
Current time: 1529614990969 milliseconds
Total Time:         107.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.3 seconds, 46.8%
Fitness Testing:     44.6 seconds, 41.5%
Report:              12.4 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 8718.668000000009
Test mean error for best: 4.35933
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.05184    
Correct output: -63.2352586418 | Program output: -63.05184     
Correct output: 27.2333812574  | Program output: 28.05184      
Correct output: -136.3711223178 | Program output: -136.05184    
Correct output: 70.3877365207  | Program output: 71.05184      
Correct output: 89.2001357371  | Program output: 90.05184      
Correct output: 147.760546183  | Program output: 147.05184     
Correct output: -137.3875804218 | Program output: -137.05184    
Correct output: 161.1514033166 | Program output: 161.05184     
Correct output: -95.9599100442 | Program output: -95.05184     
Correct output: -120.308055299 | Program output: -120.05184    
Correct output: -72.0801834627 | Program output: -72.05184     
Correct output: -109.7122076235 | Program output: -109.05184    
Correct output: 106.3138786569 | Program output: 106.05184     
Correct output: 29.5231501286  | Program output: 30.05184      
Correct output: 85.102682212   | Program output: 85.05184      
Correct output: -100.2708478706 | Program output: -100.05184    
Correct output: -22.9175151841 | Program output: -23.05184     
Correct output: -94.4820838905 | Program output: -94.05184     
Correct output: -11.5953117725 | Program output: -12.05184     
Correct output: -13.7453326675 | Program output: -13.05184     
Correct output: -20.3203574079 | Program output: -21.05184     
Correct output: 161.8529283055 | Program output: 161.05184     
Correct output: -55.7604817115 | Program output: -55.05184     
Correct output: -28.6206702826 | Program output: -28.05184     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction float_min} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank float_min float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0112 8 0.1834 7 0.8185 9 0.3193 9 0.6641 10 0.8517 10 0.7087 5 0.3357 8 0.0996 8 0.9081 7 0.2562 7 0.0283 6 0.6604 9 0.262 9 0.5287 9 0.0508 7 0.219 8 0.1343 7 0.4302 8 0.4565 9 0.6935 9 0.7315 9 0.8011 8 0.7086 8 0.5688 8]
Total: 213.4302
Mean: 4.268604
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1553.5811689000025
Median total errors in population: 231.73620000000003
Error averages by case: (61.101640900000326 8.67 49.8871528 9.403 47.24212269999988 10.263 58.99336819999972 8.865 49.363602300000174 10.25 44.76564610000016 10.71 53.60174329999977 8.246 56.085514799999494 8.561 55.11352379999992 9.249 51.721068499999795 8.59 54.60495389999971 7.645 53.09526589999976 8.473 54.018729099999696 8.695 52.23936059999946 10.202 49.111691300000174 10.088 48.56130529999975 6.867 53.05266920000006 9.352 55.95516320000025 10.901 54.03163039999942 9.18 55.24959740000086 10.25 55.233926299999844 9.833 51.56907720000015 9.99 55.215650400000555 8.903 50.67872869999972 9.165 52.74103659999999 7.996)
Error minima by case: (0.0112 6 0.1633 6 0.2114 9 0.2991 6 0.3657 9 0.1781 8 0.2495 5 0.3156 6 0.0694 5 0.0611 5 0.2361 6 0.0082 6 0.3088 6 0.2239 5 0.4768 8 0.0307 5 0.1988 6 0.0825 7 0.4101 6 0.4047 8 0.2757 6 0.3082 8 0.1571 5 0.2605 6 0.4003 6)
Average genome size in population (length): 52.72
Average program size in population (points): 53.72
Average percent parens in population: 0.019
Minimum age in population: 48.56943613756448
Maximum age in population: 52.86111121531576
Average age in population: 50.97513257619448
Median age in population: 50.9875641092658
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 75
Genome diversity (% unique Plush genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.085
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 43417158
--- Timings ---
Current time: 1529614994284 milliseconds
Total Time:         110.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.7 seconds, 46.7%
Fitness Testing:     46.1 seconds, 41.6%
Report:              12.8 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 8718.668000000009
Test mean error for best: 4.35933
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.05184    
Correct output: -63.2352586418 | Program output: -63.05184     
Correct output: 27.2333812574  | Program output: 28.05184      
Correct output: -136.3711223178 | Program output: -136.05184    
Correct output: 70.3877365207  | Program output: 71.05184      
Correct output: 89.2001357371  | Program output: 90.05184      
Correct output: 147.760546183  | Program output: 147.05184     
Correct output: -137.3875804218 | Program output: -137.05184    
Correct output: 161.1514033166 | Program output: 161.05184     
Correct output: -95.9599100442 | Program output: -95.05184     
Correct output: -120.308055299 | Program output: -120.05184    
Correct output: -72.0801834627 | Program output: -72.05184     
Correct output: -109.7122076235 | Program output: -109.05184    
Correct output: 106.3138786569 | Program output: 106.05184     
Correct output: 29.5231501286  | Program output: 30.05184      
Correct output: 85.102682212   | Program output: 85.05184      
Correct output: -100.2708478706 | Program output: -100.05184    
Correct output: -22.9175151841 | Program output: -23.05184     
Correct output: -94.4820838905 | Program output: -94.05184     
Correct output: -11.5953117725 | Program output: -12.05184     
Correct output: -13.7453326675 | Program output: -13.05184     
Correct output: -20.3203574079 | Program output: -21.05184     
Correct output: 161.8529283055 | Program output: 161.05184     
Correct output: -55.7604817115 | Program output: -55.05184     
Correct output: -28.6206702826 | Program output: -28.05184     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction float_min} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank float_min float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0112 8 0.1834 7 0.8185 9 0.3193 9 0.6641 10 0.8517 10 0.7087 5 0.3357 8 0.0996 8 0.9081 7 0.2562 7 0.0283 6 0.6604 9 0.262 9 0.5287 9 0.0508 7 0.219 8 0.1343 7 0.4302 8 0.4565 9 0.6935 9 0.7315 9 0.8011 8 0.7086 8 0.5688 8]
Total: 213.4302
Mean: 4.268604
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1558.5890592000003
Median total errors in population: 227.86820000000003
Error averages by case: (64.8733549999997 8.624 48.36284719999971 9.174 43.981254999999884 10.175 60.650837000000465 9.02 47.62359160000057 10.202 43.59589900000002 10.257 53.416961100000314 7.723 59.08581849999994 8.377 54.7793825000002 8.792 52.373276899999894 8.749 57.090567200000066 7.66 52.02472000000029 8.345 55.46482059999989 8.641 49.841021999999846 9.894 47.536352799999705 10.02 45.9926567000002 7.078 54.04656659999921 9.08 58.66683179999962 10.362 54.80790039999972 8.924 57.26101600000034 10.169 58.47091100000022 9.994 51.91585319999953 9.761 55.204194000000356 9.223 49.66407680000026 8.695 54.523346299999595 8.396)
Error minima by case: (0.0112 5 0.1633 3 0.2124 9 0.2991 4 0.3667 9 0.1791 8 0.2395 5 0.3156 5 0.0794 5 0.0501 4 0.2361 4 0.0082 4 0.2978 5 0.2239 5 0.4768 8 0.0307 4 0.1988 5 0.0825 6 0.4101 4 0.4047 9 0.2647 4 0.2994 8 0.1471 4 0.2495 4 0.3893 4)
Average genome size in population (length): 54.907
Average program size in population (points): 55.907
Average percent parens in population: 0.018
Minimum age in population: 50.00505203881767
Maximum age in population: 54.54911888745846
Average age in population: 52.44099017096258
Median age in population: 52.44514912515297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 77
Genome diversity (% unique Plush genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.107
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 44789833
--- Timings ---
Current time: 1529614997356 milliseconds
Total Time:         113.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.0 seconds, 46.6%
Fitness Testing:     47.5 seconds, 41.7%
Report:              13.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 8718.668000000009
Test mean error for best: 4.35933
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.05184    
Correct output: -63.2352586418 | Program output: -63.05184     
Correct output: 27.2333812574  | Program output: 28.05184      
Correct output: -136.3711223178 | Program output: -136.05184    
Correct output: 70.3877365207  | Program output: 71.05184      
Correct output: 89.2001357371  | Program output: 90.05184      
Correct output: 147.760546183  | Program output: 147.05184     
Correct output: -137.3875804218 | Program output: -137.05184    
Correct output: 161.1514033166 | Program output: 161.05184     
Correct output: -95.9599100442 | Program output: -95.05184     
Correct output: -120.308055299 | Program output: -120.05184    
Correct output: -72.0801834627 | Program output: -72.05184     
Correct output: -109.7122076235 | Program output: -109.05184    
Correct output: 106.3138786569 | Program output: 106.05184     
Correct output: 29.5231501286  | Program output: 30.05184      
Correct output: 85.102682212   | Program output: 85.05184      
Correct output: -100.2708478706 | Program output: -100.05184    
Correct output: -22.9175151841 | Program output: -23.05184     
Correct output: -94.4820838905 | Program output: -94.05184     
Correct output: -11.5953117725 | Program output: -12.05184     
Correct output: -13.7453326675 | Program output: -13.05184     
Correct output: -20.3203574079 | Program output: -21.05184     
Correct output: 161.8529283055 | Program output: 161.05184     
Correct output: -55.7604817115 | Program output: -55.05184     
Correct output: -28.6206702826 | Program output: -28.05184     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction float_min} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank float_min float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup integer_mult float_mod integer_max integer_mod print_integer)
Errors: [0.0112 8 0.1834 7 0.8185 9 0.3193 9 0.6641 10 0.8517 10 0.7087 5 0.3357 8 0.0996 8 0.9081 7 0.2562 7 0.0283 6 0.6604 9 0.262 9 0.5287 9 0.0508 7 0.219 8 0.1343 7 0.4302 8 0.4565 9 0.6935 9 0.7315 9 0.8011 8 0.7086 8 0.5688 8]
Total: 213.4302
Mean: 4.268604
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1542.7933640000006
Median total errors in population: 227.74720000000002
Error averages by case: (62.10903960000021 8.41 50.54373300000024 8.788 45.3687708000003 9.833 60.35248310000031 8.595 46.635684100000496 10.119 42.365967899999916 10.181 51.22154570000023 7.386 57.42879820000021 8.234 52.66922300000021 8.742 50.50893220000006 8.657 56.28361850000025 7.578 53.53729600000003 7.835 55.47960190000003 8.475 49.713004700000354 9.864 47.0780972 9.709 46.48384539999988 6.842 54.60476469999956 9.143 57.013997599999755 9.884 55.947112799999836 9.035 55.966588099999875 9.829 56.13029760000028 9.617 53.225276699999945 9.868 52.56884249999982 8.896 52.736157300000016 8.576 54.55568539999995 8.169)
Error minima by case: (0.0035 7 0.1632 7 0.1815 8 0.299 7 0.3359 8 0.1483 8 0.2495 5 0.3155 7 0.0694 7 0.0523 7 0.236 6 0.0081 6 0.3 6 0.2418 9 0.4713 7 0.0306 4 0.1987 7 0.0825 6 0.41 8 0.4047 8 0.2669 9 0.3104 8 0.1571 7 0.2517 7 0.3915 6)
Average genome size in population (length): 55.041
Average program size in population (points): 56.041
Average percent parens in population: 0.018
Minimum age in population: 51.53502494195709
Maximum age in population: 55.96492312126793
Average age in population: 53.87270418104623
Median age in population: 53.90002481685951
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.117
Error (vector) diversity:			 0.12
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 46165858
--- Timings ---
Current time: 1529615000732 milliseconds
Total Time:         117.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.4 seconds, 46.5%
Fitness Testing:     49.1 seconds, 41.9%
Report:              13.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 8697.667600000006
Test mean error for best: 4.34883
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518422  
Correct output: -63.2352586418 | Program output: -63.0518422   
Correct output: 27.2333812574  | Program output: 28.0518422    
Correct output: -136.3711223178 | Program output: -136.0518422  
Correct output: 70.3877365207  | Program output: 71.0518422    
Correct output: 89.2001357371  | Program output: 90.0518422    
Correct output: 147.760546183  | Program output: 147.0518422   
Correct output: -137.3875804218 | Program output: -137.0518422  
Correct output: 161.1514033166 | Program output: 161.0518422   
Correct output: -95.9599100442 | Program output: -95.0518422   
Correct output: -120.308055299 | Program output: -120.0518422  
Correct output: -72.0801834627 | Program output: -72.0518422   
Correct output: -109.7122076235 | Program output: -109.0518422  
Correct output: 106.3138786569 | Program output: 106.0518422   
Correct output: 29.5231501286  | Program output: 30.0518422    
Correct output: 85.102682212   | Program output: 85.0518422    
Correct output: -100.2708478706 | Program output: -100.0518422  
Correct output: -22.9175151841 | Program output: -23.0518422   
Correct output: -94.4820838905 | Program output: -94.0518422   
Correct output: -11.5953117725 | Program output: -12.0518422   
Correct output: -13.7453326675 | Program output: -13.0518422   
Correct output: -20.3203574079 | Program output: -21.0518422   
Correct output: 161.8529283055 | Program output: 161.0518422   
Correct output: -55.7604817115 | Program output: -55.0518422   
Correct output: -28.6206702826 | Program output: -28.0518422   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_float} {:instruction integer_mult} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 22} {:instruction float_pop} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup integer_mult float_mod integer_max integer_mod print_float integer_mult print_integer print_float float_div 22 float_pop integer_max integer_mod print_integer)
Errors: [0.0112 7 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 10 0.7087 7 0.3357 7 0.0996 8 0.9081 6 0.2562 7 0.0283 5 0.6604 9 0.262 9 0.5287 10 0.0508 5 0.219 8 0.1343 8 0.4302 8 0.4565 8 0.6935 9 0.7315 9 0.8011 8 0.7086 8 0.5688 8]
Total: 209.4302
Mean: 4.188604
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 1640.537560000003
Median total errors in population: 213.4302
Error averages by case: (67.64220070000036 8.271 57.68246490000081 8.234 49.14697830000037 9.387 67.12365590000057 8.903 49.57661020000057 10.156 46.59467979999983 10.119 50.472266400000265 6.422 64.07722200000059 8.47 51.45867480000035 8.557 58.69906500000001 7.936 63.06188080000061 7.594 61.32987619999953 7.033 62.155738300000046 8.891 50.926840400000735 9.476 51.33754910000061 9.28 46.851928999999544 7.112 61.405411699999384 8.852 57.217353099999755 8.534 63.05383680000015 8.772 56.83650379999981 9.359 62.07786240000028 9.51 53.955949800000674 9.62 51.61425369999961 8.573 60.12089819999952 8.457 60.33885870000031 8.261)
Error minima by case: (0.0112 6 0.142 7 0.1815 8 0.2779 7 0.3359 9 0.1483 8 0.2517 5 0.2944 7 0.0582 7 0.0523 6 0.2148 5 0.0063 5 0.3 6 0.2207 6 0.4713 7 0.0095 4 0.1776 7 0.0825 6 0.3889 7 0.4047 8 0.2669 7 0.3082 8 0.1593 7 0.2517 7 0.0343 6)
Average genome size in population (length): 53.565
Average program size in population (points): 54.565
Average percent parens in population: 0.019
Minimum age in population: 52.8319109811564
Maximum age in population: 57.24490993533982
Average age in population: 55.32237333321558
Median age in population: 55.39126032324566
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 138
Genome diversity (% unique Plush genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.104
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 47504983
--- Timings ---
Current time: 1529615004251 milliseconds
Total Time:         120.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.8 seconds, 46.3%
Fitness Testing:     50.7 seconds, 42.1%
Report:              13.9 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 8697.667600000006
Test mean error for best: 4.34883
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518422  
Correct output: -63.2352586418 | Program output: -63.0518422   
Correct output: 27.2333812574  | Program output: 28.0518422    
Correct output: -136.3711223178 | Program output: -136.0518422  
Correct output: 70.3877365207  | Program output: 71.0518422    
Correct output: 89.2001357371  | Program output: 90.0518422    
Correct output: 147.760546183  | Program output: 147.0518422   
Correct output: -137.3875804218 | Program output: -137.0518422  
Correct output: 161.1514033166 | Program output: 161.0518422   
Correct output: -95.9599100442 | Program output: -95.0518422   
Correct output: -120.308055299 | Program output: -120.0518422  
Correct output: -72.0801834627 | Program output: -72.0518422   
Correct output: -109.7122076235 | Program output: -109.0518422  
Correct output: 106.3138786569 | Program output: 106.0518422   
Correct output: 29.5231501286  | Program output: 30.0518422    
Correct output: 85.102682212   | Program output: 85.0518422    
Correct output: -100.2708478706 | Program output: -100.0518422  
Correct output: -22.9175151841 | Program output: -23.0518422   
Correct output: -94.4820838905 | Program output: -94.0518422   
Correct output: -11.5953117725 | Program output: -12.0518422   
Correct output: -13.7453326675 | Program output: -13.0518422   
Correct output: -20.3203574079 | Program output: -21.0518422   
Correct output: 161.8529283055 | Program output: 161.0518422   
Correct output: -55.7604817115 | Program output: -55.0518422   
Correct output: -28.6206702826 | Program output: -28.0518422   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_float} {:instruction integer_mult} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 22} {:instruction float_pop} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup integer_mult float_mod integer_max integer_mod print_float integer_mult print_integer print_float float_div 22 float_pop integer_max integer_mod print_integer)
Errors: [0.0112 7 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 10 0.7087 7 0.3357 7 0.0996 8 0.9081 6 0.2562 7 0.0283 5 0.6604 9 0.262 9 0.5287 10 0.0508 5 0.219 8 0.1343 8 0.4302 8 0.4565 8 0.6935 9 0.7315 9 0.8011 8 0.7086 8 0.5688 8]
Total: 209.4302
Mean: 4.188604
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 1662.5290653000015
Median total errors in population: 213.4302
Error averages by case: (63.76359990000051 8.507 56.54754030000082 7.643 52.38282000000055 9.346 62.79750760000068 9.436 53.267398600000924 10.213 50.745567599999475 10.134 56.039093400000574 5.812 60.971150500001016 8.461 56.69039990000074 8.54 57.798677700000425 7.601 60.11059260000115 7.572 59.1362392999996 6.678 59.56971530000051 9.454 55.10770060000072 9.454 53.97647850000065 9.247 52.97171689999959 7.408 58.879328599999134 8.571 61.6087000999994 7.655 60.01222680000076 8.489 60.965455900000165 9.363 61.38211760000067 9.499 58.71830890000098 9.393 56.99980569999912 8.563 58.02790049999959 8.443 60.028022500000326 8.549)
Error minima by case: (6.0E-4 7 0.1633 5 0.1815 8 0.2991 6 0.3359 9 0.1483 8 0.2913 5 0.3156 6 0.0794 7 0.0501 6 0.2361 6 0.0082 5 0.2978 6 0.2419 6 0.4713 7 0.0307 5 0.1988 7 0.0825 6 0.4101 6 0.4047 8 0.2647 6 0.2685 8 0.1989 6 0.2495 6 0.3893 6)
Average genome size in population (length): 51.269
Average program size in population (points): 52.269
Average percent parens in population: 0.019
Minimum age in population: 54.22914183023386
Maximum age in population: 58.41492223395471
Average age in population: 56.806017637965
Median age in population: 56.87887159999082
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 117
Genome diversity (% unique Plush genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.065
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 48786716
--- Timings ---
Current time: 1529615007368 milliseconds
Total Time:         123.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.1 seconds, 46.2%
Fitness Testing:     52.1 seconds, 42.1%
Report:              14.3 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 8747.664500000003
Test mean error for best: 4.37383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.05185    
Correct output: -63.2352586418 | Program output: -63.05185     
Correct output: 27.2333812574  | Program output: 28.05185      
Correct output: -136.3711223178 | Program output: -136.05185    
Correct output: 70.3877365207  | Program output: 71.05185      
Correct output: 89.2001357371  | Program output: 90.05185      
Correct output: 147.760546183  | Program output: 147.05185     
Correct output: -137.3875804218 | Program output: -137.05185    
Correct output: 161.1514033166 | Program output: 161.05185     
Correct output: -95.9599100442 | Program output: -95.05185     
Correct output: -120.308055299 | Program output: -120.05185    
Correct output: -72.0801834627 | Program output: -72.05185     
Correct output: -109.7122076235 | Program output: -109.05185    
Correct output: 106.3138786569 | Program output: 106.05185     
Correct output: 29.5231501286  | Program output: 30.05185      
Correct output: 85.102682212   | Program output: 85.05185      
Correct output: -100.2708478706 | Program output: -100.05185    
Correct output: -22.9175151841 | Program output: -23.05185     
Correct output: -94.4820838905 | Program output: -94.05185     
Correct output: -11.5953117725 | Program output: -12.05185     
Correct output: -13.7453326675 | Program output: -13.05185     
Correct output: -20.3203574079 | Program output: -21.05185     
Correct output: 161.8529283055 | Program output: 161.05185     
Correct output: -55.7604817115 | Program output: -55.05185     
Correct output: -28.6206702826 | Program output: -28.05185     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_tan} {:instruction integer_shove} {:instruction float_yank} {:instruction float_min} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_inc} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_tan integer_shove float_yank float_min float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup integer_mult float_mod integer_max integer_inc print_integer)
Errors: [0.0112 8 0.1834 8 0.8185 9 0.3193 9 0.6641 10 0.8517 9 0.7087 5 0.3357 8 0.0996 8 0.9081 8 0.2562 7 0.0283 7 0.6604 8 0.262 8 0.5287 9 0.0508 7 0.219 8 0.1343 8 0.4302 7 0.4565 8 0.6935 8 0.7315 9 0.8011 7 0.7086 7 0.5688 8]
Total: 209.4302
Mean: 4.188604
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1860.8415309000015
Median total errors in population: 213.4302
Error averages by case: (77.95145219999979 8.587 69.3773855000009 7.746 53.99888980000067 9.403 77.05348880000103 9.516 55.12870770000108 10.256 51.03104219999948 10.146 53.48733770000077 5.943 74.89173220000085 8.542 54.18273850000093 8.606 70.50143570000043 7.698 73.9396589000015 7.691 72.48584759999986 6.783 73.42858459999994 9.534 52.44142430000072 9.515 55.90028470000073 9.299 49.82697269999949 7.439 72.67308999999887 8.672 71.33174379999971 7.759 73.6042116000009 8.551 70.51981300000018 9.37 74.76313720000029 9.565 67.67799590000097 9.463 54.53545839999888 8.624 71.16591229999945 8.519 73.07018560000013 8.646)
Error minima by case: (0.0112 7 0.1633 7 0.1815 8 0.2991 7 0.3359 9 0.1483 8 0.2395 5 0.3156 7 0.0724 7 0.0501 6 0.2361 5 0.0082 5 0.2978 7 0.2389 6 0.4713 7 0.0307 5 0.1988 7 0.0825 6 0.4101 7 0.4047 8 0.2647 7 0.2685 8 0.1471 7 0.2495 7 0.3893 6)
Average genome size in population (length): 51.363
Average program size in population (points): 52.363
Average percent parens in population: 0.019
Minimum age in population: 55.22914183023386
Maximum age in population: 60.10762341241571
Average age in population: 58.25975589056785
Median age in population: 58.31140880531711
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 76
Genome diversity (% unique Plush genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.072
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 50070841
--- Timings ---
Current time: 1529615010691 milliseconds
Total Time:         127.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.7 seconds, 46.2%
Fitness Testing:     53.5 seconds, 42.1%
Report:              14.8 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 8697.667600000006
Test mean error for best: 4.34883
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518422  
Correct output: -63.2352586418 | Program output: -63.0518422   
Correct output: 27.2333812574  | Program output: 28.0518422    
Correct output: -136.3711223178 | Program output: -136.0518422  
Correct output: 70.3877365207  | Program output: 71.0518422    
Correct output: 89.2001357371  | Program output: 90.0518422    
Correct output: 147.760546183  | Program output: 147.0518422   
Correct output: -137.3875804218 | Program output: -137.0518422  
Correct output: 161.1514033166 | Program output: 161.0518422   
Correct output: -95.9599100442 | Program output: -95.0518422   
Correct output: -120.308055299 | Program output: -120.0518422  
Correct output: -72.0801834627 | Program output: -72.0518422   
Correct output: -109.7122076235 | Program output: -109.0518422  
Correct output: 106.3138786569 | Program output: 106.0518422   
Correct output: 29.5231501286  | Program output: 30.0518422    
Correct output: 85.102682212   | Program output: 85.0518422    
Correct output: -100.2708478706 | Program output: -100.0518422  
Correct output: -22.9175151841 | Program output: -23.0518422   
Correct output: -94.4820838905 | Program output: -94.0518422   
Correct output: -11.5953117725 | Program output: -12.0518422   
Correct output: -13.7453326675 | Program output: -13.0518422   
Correct output: -20.3203574079 | Program output: -21.0518422   
Correct output: 161.8529283055 | Program output: 161.0518422   
Correct output: -55.7604817115 | Program output: -55.0518422   
Correct output: -28.6206702826 | Program output: -28.0518422   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction float_min} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_float} {:instruction integer_mult} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 22} {:instruction float_pop} {:instruction integer_max} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_swap integer_shove float_yank float_min float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup integer_mult float_mod integer_max integer_mod print_float integer_mult print_integer print_float float_div 22 float_pop integer_max integer_mod print_integer)
Errors: [0.0112 7 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 10 0.7087 7 0.3357 7 0.0996 8 0.9081 6 0.2562 7 0.0283 5 0.6604 9 0.262 9 0.5287 10 0.0508 5 0.219 8 0.1343 8 0.4302 8 0.4565 8 0.6935 9 0.7315 9 0.8011 8 0.7086 8 0.5688 8]
Total: 209.4302
Mean: 4.188604
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 1697.5341775000015
Median total errors in population: 213.4302
Error averages by case: (66.99465790000028 8.416 58.82909110000097 7.703 54.25899620000069 9.36 66.0883339000007 9.302 55.501863700001145 10.181 52.34441289999949 10.066 55.579641300000546 6.043 64.06607480000102 8.368 55.166762800000754 8.53 60.45284200000044 7.591 63.11002630000113 7.572 59.66202519999977 6.642 62.62889970000054 9.396 54.21808960000056 9.427 56.40997200000051 9.325 50.859302599999616 7.226 61.82448959999914 8.588 61.93701269999962 7.798 62.64126630000067 8.466 61.06798660000014 9.223 64.51205790000077 9.477 57.98048260000092 9.379 55.59470979999926 8.532 59.69852329999978 8.401 62.55465670000043 8.54)
Error minima by case: (0.0035 7 0.1623 7 0.1815 8 0.287 7 0.3359 9 0.1483 8 0.2913 5 0.3146 6 0.0784 7 0.0919 6 0.2351 5 0.0072 5 0.3396 7 0.2409 6 0.4713 7 0.0297 5 0.1808 7 0.0825 6 0.4091 7 0.4047 8 0.3065 7 0.2685 8 0.1989 7 0.2914 7 0.4312 6)
Average genome size in population (length): 52.183
Average program size in population (points): 53.183
Average percent parens in population: 0.019
Minimum age in population: 57.13446274439048
Maximum age in population: 61.52996206636999
Average age in population: 59.70369651785569
Median age in population: 59.75922582852945
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.766
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.084
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 51375416
--- Timings ---
Current time: 1529615013925 milliseconds
Total Time:         130.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.1 seconds, 46.1%
Fitness Testing:     54.9 seconds, 42.2%
Report:              15.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 8601.667600000004
Test mean error for best: 4.30083
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518421  
Correct output: -63.2352586418 | Program output: -63.0518421   
Correct output: 27.2333812574  | Program output: 28.0518421    
Correct output: -136.3711223178 | Program output: -136.0518421  
Correct output: 70.3877365207  | Program output: 71.0518421    
Correct output: 89.2001357371  | Program output: 90.0518421    
Correct output: 147.760546183  | Program output: 147.0518421   
Correct output: -137.3875804218 | Program output: -137.0518421  
Correct output: 161.1514033166 | Program output: 161.0518421   
Correct output: -95.9599100442 | Program output: -95.0518421   
Correct output: -120.308055299 | Program output: -120.0518421  
Correct output: -72.0801834627 | Program output: -72.0518421   
Correct output: -109.7122076235 | Program output: -109.0518421  
Correct output: 106.3138786569 | Program output: 106.0518421   
Correct output: 29.5231501286  | Program output: 30.0518421    
Correct output: 85.102682212   | Program output: 85.0518421    
Correct output: -100.2708478706 | Program output: -100.0518421  
Correct output: -22.9175151841 | Program output: -23.0518421   
Correct output: -94.4820838905 | Program output: -94.0518421   
Correct output: -11.5953117725 | Program output: -12.0518421   
Correct output: -13.7453326675 | Program output: -13.0518421   
Correct output: -20.3203574079 | Program output: -21.0518421   
Correct output: 161.8529283055 | Program output: 161.0518421   
Correct output: -55.7604817115 | Program output: -55.0518421   
Correct output: -28.6206702826 | Program output: -28.0518421   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_float} {:instruction integer_mult} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup integer_mult float_mod integer_max integer_mod print_float integer_mult print_integer print_float float_div 21 integer_mod print_integer)
Errors: [0.0112 8 0.1834 7 0.8185 9 0.3193 7 0.6641 10 0.8517 9 0.7087 7 0.3357 6 0.0996 7 0.9081 7 0.2562 7 0.0283 5 0.6604 9 0.262 9 0.5287 10 0.0508 5 0.219 8 0.1343 7 0.4302 8 0.4565 8 0.6935 9 0.7315 9 0.8011 8 0.7086 8 0.5688 8]
Total: 206.4302
Mean: 4.128604
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 1647.8707075000013
Median total errors in population: 213.4302
Error averages by case: (62.11088970000046 8.196 54.42967730000087 7.757 54.52196970000055 9.357 61.49096480000083 9.041 55.728686200000986 10.235 52.83394819999948 9.985 56.58726950000063 6.514 58.799533300001066 8.158 57.43064250000075 8.547 56.33497160000039 7.415 57.783902800001194 7.595 57.41766419999956 6.435 57.50426600000048 9.347 56.1353045000007 9.379 56.366977400000685 9.534 52.867584199999726 6.757 56.69124209999903 8.603 60.8115161999994 8.034 57.30693610000079 8.414 60.31632020000016 8.874 63.01810730000066 9.424 56.230138200000894 9.38 57.70921709999921 8.47 55.035315999999646 8.33 60.11566240000037 8.511)
Error minima by case: (0.007 6 0.1623 7 0.1815 8 0.2981 7 0.3359 9 0.1483 7 0.2913 5 0.3146 6 0.0784 7 0.0919 6 0.2351 6 0.0072 5 0.3396 7 0.2409 6 0.4713 7 0.0297 5 0.1978 7 0.0825 6 0.4091 7 0.4047 7 0.3065 7 0.2685 8 0.1989 7 0.2914 6 0.4312 6)
Average genome size in population (length): 54.416
Average program size in population (points): 55.416
Average percent parens in population: 0.018
Minimum age in population: 58.80825371813262
Maximum age in population: 62.99849611149511
Average age in population: 61.14569896199365
Median age in population: 61.21335000947738
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.733
Total error diversity:				 0.099
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 52735816
--- Timings ---
Current time: 1529615017216 milliseconds
Total Time:         133.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.5 seconds, 46.1%
Fitness Testing:     56.4 seconds, 42.2%
Report:              15.5 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 8601.667600000004
Test mean error for best: 4.30083
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518421  
Correct output: -63.2352586418 | Program output: -63.0518421   
Correct output: 27.2333812574  | Program output: 28.0518421    
Correct output: -136.3711223178 | Program output: -136.0518421  
Correct output: 70.3877365207  | Program output: 71.0518421    
Correct output: 89.2001357371  | Program output: 90.0518421    
Correct output: 147.760546183  | Program output: 147.0518421   
Correct output: -137.3875804218 | Program output: -137.0518421  
Correct output: 161.1514033166 | Program output: 161.0518421   
Correct output: -95.9599100442 | Program output: -95.0518421   
Correct output: -120.308055299 | Program output: -120.0518421  
Correct output: -72.0801834627 | Program output: -72.0518421   
Correct output: -109.7122076235 | Program output: -109.0518421  
Correct output: 106.3138786569 | Program output: 106.0518421   
Correct output: 29.5231501286  | Program output: 30.0518421    
Correct output: 85.102682212   | Program output: 85.0518421    
Correct output: -100.2708478706 | Program output: -100.0518421  
Correct output: -22.9175151841 | Program output: -23.0518421   
Correct output: -94.4820838905 | Program output: -94.0518421   
Correct output: -11.5953117725 | Program output: -12.0518421   
Correct output: -13.7453326675 | Program output: -13.0518421   
Correct output: -20.3203574079 | Program output: -21.0518421   
Correct output: 161.8529283055 | Program output: 161.0518421   
Correct output: -55.7604817115 | Program output: -55.0518421   
Correct output: -28.6206702826 | Program output: -28.0518421   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_float} {:instruction integer_mult} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup integer_mult float_mod integer_max integer_mod print_float integer_mult print_integer print_float float_div 21 integer_mod print_integer)
Errors: [0.0112 8 0.1834 7 0.8185 9 0.3193 7 0.6641 10 0.8517 9 0.7087 7 0.3357 6 0.0996 7 0.9081 7 0.2562 7 0.0283 5 0.6604 9 0.262 9 0.5287 10 0.0508 5 0.219 8 0.1343 7 0.4302 8 0.4565 8 0.6935 9 0.7315 9 0.8011 8 0.7086 8 0.5688 8]
Total: 206.4302
Mean: 4.128604
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2053.8142001000015
Median total errors in population: 209.4302
Error averages by case: (78.3153192999988 7.909 73.02892279999992 7.835 69.50370929999973 9.314 78.49268960000128 8.743 70.28649070000014 10.192 67.04650729999949 9.871 72.13644790000114 6.894 76.10851169999978 7.874 72.73295360000084 8.482 73.88608330000042 7.237 75.40559540000157 7.518 74.95998370000113 6.27 75.32722129999868 9.107 72.17688610000101 9.215 70.78029159999998 9.761 66.95985949999904 6.192 74.67558909999877 8.536 76.71424050000104 8.396 75.34817980000102 8.248 76.45531010000016 8.491 77.84910519999899 9.212 73.5754582999998 9.369 73.01477039999875 8.241 73.76921559999936 8.213 75.72185799999883 8.423)
Error minima by case: (0.0098 6 0.1453 6 0.1815 8 0.2811 7 0.3359 8 0.1483 7 0.2546 5 0.2976 6 0.0614 7 0.0919 6 0.2181 6 0.0072 5 0.3396 7 0.2239 6 0.4713 7 0.0127 5 0.1808 6 0.0825 5 0.3921 7 0.4047 7 0.3065 7 0.2685 8 0.1623 7 0.2914 7 0.4312 6)
Average genome size in population (length): 56.864
Average program size in population (points): 57.864
Average percent parens in population: 0.017
Minimum age in population: 60.47689502652975
Maximum age in population: 64.36806124154373
Average age in population: 62.59935653223651
Median age in population: 62.62592028194763
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 79
Genome diversity (% unique Plush genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.681
Total error diversity:				 0.11
Error (vector) diversity:			 0.12
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 54157416
--- Timings ---
Current time: 1529615020718 milliseconds
Total Time:         137.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.9 seconds, 45.9%
Fitness Testing:     58.1 seconds, 42.4%
Report:              16.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 8601.667600000004
Test mean error for best: 4.30083
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518421  
Correct output: -63.2352586418 | Program output: -63.0518421   
Correct output: 27.2333812574  | Program output: 28.0518421    
Correct output: -136.3711223178 | Program output: -136.0518421  
Correct output: 70.3877365207  | Program output: 71.0518421    
Correct output: 89.2001357371  | Program output: 90.0518421    
Correct output: 147.760546183  | Program output: 147.0518421   
Correct output: -137.3875804218 | Program output: -137.0518421  
Correct output: 161.1514033166 | Program output: 161.0518421   
Correct output: -95.9599100442 | Program output: -95.0518421   
Correct output: -120.308055299 | Program output: -120.0518421  
Correct output: -72.0801834627 | Program output: -72.0518421   
Correct output: -109.7122076235 | Program output: -109.0518421  
Correct output: 106.3138786569 | Program output: 106.0518421   
Correct output: 29.5231501286  | Program output: 30.0518421    
Correct output: 85.102682212   | Program output: 85.0518421    
Correct output: -100.2708478706 | Program output: -100.0518421  
Correct output: -22.9175151841 | Program output: -23.0518421   
Correct output: -94.4820838905 | Program output: -94.0518421   
Correct output: -11.5953117725 | Program output: -12.0518421   
Correct output: -13.7453326675 | Program output: -13.0518421   
Correct output: -20.3203574079 | Program output: -21.0518421   
Correct output: 161.8529283055 | Program output: 161.0518421   
Correct output: -55.7604817115 | Program output: -55.0518421   
Correct output: -28.6206702826 | Program output: -28.0518421   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_float} {:instruction integer_mult} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction integer_mod} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_134 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup integer_mult float_mod integer_max integer_mod print_float integer_mult print_integer print_float float_div 21 integer_mod print_integer)
Errors: [0.0112 8 0.1834 7 0.8185 9 0.3193 7 0.6641 10 0.8517 9 0.7087 7 0.3357 6 0.0996 7 0.9081 7 0.2562 7 0.0283 5 0.6604 9 0.262 9 0.5287 10 0.0508 5 0.219 8 0.1343 7 0.4302 8 0.4565 8 0.6935 9 0.7315 9 0.8011 8 0.7086 8 0.5688 8]
Total: 206.4302
Mean: 4.128604
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 1865.8044998000018
Median total errors in population: 209.4302
Error averages by case: (70.80252919999992 7.988 61.68215300000107 7.838 63.03770090000072 9.334 70.36555460000113 8.648 63.48246600000114 10.228 59.374009099999505 9.798 67.47789260000113 6.905 67.60646350000087 7.814 68.38353810000085 8.39 61.765082100000384 7.311 66.6568169000014 7.546 66.04455239999966 6.245 65.78754880000024 9.083 67.38925260000099 9.232 65.24128350000102 9.81 63.33629989999904 6.211 65.05271249999899 8.559 69.92884869999996 8.414 66.58004120000086 8.245 69.59899290000011 8.456 70.24116240000012 9.228 66.12128120000084 9.387 68.57019939999876 8.262 63.856081699999535 8.202 67.84803660000006 8.44)
Error minima by case: (0.0056 6 0.1453 6 0.1815 8 0.2811 7 0.3359 8 0.1483 7 0.6705 5 0.2976 6 0.0614 7 0.0523 6 0.2181 6 0.0072 5 0.3 7 0.2239 7 0.4713 7 0.0127 5 0.1808 7 0.0825 6 0.3921 7 0.4047 8 0.2669 7 0.6796 8 0.7629 7 0.2517 7 0.3915 6)
Average genome size in population (length): 57.043
Average program size in population (points): 58.043
Average percent parens in population: 0.017
Minimum age in population: 61.47689502652975
Maximum age in population: 66.01716209379833
Average age in population: 64.03550054488797
Median age in population: 64.08135591221367
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.128
Error (vector) diversity:			 0.133
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 55583491
--- Timings ---
Current time: 1529615024141 milliseconds
Total Time:         140.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.3 seconds, 45.8%
Fitness Testing:     59.7 seconds, 42.5%
Report:              16.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 8601.667600000004
Test mean error for best: 4.30083
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518421  
Correct output: -63.2352586418 | Program output: -63.0518421   
Correct output: 27.2333812574  | Program output: 28.0518421    
Correct output: -136.3711223178 | Program output: -136.0518421  
Correct output: 70.3877365207  | Program output: 71.0518421    
Correct output: 89.2001357371  | Program output: 90.0518421    
Correct output: 147.760546183  | Program output: 147.0518421   
Correct output: -137.3875804218 | Program output: -137.0518421  
Correct output: 161.1514033166 | Program output: 161.0518421   
Correct output: -95.9599100442 | Program output: -95.0518421   
Correct output: -120.308055299 | Program output: -120.0518421  
Correct output: -72.0801834627 | Program output: -72.0518421   
Correct output: -109.7122076235 | Program output: -109.0518421  
Correct output: 106.3138786569 | Program output: 106.0518421   
Correct output: 29.5231501286  | Program output: 30.0518421    
Correct output: 85.102682212   | Program output: 85.0518421    
Correct output: -100.2708478706 | Program output: -100.0518421  
Correct output: -22.9175151841 | Program output: -23.0518421   
Correct output: -94.4820838905 | Program output: -94.0518421   
Correct output: -11.5953117725 | Program output: -12.0518421   
Correct output: -13.7453326675 | Program output: -13.0518421   
Correct output: -20.3203574079 | Program output: -21.0518421   
Correct output: 161.8529283055 | Program output: 161.0518421   
Correct output: -55.7604817115 | Program output: -55.0518421   
Correct output: -28.6206702826 | Program output: -28.0518421   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_yankdup} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_134} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction print_float} {:instruction integer_mult} {:instruction print_integer} {:instruction print_float} {:instruction tag_integer_147} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_dup} {:instruction print_integer})
Best program: (float_sub integer_yankdup float_dup integer_fromfloat print_integer float_cos float_yank float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_134 integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup integer_mult float_mod integer_max integer_mod print_float integer_mult print_integer print_float tag_integer_147 21 float_pop integer_max float_dup print_integer)
Errors: [0.0112 8 0.1834 7 0.8185 9 0.3193 7 0.6641 10 0.8517 9 0.7087 7 0.3357 6 0.0996 7 0.9081 7 0.2562 7 0.0283 5 0.6604 9 0.262 9 0.5287 10 0.0508 5 0.219 8 0.1343 7 0.4302 8 0.4565 8 0.6935 9 0.7315 9 0.8011 8 0.7086 8 0.5688 8]
Total: 206.4302
Mean: 4.128604
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 1789.5253120000013
Median total errors in population: 209.4302
Error averages by case: (67.43794410000012 8.189 60.51774540000107 7.702 60.49243430000069 9.301 67.00631630000102 8.192 61.594711300001116 10.197 58.10218379999949 9.521 63.23085290000092 6.857 65.07703170000126 7.534 63.74018280000074 8.06 60.779371000000374 7.458 64.23865490000138 7.51 61.8186188999996 6.015 64.08643180000047 8.95 62.63356480000082 9.276 60.87930930000082 9.847 60.08393309999919 6.183 63.37015339999903 8.534 67.05878059999971 8.232 63.93153410000082 8.313 66.75614170000017 8.427 66.28615650000062 9.272 63.78171320000105 9.356 64.13083869999886 8.323 60.59615679999959 8.261 63.98655060000044 8.398)
Error minima by case: (0.0098 6 0.1453 6 0.1815 8 0.2811 6 0.3359 8 0.1483 8 0.2516 4 0.2976 6 0.0614 6 0.0919 6 0.2181 6 0.008 5 0.3396 6 0.2239 6 0.4713 8 0.0127 5 0.1808 7 0.0825 6 0.3921 7 0.4047 7 0.3065 7 0.2481 8 0.1592 7 0.2914 7 0.4312 6)
Average genome size in population (length): 57.851
Average program size in population (points): 58.851
Average percent parens in population: 0.017
Minimum age in population: 62.95608277287465
Maximum age in population: 67.46264357219763
Average age in population: 65.55275579320379
Median age in population: 65.58977630623792
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.114
Error (vector) diversity:			 0.126
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 57029766
--- Timings ---
Current time: 1529615027657 milliseconds
Total Time:         144.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.8 seconds, 45.7%
Fitness Testing:     61.3 seconds, 42.5%
Report:              16.8 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 1812.014746900001
Median total errors in population: 207.4302
Error averages by case: (69.16416729999995 8.452 62.08146260000101 7.595 60.05799680000066 9.344 68.50749640000114 7.691 61.213532700001075 10.257 58.60492419999952 9.251 62.82870990000113 7.135 66.23119150000129 6.997 63.34681500000078 7.716 63.47806500000037 7.64 65.27762090000145 7.523 64.65023379999938 5.821 65.02986650000045 9.103 62.04470030000109 9.434 61.708900300001 10.046 59.34891059999905 5.943 64.26421419999888 8.566 68.16748519999955 7.876 64.91283660000101 8.451 67.75495920000016 8.476 68.74879270000014 9.439 64.466696800001 9.386 63.77201899999876 8.516 62.77431609999939 8.355 66.12783330000035 8.438)
Error minima by case: (0.0015 6 0.1453 6 0.1612 8 0.2811 6 0.3155 8 0.1279 7 0.2913 5 0.2976 6 0.0614 7 0.0919 6 0.2181 6 0.007 5 0.3396 6 0.2239 7 0.4509 8 0.0127 5 0.1808 6 0.0825 6 0.3921 7 0.4047 7 0.3065 7 0.2685 7 0.1989 7 0.2914 6 0.4312 6)
Average genome size in population (length): 58.225
Average program size in population (points): 59.225
Average percent parens in population: 0.017
Minimum age in population: 63.95608277287465
Maximum age in population: 69.1686107871509
Average age in population: 67.14459336206329
Median age in population: 67.19482049350387
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 75
Genome diversity (% unique Plush genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.118
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 58485391
--- Timings ---
Current time: 1529615031026 milliseconds
Total Time:         147.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.2 seconds, 45.6%
Fitness Testing:     62.8 seconds, 42.6%
Report:              17.2 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer integer_pop float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2197.6222650000013
Median total errors in population: 206.4302
Error averages by case: (85.48082209999927 8.509 76.76103460000019 7.547 73.85970250000008 9.33 84.90187200000118 7.656 74.70555180000049 10.244 70.97364139999947 9.198 78.02848120000114 7.454 82.38773370000014 6.681 78.93984160000079 7.676 77.81995490000041 7.608 81.50837500000154 7.552 79.44191980000059 5.749 80.9601322999992 9.428 77.74170290000102 9.467 75.53298210000034 10.056 74.95559499999895 5.623 80.24963689999882 8.577 84.79314660000057 7.553 81.38281300000105 8.482 84.4583896000002 8.462 84.21170599999957 9.461 81.62026449999975 9.408 79.10169939999871 8.554 78.56051259999927 8.398 82.0957534999994 8.476)
Error minima by case: (0.0098 6 0.1625 6 0.1815 8 0.2984 6 0.3359 9 0.1483 7 0.2913 5 0.3149 6 0.0787 6 0.0919 6 0.2353 6 0.0075 5 0.3396 7 0.2412 7 0.4713 8 0.03 5 0.1981 7 0.0825 6 0.4094 7 0.4047 7 0.3065 8 0.2685 8 0.1989 7 0.2914 6 0.4312 6)
Average genome size in population (length): 57.535
Average program size in population (points): 58.535
Average percent parens in population: 0.017
Minimum age in population: 65.38455224384234
Maximum age in population: 70.53606052899363
Average age in population: 68.70199294140897
Median age in population: 68.7398711713416
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 72
Genome diversity (% unique Plush genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.096
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 59923766
--- Timings ---
Current time: 1529615034491 milliseconds
Total Time:         150.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.7 seconds, 45.5%
Fitness Testing:     64.4 seconds, 42.7%
Report:              17.7 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer integer_pop float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2041.4307687000014
Median total errors in population: 206.4302
Error averages by case: (76.91277169999988 8.451 71.17019130000044 7.572 70.38751420000017 9.337 76.55449370000115 7.666 71.32134170000057 10.226 67.87290509999949 9.194 73.52461310000103 7.427 74.57916780000097 6.736 73.95459540000073 7.686 72.06487470000039 7.628 73.79553670000158 7.55 73.33381189999969 5.807 73.66071299999999 9.379 72.95249520000104 9.441 71.76791230000055 10.023 69.77050809999912 5.657 72.97501209999876 8.554 76.50720819999958 7.577 73.55819850000121 8.498 76.25371080000019 8.424 77.05703770000002 9.439 73.43652890000044 9.38 74.35404999999876 8.548 71.85526389999919 8.368 74.79231270000001 8.45)
Error minima by case: (0.0033 6 0.1453 6 0.1815 8 0.2811 6 0.3359 8 0.1483 7 0.2913 5 0.2976 6 0.0614 6 0.0581 6 0.2181 6 0.0065 5 0.3058 7 0.2239 8 0.4713 7 0.0127 5 0.1808 7 0.0825 6 0.3921 7 0.4047 7 0.2727 7 0.2685 8 0.1989 7 0.2575 7 0.3973 6)
Average genome size in population (length): 57.594
Average program size in population (points): 58.594
Average percent parens in population: 0.017
Minimum age in population: 66.78821565278781
Maximum age in population: 72.31269187248387
Average age in population: 70.19304836344278
Median age in population: 70.26394327955471
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.096
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 61363616
--- Timings ---
Current time: 1529615038330 milliseconds
Total Time:         154.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.4 seconds, 45.5%
Fitness Testing:     66.0 seconds, 42.7%
Report:              18.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction integer_flush} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 22} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer integer_flush float_yank float_yank float_mult integer_yankdup float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer print_float float_div 22 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2034.9722785000015
Median total errors in population: 206.4302
Error averages by case: (76.41970229999954 8.283 69.54992320000036 7.523 70.34205439999995 9.327 75.96647010000089 7.76 71.39910850000035 10.221 68.64992999999947 9.227 73.51235560000092 7.439 73.9182700000003 6.874 74.14868320000079 7.773 70.4637769000004 7.508 73.10724180000138 7.638 72.57880980000056 5.743 72.6132044999996 9.304 73.0994059000008 9.431 72.13047430000007 10.041 70.4071271999991 5.735 71.89785529999901 8.444 76.37344250000055 7.623 72.84384610000086 8.457 76.06197850000025 8.343 78.55122089999966 9.35 72.87350960000013 9.289 74.43534719999893 8.533 70.85667259999958 8.361 76.10386809999949 8.441)
Error minima by case: (0.0033 6 0.1453 7 0.1815 8 0.2811 6 0.3359 9 0.1483 7 0.2913 5 0.2976 6 0.0614 7 0.0919 6 0.2181 6 0.0075 5 0.3396 6 0.2239 6 0.4713 7 0.0127 5 0.1808 7 0.0825 6 0.3921 7 0.4047 7 0.3065 8 0.2481 8 0.1989 7 0.2914 6 0.4312 6)
Average genome size in population (length): 57.415
Average program size in population (points): 58.415
Average percent parens in population: 0.017
Minimum age in population: 67.78821565278781
Maximum age in population: 73.64565772702561
Average age in population: 71.6413499051333
Median age in population: 71.67636364527274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.798
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.098
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 62798991
--- Timings ---
Current time: 1529615041700 milliseconds
Total Time:         158.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.7 seconds, 45.4%
Fitness Testing:     67.6 seconds, 42.8%
Report:              18.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_sin} {:instruction integer_flush} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_sin integer_flush float_yank float_yank float_mult in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2487.867422600001
Median total errors in population: 206.4302
Error averages by case: (97.70293909999893 7.745 90.05164819999983 7.634 84.7651105999996 9.381 96.66010770000126 8.143 85.6284283 10.244 82.65952139999942 9.296 89.72102370000113 7.557 94.22031989999995 7.633 90.75539900000088 8.182 91.11344680000042 7.256 93.27018840000169 8.036 91.27911170000087 5.865 92.98342869999888 9.1 89.00062000000088 9.533 86.25995069999965 10.087 85.63607369999899 6.149 92.30901609999897 8.233 97.14893310000099 8.02 93.39302280000109 8.561 95.92897360000022 8.107 93.87403719999935 9.104 92.71713299999946 9.043 90.86598269999855 8.617 89.96201669999945 8.468 91.42198949999923 8.545)
Error minima by case: (0.0112 6 0.1453 6 0.1815 7 0.2811 6 0.3359 9 0.1483 7 0.2913 5 0.2976 6 0.0614 6 0.0919 6 0.2181 6 0.0073 4 0.3396 6 0.2239 7 0.4713 8 0.0127 5 0.1808 6 0.0825 6 0.3921 7 0.4047 6 0.3065 7 0.2685 7 0.1989 7 0.2914 7 0.4312 6)
Average genome size in population (length): 58.017
Average program size in population (points): 59.017
Average percent parens in population: 0.017
Minimum age in population: 69.7178414633807
Maximum age in population: 75.54218124575208
Average age in population: 73.18806238369083
Median age in population: 73.18813664629535
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.11
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 64249441
--- Timings ---
Current time: 1529615045274 milliseconds
Total Time:         161.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.3 seconds, 45.4%
Fitness Testing:     69.1 seconds, 42.8%
Report:              19.1 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat integer_yank integer_swap integer_sub float_dup integer_mod float_flush float_yank integer_mult float_dup_times integer_shove float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 1936.5851761000013
Median total errors in population: 205.4302
Error averages by case: (73.67997959999995 6.9 65.38251430000112 7.55 65.32915770000076 9.299 73.09075900000114 8.434 66.49351510000115 10.223 63.393018399999434 9.203 70.44691920000103 7.548 69.98668240000082 8.312 71.52010100000093 8.492 66.72419030000044 6.773 68.96897250000151 8.367 68.37251499999981 5.703 68.66355750000024 8.688 70.23699930000092 9.513 67.19812800000062 10.094 65.9816729999991 6.44 67.92041539999889 7.765 73.97565219999994 8.277 69.05068790000092 8.489 73.58179930000018 7.586 72.6427154000002 8.674 69.65317100000082 8.558 71.64806369999873 8.568 66.50044049999957 8.442 69.73854840000025 8.507)
Error minima by case: (0.0112 5 0.1625 5 0.1815 8 0.2984 6 0.3359 7 0.1483 7 0.2913 5 0.3149 6 0.0787 7 0.0919 6 0.2353 6 0.0075 5 0.3396 7 0.2412 7 0.4713 7 0.03 5 0.1981 6 0.0825 6 0.4094 7 0.4047 7 0.3065 7 0.2685 7 0.1989 7 0.2914 7 0.4312 6)
Average genome size in population (length): 58.691
Average program size in population (points): 59.691
Average percent parens in population: 0.017
Minimum age in population: 72.25424682096948
Maximum age in population: 77.12102626022849
Average age in population: 74.59477699196125
Median age in population: 74.61746810061985
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.091
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 65716716
--- Timings ---
Current time: 1529615048815 milliseconds
Total Time:         165.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.8 seconds, 45.3%
Fitness Testing:     70.8 seconds, 42.9%
Report:              19.5 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_cos} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_cos float_mult float_dup integer_fromfloat print_integer integer_pop float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2181.784524600001
Median total errors in population: 205.4302
Error averages by case: (85.0026054999996 6.906 76.30776370000035 7.606 72.3062807000003 9.341 84.15744280000101 8.513 73.62512730000067 10.239 69.51482559999943 9.248 78.466780000001 7.605 81.45918260000032 8.421 79.46875280000089 8.591 75.75250850000043 6.802 80.40365010000146 8.429 78.58696400000059 5.797 80.06169139999955 8.7 77.9059023000008 9.568 74.06325380000013 10.107 73.03944039999922 6.531 79.29835729999898 7.793 84.69939320000053 8.384 80.3302743000009 8.575 84.24882730000017 7.632 85.26973799999976 8.69 80.6017850000001 8.582 79.64929889999885 8.633 77.47847589999962 8.476 82.3682031999996 8.549)
Error minima by case: (0.0033 5 0.1615 6 0.1815 8 0.2974 6 0.3359 8 0.1483 7 0.2913 5 0.3139 6 0.0694 7 0.0919 6 0.2343 6 0.0065 5 0.3396 7 0.2402 8 0.4713 8 0.029 5 0.1971 6 0.0825 6 0.4084 7 0.4047 6 0.3065 7 0.2685 7 0.1989 7 0.2914 6 0.4312 6)
Average genome size in population (length): 58.61
Average program size in population (points): 59.61
Average percent parens in population: 0.017
Minimum age in population: 73.50739882645108
Maximum age in population: 78.41218395610385
Average age in population: 76.05054763025286
Median age in population: 76.10662555315552
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.092
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 67181966
--- Timings ---
Current time: 1529615052213 milliseconds
Total Time:         168.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.2 seconds, 45.2%
Fitness Testing:     72.4 seconds, 42.9%
Report:              19.9 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction tag_float_458} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction float_swap} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 22} {:instruction float_yank} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer tag_float_458 float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_pop float_swap float_dup_times float_add float_shove float_swap float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer print_float float_div 22 float_yank integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2434.2949660000013
Median total errors in population: 205.4302
Error averages by case: (93.33143839999885 6.846 85.74715029999969 7.631 85.22494589999926 9.353 92.77168190000154 8.546 85.86110549999967 10.232 82.94593809999935 9.277 90.76927600000147 7.592 89.71611420000019 8.46 91.98884110000098 8.565 86.11603890000045 6.744 88.80982470000188 8.462 88.44645100000083 5.756 88.53668959999891 8.691 90.84873810000124 9.546 86.59837289999973 10.12 86.3504141999987 6.519 87.92701569999859 7.743 92.52284900000076 8.379 89.30637250000126 8.571 92.34128680000023 7.568 92.20582329999912 8.647 89.35290179999961 8.567 91.95085159999834 8.597 87.11781679999923 8.49 90.04402769999912 8.561)
Error minima by case: (0.0098 5 0.1625 6 0.1815 8 0.2984 6 0.3359 9 0.1483 7 0.2913 5 0.3149 6 0.0687 7 0.0919 6 0.2353 6 0.0075 5 0.3396 6 0.2412 8 0.4713 8 0.03 5 0.1981 6 0.0825 6 0.4094 7 0.4047 6 0.3065 6 0.2685 7 0.1989 7 0.2914 6 0.4312 6)
Average genome size in population (length): 58.98
Average program size in population (points): 59.98
Average percent parens in population: 0.017
Minimum age in population: 74.50739882645108
Maximum age in population: 79.5901237814814
Average age in population: 77.4832223111714
Median age in population: 77.48315327241328
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.095
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 68656466
--- Timings ---
Current time: 1529615055959 milliseconds
Total Time:         172.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.8 seconds, 45.2%
Fitness Testing:     74.0 seconds, 43.0%
Report:              20.3 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_dup integer_fromfloat print_integer float_yank integer_fromfloat print_integer integer_pop float_yank float_cos float_sin in1 in1 integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup 72 integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2119.444122100001
Median total errors in population: 205.4302
Error averages by case: (80.87924569999974 6.823 73.56033510000046 7.582 74.13641280000019 9.316 80.26232160000089 8.484 74.89475570000049 10.194 71.86892769999947 9.246 76.04552370000083 7.53 77.92061250000059 8.418 76.86386340000075 8.553 74.6018624000004 6.748 77.0486999000012 8.393 75.43467780000007 5.755 76.83346559999993 8.638 75.6209657000008 9.504 75.52843010000034 10.083 73.00115849999926 6.5 76.15820279999903 7.723 78.94416720000015 8.36 77.0648389000008 8.513 78.68487050000014 7.591 81.19780899999982 8.622 75.60062700000046 8.518 77.073930099999 8.569 74.70031339999957 8.444 78.91210499999981 8.499)
Error minima by case: (0.0112 6 0.1625 6 0.1614 8 0.2984 6 0.3157 8 0.1281 7 0.2913 4 0.3149 6 0.0787 7 0.0919 6 0.2353 6 0.0075 4 0.3396 7 0.2412 7 0.4512 8 0.03 5 0.1981 6 0.0825 6 0.4094 7 0.4047 6 0.3065 6 0.2685 7 0.1989 7 0.2914 7 0.4312 6)
Average genome size in population (length): 58.91
Average program size in population (points): 59.91
Average percent parens in population: 0.017
Minimum age in population: 76.27428393007501
Maximum age in population: 80.80532401555527
Average age in population: 78.92616996690509
Median age in population: 78.9785145143936
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.085
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 70129216
--- Timings ---
Current time: 1529615059419 milliseconds
Total Time:         175.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.2 seconds, 45.1%
Fitness Testing:     75.6 seconds, 43.0%
Report:              20.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_dup} {:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_dup float_sub print_integer float_inc float_yank float_yank float_mult integer_min integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2253.937064000001
Median total errors in population: 205.4302
Error averages by case: (85.91440219999942 6.842 79.28064090000008 7.579 78.87346499999971 9.335 84.99340730000128 8.52 79.76889760000016 10.249 76.93238119999936 9.275 81.99823450000122 7.561 83.33222750000039 8.445 82.57299460000095 8.549 80.78103130000048 6.744 82.36732150000172 8.426 81.4072380000006 5.745 81.98808909999934 8.669 81.16309930000095 9.522 80.42100269999985 10.124 78.91271959999894 6.521 81.2577985999988 7.737 84.58405310000052 8.355 82.09740770000113 8.543 84.2847821000002 7.576 85.69367279999963 8.649 81.45951450000005 8.572 82.94572719999863 8.578 80.22321039999937 8.472 83.5537452999995 8.542)
Error minima by case: (0.0033 5 0.1381 6 0.1815 8 0.2739 6 0.3359 9 0.1483 7 0.2913 5 0.2904 6 0.0542 7 0.0919 6 0.2109 6 0.0075 5 0.3396 7 0.2167 8 0.4713 8 0.0055 5 0.1736 6 0.0825 6 0.3849 8 0.4047 6 0.3065 7 0.2685 7 0.1989 7 0.2914 6 0.4312 6)
Average genome size in population (length): 58.864
Average program size in population (points): 59.864
Average percent parens in population: 0.017
Minimum age in population: 77.70063216188282
Maximum age in population: 82.1538859878061
Average age in population: 80.39877981849732
Median age in population: 80.45045725374095
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.098
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 71600816
--- Timings ---
Current time: 1529615062951 milliseconds
Total Time:         179.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.6 seconds, 45.0%
Fitness Testing:     77.2 seconds, 43.1%
Report:              21.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer integer_pop float_yank float_cos float_sin in1 integer_max integer_fromfloat float_cos integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times integer_sub float_shove float_swap integer_shove float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_frominteger float_shove float_div print_float 72 float_mod integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2029.1054314000014
Median total errors in population: 205.4302
Error averages by case: (78.30887829999982 6.839 70.90511370000056 7.608 68.29472030000056 9.329 77.51369930000082 8.537 68.95846100000087 10.192 66.72213549999945 9.262 72.3780401000007 7.565 74.57050210000038 8.447 73.66874760000083 8.574 72.15098490000045 6.738 73.59079270000124 8.421 74.09962790000023 5.792 73.28934599999992 8.649 72.2582256000006 9.516 69.66781450000033 10.093 68.37823109999971 6.507 72.62332259999914 7.736 75.91709930000027 8.38 73.92840940000077 8.548 75.67405530000018 7.572 76.49328170000005 8.64 72.65755760000054 8.535 73.64549489999911 8.58 71.99882469999969 8.46 74.37106529999994 8.521)
Error minima by case: (0.0033 4 0.1625 6 0.7666 8 0.2984 6 0.6123 8 0.7999 8 0.2913 5 0.3149 6 0.0787 7 0.8872 6 0.2353 7 0.0075 5 0.6395 7 0.2412 8 0.4768 9 0.03 5 0.1981 6 0.0825 6 0.4094 8 0.4047 6 0.6726 7 0.2476 7 0.1989 7 0.6878 7 0.548 6)
Average genome size in population (length): 58.792
Average program size in population (points): 59.792
Average percent parens in population: 0.017
Minimum age in population: 78.78204323987771
Maximum age in population: 83.66711693668572
Average age in population: 81.83992402454533
Median age in population: 81.8932725392143
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.082
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 73070616
--- Timings ---
Current time: 1529615066786 milliseconds
Total Time:         183.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.2 seconds, 44.9%
Fitness Testing:     79.0 seconds, 43.2%
Report:              21.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_add} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_dup integer_fromfloat print_integer float_cos float_add float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2525.6102680000013
Median total errors in population: 205.4302
Error averages by case: (97.93485589999882 6.873 88.95982149999989 7.627 88.32573399999953 9.327 96.74468570000147 8.55 89.00592679999993 10.224 84.64630349999936 9.291 93.80398980000149 7.613 93.99131550000013 8.489 95.09007850000098 8.627 90.09687280000045 6.803 92.957693000002 8.451 92.49947240000066 5.831 92.26103229999892 8.685 93.43447230000132 9.558 90.13863669999984 10.117 89.7109920999986 6.593 91.58005779999846 7.783 96.53893280000088 8.436 93.16931180000141 8.561 96.23349730000025 7.661 96.9865012999992 8.652 93.01160649999944 8.594 95.08257559999825 8.628 90.71748849999906 8.497 94.65541359999908 8.562)
Error minima by case: (0.0027 6 0.1625 5 0.1815 8 0.2984 6 0.3359 8 0.1483 7 0.2913 5 0.3149 6 0.0694 7 0.0919 6 0.2353 6 0.0075 5 0.3396 7 0.2412 7 0.4713 8 0.03 4 0.1981 6 0.0825 6 0.4094 6 0.4047 6 0.3065 6 0.2685 7 0.1989 6 0.2914 6 0.4312 6)
Average genome size in population (length): 58.816
Average program size in population (points): 59.816
Average percent parens in population: 0.017
Minimum age in population: 81.03476833249103
Maximum age in population: 85.11682413478032
Average age in population: 83.32774078358088
Median age in population: 83.36536461950654
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.097
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 74541016
--- Timings ---
Current time: 1529615070130 milliseconds
Total Time:         186.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.5 seconds, 44.8%
Fitness Testing:     80.6 seconds, 43.2%
Report:              22.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_div} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_inc} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer integer_pop float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_div integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_frominteger float_shove float_div print_float 72 float_inc integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2480.3765880000014
Median total errors in population: 205.4302
Error averages by case: (95.13311459999886 6.857 86.08722289999956 7.625 86.90323749999922 9.318 94.40324200000134 8.529 87.28226149999959 10.191 83.1469864999994 9.257 93.4373682000013 7.603 91.27822119999979 8.44 94.73738480000091 8.579 86.4578200000004 6.767 90.29674930000174 8.432 89.84457280000115 5.783 89.62707469999869 8.678 93.39750800000111 9.539 88.6338556999994 10.087 90.38087029999878 6.549 88.97648979999869 7.763 96.00635440000111 8.384 90.67362760000118 8.544 95.79778120000023 7.61 93.59827329999905 8.661 92.66745479999923 8.568 94.69412859999848 8.623 88.11602419999926 8.466 91.41296409999889 8.533)
Error minima by case: (0.0033 4 0.1625 6 0.1815 8 0.2984 6 0.3359 8 0.1483 7 0.2913 5 0.3149 6 0.0787 7 0.0919 6 0.2353 6 0.0075 5 0.3396 6 0.2412 8 0.4713 8 0.03 5 0.1981 6 0.0825 6 0.4094 7 0.4047 6 0.3065 6 0.2685 7 0.1989 7 0.2914 7 0.4312 6)
Average genome size in population (length): 59.702
Average program size in population (points): 60.702
Average percent parens in population: 0.017
Minimum age in population: 82.59064932757933
Maximum age in population: 86.73092069627646
Average age in population: 84.7876201208812
Median age in population: 84.79908716371003
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.099
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 76033566
--- Timings ---
Current time: 1529615073692 milliseconds
Total Time:         190.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.1 seconds, 44.8%
Fitness Testing:     82.2 seconds, 43.2%
Report:              22.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2602.029249100001
Median total errors in population: 205.4302
Error averages by case: (99.82547829999876 6.966 92.77911929999941 7.741 92.84094229999904 9.44 98.65347180000143 8.623 94.12981609999932 10.267 90.15199289999936 9.36 96.9054074000014 7.686 96.95259439999981 8.566 97.57840350000083 8.664 94.48255550000043 6.886 95.9912848000018 8.488 94.646359000001 5.956 95.72993819999864 8.75 95.82518180000123 9.594 94.39333459999965 10.201 92.51931079999872 6.629 94.96572759999847 7.853 98.65862440000089 8.559 95.51741120000128 8.648 98.26078620000024 7.769 98.80721199999904 8.714 95.01010919999935 8.684 97.90547889999841 8.672 93.40224849999915 8.554 96.23346039999882 8.593)
Error minima by case: (0.0098 5 0.1625 6 0.1815 8 0.2984 6 0.3359 8 0.1483 7 0.2605 5 0.2935 6 0.0689 7 0.0919 6 0.2306 5 0.0075 5 0.3396 7 0.2177 7 0.4713 8 0.03 5 0.1981 6 0.0825 6 0.4094 7 0.4047 6 0.3065 6 0.2685 7 0.1681 7 0.2914 6 0.4312 6)
Average genome size in population (length): 59.763
Average program size in population (points): 60.763
Average percent parens in population: 0.017
Minimum age in population: 83.92473297692788
Maximum age in population: 88.67632866250808
Average age in population: 86.25518581268283
Median age in population: 86.29659434082664
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.11
Error (vector) diversity:			 0.116
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 77527641
--- Timings ---
Current time: 1529615077398 milliseconds
Total Time:         193.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.7 seconds, 44.7%
Fitness Testing:     83.9 seconds, 43.3%
Report:              23.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction integer_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_dec} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_sub print_integer float_inc float_yank float_yank float_yank float_mult integer_min integer_fromfloat float_cos float_sin in1 float_mult integer_fromfloat float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div integer_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer print_float float_dec 21 float_pop integer_max float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2193.4890290000017
Median total errors in population: 205.4302
Error averages by case: (85.68754779999966 6.866 78.82636230000028 7.585 74.65809230000022 9.338 84.99274430000119 8.534 75.59630470000046 10.26 71.9664963999995 9.253 76.22602530000101 7.522 82.67306690000052 8.467 76.96668280000075 8.546 79.52141230000036 6.746 81.76411860000151 8.428 80.68789300000023 5.762 81.54091619999961 8.682 75.85819470000094 9.526 76.20309770000034 10.125 73.08207579999912 6.531 80.80844919999876 7.767 83.56545800000015 8.388 81.57168000000108 8.527 83.22555000000023 7.613 83.1767281999999 8.657 80.07379200000022 8.559 77.21244559999884 8.572 79.56089869999936 8.476 80.76299619999969 8.55)
Error minima by case: (0.0112 6 0.1625 6 0.1815 8 0.2984 6 0.3359 9 0.1483 7 0.2913 5 0.3149 6 0.0787 7 0.0919 6 0.2353 6 0.0075 5 0.3396 7 0.2412 8 0.4713 8 0.03 5 0.1981 6 0.0825 6 0.4094 8 0.4047 6 0.3065 8 0.2685 7 0.1989 7 0.2914 7 0.4312 6)
Average genome size in population (length): 59.325
Average program size in population (points): 60.325
Average percent parens in population: 0.017
Minimum age in population: 85.10996739529487
Maximum age in population: 89.71867564462305
Average age in population: 87.67590040995708
Median age in population: 87.7193312287725
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.834
Total error diversity:				 0.102
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 79010766
--- Timings ---
Current time: 1529615080895 milliseconds
Total Time:         197.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.1 seconds, 44.7%
Fitness Testing:     85.5 seconds, 43.4%
Report:              23.5 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_mod} {:instruction print_integer} {:instruction integer_pop} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction float_mult} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_mod print_integer integer_pop float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap float_mult float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float 72 float_mod integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2271.2773523000014
Median total errors in population: 205.4302
Error averages by case: (87.85761149999924 6.863 78.38375609999996 7.603 79.05410589999966 9.32 87.16836740000134 8.559 78.71583329999994 10.223 74.54781959999947 9.252 83.2539007000013 7.58 84.3693390000003 8.488 84.1485089000009 8.59 77.9395972000004 6.748 82.60580050000179 8.456 83.00978780000055 5.786 82.74706699999916 8.713 82.80044430000099 9.539 80.81533509999991 10.099 79.32233169999887 6.556 81.24857339999875 7.764 85.98302320000049 8.366 83.13528840000119 8.544 85.71648770000021 7.583 87.63614199999944 8.67 82.75060809999977 8.537 83.99405749999855 8.616 81.39117309999932 8.49 85.15739289999931 8.58)
Error minima by case: (0.0033 6 0.1363 6 0.1808 8 0.2721 6 0.3352 8 0.1476 7 0.2913 5 0.2886 6 0.0524 6 0.0919 6 0.2091 6 0.0075 5 0.3396 7 0.2149 8 0.4706 7 0.0037 5 0.1718 7 0.0825 6 0.3831 7 0.4047 6 0.3065 6 0.2685 7 0.1989 7 0.2914 7 0.4312 6)
Average genome size in population (length): 59.635
Average program size in population (points): 60.635
Average percent parens in population: 0.017
Minimum age in population: 86.10996739529487
Maximum age in population: 91.22665133890656
Average age in population: 89.14970990850547
Median age in population: 89.21728051274923
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.095
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 80501666
--- Timings ---
Current time: 1529615084469 milliseconds
Total Time:         200.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.7 seconds, 44.7%
Fitness Testing:     87.1 seconds, 43.4%
Report:              23.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_inc} {:instruction print_integer} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction float_mult} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_max} {:instruction print_integer})
Best program: (float_sub float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_inc print_integer in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div float_mult 72 float_mod integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_max print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2474.7141844000016
Median total errors in population: 205.4302
Error averages by case: (93.95926719999893 6.911 86.10814039999957 7.684 86.37924109999923 9.358 92.9727207000015 8.579 87.40408819999958 10.204 85.22423129999939 9.261 94.17987560000157 7.686 90.0505503 8.514 95.48978930000092 8.652 87.56870560000043 6.813 89.02278740000166 8.491 89.35750230000097 5.858 88.68499129999879 8.72 93.88598840000138 9.59 87.95630469999948 10.112 90.7103296999986 6.594 87.97571249999872 7.807 95.77163870000088 8.463 89.16673160000114 8.605 95.44879530000023 7.642 93.2196220999992 8.699 92.11075209999933 8.615 95.47255489999814 8.674 87.08512579999937 8.529 90.86473789999897 8.583)
Error minima by case: (0.0033 6 0.1615 6 0.1815 8 0.2974 6 0.3359 9 0.1483 7 0.6868 5 0.3139 6 0.0777 7 0.0919 6 0.2343 6 0.0065 5 0.3396 7 0.2401 7 0.4713 8 0.029 5 0.1971 7 0.0825 6 0.4084 7 0.4047 7 0.3065 6 0.6796 8 0.7792 8 0.2914 7 0.4312 6)
Average genome size in population (length): 59.647
Average program size in population (points): 60.647
Average percent parens in population: 0.017
Minimum age in population: 87.10996739529487
Maximum age in population: 92.81744135434153
Average age in population: 90.59248930642492
Median age in population: 90.63436732182544
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.096
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 81992866
--- Timings ---
Current time: 1529615088230 milliseconds
Total Time:         204.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.1 seconds, 44.6%
Fitness Testing:     89.0 seconds, 43.5%
Report:              24.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 8567.6652
Test mean error for best: 4.28383
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518472  
Correct output: -63.2352586418 | Program output: -63.0518472   
Correct output: 27.2333812574  | Program output: 28.0518472    
Correct output: -136.3711223178 | Program output: -136.0518472  
Correct output: 70.3877365207  | Program output: 71.0518472    
Correct output: 89.2001357371  | Program output: 90.0518472    
Correct output: 147.760546183  | Program output: 147.0518472   
Correct output: -137.3875804218 | Program output: -137.0518472  
Correct output: 161.1514033166 | Program output: 161.0518472   
Correct output: -95.9599100442 | Program output: -95.0518472   
Correct output: -120.308055299 | Program output: -120.0518472  
Correct output: -72.0801834627 | Program output: -72.0518472   
Correct output: -109.7122076235 | Program output: -109.0518472  
Correct output: 106.3138786569 | Program output: 106.0518472   
Correct output: 29.5231501286  | Program output: 30.0518472    
Correct output: 85.102682212   | Program output: 85.0518472    
Correct output: -100.2708478706 | Program output: -100.0518472  
Correct output: -22.9175151841 | Program output: -23.0518472   
Correct output: -94.4820838905 | Program output: -94.0518472   
Correct output: -11.5953117725 | Program output: -12.0518472   
Correct output: -13.7453326675 | Program output: -13.0518472   
Correct output: -20.3203574079 | Program output: -21.0518472   
Correct output: 161.8529283055 | Program output: 161.0518472   
Correct output: -55.7604817115 | Program output: -55.0518472   
Correct output: -28.6206702826 | Program output: -28.0518472   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_rot} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_div} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction integer_yank} {:instruction float_shove} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_rot float_yank float_yank float_mult integer_min integer_fromfloat print_integer float_cos float_yank float_div float_sin in1 integer_max integer_fromfloat integer_sub float_add integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth integer_yank float_shove integer_shove print_float 72 float_mod integer_dup 72 float_mod integer_dup integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 7 0.8185 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3357 8 0.0996 8 0.9081 6 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 7 0.1343 8 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 8 0.7086 8 0.5688 8]
Total: 205.4302
Mean: 4.108604
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2635.1642567000013
Median total errors in population: 205.4302
Error averages by case: (102.40766409999861 6.946 94.01632939999921 7.739 93.66922039999878 9.407 101.67317950000154 8.64 94.55075079999918 10.276 89.86514449999943 9.351 96.4977393000015 7.663 99.37118849999973 8.562 98.02807800000082 8.655 95.03956650000039 6.869 97.6793011000019 8.524 97.0479225000011 5.937 97.39670179999844 8.767 96.48117830000129 9.6 93.60468529999936 10.161 92.65687099999856 6.643 96.74321929999854 7.854 100.93820510000114 8.469 97.8960456000013 8.654 100.36142190000024 7.713 99.94869459999884 8.762 97.73561179999894 8.644 98.17408929999836 8.684 96.08386269999906 8.564 97.56058539999874 8.653)
Error minima by case: (0.0033 5 0.1443 7 0.0 6 0.2801 6 0.0 6 0.0 6 0.2495 5 0.2966 6 0.0604 7 0.0919 6 0.2171 6 0.0075 5 0.3396 6 0.2229 8 0.0 6 0.0117 5 0.1798 7 0.0 6 0.3911 7 0.0 6 0.3065 6 0.0 6 0.1571 8 0.2914 6 0.4312 6)
Average genome size in population (length): 60.193
Average program size in population (points): 61.193
Average percent parens in population: 0.017
Minimum age in population: 89.41500281636496
Maximum age in population: 93.95642211423528
Average age in population: 92.00495901634748
Median age in population: 92.05227668942173
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.117
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 83497716
--- Timings ---
Current time: 1529615091907 milliseconds
Total Time:         208.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.5 seconds, 44.4%
Fitness Testing:     90.8 seconds, 43.6%
Report:              24.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 8777.972499999989
Test mean error for best: 4.38899
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0511272  
Correct output: -63.2352586418 | Program output: -63.0511272   
Correct output: 27.2333812574  | Program output: 28.0511272    
Correct output: -136.3711223178 | Program output: -136.0511272  
Correct output: 70.3877365207  | Program output: 71.0511272    
Correct output: 89.2001357371  | Program output: 90.0511272    
Correct output: 147.760546183  | Program output: 147.0511272   
Correct output: -137.3875804218 | Program output: -137.0511272  
Correct output: 161.1514033166 | Program output: 161.0511272   
Correct output: -95.9599100442 | Program output: -95.0511272   
Correct output: -120.308055299 | Program output: -120.0511272  
Correct output: -72.0801834627 | Program output: -72.0511272   
Correct output: -109.7122076235 | Program output: -109.0511272  
Correct output: 106.3138786569 | Program output: 106.0511272   
Correct output: 29.5231501286  | Program output: 30.0511272    
Correct output: 85.102682212   | Program output: 85.0511272    
Correct output: -100.2708478706 | Program output: -100.0511272  
Correct output: -22.9175151841 | Program output: -23.0511272   
Correct output: -94.4820838905 | Program output: -94.0511272   
Correct output: -11.5953117725 | Program output: -12.0511272   
Correct output: -13.7453326675 | Program output: -13.0511272   
Correct output: -20.3203574079 | Program output: -21.0511272   
Correct output: 161.8529283055 | Program output: 161.0511272   
Correct output: -55.7604817115 | Program output: -55.0511272   
Correct output: -28.6206702826 | Program output: -28.0511272   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_min} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_dup integer_fromfloat print_integer integer_pop float_yank float_cos float_sin in1 integer_max integer_fromfloat float_inc integer_fromfloat integer_add integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float integer_min integer_shove print_float 72 float_mod integer_dup 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0105 6 0.1841 9 0.8177 8 0.32 6 0.6634 10 0.851 9 0.7094 7 0.3365 8 0.1003 8 0.9088 7 0.2569 7 0.0291 7 0.6611 7 0.2628 9 0.528 9 0.0516 6 0.2197 8 0.1336 8 0.431 9 0.4558 6 0.6942 7 0.7308 8 0.8018 8 0.7094 8 0.5695 7]
Total: 203.43699999999998
Mean: 4.06874
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2368.9553221000015
Median total errors in population: 205.4302
Error averages by case: (91.56964649999924 6.909 82.18231070000017 7.65 83.35077989999967 9.379 90.85450770000135 8.58 83.72201710000002 10.258 80.46375969999943 9.295 87.73829650000137 7.65 86.98132360000034 8.498 89.34345130000086 8.643 82.6459128000004 6.798 85.77263610000182 8.5 86.63000280000048 5.839 85.26352059999941 8.729 88.05087230000127 9.594 85.26246050000013 10.129 83.48493729999876 6.561 84.5976395999986 7.823 89.28974260000045 8.421 86.52087890000136 8.596 89.02085820000022 7.623 91.0537069999993 8.707 85.0395693999999 8.61 89.20950289999848 8.668 83.76712019999921 8.511 88.58486789999924 8.584)
Error minima by case: (0.0084 6 0.1625 7 0.1614 8 0.2984 6 0.3157 7 0.1281 7 0.6878 5 0.3149 6 0.0787 7 0.0919 5 0.2353 6 0.0075 5 0.3396 6 0.2412 8 0.4512 8 0.03 5 0.1981 6 0.0825 6 0.4094 7 0.4047 6 0.3065 7 0.6796 8 0.7802 7 0.2914 7 0.4312 6)
Average genome size in population (length): 60.147
Average program size in population (points): 61.147
Average percent parens in population: 0.017
Minimum age in population: 90.78484539537887
Maximum age in population: 95.23363655408048
Average age in population: 93.42774761464344
Median age in population: 93.43596110883105
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.102
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 85001391
--- Timings ---
Current time: 1529615095293 milliseconds
Total Time:         211.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.9 seconds, 44.4%
Fitness Testing:     92.4 seconds, 43.7%
Report:              25.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 8777.972499999989
Test mean error for best: 4.38899
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0511272  
Correct output: -63.2352586418 | Program output: -63.0511272   
Correct output: 27.2333812574  | Program output: 28.0511272    
Correct output: -136.3711223178 | Program output: -136.0511272  
Correct output: 70.3877365207  | Program output: 71.0511272    
Correct output: 89.2001357371  | Program output: 90.0511272    
Correct output: 147.760546183  | Program output: 147.0511272   
Correct output: -137.3875804218 | Program output: -137.0511272  
Correct output: 161.1514033166 | Program output: 161.0511272   
Correct output: -95.9599100442 | Program output: -95.0511272   
Correct output: -120.308055299 | Program output: -120.0511272  
Correct output: -72.0801834627 | Program output: -72.0511272   
Correct output: -109.7122076235 | Program output: -109.0511272  
Correct output: 106.3138786569 | Program output: 106.0511272   
Correct output: 29.5231501286  | Program output: 30.0511272    
Correct output: 85.102682212   | Program output: 85.0511272    
Correct output: -100.2708478706 | Program output: -100.0511272  
Correct output: -22.9175151841 | Program output: -23.0511272   
Correct output: -94.4820838905 | Program output: -94.0511272   
Correct output: -11.5953117725 | Program output: -12.0511272   
Correct output: -13.7453326675 | Program output: -13.0511272   
Correct output: -20.3203574079 | Program output: -21.0511272   
Correct output: 161.8529283055 | Program output: 161.0511272   
Correct output: -55.7604817115 | Program output: -55.0511272   
Correct output: -28.6206702826 | Program output: -28.0511272   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_min} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_mult float_dup integer_fromfloat print_integer float_dup integer_fromfloat print_integer integer_pop float_yank float_cos float_sin in1 integer_max integer_fromfloat float_inc integer_fromfloat integer_add integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float integer_min integer_shove print_float 72 float_mod integer_dup 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0105 6 0.1841 9 0.8177 8 0.32 6 0.6634 10 0.851 9 0.7094 7 0.3365 8 0.1003 8 0.9088 7 0.2569 7 0.0291 7 0.6611 7 0.2628 9 0.528 9 0.0516 6 0.2197 8 0.1336 8 0.431 9 0.4558 6 0.6942 7 0.7308 8 0.8018 8 0.7094 8 0.5695 7]
Total: 203.43699999999998
Mean: 4.06874
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2554.3182507000015
Median total errors in population: 205.4302
Error averages by case: (99.45216369999841 6.91 90.91371509999878 7.674 89.08478429999846 9.362 98.29661540000163 8.566 90.01347409999872 10.223 85.84194369999942 9.315 93.19947420000159 7.593 96.33234619999946 8.502 94.12968210000092 8.601 90.98211210000044 6.811 95.43804050000189 8.441 94.45569410000135 5.866 94.49986449999804 8.706 92.50902000000121 9.554 91.434135199999 10.121 90.17763459999865 6.58 93.82090489999848 7.818 97.60472130000142 8.436 95.3651836000013 8.585 97.33789810000019 7.678 97.7253632999984 8.659 94.51582479999878 8.605 94.2702781999983 8.613 93.0332995999991 8.513 95.60907709999833 8.543)
Error minima by case: (0.0033 5 0.1615 6 0.1815 7 0.2974 5 0.3359 8 0.1483 7 0.2913 5 0.3139 6 0.0777 6 0.0919 6 0.2343 6 0.0065 5 0.3396 7 0.2402 7 0.4713 8 0.029 5 0.1971 6 0.0825 5 0.4084 7 0.4047 6 0.3065 6 0.2685 7 0.1989 7 0.2914 6 0.4312 6)
Average genome size in population (length): 60.116
Average program size in population (points): 61.116
Average percent parens in population: 0.017
Minimum age in population: 91.78484539537887
Maximum age in population: 97.04775038180478
Average age in population: 94.86811993124411
Median age in population: 94.90797587157266
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.104
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 86504291
--- Timings ---
Current time: 1529615099151 milliseconds
Total Time:         215.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.5 seconds, 44.3%
Fitness Testing:     94.1 seconds, 43.7%
Report:              25.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 8777.972499999989
Test mean error for best: 4.38899
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0511272  
Correct output: -63.2352586418 | Program output: -63.0511272   
Correct output: 27.2333812574  | Program output: 28.0511272    
Correct output: -136.3711223178 | Program output: -136.0511272  
Correct output: 70.3877365207  | Program output: 71.0511272    
Correct output: 89.2001357371  | Program output: 90.0511272    
Correct output: 147.760546183  | Program output: 147.0511272   
Correct output: -137.3875804218 | Program output: -137.0511272  
Correct output: 161.1514033166 | Program output: 161.0511272   
Correct output: -95.9599100442 | Program output: -95.0511272   
Correct output: -120.308055299 | Program output: -120.0511272  
Correct output: -72.0801834627 | Program output: -72.0511272   
Correct output: -109.7122076235 | Program output: -109.0511272  
Correct output: 106.3138786569 | Program output: 106.0511272   
Correct output: 29.5231501286  | Program output: 30.0511272    
Correct output: 85.102682212   | Program output: 85.0511272    
Correct output: -100.2708478706 | Program output: -100.0511272  
Correct output: -22.9175151841 | Program output: -23.0511272   
Correct output: -94.4820838905 | Program output: -94.0511272   
Correct output: -11.5953117725 | Program output: -12.0511272   
Correct output: -13.7453326675 | Program output: -13.0511272   
Correct output: -20.3203574079 | Program output: -21.0511272   
Correct output: 161.8529283055 | Program output: 161.0511272   
Correct output: -55.7604817115 | Program output: -55.0511272   
Correct output: -28.6206702826 | Program output: -28.0511272   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction tagged_765} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_min} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_dup integer_fromfloat print_integer integer_pop float_yank float_cos float_sin in1 integer_max integer_fromfloat float_inc integer_fromfloat integer_add integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove tagged_765 integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float integer_min integer_shove print_float 72 float_mod integer_dup 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0105 6 0.1841 9 0.8177 8 0.32 6 0.6634 10 0.851 9 0.7094 7 0.3365 8 0.1003 8 0.9088 7 0.2569 7 0.0291 7 0.6611 7 0.2628 9 0.528 9 0.0516 6 0.2197 8 0.1336 8 0.431 9 0.4558 6 0.6942 7 0.7308 8 0.8018 8 0.7094 8 0.5695 7]
Total: 203.43699999999998
Mean: 4.06874
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2204.9785839000015
Median total errors in population: 205.4302
Error averages by case: (86.49527399999907 6.9 75.11829370000018 7.716 75.97984189999981 9.324 84.42751660000148 8.527 76.65903410000016 10.219 73.70261129999946 9.287 79.92661210000148 7.619 81.86759510000041 8.52 80.98371860000097 8.627 76.98207920000044 6.83 80.75075120000167 8.442 79.01624050000042 5.905 79.98546119999914 8.665 78.95024570000105 9.572 78.10139560000005 10.072 76.30658469999882 6.571 79.25339519999882 7.85 84.40283490000074 8.436 80.00462320000105 8.608 83.9826238000002 7.604 84.98496499999925 8.666 79.00295860000001 8.584 81.40961659999846 8.641 77.20489529999946 8.508 81.23041579999942 8.556)
Error minima by case: (0.0033 5 0.1625 6 0.7666 8 0.2984 4 0.6123 7 0.7999 8 0.2913 5 0.3149 6 0.0787 7 0.8872 6 0.2353 6 0.0075 5 0.6395 6 0.2412 7 0.4768 9 0.03 5 0.1981 6 0.0825 6 0.4094 7 0.4047 6 0.6726 6 0.2685 7 0.1989 7 0.6878 7 0.548 6)
Average genome size in population (length): 60.081
Average program size in population (points): 61.081
Average percent parens in population: 0.017
Minimum age in population: 92.78484539537887
Maximum age in population: 98.50032960837746
Average age in population: 96.30408557296765
Median age in population: 96.36451332499153
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.106
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 88006316
--- Timings ---
Current time: 1529615102675 milliseconds
Total Time:         219.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.0 seconds, 44.3%
Fitness Testing:     95.7 seconds, 43.7%
Report:              26.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 8777.972499999989
Test mean error for best: 4.38899
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0511272  
Correct output: -63.2352586418 | Program output: -63.0511272   
Correct output: 27.2333812574  | Program output: 28.0511272    
Correct output: -136.3711223178 | Program output: -136.0511272  
Correct output: 70.3877365207  | Program output: 71.0511272    
Correct output: 89.2001357371  | Program output: 90.0511272    
Correct output: 147.760546183  | Program output: 147.0511272   
Correct output: -137.3875804218 | Program output: -137.0511272  
Correct output: 161.1514033166 | Program output: 161.0511272   
Correct output: -95.9599100442 | Program output: -95.0511272   
Correct output: -120.308055299 | Program output: -120.0511272  
Correct output: -72.0801834627 | Program output: -72.0511272   
Correct output: -109.7122076235 | Program output: -109.0511272  
Correct output: 106.3138786569 | Program output: 106.0511272   
Correct output: 29.5231501286  | Program output: 30.0511272    
Correct output: 85.102682212   | Program output: 85.0511272    
Correct output: -100.2708478706 | Program output: -100.0511272  
Correct output: -22.9175151841 | Program output: -23.0511272   
Correct output: -94.4820838905 | Program output: -94.0511272   
Correct output: -11.5953117725 | Program output: -12.0511272   
Correct output: -13.7453326675 | Program output: -13.0511272   
Correct output: -20.3203574079 | Program output: -21.0511272   
Correct output: 161.8529283055 | Program output: 161.0511272   
Correct output: -55.7604817115 | Program output: -55.0511272   
Correct output: -28.6206702826 | Program output: -28.0511272   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction tagged_765} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_min} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_dup integer_fromfloat print_integer integer_pop float_yank float_cos float_sin in1 integer_max integer_fromfloat float_inc integer_fromfloat integer_add integer_swap integer_sub float_div integer_mod float_flush float_yank integer_mult float_dup_times float_add float_shove tagged_765 integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float integer_min integer_shove print_float 72 float_mod integer_dup 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0105 6 0.1841 9 0.8177 8 0.32 6 0.6634 10 0.851 9 0.7094 7 0.3365 8 0.1003 8 0.9088 7 0.2569 7 0.0291 7 0.6611 7 0.2628 9 0.528 9 0.0516 6 0.2197 8 0.1336 8 0.431 9 0.4558 6 0.6942 7 0.7308 8 0.8018 8 0.7094 8 0.5695 7]
Total: 203.43699999999998
Mean: 4.06874
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2290.3092269000012
Median total errors in population: 205.4302
Error averages by case: (90.02126409999907 6.858 81.90500939999984 7.9 78.0168833999998 9.193 89.22708160000141 8.255 78.87666720000004 10.214 75.40881169999957 9.241 81.36106160000129 7.612 86.14715199999998 8.492 82.5745403000008 8.595 82.50190000000035 6.919 85.13912870000121 8.312 84.9455964000007 6.1 84.82598569999901 8.546 81.15119870000068 9.577 79.72649389999988 9.919 77.00887039999904 6.529 84.10103629999911 7.938 88.09026630000103 8.42 85.15420260000066 8.712 87.70931190000016 7.426 86.3571691999991 8.54 83.75399949999981 8.555 82.62507309999883 8.621 82.82143799999963 8.461 83.51608489999903 8.408)
Error minima by case: (0.0098 5 0.1625 6 0.1815 8 0.2846 5 0.3359 8 0.1483 7 0.6638 5 0.2935 6 0.0687 7 0.0553 6 0.2306 6 0.0075 5 0.303 6 0.2177 7 0.4713 7 0.03 5 0.1981 6 0.0825 6 0.4094 7 0.4047 6 0.2699 7 0.6796 7 0.7572 7 0.2547 6 0.3945 6)
Average genome size in population (length): 61.241
Average program size in population (points): 62.241
Average percent parens in population: 0.016
Minimum age in population: 93.78484539537887
Maximum age in population: 99.92159286996078
Average age in population: 97.7862253135118
Median age in population: 97.83380342052163
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.116
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 89537341
--- Timings ---
Current time: 1529615106255 milliseconds
Total Time:         222.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        98.4 seconds, 44.2%
Fitness Testing:     97.3 seconds, 43.7%
Report:              26.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 8777.972499999989
Test mean error for best: 4.38899
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0511272  
Correct output: -63.2352586418 | Program output: -63.0511272   
Correct output: 27.2333812574  | Program output: 28.0511272    
Correct output: -136.3711223178 | Program output: -136.0511272  
Correct output: 70.3877365207  | Program output: 71.0511272    
Correct output: 89.2001357371  | Program output: 90.0511272    
Correct output: 147.760546183  | Program output: 147.0511272   
Correct output: -137.3875804218 | Program output: -137.0511272  
Correct output: 161.1514033166 | Program output: 161.0511272   
Correct output: -95.9599100442 | Program output: -95.0511272   
Correct output: -120.308055299 | Program output: -120.0511272  
Correct output: -72.0801834627 | Program output: -72.0511272   
Correct output: -109.7122076235 | Program output: -109.0511272  
Correct output: 106.3138786569 | Program output: 106.0511272   
Correct output: 29.5231501286  | Program output: 30.0511272    
Correct output: 85.102682212   | Program output: 85.0511272    
Correct output: -100.2708478706 | Program output: -100.0511272  
Correct output: -22.9175151841 | Program output: -23.0511272   
Correct output: -94.4820838905 | Program output: -94.0511272   
Correct output: -11.5953117725 | Program output: -12.0511272   
Correct output: -13.7453326675 | Program output: -13.0511272   
Correct output: -20.3203574079 | Program output: -21.0511272   
Correct output: 161.8529283055 | Program output: 161.0511272   
Correct output: -55.7604817115 | Program output: -55.0511272   
Correct output: -28.6206702826 | Program output: -28.0511272   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_pop} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_mod} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_min} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_pop float_yank float_yank float_mult float_dup integer_fromfloat print_integer float_yank float_mult float_dup integer_fromfloat print_integer float_dup integer_fromfloat print_integer integer_pop float_yank float_cos float_sin in1 integer_max integer_fromfloat float_inc integer_fromfloat integer_add integer_swap integer_sub float_div integer_mod float_flush float_mod integer_mult float_dup_times float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float integer_min integer_shove print_float 72 float_mod integer_dup 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0105 6 0.1841 9 0.8177 8 0.32 6 0.6634 10 0.851 9 0.7094 7 0.3365 8 0.1003 8 0.9088 7 0.2569 7 0.0291 7 0.6611 7 0.2628 9 0.528 9 0.0516 6 0.2197 8 0.1336 8 0.431 9 0.4558 6 0.6942 7 0.7308 8 0.8018 8 0.7094 8 0.5695 7]
Total: 203.43699999999998
Mean: 4.06874
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2430.4873357000015
Median total errors in population: 205.4302
Error averages by case: (93.54917299999966 6.826 85.75295269999958 8.492 84.36277389999967 8.873 92.43535210000135 7.529 84.93467320000026 10.21 80.90573509999965 9.237 89.72501570000132 7.62 90.95073450000037 8.461 90.34774370000056 8.568 85.93560380000035 7.222 90.12685530000024 7.983 88.90032630000023 6.721 89.25752009999918 8.119 88.75989049999971 9.545 86.15142670000003 9.599 86.77350649999978 6.51 88.56635059999995 8.218 93.8629479000005 8.467 89.85065639999978 9.023 93.61078450000022 7.109 91.06662459999937 8.155 91.13335710000017 8.555 90.67097429999961 8.587 87.70746430000031 8.434 89.03489289999918 8.051)
Error minima by case: (0.0105 6 0.1381 6 0.2124 7 0.2739 5 0.3667 8 0.1791 8 0.2906 5 0.2904 6 0.0542 7 0.0611 6 0.2109 6 0.0065 5 0.3088 7 0.2167 8 0.4768 8 0.0055 5 0.1736 7 0.0825 6 0.3849 7 0.4047 5 0.2757 6 0.2692 7 0.1982 7 0.2605 6 0.4003 6)
Average genome size in population (length): 62.556
Average program size in population (points): 63.556
Average percent parens in population: 0.016
Minimum age in population: 96.71594845810169
Maximum age in population: 101.2263584574924
Average age in population: 99.26697728912544
Median age in population: 99.28499085615186
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.113
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 91101266
--- Timings ---
Current time: 1529615110215 milliseconds
Total Time:         226.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.0 seconds, 44.2%
Fitness Testing:     99.1 seconds, 43.8%
Report:              27.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 8777.972499999989
Test mean error for best: 4.38899
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0511272  
Correct output: -63.2352586418 | Program output: -63.0511272   
Correct output: 27.2333812574  | Program output: 28.0511272    
Correct output: -136.3711223178 | Program output: -136.0511272  
Correct output: 70.3877365207  | Program output: 71.0511272    
Correct output: 89.2001357371  | Program output: 90.0511272    
Correct output: 147.760546183  | Program output: 147.0511272   
Correct output: -137.3875804218 | Program output: -137.0511272  
Correct output: 161.1514033166 | Program output: 161.0511272   
Correct output: -95.9599100442 | Program output: -95.0511272   
Correct output: -120.308055299 | Program output: -120.0511272  
Correct output: -72.0801834627 | Program output: -72.0511272   
Correct output: -109.7122076235 | Program output: -109.0511272  
Correct output: 106.3138786569 | Program output: 106.0511272   
Correct output: 29.5231501286  | Program output: 30.0511272    
Correct output: 85.102682212   | Program output: 85.0511272    
Correct output: -100.2708478706 | Program output: -100.0511272  
Correct output: -22.9175151841 | Program output: -23.0511272   
Correct output: -94.4820838905 | Program output: -94.0511272   
Correct output: -11.5953117725 | Program output: -12.0511272   
Correct output: -13.7453326675 | Program output: -13.0511272   
Correct output: -20.3203574079 | Program output: -21.0511272   
Correct output: 161.8529283055 | Program output: 161.0511272   
Correct output: -55.7604817115 | Program output: -55.0511272   
Correct output: -28.6206702826 | Program output: -28.0511272   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_sub} {:instruction print_integer} {:instruction integer_pop} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction float_flush} {:instruction float_mod} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction float_yank} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_yank} {:instruction float_add} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction print_float} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_min} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_sub print_integer integer_pop float_yank float_yank float_mult float_dup integer_fromfloat print_integer integer_fromfloat float_dup_items float_flush float_mod float_cos float_sin in1 float_sin in1 integer_max integer_fromfloat float_cos integer_swap integer_sub float_div integer_mod float_flush integer_swap integer_sub float_div float_yank float_flush float_yank integer_mult float_yank float_add float_shove float_swap integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add print_float float_frominteger float_shove float_stackdepth print_float integer_min integer_shove print_float 72 float_mod integer_dup 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0105 6 0.1841 9 0.8177 8 0.32 6 0.6634 10 0.851 9 0.7094 7 0.3365 8 0.1003 8 0.9088 7 0.2569 7 0.0291 7 0.6611 7 0.2628 9 0.528 9 0.0516 6 0.2197 8 0.1336 8 0.431 9 0.4558 6 0.6942 7 0.7308 8 0.8018 8 0.7094 8 0.5695 7]
Total: 203.43699999999998
Mean: 4.06874
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2315.374305400002
Median total errors in population: 203.43699999999998
Error averages by case: (89.0889278000002 6.836 80.31802329999914 9.231 81.83078679999973 8.526 88.07509060000167 6.827 82.34777930000062 10.204 78.33289869999959 9.221 85.38001490000154 7.619 85.86139480000078 8.476 86.35293030000066 8.545 81.36304600000064 7.616 84.90683349999867 7.647 82.88714029999983 7.456 84.28189249999897 7.784 84.82325449999863 9.565 83.43834120000056 9.199 82.21626860000096 6.476 83.56782490000077 8.634 86.9394272000006 8.483 84.78026109999871 9.428 86.64361859999971 6.717 88.03722279999928 7.827 83.76985440000063 8.542 86.49586450000056 8.606 82.0788823000014 8.429 85.9657264999991 7.697)
Error minima by case: (0.0038 6 0.1625 6 0.1823 7 0.2984 4 0.3366 9 0.149 7 0.2906 6 0.2904 6 0.0702 7 0.0912 6 0.2198 6 0.0075 5 0.3389 6 0.2412 8 0.472 7 0.03 5 0.1956 7 0.0825 7 0.4094 7 0.4047 5 0.3058 6 0.2692 6 0.1982 7 0.2906 7 0.4304 6)
Average genome size in population (length): 63.691
Average program size in population (points): 64.691
Average percent parens in population: 0.016
Minimum age in population: 98.03566243916096
Maximum age in population: 102.6739941337666
Average age in population: 100.7615209014837
Median age in population: 100.8499558612294
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.119
Error (vector) diversity:			 0.121
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 92693541
--- Timings ---
Current time: 1529615113738 milliseconds
Total Time:         230.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       101.3 seconds, 44.1%
Fitness Testing:    100.8 seconds, 43.8%
Report:              27.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 8584.671200000008
Test mean error for best: 4.29234
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518321  
Correct output: -63.2352586418 | Program output: -63.0518321   
Correct output: 27.2333812574  | Program output: 28.0518321    
Correct output: -136.3711223178 | Program output: -136.0518321  
Correct output: 70.3877365207  | Program output: 71.0518321    
Correct output: 89.2001357371  | Program output: 90.0518321    
Correct output: 147.760546183  | Program output: 147.0518321   
Correct output: -137.3875804218 | Program output: -137.0518321  
Correct output: 161.1514033166 | Program output: 161.0518321   
Correct output: -95.9599100442 | Program output: -95.0518321   
Correct output: -120.308055299 | Program output: -120.0518321  
Correct output: -72.0801834627 | Program output: -72.0518321   
Correct output: -109.7122076235 | Program output: -109.0518321  
Correct output: 106.3138786569 | Program output: 106.0518321   
Correct output: 29.5231501286  | Program output: 30.0518321    
Correct output: 85.102682212   | Program output: 85.0518321    
Correct output: -100.2708478706 | Program output: -100.0518321  
Correct output: -22.9175151841 | Program output: -23.0518321   
Correct output: -94.4820838905 | Program output: -94.0518321   
Correct output: -11.5953117725 | Program output: -12.0518321   
Correct output: -13.7453326675 | Program output: -13.0518321   
Correct output: -20.3203574079 | Program output: -21.0518321   
Correct output: 161.8529283055 | Program output: 161.0518321   
Correct output: -55.7604817115 | Program output: -55.0518321   
Correct output: -28.6206702826 | Program output: -28.0518321   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction integer_flush} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction in2} {:instruction float_mod} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction print_float} {:instruction integer_min} {:instruction integer_shove} {:instruction float_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer integer_flush float_dup_items float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float in2 float_mod float_shove float_stackdepth print_float float_shove float_div print_float print_float integer_min integer_shove float_inc 72 float_mod integer_inc 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 8 0.1834 7 0.8185 9 0.3193 7 0.6641 9 0.8517 8 0.7087 6 0.3357 7 0.0996 6 0.9081 8 0.2562 7 0.0284 5 0.6604 9 0.262 9 0.5287 10 0.0509 5 0.219 8 0.1343 8 0.4303 8 0.4565 8 0.6935 8 0.7315 9 0.8011 7 0.7086 8 0.5688 8]
Total: 203.4305
Mean: 4.06861
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2687.208201600002
Median total errors in population: 203.43699999999998
Error averages by case: (104.63675790000028 6.875 95.7276727999992 9.295 92.54819889999965 8.497 103.52781860000188 6.739 94.28283280000073 10.235 89.76056679999948 9.241 100.13974850000196 7.663 101.30554960000096 8.466 100.70658970000108 8.559 96.71585200000072 7.695 100.3412222999982 7.633 98.25919819999986 7.579 99.34480329999896 7.748 99.46940649999848 9.623 95.12288090000082 9.174 97.06028830000125 6.506 98.67146180000091 8.707 106.00288200000037 8.515 99.78429019999854 9.491 105.63904079999931 6.726 101.7380091999991 7.818 102.633751700001 8.598 101.2436508000007 8.639 97.16759190000157 8.417 99.24213609999899 7.697)
Error minima by case: (0.0043 5 0.1625 7 0.1823 7 0.2984 4 0.3366 8 0.149 7 0.2899 6 0.3149 6 0.0689 6 0.0473 6 0.2353 6 0.0075 5 0.295 7 0.2412 8 0.472 7 0.03 5 0.1981 7 0.0825 7 0.4094 8 0.4047 5 0.2619 6 0.2692 6 0.1975 7 0.2467 5 0.3865 6)
Average genome size in population (length): 63.951
Average program size in population (points): 64.951
Average percent parens in population: 0.016
Minimum age in population: 99.37871455054317
Maximum age in population: 104.0472943959
Average age in population: 102.1969220955517
Median age in population: 102.2728334394068
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.118
Error (vector) diversity:			 0.123
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 94292316
--- Timings ---
Current time: 1529615117437 milliseconds
Total Time:         233.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.9 seconds, 44.0%
Fitness Testing:    102.4 seconds, 43.8%
Report:              28.3 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 8584.671200000008
Test mean error for best: 4.29234
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518321  
Correct output: -63.2352586418 | Program output: -63.0518321   
Correct output: 27.2333812574  | Program output: 28.0518321    
Correct output: -136.3711223178 | Program output: -136.0518321  
Correct output: 70.3877365207  | Program output: 71.0518321    
Correct output: 89.2001357371  | Program output: 90.0518321    
Correct output: 147.760546183  | Program output: 147.0518321   
Correct output: -137.3875804218 | Program output: -137.0518321  
Correct output: 161.1514033166 | Program output: 161.0518321   
Correct output: -95.9599100442 | Program output: -95.0518321   
Correct output: -120.308055299 | Program output: -120.0518321  
Correct output: -72.0801834627 | Program output: -72.0518321   
Correct output: -109.7122076235 | Program output: -109.0518321  
Correct output: 106.3138786569 | Program output: 106.0518321   
Correct output: 29.5231501286  | Program output: 30.0518321    
Correct output: 85.102682212   | Program output: 85.0518321    
Correct output: -100.2708478706 | Program output: -100.0518321  
Correct output: -22.9175151841 | Program output: -23.0518321   
Correct output: -94.4820838905 | Program output: -94.0518321   
Correct output: -11.5953117725 | Program output: -12.0518321   
Correct output: -13.7453326675 | Program output: -13.0518321   
Correct output: -20.3203574079 | Program output: -21.0518321   
Correct output: 161.8529283055 | Program output: 161.0518321   
Correct output: -55.7604817115 | Program output: -55.0518321   
Correct output: -28.6206702826 | Program output: -28.0518321   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction in2} {:instruction float_mod} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction print_float} {:instruction integer_min} {:instruction integer_shove} {:instruction float_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_cos float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float in2 float_mod float_shove float_stackdepth print_float float_shove float_div print_float print_float integer_min integer_shove float_inc 72 float_mod integer_inc 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 8 0.1834 7 0.8185 9 0.3193 7 0.6641 9 0.8517 8 0.7087 6 0.3357 7 0.0996 6 0.9081 8 0.2562 7 0.0284 5 0.6604 9 0.262 9 0.5287 10 0.0509 5 0.219 8 0.1343 8 0.4303 8 0.4565 8 0.6935 8 0.7315 9 0.8011 7 0.7086 8 0.5688 8]
Total: 203.4305
Mean: 4.06861
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2721.350681000002
Median total errors in population: 203.43699999999998
Error averages by case: (105.96184710000043 6.892 99.44489729999911 9.317 96.14962689999969 8.55 105.29404920000212 6.759 96.6762769000008 10.261 93.64572909999933 9.296 98.81045980000198 7.651 102.97951850000108 8.511 99.6756940000011 8.547 100.17463050000079 7.68 102.14456409999796 7.679 101.6998724999998 7.578 101.94285609999866 7.747 98.48324449999826 9.593 97.43535390000102 9.254 95.88319740000142 6.499 101.29387470000094 8.719 104.68638000000058 8.516 102.1975574999983 9.486 104.47620359999932 6.74 103.12763439999901 7.818 101.56975020000098 8.612 99.83658860000065 8.605 100.34365700000193 8.458 100.92121719999885 7.728)
Error minima by case: (0.0105 6 0.1625 6 0.1823 7 0.2984 4 0.3366 9 0.149 7 0.2906 6 0.2906 6 0.0694 6 0.0912 6 0.2201 6 0.0075 5 0.3389 7 0.2412 8 0.472 7 0.03 5 0.1958 7 0.0825 7 0.4094 8 0.4047 5 0.3058 7 0.2692 7 0.1982 6 0.2906 6 0.4305 6)
Average genome size in population (length): 64.34
Average program size in population (points): 65.34
Average percent parens in population: 0.015
Minimum age in population: 100.968692093708
Maximum age in population: 105.465660889923
Average age in population: 103.666935750599
Median age in population: 103.712998625377
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.836
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.836
Total error diversity:				 0.122
Error (vector) diversity:			 0.13
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 95900816
--- Timings ---
Current time: 1529615121047 milliseconds
Total Time:         237.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.3 seconds, 43.9%
Fitness Testing:    104.2 seconds, 43.9%
Report:              28.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 8584.671200000008
Test mean error for best: 4.29234
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518321  
Correct output: -63.2352586418 | Program output: -63.0518321   
Correct output: 27.2333812574  | Program output: 28.0518321    
Correct output: -136.3711223178 | Program output: -136.0518321  
Correct output: 70.3877365207  | Program output: 71.0518321    
Correct output: 89.2001357371  | Program output: 90.0518321    
Correct output: 147.760546183  | Program output: 147.0518321   
Correct output: -137.3875804218 | Program output: -137.0518321  
Correct output: 161.1514033166 | Program output: 161.0518321   
Correct output: -95.9599100442 | Program output: -95.0518321   
Correct output: -120.308055299 | Program output: -120.0518321  
Correct output: -72.0801834627 | Program output: -72.0518321   
Correct output: -109.7122076235 | Program output: -109.0518321  
Correct output: 106.3138786569 | Program output: 106.0518321   
Correct output: 29.5231501286  | Program output: 30.0518321    
Correct output: 85.102682212   | Program output: 85.0518321    
Correct output: -100.2708478706 | Program output: -100.0518321  
Correct output: -22.9175151841 | Program output: -23.0518321   
Correct output: -94.4820838905 | Program output: -94.0518321   
Correct output: -11.5953117725 | Program output: -12.0518321   
Correct output: -13.7453326675 | Program output: -13.0518321   
Correct output: -20.3203574079 | Program output: -21.0518321   
Correct output: 161.8529283055 | Program output: 161.0518321   
Correct output: -55.7604817115 | Program output: -55.0518321   
Correct output: -28.6206702826 | Program output: -28.0518321   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction in2} {:instruction float_mod} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction print_float} {:instruction integer_min} {:instruction integer_shove} {:instruction float_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float in2 float_mod float_shove float_stackdepth print_float float_shove float_div print_float print_float integer_min integer_shove float_inc 72 float_mod integer_inc 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 8 0.1834 7 0.8185 9 0.3193 7 0.6641 9 0.8517 8 0.7087 6 0.3357 7 0.0996 6 0.9081 8 0.2562 7 0.0284 5 0.6604 9 0.262 9 0.5287 10 0.0509 5 0.219 8 0.1343 8 0.4303 8 0.4565 8 0.6935 8 0.7315 9 0.8011 7 0.7086 8 0.5688 8]
Total: 203.4305
Mean: 4.06861
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2957.028851900002
Median total errors in population: 203.43699999999998
Error averages by case: (115.8477694000008 6.97 107.139014599999 9.309 105.98910399999964 8.574 114.91458240000263 6.861 106.3211265000014 10.234 102.61285659999879 9.284 108.72636480000257 7.681 112.6979428000016 8.531 109.67177760000156 8.561 107.99675680000115 7.749 111.69178069999744 7.71 111.44625999999975 7.603 110.7157324999987 7.829 108.21286259999835 9.615 107.94495350000172 9.23 105.67061280000166 6.53 110.04985660000098 8.743 113.13600350000064 8.538 111.97279889999835 9.512 112.81962589999901 6.796 113.311766999999 7.881 109.97465930000126 8.633 109.85334130000066 8.633 109.60231150000237 8.486 111.4269902999989 7.789)
Error minima by case: (0.0033 5 0.1625 6 0.1808 7 0.2984 4 0.3352 8 0.1476 7 0.2906 6 0.3149 7 0.0704 6 0.0912 6 0.2353 6 0.0075 5 0.3389 6 0.2412 7 0.4706 7 0.03 5 0.1981 7 0.0825 7 0.4094 8 0.4047 5 0.3058 6 0.2692 6 0.1982 7 0.2906 6 0.4305 6)
Average genome size in population (length): 64.439
Average program size in population (points): 65.439
Average percent parens in population: 0.015
Minimum age in population: 102.5356299452171
Maximum age in population: 107.4364396476124
Average age in population: 105.1091345054137
Median age in population: 105.1801382768026
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.139
Error (vector) diversity:			 0.151
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 97511791
--- Timings ---
Current time: 1529615124571 milliseconds
Total Time:         240.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.7 seconds, 43.9%
Fitness Testing:    105.9 seconds, 44.0%
Report:              29.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 8557.669200000008
Test mean error for best: 4.27883
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518372  
Correct output: -63.2352586418 | Program output: -63.0518372   
Correct output: 27.2333812574  | Program output: 28.0518372    
Correct output: -136.3711223178 | Program output: -136.0518372  
Correct output: 70.3877365207  | Program output: 71.0518372    
Correct output: 89.2001357371  | Program output: 90.0518372    
Correct output: 147.760546183  | Program output: 147.0518372   
Correct output: -137.3875804218 | Program output: -137.0518372  
Correct output: 161.1514033166 | Program output: 161.0518372   
Correct output: -95.9599100442 | Program output: -95.0518372   
Correct output: -120.308055299 | Program output: -120.0518372  
Correct output: -72.0801834627 | Program output: -72.0518372   
Correct output: -109.7122076235 | Program output: -109.0518372  
Correct output: 106.3138786569 | Program output: 106.0518372   
Correct output: 29.5231501286  | Program output: 30.0518372    
Correct output: 85.102682212   | Program output: 85.0518372    
Correct output: -100.2708478706 | Program output: -100.0518372  
Correct output: -22.9175151841 | Program output: -23.0518372   
Correct output: -94.4820838905 | Program output: -94.0518372   
Correct output: -11.5953117725 | Program output: -12.0518372   
Correct output: -13.7453326675 | Program output: -13.0518372   
Correct output: -20.3203574079 | Program output: -21.0518372   
Correct output: 161.8529283055 | Program output: 161.0518372   
Correct output: -55.7604817115 | Program output: -55.0518372   
Correct output: -28.6206702826 | Program output: -28.0518372   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction float_yank} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_yank} {:instruction in2} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction print_float} {:instruction integer_min} {:instruction integer_shove} {:instruction float_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer integer_flush float_dup_items integer_fromfloat integer_fromfloat print_integer float_yankdup float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap float_yank float_div integer_mod float_flush float_yank integer_mult integer_shove float_yank in2 tag_float_838 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float float_rot print_float 72 float_mod integer_dup 72 float_mod integer_shove print_float 72 float_mod integer_dup 72 float_shove float_div print_float print_float integer_min integer_shove float_inc 72 float_mod integer_inc 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 8 0.8185 9 0.3193 7 0.6641 9 0.8517 8 0.7087 6 0.3357 8 0.0996 7 0.9081 7 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 8 0.1343 9 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 7 0.7086 8 0.5688 8]
Total: 203.4302
Mean: 4.068604
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2464.4671894000026
Median total errors in population: 203.43699999999998
Error averages by case: (95.8369735999999 7.043 88.62132659999925 9.121 85.01363229999974 8.605 94.9723365000013 6.843 85.57060850000009 10.124 82.9462018999999 9.126 88.78981440000109 7.485 93.05812340000048 8.361 89.51219350000042 8.31 89.33989030000016 7.779 92.21448739999923 7.618 91.38829079999982 7.323 91.66388819999898 7.955 88.22110149999894 9.565 86.67057140000007 9.28 84.91912710000038 6.391 90.98922230000055 8.667 94.95699180000051 8.475 92.05782189999901 9.356 94.68749440000002 6.901 94.12109789999927 7.898 91.72117980000017 8.647 89.75600810000033 8.5 90.01742070000073 8.415 91.84638509999907 7.787)
Error minima by case: (0.0038 4 0.1625 6 0.1823 7 0.2984 5 0.3366 9 0.149 7 0.2906 4 0.3149 6 0.0692 6 0.0912 6 0.2353 6 0.0075 5 0.3389 6 0.2412 7 0.472 7 0.03 5 0.1981 7 0.0825 6 0.4094 8 0.4047 5 0.3058 7 0.2692 6 0.1982 6 0.2906 5 0.4305 6)
Average genome size in population (length): 64.525
Average program size in population (points): 65.525
Average percent parens in population: 0.015
Minimum age in population: 103.9898257361527
Maximum age in population: 108.4414504441712
Average age in population: 106.4886313200328
Median age in population: 106.5346902906291
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.129
Error (vector) diversity:			 0.134
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 99124916
--- Timings ---
Current time: 1529615128716 milliseconds
Total Time:         244.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.2 seconds, 43.8%
Fitness Testing:    108.0 seconds, 44.1%
Report:              29.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 8557.669200000008
Test mean error for best: 4.27883
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518372  
Correct output: -63.2352586418 | Program output: -63.0518372   
Correct output: 27.2333812574  | Program output: 28.0518372    
Correct output: -136.3711223178 | Program output: -136.0518372  
Correct output: 70.3877365207  | Program output: 71.0518372    
Correct output: 89.2001357371  | Program output: 90.0518372    
Correct output: 147.760546183  | Program output: 147.0518372   
Correct output: -137.3875804218 | Program output: -137.0518372  
Correct output: 161.1514033166 | Program output: 161.0518372   
Correct output: -95.9599100442 | Program output: -95.0518372   
Correct output: -120.308055299 | Program output: -120.0518372  
Correct output: -72.0801834627 | Program output: -72.0518372   
Correct output: -109.7122076235 | Program output: -109.0518372  
Correct output: 106.3138786569 | Program output: 106.0518372   
Correct output: 29.5231501286  | Program output: 30.0518372    
Correct output: 85.102682212   | Program output: 85.0518372    
Correct output: -100.2708478706 | Program output: -100.0518372  
Correct output: -22.9175151841 | Program output: -23.0518372   
Correct output: -94.4820838905 | Program output: -94.0518372   
Correct output: -11.5953117725 | Program output: -12.0518372   
Correct output: -13.7453326675 | Program output: -13.0518372   
Correct output: -20.3203574079 | Program output: -21.0518372   
Correct output: 161.8529283055 | Program output: 161.0518372   
Correct output: -55.7604817115 | Program output: -55.0518372   
Correct output: -28.6206702826 | Program output: -28.0518372   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction integer_flush} {:instruction float_yank} {:instruction float_yank} {:instruction integer_pop} {:instruction float_yank} {:instruction float_cos} {:instruction float_stackdepth} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_add} {:instruction float_shove} {:instruction tagged_765} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_min} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction float_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer integer_flush float_yank float_yank integer_pop float_yank float_cos float_stackdepth in1 integer_max integer_fromfloat float_inc integer_fromfloat integer_add integer_swap integer_sub float_div integer_dup_times float_flush float_yank integer_mult float_yankdup float_add float_shove tagged_765 integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float integer_min integer_shove print_float 72 float_mod integer_dup 72 float_mod float_inc 72 float_mod integer_inc 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 8 0.8185 9 0.3193 7 0.6641 9 0.8517 8 0.7087 6 0.3357 8 0.0996 7 0.9081 7 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 8 0.1343 9 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 7 0.7086 8 0.5688 8]
Total: 203.4302
Mean: 4.068604
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2938.871249400002
Median total errors in population: 203.43699999999998
Error averages by case: (114.68253349999941 7.697 107.6857098999989 8.584 104.61036759999907 8.991 114.76484480000197 7.253 105.31312749999984 9.878 103.1874703999993 8.883 109.16576220000186 7.214 110.96477680000031 8.168 109.72066330000104 7.789 108.89333740000066 8.124 110.04922399999982 7.705 110.98522969999954 6.752 109.81886899999832 8.602 108.25555069999962 9.581 105.99040450000005 9.66 104.9353085000012 6.213 109.1960026999998 8.741 112.10180130000104 8.542 110.12342850000014 9.064 111.87100359999988 7.583 112.23828319999872 8.257 108.7373005999999 9.003 110.42668499999954 8.239 107.94634890000076 8.474 110.04921579999865 8.161)
Error minima by case: (0.0043 6 0.1615 6 0.1604 7 0.2974 5 0.3147 8 0.1271 7 0.2906 4 0.2904 6 0.0777 6 0.0912 6 0.2198 6 0.0065 5 0.3389 7 0.2401 8 0.4502 7 0.029 4 0.1956 7 0.0825 7 0.4084 7 0.4047 5 0.3058 7 0.2685 6 0.1982 6 0.2906 5 0.4305 6)
Average genome size in population (length): 65.192
Average program size in population (points): 66.192
Average percent parens in population: 0.015
Minimum age in population: 105.633258182043
Maximum age in population: 110.0275054297614
Average age in population: 107.9116181397383
Median age in population: 107.9257306101825
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.809
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.152
Error (vector) diversity:			 0.166
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 100754741
--- Timings ---
Current time: 1529615132196 milliseconds
Total Time:         248.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.5 seconds, 43.7%
Fitness Testing:    109.7 seconds, 44.1%
Report:              30.2 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 8557.669200000008
Test mean error for best: 4.27883
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518372  
Correct output: -63.2352586418 | Program output: -63.0518372   
Correct output: 27.2333812574  | Program output: 28.0518372    
Correct output: -136.3711223178 | Program output: -136.0518372  
Correct output: 70.3877365207  | Program output: 71.0518372    
Correct output: 89.2001357371  | Program output: 90.0518372    
Correct output: 147.760546183  | Program output: 147.0518372   
Correct output: -137.3875804218 | Program output: -137.0518372  
Correct output: 161.1514033166 | Program output: 161.0518372   
Correct output: -95.9599100442 | Program output: -95.0518372   
Correct output: -120.308055299 | Program output: -120.0518372  
Correct output: -72.0801834627 | Program output: -72.0518372   
Correct output: -109.7122076235 | Program output: -109.0518372  
Correct output: 106.3138786569 | Program output: 106.0518372   
Correct output: 29.5231501286  | Program output: 30.0518372    
Correct output: 85.102682212   | Program output: 85.0518372    
Correct output: -100.2708478706 | Program output: -100.0518372  
Correct output: -22.9175151841 | Program output: -23.0518372   
Correct output: -94.4820838905 | Program output: -94.0518372   
Correct output: -11.5953117725 | Program output: -12.0518372   
Correct output: -13.7453326675 | Program output: -13.0518372   
Correct output: -20.3203574079 | Program output: -21.0518372   
Correct output: 161.8529283055 | Program output: 161.0518372   
Correct output: -55.7604817115 | Program output: -55.0518372   
Correct output: -28.6206702826 | Program output: -28.0518372   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_yank} {:instruction in2} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank integer_shove float_mult float_dup integer_fromfloat print_integer float_dup integer_fromfloat print_integer integer_pop float_dup float_cos float_sin in1 float_sin in1 integer_max integer_fromfloat float_flush float_yank integer_mult integer_shove float_yank in2 tag_float_838 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float float_rot print_float 72 float_mod integer_dup 72 float_mod integer_shove print_float 72 float_mod float_swap 72 float_mod float_mod integer_inc 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 8 0.8185 9 0.3193 7 0.6641 9 0.8517 8 0.7087 6 0.3357 8 0.0996 7 0.9081 7 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 8 0.1343 9 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 7 0.7086 8 0.5688 8]
Total: 203.4302
Mean: 4.068604
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2366.607833200001
Median total errors in population: 203.4305
Error averages by case: (90.98558049999917 8.276 83.73290629999975 7.782 82.70367239999955 9.325 89.7904172000012 7.592 83.81519289999983 9.445 81.7009513999995 8.405 86.99052740000111 6.694 87.81858330000011 7.76 87.83175350000072 7.056 85.31500040000041 8.412 86.86923600000146 7.646 85.74727269999975 5.885 86.61099079999912 9.2 86.061328400001 9.504 84.28441849999984 10.036 83.56566510000057 5.888 85.86716159999882 8.621 90.9423410000007 8.56 86.52099590000132 8.563 90.59049450000018 8.336 88.21284089999938 8.589 87.16244719999962 9.264 88.06777519999876 7.762 84.4312540999994 8.399 85.52602599999926 8.463)
Error minima by case: (0.0028 5 0.162 5 0.1815 7 0.2979 5 0.3359 7 0.1483 6 0.2906 4 0.2904 6 0.0692 6 0.0919 7 0.2198 6 0.007 4 0.3396 7 0.2407 7 0.4713 8 0.0295 5 0.1956 7 0.0825 6 0.4089 7 0.4047 5 0.3065 7 0.2685 7 0.1982 6 0.2914 5 0.4312 6)
Average genome size in population (length): 66.004
Average program size in population (points): 67.004
Average percent parens in population: 0.015
Minimum age in population: 106.633258182043
Maximum age in population: 111.1475170062835
Average age in population: 109.3330421089389
Median age in population: 109.3956439384354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.145
Error (vector) diversity:			 0.156
Behavioral diversity:				 0.156
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 102404841
--- Timings ---
Current time: 1529615135847 milliseconds
Total Time:         252.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       109.9 seconds, 43.6%
Fitness Testing:    111.5 seconds, 44.2%
Report:              30.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 8557.669200000008
Test mean error for best: 4.27883
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518372  
Correct output: -63.2352586418 | Program output: -63.0518372   
Correct output: 27.2333812574  | Program output: 28.0518372    
Correct output: -136.3711223178 | Program output: -136.0518372  
Correct output: 70.3877365207  | Program output: 71.0518372    
Correct output: 89.2001357371  | Program output: 90.0518372    
Correct output: 147.760546183  | Program output: 147.0518372   
Correct output: -137.3875804218 | Program output: -137.0518372  
Correct output: 161.1514033166 | Program output: 161.0518372   
Correct output: -95.9599100442 | Program output: -95.0518372   
Correct output: -120.308055299 | Program output: -120.0518372  
Correct output: -72.0801834627 | Program output: -72.0518372   
Correct output: -109.7122076235 | Program output: -109.0518372  
Correct output: 106.3138786569 | Program output: 106.0518372   
Correct output: 29.5231501286  | Program output: 30.0518372    
Correct output: 85.102682212   | Program output: 85.0518372    
Correct output: -100.2708478706 | Program output: -100.0518372  
Correct output: -22.9175151841 | Program output: -23.0518372   
Correct output: -94.4820838905 | Program output: -94.0518372   
Correct output: -11.5953117725 | Program output: -12.0518372   
Correct output: -13.7453326675 | Program output: -13.0518372   
Correct output: -20.3203574079 | Program output: -21.0518372   
Correct output: 161.8529283055 | Program output: 161.0518372   
Correct output: -55.7604817115 | Program output: -55.0518372   
Correct output: -28.6206702826 | Program output: -28.0518372   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_yank} {:instruction in2} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank integer_shove float_mult float_dup integer_fromfloat print_integer float_dup integer_fromfloat print_integer integer_pop float_dup float_cos float_sin in1 float_sin in1 integer_max integer_fromfloat float_flush float_yank integer_mult integer_shove float_yank in2 tag_float_838 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float float_rot print_float 72 float_mod integer_dup 72 float_mod integer_shove print_float 72 float_mod integer_dup 72 float_cos float_mod integer_inc 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 8 0.8185 9 0.3193 7 0.6641 9 0.8517 8 0.7087 6 0.3357 8 0.0996 7 0.9081 7 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 8 0.1343 9 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 7 0.7086 8 0.5688 8]
Total: 203.4302
Mean: 4.068604
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2722.5772541000006
Median total errors in population: 203.4305
Error averages by case: (104.39381309999902 7.971 95.41096969999954 8.006 98.94738409999918 9.41 103.01260340000155 7.728 99.63902539999945 9.486 96.37792009999936 8.449 103.05447640000155 6.77 100.93735460000006 8.036 104.027942400001 7.272 96.68117750000046 8.261 99.9265691000019 7.956 99.45969390000012 5.86 98.90930569999868 9.115 102.11520800000118 9.563 101.0516784999995 10.138 99.62798770000022 6.161 98.1778356999985 8.661 102.39409270000077 8.816 99.79435840000158 8.582 102.0368172000002 8.178 105.6859370999992 8.7 98.87426639999943 9.121 104.19174599999829 7.792 97.43696529999926 8.495 103.26712569999897 8.618)
Error minima by case: (0.0038 6 0.162 5 0.7666 6 0.2979 5 0.6123 8 0.7999 7 0.2913 4 0.2896 6 0.0692 6 0.8699 6 0.2191 6 0.007 5 0.6272 6 0.2407 8 0.4768 9 0.0295 5 0.1948 7 0.0825 7 0.4089 7 0.4047 6 0.6691 7 0.2482 7 0.1989 6 0.6873 7 0.5475 6)
Average genome size in population (length): 67.491
Average program size in population (points): 68.491
Average percent parens in population: 0.015
Minimum age in population: 107.8243082486367
Maximum age in population: 112.5062832193245
Average age in population: 110.6977814257395
Median age in population: 110.7454415079261
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.144
Error (vector) diversity:			 0.159
Behavioral diversity:				 0.16
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 104092141
--- Timings ---
Current time: 1529615139515 milliseconds
Total Time:         255.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       111.4 seconds, 43.6%
Fitness Testing:    113.2 seconds, 44.3%
Report:              31.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 8557.669200000008
Test mean error for best: 4.27883
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518372  
Correct output: -63.2352586418 | Program output: -63.0518372   
Correct output: 27.2333812574  | Program output: 28.0518372    
Correct output: -136.3711223178 | Program output: -136.0518372  
Correct output: 70.3877365207  | Program output: 71.0518372    
Correct output: 89.2001357371  | Program output: 90.0518372    
Correct output: 147.760546183  | Program output: 147.0518372   
Correct output: -137.3875804218 | Program output: -137.0518372  
Correct output: 161.1514033166 | Program output: 161.0518372   
Correct output: -95.9599100442 | Program output: -95.0518372   
Correct output: -120.308055299 | Program output: -120.0518372  
Correct output: -72.0801834627 | Program output: -72.0518372   
Correct output: -109.7122076235 | Program output: -109.0518372  
Correct output: 106.3138786569 | Program output: 106.0518372   
Correct output: 29.5231501286  | Program output: 30.0518372    
Correct output: 85.102682212   | Program output: 85.0518372    
Correct output: -100.2708478706 | Program output: -100.0518372  
Correct output: -22.9175151841 | Program output: -23.0518372   
Correct output: -94.4820838905 | Program output: -94.0518372   
Correct output: -11.5953117725 | Program output: -12.0518372   
Correct output: -13.7453326675 | Program output: -13.0518372   
Correct output: -20.3203574079 | Program output: -21.0518372   
Correct output: 161.8529283055 | Program output: 161.0518372   
Correct output: -55.7604817115 | Program output: -55.0518372   
Correct output: -28.6206702826 | Program output: -28.0518372   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_yank} {:instruction in2} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank integer_shove float_mult float_dup integer_fromfloat print_integer float_dup integer_fromfloat print_integer integer_pop float_dup float_cos float_sin in1 float_sin in1 integer_max integer_fromfloat float_flush float_yank integer_mult integer_shove float_yank in2 tag_float_838 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float float_rot print_float 72 float_mod integer_dup 72 float_mod integer_shove print_float 72 float_mod integer_dup 72 float_mod float_mod integer_inc 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 8 0.8185 9 0.3193 7 0.6641 9 0.8517 8 0.7087 6 0.3357 8 0.0996 7 0.9081 7 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 8 0.1343 9 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 7 0.7086 8 0.5688 8]
Total: 203.4302
Mean: 4.068604
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2699.140409600001
Median total errors in population: 203.4302
Error averages by case: (106.85447489999846 7.222 92.08484709999985 8.396 94.62520319999906 9.395 105.53954260000141 7.727 94.85865939999938 9.46 87.35675569999947 8.415 100.52646980000142 6.748 103.66179809999957 8.387 101.51231990000083 7.638 91.60185720000042 7.899 102.70141820000167 8.293 99.77257930000064 5.892 99.64048269999857 8.745 99.6592829000011 9.548 98.7767729999991 10.158 97.25356859999913 6.498 98.94469479999866 8.619 104.72308350000127 9.202 102.53757740000131 8.594 104.1727164000002 7.857 103.25816819999862 8.651 101.0293070999989 8.749 101.62018929999846 7.785 98.50709639999937 8.506 100.9585438999985 8.579)
Error minima by case: (0.0028 6 0.1615 5 0.1815 7 0.2851 5 0.3359 8 0.1483 6 0.2913 4 0.2899 6 0.0689 6 0.0622 6 0.2193 6 0.0065 5 0.3099 6 0.2402 8 0.4713 7 0.029 5 0.1951 6 0.0825 6 0.3921 7 0.4047 6 0.2768 6 0.2685 7 0.1989 6 0.2616 7 0.4014 6)
Average genome size in population (length): 68.78
Average program size in population (points): 69.78
Average percent parens in population: 0.014
Minimum age in population: 110.031095168177
Maximum age in population: 114.0645572511654
Average age in population: 112.209103754868
Median age in population: 112.2604536701419
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.158
Error (vector) diversity:			 0.174
Behavioral diversity:				 0.174
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 105811641
--- Timings ---
Current time: 1529615143376 milliseconds
Total Time:         259.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.0 seconds, 43.5%
Fitness Testing:    115.0 seconds, 44.3%
Report:              31.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 8557.669200000008
Test mean error for best: 4.27883
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518372  
Correct output: -63.2352586418 | Program output: -63.0518372   
Correct output: 27.2333812574  | Program output: 28.0518372    
Correct output: -136.3711223178 | Program output: -136.0518372  
Correct output: 70.3877365207  | Program output: 71.0518372    
Correct output: 89.2001357371  | Program output: 90.0518372    
Correct output: 147.760546183  | Program output: 147.0518372   
Correct output: -137.3875804218 | Program output: -137.0518372  
Correct output: 161.1514033166 | Program output: 161.0518372   
Correct output: -95.9599100442 | Program output: -95.0518372   
Correct output: -120.308055299 | Program output: -120.0518372  
Correct output: -72.0801834627 | Program output: -72.0518372   
Correct output: -109.7122076235 | Program output: -109.0518372  
Correct output: 106.3138786569 | Program output: 106.0518372   
Correct output: 29.5231501286  | Program output: 30.0518372    
Correct output: 85.102682212   | Program output: 85.0518372    
Correct output: -100.2708478706 | Program output: -100.0518372  
Correct output: -22.9175151841 | Program output: -23.0518372   
Correct output: -94.4820838905 | Program output: -94.0518372   
Correct output: -11.5953117725 | Program output: -12.0518372   
Correct output: -13.7453326675 | Program output: -13.0518372   
Correct output: -20.3203574079 | Program output: -21.0518372   
Correct output: 161.8529283055 | Program output: 161.0518372   
Correct output: -55.7604817115 | Program output: -55.0518372   
Correct output: -28.6206702826 | Program output: -28.0518372   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_flush} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction in2} {:instruction float_mod} {:instruction float_shove} {:instruction integer_rot} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction print_float} {:instruction integer_min} {:instruction integer_shove} {:instruction float_inc} {:instruction in2} {:instruction float_mod} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_flush float_yank float_yank float_cos float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float in2 float_mod float_shove integer_rot print_float float_shove float_div print_float print_float integer_min integer_shove float_inc in2 float_mod print_float 72 float_mod integer_dup 72 float_mod integer_inc 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 8 0.8185 9 0.3193 7 0.6641 9 0.8517 8 0.7087 6 0.3357 8 0.0996 7 0.9081 7 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 8 0.1343 9 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 7 0.7086 8 0.5688 8]
Total: 203.4302
Mean: 4.068604
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2942.0125994
Median total errors in population: 203.4302
Error averages by case: (114.25114119999822 7.05 105.33974639999872 8.563 105.90618029999841 9.406 113.60702260000141 7.746 106.56512029999858 9.453 102.31028029999942 8.411 109.2799281000013 6.806 111.28923339999906 8.528 109.96993700000087 7.786 105.85548920000043 7.825 110.39159290000161 8.466 109.26717510000165 5.95 109.4520553999978 8.694 108.76616150000103 9.595 107.98531179999857 10.121 106.06811159999896 6.638 108.76504679999873 8.701 113.2157474000017 9.323 110.3240889000012 8.64 112.89358650000015 7.72 113.66677119999832 8.69 109.80996179999848 8.657 110.2513524999985 7.842 107.7621117999994 8.558 111.2324453999982 8.618)
Error minima by case: (0.0038 6 0.1615 6 0.1815 6 0.2974 5 0.3359 8 0.1483 6 0.2913 4 0.3139 6 0.0689 6 0.0919 6 0.2343 6 0.0065 5 0.3396 6 0.2402 8 0.4713 8 0.029 5 0.1971 7 0.0825 7 0.4084 7 0.4047 6 0.3065 6 0.2685 7 0.1989 6 0.2914 7 0.4312 6)
Average genome size in population (length): 69.282
Average program size in population (points): 70.282
Average percent parens in population: 0.014
Minimum age in population: 111.1898491697646
Maximum age in population: 115.4506084913834
Average age in population: 113.5961888249045
Median age in population: 113.622482302184
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.144
Error (vector) diversity:			 0.149
Behavioral diversity:				 0.149
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 107543716
--- Timings ---
Current time: 1529615146948 milliseconds
Total Time:         263.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.4 seconds, 43.4%
Fitness Testing:    116.8 seconds, 44.4%
Report:              32.0 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 8557.669200000008
Test mean error for best: 4.27883
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518372  
Correct output: -63.2352586418 | Program output: -63.0518372   
Correct output: 27.2333812574  | Program output: 28.0518372    
Correct output: -136.3711223178 | Program output: -136.0518372  
Correct output: 70.3877365207  | Program output: 71.0518372    
Correct output: 89.2001357371  | Program output: 90.0518372    
Correct output: 147.760546183  | Program output: 147.0518372   
Correct output: -137.3875804218 | Program output: -137.0518372  
Correct output: 161.1514033166 | Program output: 161.0518372   
Correct output: -95.9599100442 | Program output: -95.0518372   
Correct output: -120.308055299 | Program output: -120.0518372  
Correct output: -72.0801834627 | Program output: -72.0518372   
Correct output: -109.7122076235 | Program output: -109.0518372  
Correct output: 106.3138786569 | Program output: 106.0518372   
Correct output: 29.5231501286  | Program output: 30.0518372    
Correct output: 85.102682212   | Program output: 85.0518372    
Correct output: -100.2708478706 | Program output: -100.0518372  
Correct output: -22.9175151841 | Program output: -23.0518372   
Correct output: -94.4820838905 | Program output: -94.0518372   
Correct output: -11.5953117725 | Program output: -12.0518372   
Correct output: -13.7453326675 | Program output: -13.0518372   
Correct output: -20.3203574079 | Program output: -21.0518372   
Correct output: 161.8529283055 | Program output: 161.0518372   
Correct output: -55.7604817115 | Program output: -55.0518372   
Correct output: -28.6206702826 | Program output: -28.0518372   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction integer_shove} {:instruction tag_integer_126} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction in1} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_yank} {:instruction in2} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction float_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank integer_shove tag_integer_126 float_dup integer_fromfloat print_integer in1 float_sin in1 integer_max integer_fromfloat float_flush float_yank integer_mult integer_shove float_yank in2 tag_float_838 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float float_rot print_float 72 float_mod integer_dup float_inc 72 float_mod integer_inc 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 8 0.8185 9 0.3193 7 0.6641 9 0.8517 8 0.7087 6 0.3357 8 0.0996 7 0.9081 7 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 8 0.1343 9 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 7 0.7086 8 0.5688 8]
Total: 203.4302
Mean: 4.068604
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2736.3539354000004
Median total errors in population: 203.4302
Error averages by case: (107.03783199999853 6.9 98.25032569999935 8.515 96.07459379999895 9.339 106.02273050000159 7.632 96.6184017999994 9.407 91.63289609999941 8.392 100.01238110000139 6.751 104.23023319999977 8.484 100.74527820000093 7.735 99.06313000000046 7.716 103.36651800000186 8.438 102.97249960000123 5.862 102.1071204999983 8.6 99.21831870000112 9.541 98.58502529999939 10.129 97.0042944999988 6.587 101.42251749999853 8.646 105.5909171000011 9.3 103.1808115000013 8.598 105.21150830000019 7.602 104.8970425999987 8.593 102.29211129999904 8.565 100.9752696999984 7.776 100.95144299999919 8.501 102.7247353999986 8.557)
Error minima by case: (0.0023 5 0.1623 6 0.1815 6 0.2981 5 0.3359 8 0.1483 6 0.2913 4 0.3146 5 0.0784 6 0.0919 6 0.2351 6 0.0072 4 0.3396 7 0.2409 8 0.4713 8 0.0297 5 0.1978 7 0.0825 6 0.4091 7 0.4047 6 0.3065 6 0.2685 7 0.1989 6 0.2914 6 0.4312 6)
Average genome size in population (length): 69.669
Average program size in population (points): 70.669
Average percent parens in population: 0.014
Minimum age in population: 112.1898491697646
Maximum age in population: 117.1838564628114
Average age in population: 115.0186339284174
Median age in population: 115.0393208999918
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.125
Error (vector) diversity:			 0.135
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 109285541
--- Timings ---
Current time: 1529615150797 milliseconds
Total Time:         267.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.9 seconds, 43.4%
Fitness Testing:    118.6 seconds, 44.4%
Report:              32.5 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 8557.669200000008
Test mean error for best: 4.27883
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518372  
Correct output: -63.2352586418 | Program output: -63.0518372   
Correct output: 27.2333812574  | Program output: 28.0518372    
Correct output: -136.3711223178 | Program output: -136.0518372  
Correct output: 70.3877365207  | Program output: 71.0518372    
Correct output: 89.2001357371  | Program output: 90.0518372    
Correct output: 147.760546183  | Program output: 147.0518372   
Correct output: -137.3875804218 | Program output: -137.0518372  
Correct output: 161.1514033166 | Program output: 161.0518372   
Correct output: -95.9599100442 | Program output: -95.0518372   
Correct output: -120.308055299 | Program output: -120.0518372  
Correct output: -72.0801834627 | Program output: -72.0518372   
Correct output: -109.7122076235 | Program output: -109.0518372  
Correct output: 106.3138786569 | Program output: 106.0518372   
Correct output: 29.5231501286  | Program output: 30.0518372    
Correct output: 85.102682212   | Program output: 85.0518372    
Correct output: -100.2708478706 | Program output: -100.0518372  
Correct output: -22.9175151841 | Program output: -23.0518372   
Correct output: -94.4820838905 | Program output: -94.0518372   
Correct output: -11.5953117725 | Program output: -12.0518372   
Correct output: -13.7453326675 | Program output: -13.0518372   
Correct output: -20.3203574079 | Program output: -21.0518372   
Correct output: 161.8529283055 | Program output: 161.0518372   
Correct output: -55.7604817115 | Program output: -55.0518372   
Correct output: -28.6206702826 | Program output: -28.0518372   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_mod} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_dup_items} {:instruction 72} {:instruction float_dec} {:instruction 72} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_mult float_dup in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div integer_fromfloat in2 float_mod float_shove float_stackdepth print_float float_shove float_div print_float float_dup_items 72 float_dec 72 float_mod integer_inc 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 8 0.8185 9 0.3193 7 0.6641 9 0.8517 8 0.7087 6 0.3357 8 0.0996 7 0.9081 7 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 8 0.1343 9 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 7 0.7086 8 0.5688 8]
Total: 203.4302
Mean: 4.068604
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2879.0608998000007
Median total errors in population: 203.4302
Error averages by case: (113.91285549999823 7.017 105.08736169999871 8.556 101.35674679999858 9.415 113.32135910000169 7.75 101.67722969999875 9.461 97.61925689999936 8.466 103.78291750000163 6.757 110.50682379999941 8.512 104.80463460000101 7.783 106.01849390000052 7.794 109.61701210000192 8.443 109.6731880000014 5.948 108.99291869999784 8.661 102.8351471000012 9.57 102.65133909999889 10.146 100.90210339999878 6.653 107.98510059999846 8.654 112.48380780000153 9.344 109.75313570000135 8.618 111.68623340000013 7.731 108.41563399999842 8.676 109.38851219999873 8.617 104.90670059999819 7.823 107.39299789999927 8.532 106.77038969999833 8.592)
Error minima by case: (0.0033 5 0.1627 6 0.7666 7 0.2986 5 0.6123 8 0.7999 7 0.2913 4 0.3151 6 0.0687 6 0.8874 6 0.2355 6 0.0077 4 0.6397 6 0.2414 7 0.4768 8 0.0302 4 0.1983 6 0.0825 7 0.4096 7 0.4047 6 0.6686 6 0.2685 7 0.1989 6 0.688 6 0.5482 6)
Average genome size in population (length): 69.714
Average program size in population (points): 70.714
Average percent parens in population: 0.014
Minimum age in population: 113.8770333797628
Maximum age in population: 118.3515172677343
Average age in population: 116.4539316811059
Median age in population: 116.4757455758192
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.148
Error (vector) diversity:			 0.158
Behavioral diversity:				 0.158
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 111028441
--- Timings ---
Current time: 1529615154661 milliseconds
Total Time:         271.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.4 seconds, 43.3%
Fitness Testing:    120.5 seconds, 44.5%
Report:              33.0 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 8557.669200000008
Test mean error for best: 4.27883
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518372  
Correct output: -63.2352586418 | Program output: -63.0518372   
Correct output: 27.2333812574  | Program output: 28.0518372    
Correct output: -136.3711223178 | Program output: -136.0518372  
Correct output: 70.3877365207  | Program output: 71.0518372    
Correct output: 89.2001357371  | Program output: 90.0518372    
Correct output: 147.760546183  | Program output: 147.0518372   
Correct output: -137.3875804218 | Program output: -137.0518372  
Correct output: 161.1514033166 | Program output: 161.0518372   
Correct output: -95.9599100442 | Program output: -95.0518372   
Correct output: -120.308055299 | Program output: -120.0518372  
Correct output: -72.0801834627 | Program output: -72.0518372   
Correct output: -109.7122076235 | Program output: -109.0518372  
Correct output: 106.3138786569 | Program output: 106.0518372   
Correct output: 29.5231501286  | Program output: 30.0518372    
Correct output: 85.102682212   | Program output: 85.0518372    
Correct output: -100.2708478706 | Program output: -100.0518372  
Correct output: -22.9175151841 | Program output: -23.0518372   
Correct output: -94.4820838905 | Program output: -94.0518372   
Correct output: -11.5953117725 | Program output: -12.0518372   
Correct output: -13.7453326675 | Program output: -13.0518372   
Correct output: -20.3203574079 | Program output: -21.0518372   
Correct output: 161.8529283055 | Program output: 161.0518372   
Correct output: -55.7604817115 | Program output: -55.0518372   
Correct output: -28.6206702826 | Program output: -28.0518372   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction integer_flush} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction float_yank} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_yank} {:instruction in2} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_max} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction print_float} {:instruction print_float} {:instruction integer_min} {:instruction integer_shove} {:instruction float_inc} {:instruction 72} {:instruction float_mod} {:instruction float_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction print_float} {:instruction integer_min} {:instruction integer_shove} {:instruction float_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer integer_flush float_dup_items float_yank float_mult float_dup integer_fromfloat float_dup_items integer_fromfloat integer_flush print_integer float_yankdup float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap float_yank float_div integer_mod float_flush float_yank integer_mult integer_shove float_yank in2 tag_float_838 integer_add float_mod float_frominteger float_shove float_max print_float float_shove float_div print_float float_rot print_float 72 print_float print_float integer_min integer_shove float_inc 72 float_mod float_inc 72 float_mod integer_inc 72 float_shove float_div print_float print_float integer_min integer_shove float_inc 72 float_mod integer_inc 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 8 0.8185 9 0.3193 7 0.6641 9 0.8517 8 0.7087 6 0.3357 8 0.0996 7 0.9081 7 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 8 0.1343 9 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 7 0.7086 8 0.5688 8]
Total: 203.4302
Mean: 4.068604
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3023.2459908000005
Median total errors in population: 203.4302
Error averages by case: (120.15538009999834 7.076 107.0928026999988 8.603 106.73020089999868 9.438 118.81556950000144 7.789 106.85539499999882 9.49 100.5017296999994 8.467 112.07405840000143 6.813 117.09250249999948 8.58 112.92969570000095 7.832 107.19642750000042 7.819 116.0528884000018 8.499 113.49055860000128 5.995 113.69995249999808 8.704 110.95565450000107 9.609 109.98675749999892 10.156 108.52017309999893 6.68 112.94060819999862 8.72 118.07779690000143 9.377 115.70097950000132 8.669 117.6836801000002 7.76 115.3680709999987 8.707 114.79929419999881 8.676 113.1396588999984 7.846 111.95761959999932 8.563 112.92153579999842 8.639)
Error minima by case: (0.0033 5 0.1615 5 0.1815 7 0.2974 5 0.3359 8 0.1483 6 0.2913 4 0.2904 6 0.0777 6 0.0919 6 0.2198 6 0.0065 5 0.3396 7 0.2402 7 0.4713 7 0.029 5 0.1956 7 0.0825 7 0.4084 7 0.4047 6 0.3065 6 0.2685 7 0.1989 6 0.2914 6 0.4312 6)
Average genome size in population (length): 69.33
Average program size in population (points): 70.33
Average percent parens in population: 0.014
Minimum age in population: 115.1198083863145
Maximum age in population: 120.0428235477794
Average age in population: 117.950929681256
Median age in population: 117.9827792342553
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.144
Error (vector) diversity:			 0.151
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 112761691
--- Timings ---
Current time: 1529615158417 milliseconds
Total Time:         274.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.7 seconds, 43.2%
Fitness Testing:    122.4 seconds, 44.6%
Report:              33.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 8557.669200000008
Test mean error for best: 4.27883
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518372  
Correct output: -63.2352586418 | Program output: -63.0518372   
Correct output: 27.2333812574  | Program output: 28.0518372    
Correct output: -136.3711223178 | Program output: -136.0518372  
Correct output: 70.3877365207  | Program output: 71.0518372    
Correct output: 89.2001357371  | Program output: 90.0518372    
Correct output: 147.760546183  | Program output: 147.0518372   
Correct output: -137.3875804218 | Program output: -137.0518372  
Correct output: 161.1514033166 | Program output: 161.0518372   
Correct output: -95.9599100442 | Program output: -95.0518372   
Correct output: -120.308055299 | Program output: -120.0518372  
Correct output: -72.0801834627 | Program output: -72.0518372   
Correct output: -109.7122076235 | Program output: -109.0518372  
Correct output: 106.3138786569 | Program output: 106.0518372   
Correct output: 29.5231501286  | Program output: 30.0518372    
Correct output: 85.102682212   | Program output: 85.0518372    
Correct output: -100.2708478706 | Program output: -100.0518372  
Correct output: -22.9175151841 | Program output: -23.0518372   
Correct output: -94.4820838905 | Program output: -94.0518372   
Correct output: -11.5953117725 | Program output: -12.0518372   
Correct output: -13.7453326675 | Program output: -13.0518372   
Correct output: -20.3203574079 | Program output: -21.0518372   
Correct output: 161.8529283055 | Program output: 161.0518372   
Correct output: -55.7604817115 | Program output: -55.0518372   
Correct output: -28.6206702826 | Program output: -28.0518372   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_max} {:instruction print_integer} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction float_yank} {:instruction float_div} {:instruction float_div} {:instruction integer_mod} {:instruction float_mod} {:instruction float_yank} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_add} {:instruction float_shove} {:instruction tagged_765} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_sub} {:instruction 72} {:instruction float_mod} {:instruction float_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_mult float_dup integer_fromfloat print_integer float_cos integer_swap integer_fromfloat print_integer integer_max print_integer integer_flush float_dup_items integer_fromfloat integer_fromfloat print_integer float_yankdup float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap float_yank float_div float_div integer_mod float_mod float_yank integer_mult float_dup_times float_add float_shove tagged_765 integer_shove float_yank integer_div float_dec in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float integer_min integer_shove integer_sub 72 float_mod float_inc 72 float_mod integer_inc 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 8 0.8185 9 0.3193 7 0.6641 9 0.8517 8 0.7087 6 0.3357 8 0.0996 7 0.9081 7 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 8 0.1343 9 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 7 0.7086 8 0.5688 8]
Total: 203.4302
Mean: 4.068604
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3304.3173498000006
Median total errors in population: 203.4302
Error averages by case: (131.25664889999805 7.111 118.39083109999869 8.655 117.53490169999834 9.467 130.00819890000162 7.831 117.76981659999852 9.528 111.27610599999939 8.515 123.0821339000016 6.825 128.44098099999917 8.609 123.667083100001 7.876 118.73488580000048 7.863 127.44306720000174 8.505 125.9796663000016 6.05 124.6523379999976 8.735 121.84968370000124 9.62 121.38634999999891 10.162 119.5771899999989 6.734 123.87571589999858 8.753 129.51853430000187 9.385 126.86888220000131 8.697 128.88182170000016 7.834 126.8311845999982 8.738 125.8461937999984 8.717 124.05906019999829 7.907 123.60051469999937 8.591 124.4295601999981 8.648)
Error minima by case: (0.0033 5 0.1615 6 0.1815 7 0.2974 5 0.3359 8 0.1483 6 0.2913 4 0.3139 5 0.0777 6 0.0401 6 0.2343 6 0.0065 5 0.2878 6 0.2402 7 0.4713 7 0.029 5 0.1971 6 0.0825 6 0.4084 7 0.4047 6 0.2547 6 0.2685 7 0.1989 6 0.2395 6 0.3793 6)
Average genome size in population (length): 69.755
Average program size in population (points): 70.755
Average percent parens in population: 0.014
Minimum age in population: 116.7349564434183
Maximum age in population: 121.8230386126211
Average age in population: 119.3865536248229
Median age in population: 119.4390379955739
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.154
Error (vector) diversity:			 0.165
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 114505566
--- Timings ---
Current time: 1529615162144 milliseconds
Total Time:         278.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.2 seconds, 43.2%
Fitness Testing:    124.1 seconds, 44.6%
Report:              34.0 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 8557.669200000008
Test mean error for best: 4.27883
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518372  
Correct output: -63.2352586418 | Program output: -63.0518372   
Correct output: 27.2333812574  | Program output: 28.0518372    
Correct output: -136.3711223178 | Program output: -136.0518372  
Correct output: 70.3877365207  | Program output: 71.0518372    
Correct output: 89.2001357371  | Program output: 90.0518372    
Correct output: 147.760546183  | Program output: 147.0518372   
Correct output: -137.3875804218 | Program output: -137.0518372  
Correct output: 161.1514033166 | Program output: 161.0518372   
Correct output: -95.9599100442 | Program output: -95.0518372   
Correct output: -120.308055299 | Program output: -120.0518372  
Correct output: -72.0801834627 | Program output: -72.0518372   
Correct output: -109.7122076235 | Program output: -109.0518372  
Correct output: 106.3138786569 | Program output: 106.0518372   
Correct output: 29.5231501286  | Program output: 30.0518372    
Correct output: 85.102682212   | Program output: 85.0518372    
Correct output: -100.2708478706 | Program output: -100.0518372  
Correct output: -22.9175151841 | Program output: -23.0518372   
Correct output: -94.4820838905 | Program output: -94.0518372   
Correct output: -11.5953117725 | Program output: -12.0518372   
Correct output: -13.7453326675 | Program output: -13.0518372   
Correct output: -20.3203574079 | Program output: -21.0518372   
Correct output: 161.8529283055 | Program output: 161.0518372   
Correct output: -55.7604817115 | Program output: -55.0518372   
Correct output: -28.6206702826 | Program output: -28.0518372   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction integer_flush} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction float_yank} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_yank} {:instruction in2} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_max} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer integer_flush float_dup_items float_yank float_mult float_dup integer_fromfloat float_dup_items integer_fromfloat integer_flush print_integer float_yankdup float_yank float_cos float_sin in1 integer_max integer_fromfloat float_flush integer_swap float_yank float_div integer_mod float_flush float_yank integer_mult integer_shove float_yank in2 tag_float_838 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove print_float 72 float_mod integer_dup 72 float_max integer_inc 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 8 0.8185 9 0.3193 7 0.6641 9 0.8517 8 0.7087 6 0.3357 8 0.0996 7 0.9081 7 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 8 0.1343 9 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 7 0.7086 8 0.5688 8]
Total: 203.4302
Mean: 4.068604
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3226.612511500001
Median total errors in population: 203.4302
Error averages by case: (127.16917109999869 7.06 115.90889699999924 8.633 115.71331559999892 9.449 126.58575800000136 7.815 115.86523549999919 9.506 110.12947939999933 8.487 120.56835360000127 6.845 123.36264249999952 8.59 121.82048080000095 7.862 116.48225400000047 7.853 122.4293340000016 8.503 121.43741920000122 6.016 120.72943399999843 8.722 120.73221690000098 9.627 118.17263809999915 10.175 116.54431289999901 6.722 120.0798003999987 8.735 125.81323190000128 9.398 122.76241920000113 8.669 125.54269680000019 7.771 124.37674829999882 8.725 122.10815339999907 8.663 121.79114209999854 7.888 119.56789809999945 8.615 121.92947869999868 8.661)
Error minima by case: (0.0028 6 0.1623 5 0.1815 7 0.2981 5 0.3359 7 0.1483 6 0.2913 4 0.3146 7 0.0689 6 0.0919 6 0.2351 6 0.0072 5 0.3396 6 0.2409 7 0.4713 7 0.0297 5 0.1978 7 0.0825 6 0.4091 7 0.4047 6 0.3065 6 0.2685 7 0.1989 6 0.2913 7 0.4312 6)
Average genome size in population (length): 70.268
Average program size in population (points): 71.268
Average percent parens in population: 0.014
Minimum age in population: 117.7602632221528
Maximum age in population: 123.0112635347549
Average age in population: 120.7911691895871
Median age in population: 120.8255198319572
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.143
Error (vector) diversity:			 0.157
Behavioral diversity:				 0.157
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 116262291
--- Timings ---
Current time: 1529615165889 milliseconds
Total Time:         282.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.7 seconds, 43.1%
Fitness Testing:    125.9 seconds, 44.6%
Report:              34.5 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 8557.669200000008
Test mean error for best: 4.27883
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518372  
Correct output: -63.2352586418 | Program output: -63.0518372   
Correct output: 27.2333812574  | Program output: 28.0518372    
Correct output: -136.3711223178 | Program output: -136.0518372  
Correct output: 70.3877365207  | Program output: 71.0518372    
Correct output: 89.2001357371  | Program output: 90.0518372    
Correct output: 147.760546183  | Program output: 147.0518372   
Correct output: -137.3875804218 | Program output: -137.0518372  
Correct output: 161.1514033166 | Program output: 161.0518372   
Correct output: -95.9599100442 | Program output: -95.0518372   
Correct output: -120.308055299 | Program output: -120.0518372  
Correct output: -72.0801834627 | Program output: -72.0518372   
Correct output: -109.7122076235 | Program output: -109.0518372  
Correct output: 106.3138786569 | Program output: 106.0518372   
Correct output: 29.5231501286  | Program output: 30.0518372    
Correct output: 85.102682212   | Program output: 85.0518372    
Correct output: -100.2708478706 | Program output: -100.0518372  
Correct output: -22.9175151841 | Program output: -23.0518372   
Correct output: -94.4820838905 | Program output: -94.0518372   
Correct output: -11.5953117725 | Program output: -12.0518372   
Correct output: -13.7453326675 | Program output: -13.0518372   
Correct output: -20.3203574079 | Program output: -21.0518372   
Correct output: 161.8529283055 | Program output: 161.0518372   
Correct output: -55.7604817115 | Program output: -55.0518372   
Correct output: -28.6206702826 | Program output: -28.0518372   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_flush} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction in2} {:instruction float_mod} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_mult} {:instruction print_float} {:instruction print_float} {:instruction integer_min} {:instruction float_stackdepth} {:instruction float_inc} {:instruction 72} {:instruction float_mod} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_mod} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_flush float_yank float_yank float_cos float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float in2 float_mod float_shove float_stackdepth print_float float_shove float_mult print_float print_float integer_min float_stackdepth float_inc 72 float_mod print_float 72 float_mod integer_dup float_mod integer_dup 72 float_mod float_mod integer_inc 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 8 0.8185 9 0.3193 7 0.6641 9 0.8517 8 0.7087 6 0.3357 8 0.0996 7 0.9081 7 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 8 0.1343 9 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 7 0.7086 8 0.5688 8]
Total: 203.4302
Mean: 4.068604
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3066.3000056000005
Median total errors in population: 203.4302
Error averages by case: (119.97969729999798 7.002 107.14426849999874 8.55 110.04580469999844 9.404 119.20539890000161 7.737 109.2391725999986 9.461 101.7204941999994 8.452 114.98329380000152 6.784 117.3110888999991 8.543 115.62322800000103 7.788 106.85467720000044 7.797 116.54282490000195 8.466 114.77551420000157 5.949 113.7766082999977 8.677 114.5349427000012 9.545 113.90587229999865 10.178 112.42978839999881 6.638 113.1498044999985 8.665 118.92206100000205 9.359 116.6240434000014 8.629 118.67654730000018 7.725 120.11091429999794 8.661 115.9055555999985 8.631 115.80431289999831 7.822 113.29453239999931 8.552 118.11455929999792 8.61)
Error minima by case: (0.0033 5 0.1625 6 0.1815 6 0.2984 5 0.3359 8 0.1483 6 0.2913 4 0.3149 7 0.0787 6 0.0919 6 0.2353 6 0.0075 5 0.3396 6 0.2411 7 0.4713 8 0.03 5 0.1981 7 0.0825 7 0.4094 7 0.4047 6 0.3065 6 0.2685 7 0.1989 7 0.2914 7 0.4312 6)
Average genome size in population (length): 70.151
Average program size in population (points): 71.151
Average percent parens in population: 0.014
Minimum age in population: 118.7602632221528
Maximum age in population: 124.1573037505168
Average age in population: 122.1300161099202
Median age in population: 122.1597998462148
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.139
Error (vector) diversity:			 0.146
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 118016116
--- Timings ---
Current time: 1529615169626 milliseconds
Total Time:         285.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.2 seconds, 43.1%
Fitness Testing:    127.7 seconds, 44.7%
Report:              34.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 8557.669200000008
Test mean error for best: 4.27883
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518372  
Correct output: -63.2352586418 | Program output: -63.0518372   
Correct output: 27.2333812574  | Program output: 28.0518372    
Correct output: -136.3711223178 | Program output: -136.0518372  
Correct output: 70.3877365207  | Program output: 71.0518372    
Correct output: 89.2001357371  | Program output: 90.0518372    
Correct output: 147.760546183  | Program output: 147.0518372   
Correct output: -137.3875804218 | Program output: -137.0518372  
Correct output: 161.1514033166 | Program output: 161.0518372   
Correct output: -95.9599100442 | Program output: -95.0518372   
Correct output: -120.308055299 | Program output: -120.0518372  
Correct output: -72.0801834627 | Program output: -72.0518372   
Correct output: -109.7122076235 | Program output: -109.0518372  
Correct output: 106.3138786569 | Program output: 106.0518372   
Correct output: 29.5231501286  | Program output: 30.0518372    
Correct output: 85.102682212   | Program output: 85.0518372    
Correct output: -100.2708478706 | Program output: -100.0518372  
Correct output: -22.9175151841 | Program output: -23.0518372   
Correct output: -94.4820838905 | Program output: -94.0518372   
Correct output: -11.5953117725 | Program output: -12.0518372   
Correct output: -13.7453326675 | Program output: -13.0518372   
Correct output: -20.3203574079 | Program output: -21.0518372   
Correct output: 161.8529283055 | Program output: 161.0518372   
Correct output: -55.7604817115 | Program output: -55.0518372   
Correct output: -28.6206702826 | Program output: -28.0518372   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_min} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 74} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction print_float} {:instruction integer_min} {:instruction integer_shove} {:instruction float_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_min float_cos float_sin in1 integer_max integer_fromfloat float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_rot print_float 72 float_mod integer_dup 74 float_mod integer_shove print_float 72 float_mod float_swap 72 float_mod integer_yankdup integer_inc 72 float_mod integer_dec integer_mult float_mod float_mod integer_dup 72 float_shove float_div print_float print_float integer_min integer_shove float_inc 72 float_mod integer_inc 72 float_mod integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1834 8 0.8185 9 0.3193 7 0.6641 9 0.8517 8 0.7087 6 0.3357 8 0.0996 7 0.9081 7 0.2562 8 0.0283 5 0.6604 8 0.262 9 0.5287 10 0.0508 6 0.219 8 0.1343 9 0.4302 8 0.4565 7 0.6935 8 0.7315 8 0.8011 7 0.7086 8 0.5688 8]
Total: 203.4302
Mean: 4.068604
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2383.481185700001
Median total errors in population: 203.4302
Error averages by case: (91.85033469999942 6.874 81.39053410000004 8.473 84.27054469999975 9.322 91.09842640000103 7.622 83.90482310000009 9.378 78.5436825999994 8.334 88.02660330000099 6.647 89.02442130000023 8.455 89.04634500000084 7.671 81.31845430000045 7.674 88.2630456000014 8.384 85.74276750000044 5.8 86.85734069999938 8.567 88.13135990000089 9.498 86.89052199999982 10.083 84.80561539999921 6.536 86.30025619999888 8.58 90.68611280000067 9.26 88.07554530000094 8.534 90.5030644000002 7.604 91.96389949999953 8.582 87.70852129999993 8.535 88.82829289999886 7.697 85.10069979999959 8.456 90.0829728999993 8.501)
Error minima by case: (0.0021 5 0.1625 6 0.1808 8 0.2984 6 0.3352 8 0.1476 6 0.2913 4 0.3149 6 0.0694 6 0.0919 6 0.2353 6 0.0075 5 0.3396 6 0.2411 6 0.4706 7 0.03 5 0.1981 7 0.0825 7 0.4094 7 0.4047 6 0.3065 6 0.2685 7 0.1989 6 0.2913 6 0.4312 6)
Average genome size in population (length): 69.984
Average program size in population (points): 70.984
Average percent parens in population: 0.014
Minimum age in population: 119.7602632221528
Maximum age in population: 125.4800195710244
Average age in population: 123.5519808164425
Median age in population: 123.6015842201302
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.124
Error (vector) diversity:			 0.129
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 119765766
--- Timings ---
Current time: 1529615173487 milliseconds
Total Time:         289.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.8 seconds, 43.1%
Fitness Testing:    129.5 seconds, 44.7%
Report:              35.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 74} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_shove} {:instruction integer_dup} {:instruction 72} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_cos float_cos float_sin in1 integer_max integer_fromfloat float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_rot print_float 72 float_mod integer_dup 74 float_mod integer_shove print_float 72 float_mod float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove print_float 72 float_shove integer_dup 72 72 float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2516.750583700001
Median total errors in population: 203.4302
Error averages by case: (98.50031559999861 6.948 89.67760389999926 8.582 87.81135669999905 9.409 97.51923020000137 7.732 88.42693229999932 9.469 83.8161704999994 8.441 91.55943740000122 6.785 95.55240149999976 8.559 92.31930100000086 7.781 90.76342230000046 7.755 94.6364338000016 8.482 93.08237930000101 5.93 93.69774049999859 8.636 90.82367010000102 9.574 89.70019059999933 10.174 87.50173109999903 6.659 92.98261739999865 8.665 96.00887070000107 9.377 94.43926360000113 8.614 95.67608630000015 7.683 94.78449409999892 8.669 92.84139329999927 8.584 92.58454419999858 7.814 91.8689273999994 8.554 92.70506989999882 8.595)
Error minima by case: (0.0028 5 0.1615 6 0.1815 7 0.2974 5 0.3359 8 0.1483 6 0.2913 4 0.2904 6 0.0687 6 0.0919 6 0.2198 6 0.0065 5 0.3396 7 0.2402 7 0.4713 8 0.029 5 0.1956 7 0.0825 7 0.4084 7 0.4047 6 0.3065 6 0.2685 7 0.1989 6 0.2914 6 0.4312 6)
Average genome size in population (length): 70.07
Average program size in population (points): 71.07
Average percent parens in population: 0.014
Minimum age in population: 120.7602632221528
Maximum age in population: 127.2012943748
Average age in population: 124.9952862184005
Median age in population: 125.0761664991386
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.144
Error (vector) diversity:			 0.151
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 121517591
--- Timings ---
Current time: 1529615177288 milliseconds
Total Time:         293.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.3 seconds, 43.0%
Fitness Testing:    131.4 seconds, 44.7%
Report:              35.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 74} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_shove} {:instruction integer_dup} {:instruction 72} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank integer_div float_cos float_cos float_sin in1 integer_max integer_fromfloat float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_rot print_float 72 float_mod integer_dup 74 float_mod integer_shove print_float 72 float_mod float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove print_float 72 float_shove integer_dup 72 72 float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2836.885950000001
Median total errors in population: 203.4302
Error averages by case: (110.67686679999854 6.922 102.41884589999896 8.576 100.5455257999988 9.392 109.10160560000129 7.732 101.02211999999899 9.451 96.31804609999935 8.461 104.55813040000132 6.781 107.73700349999939 8.543 105.45629460000099 7.802 102.5368602000005 7.73 106.9120249000017 8.474 103.88392420000129 5.922 106.36201339999809 8.644 104.13557200000105 9.557 101.96885799999896 10.157 100.86572049999896 6.651 105.70554929999865 8.671 109.10124940000149 9.371 106.99180020000118 8.614 108.88146540000018 7.676 110.03969979999864 8.655 106.27921459999888 8.597 105.5922402999985 7.807 104.33817149999938 8.557 108.11414759999847 8.6)
Error minima by case: (0.0033 6 0.1625 6 0.7666 6 0.2984 5 0.6123 9 0.7999 7 0.2913 4 0.3149 7 0.0694 6 0.8872 6 0.2353 6 0.0075 5 0.6395 7 0.2411 7 0.4768 7 0.03 5 0.1981 7 0.0825 7 0.4094 7 0.4047 6 0.6693 6 0.2685 7 0.1989 7 0.6878 5 0.5479 6)
Average genome size in population (length): 70.194
Average program size in population (points): 71.194
Average percent parens in population: 0.014
Minimum age in population: 123.6748161497215
Maximum age in population: 128.3260451675387
Average age in population: 126.4914798428925
Median age in population: 126.5389300358428
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.126
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 123272616
--- Timings ---
Current time: 1529615180910 milliseconds
Total Time:         297.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.6 seconds, 42.9%
Fitness Testing:    133.1 seconds, 44.8%
Report:              36.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 74} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_shove} {:instruction integer_dup} {:instruction 72} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_cos float_cos float_sin in1 integer_max integer_fromfloat float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_rot print_float 72 float_mod integer_dup 74 float_mod integer_shove print_float 72 float_mod float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove print_float 72 float_shove integer_dup 72 72 float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2966.708823300001
Median total errors in population: 203.4302
Error averages by case: (116.87835869999883 6.947 108.30620639999951 8.559 104.40098809999921 9.426 116.55872470000139 7.758 104.30503739999945 9.515 98.77525749999947 8.52 107.26761530000127 6.825 114.63551859999984 8.489 107.97908470000085 7.757 107.70254720000038 7.712 113.95808480000167 8.402 111.73814600000084 5.97 112.8797223999986 8.579 107.11349260000102 9.562 106.23171789999948 10.146 104.98068699999908 6.645 112.2814066999987 8.644 115.68991030000093 9.364 114.14268320000114 8.628 115.6009579000002 7.727 113.24685679999901 8.634 113.53340089999931 8.562 108.20677109999858 7.811 111.49988789999946 8.562 111.47275919999885 8.579)
Error minima by case: (0.0028 6 0.1623 5 0.1815 7 0.2981 6 0.3359 7 0.1483 6 0.2913 4 0.3146 5 0.0689 6 0.0912 6 0.2351 6 0.0072 5 0.3389 6 0.2409 7 0.4713 7 0.0297 5 0.1978 6 0.0825 7 0.4091 7 0.4047 6 0.3058 6 0.2685 6 0.1989 6 0.2906 6 0.4305 6)
Average genome size in population (length): 69.534
Average program size in population (points): 70.534
Average percent parens in population: 0.014
Minimum age in population: 124.6748373314629
Maximum age in population: 129.7219024442172
Average age in population: 127.9607643636819
Median age in population: 128.0159004497323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.142
Error (vector) diversity:			 0.157
Behavioral diversity:				 0.157
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 125011216
--- Timings ---
Current time: 1529615184887 milliseconds
Total Time:         301.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       129.0 seconds, 42.8%
Fitness Testing:    135.2 seconds, 44.9%
Report:              36.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction 0.5140252568782415} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction float_swap} {:instruction 72} {:instruction float_shove} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_shove} {:instruction integer_dup} {:instruction 72} {:instruction 74} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_cos float_cos float_sin in1 integer_max integer_fromfloat float_shove float_shove float_swap integer_shove integer_swap float_mult 0.5140252568782415 in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_rot print_float 72 float_mod integer_dup 73 float_mod integer_shove print_float 72 float_mod float_swap 72 float_shove integer_yankdup 72 float_mod integer_shove print_float 72 float_shove integer_dup 72 74 float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2548.7607578000006
Median total errors in population: 203.4302
Error averages by case: (101.58216109999887 6.917 89.56161099999952 8.547 87.78718469999949 9.389 99.87396900000134 7.877 87.47198199999987 9.582 83.79185029999944 8.632 91.23564450000129 6.927 97.96347730000015 8.324 91.9410082000008 7.744 91.01708160000041 7.534 97.06647490000155 8.27 96.76711100000051 6.072 95.13266759999877 8.446 90.9731502000012 9.521 90.70136909999981 9.999 88.23902659999935 6.629 94.50685329999864 8.598 98.41401720000073 9.332 95.8281331000013 8.558 98.21002470000022 7.678 98.39620399999897 8.633 94.44324669999958 8.375 92.33757089999857 7.774 92.93706219999974 8.479 96.19387659999902 8.551)
Error minima by case: (0.0091 5 0.1571 6 0.1815 7 0.2929 5 0.3359 8 0.1483 6 0.2913 4 0.3094 6 0.0694 6 0.0764 6 0.2299 6 0.002 5 0.3241 6 0.2357 7 0.4713 8 0.0168 5 0.1927 7 0.0825 7 0.4039 7 0.4047 6 0.291 6 0.2685 6 0.1989 7 0.2758 6 0.4156 6)
Average genome size in population (length): 69.756
Average program size in population (points): 70.756
Average percent parens in population: 0.014
Minimum age in population: 125.6748373314629
Maximum age in population: 131.5797594416337
Average age in population: 129.5173926627034
Median age in population: 129.5942105997631
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.15
Error (vector) diversity:			 0.163
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 126755341
--- Timings ---
Current time: 1529615188607 milliseconds
Total Time:         304.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.4 seconds, 42.8%
Fitness Testing:    137.0 seconds, 44.9%
Report:              37.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_sub} {:instruction print_integer} {:instruction float_frominteger} {:instruction float_yank} {:instruction integer_shove} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_yank} {:instruction in2} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_sub print_integer float_frominteger float_yank integer_shove float_mult float_dup integer_fromfloat print_integer float_dup integer_fromfloat print_integer integer_pop float_dup float_cos float_sin in1 float_sin in1 integer_max integer_fromfloat float_flush float_yank integer_mult integer_shove float_yank in2 tag_float_838 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float float_rot print_float float_yankdup float_mod float_shove float_div print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2854.3038867000005
Median total errors in population: 203.4302
Error averages by case: (110.88144099999866 6.943 102.48193959999946 8.633 102.16820839999951 9.469 109.96358510000152 8.329 102.53099319999947 9.979 99.21025409999945 9.111 105.9875896000015 7.414 108.34985130000035 8.061 106.52819350000092 7.835 103.73527270000041 7.216 107.4847549000018 7.985 106.95996640000017 6.559 106.24539679999862 8.161 105.03668390000149 9.589 104.27141409999962 9.715 102.80118690000023 6.705 105.52827099999851 8.65 109.25233490000099 9.432 107.07441560000163 8.645 108.9507294000002 7.748 107.3041088999991 8.688 106.45592009999982 8.057 106.8935369999983 7.862 104.90462990000071 8.584 105.35820839999901 8.575)
Error minima by case: (0.0038 6 0.1605 6 0.1815 7 0.2964 6 0.3359 8 0.1483 6 0.2913 4 0.3129 6 0.0687 6 0.0919 6 0.2333 6 0.0055 5 0.3396 7 0.2392 8 0.4713 7 0.028 5 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2685 6 0.1989 6 0.2913 6 0.4311 6)
Average genome size in population (length): 71.355
Average program size in population (points): 72.355
Average percent parens in population: 0.014
Minimum age in population: 128.2377635691175
Maximum age in population: 133.0680341826219
Average age in population: 131.0625386176021
Median age in population: 131.106113685448
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.145
Error (vector) diversity:			 0.152
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 128539241
--- Timings ---
Current time: 1529615192253 milliseconds
Total Time:         308.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.8 seconds, 42.7%
Fitness Testing:    138.8 seconds, 45.0%
Report:              37.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction integer_flush} {:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_min} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 74} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer integer_flush float_sub print_integer float_inc float_yank float_yank float_min float_cos float_sin in1 integer_max integer_fromfloat float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_rot print_float 72 float_mod integer_dup 74 float_mod integer_shove print_float 72 float_mod float_swap 72 float_mod integer_yankdup integer_inc 72 float_mod 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2572.5493764000003
Median total errors in population: 202.43079999999998
Error averages by case: (101.29773069999837 6.899 92.30318119999944 8.58 89.48627449999998 9.44 100.69862470000157 8.545 89.4610500999992 10.211 86.13936039999957 9.382 92.54285790000148 7.63 97.93547690000055 7.774 93.81144300000085 7.763 92.94481910000037 6.847 97.0487180000015 7.703 96.45551339999932 6.816 96.08514779999831 7.851 92.61680110000194 9.569 91.36699949999947 9.416 89.78655620000099 6.698 95.45366409999858 8.589 99.74750790000107 9.389 97.3561342000021 8.604 99.5831478000002 7.707 95.34211469999876 8.629 96.56597470000055 7.708 93.80902199999838 7.817 94.88961150000145 8.534 93.18864499999911 8.532)
Error minima by case: (0.0033 6 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 6 0.0687 6 0.0919 5 0.2333 6 0.0055 5 0.3396 6 0.2392 4 0.4713 7 0.028 5 0.1961 6 0.0825 7 0.4074 6 0.4047 6 0.3065 6 0.2686 6 0.1989 5 0.2913 7 0.4311 6)
Average genome size in population (length): 72.606
Average program size in population (points): 73.606
Average percent parens in population: 0.014
Minimum age in population: 129.8950550099968
Maximum age in population: 134.5557920698385
Average age in population: 132.5820508537506
Median age in population: 132.6213724869888
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.14
Error (vector) diversity:			 0.145
Behavioral diversity:				 0.145
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 130354416
--- Timings ---
Current time: 1529615195926 milliseconds
Total Time:         312.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.2 seconds, 42.7%
Fitness Testing:    140.7 seconds, 45.0%
Report:              38.2 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction float_shove} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 74} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 71} {:instruction float_mod} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction float_swap} {:instruction float_shove} {:instruction integer_dup} {:instruction 72} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_cos float_cos float_sin in1 float_shove integer_fromfloat float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_rot print_float 72 float_mod integer_dup 74 float_mod integer_shove print_float 71 float_mod float_swap 72 float_mod integer_yankdup float_inc float_mod integer_shove print_float float_swap float_shove integer_dup 72 72 float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2287.6491055000006
Median total errors in population: 202.43079999999998
Error averages by case: (86.09379739999902 6.799 80.33375929999946 8.521 81.59250469999938 9.39 85.76469220000116 8.508 82.18450920000011 10.175 79.11073139999951 9.372 83.91740480000118 7.566 84.29392290000054 7.69 84.22506300000082 7.706 80.98213000000037 6.801 83.67888720000143 7.606 82.46474460000002 6.763 83.30256179999922 7.784 83.38346060000104 9.5 83.07884310000003 9.407 81.63504980000081 6.659 82.70415489999874 8.48 85.48268450000035 9.345 83.60362630000124 8.538 85.27967730000027 7.703 85.62311769999957 8.586 83.1447530999998 7.64 84.60870299999866 7.74 81.93743040000116 8.467 84.01389629999916 8.463)
Error minima by case: (0.0033 5 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 6 0.0767 6 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2392 8 0.4713 7 0.028 5 0.1961 6 0.0825 6 0.4074 6 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 6 0.4311 6)
Average genome size in population (length): 72.77
Average program size in population (points): 73.77
Average percent parens in population: 0.014
Minimum age in population: 131.4292819917918
Maximum age in population: 135.8049534921782
Average age in population: 134.0056634614873
Median age in population: 134.091273799519
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.134
Error (vector) diversity:			 0.144
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 132173691
--- Timings ---
Current time: 1529615199736 milliseconds
Total Time:         316.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.7 seconds, 42.6%
Fitness Testing:    142.5 seconds, 45.1%
Report:              38.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_sub} {:instruction float_sub} {:instruction float_cos} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_yankdup} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 74} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 71} {:instruction float_mod} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_sub float_sub float_cos float_stackdepth float_dup_items integer_fromfloat integer_fromfloat print_integer float_yankdup in1 integer_max integer_fromfloat float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_rot print_float 72 float_mod integer_dup 74 float_mod integer_shove print_float 71 float_mod float_swap 72 float_mod print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2340.025608900001
Median total errors in population: 202.43079999999998
Error averages by case: (89.39604799999952 6.845 82.74049059999943 8.548 82.88792249999956 9.382 88.43412600000111 8.536 83.6043592999999 10.169 81.82198359999954 9.314 85.56595480000114 7.617 86.7487226000006 7.73 86.29975960000084 7.756 84.05066410000039 6.827 85.92232210000144 7.639 84.92196929999992 6.761 85.4031980999993 7.834 84.80842320000107 9.544 84.1217285999999 9.351 82.67442790000067 6.645 84.72434539999878 8.545 88.15293980000033 9.347 85.77234340000116 8.545 87.91751120000023 7.668 87.29763629999962 8.617 85.26774579999989 7.65 86.53300759999863 7.779 84.04259460000111 8.523 85.22738449999916 8.516)
Error minima by case: (0.0033 6 0.1512 6 0.1816 8 0.287 6 0.3359 8 0.1483 7 0.2913 5 0.3035 6 0.0673 6 0.0919 6 0.224 6 0.0039 5 0.3396 6 0.2298 8 0.4713 7 0.0186 5 0.1868 6 0.0825 8 0.398 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 73.24
Average program size in population (points): 74.24
Average percent parens in population: 0.014
Minimum age in population: 132.4292819917918
Maximum age in population: 137.4969963945177
Average age in population: 135.4014449307921
Median age in population: 135.4152781571275
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.124
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 134004691
--- Timings ---
Current time: 1529615203613 milliseconds
Total Time:         319.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.1 seconds, 42.6%
Fitness Testing:    144.4 seconds, 45.1%
Report:              39.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction print_float} {:instruction float_rot} {:instruction float_shove} {:instruction integer_dup} {:instruction 72} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_sub print_integer float_inc float_yank float_yank float_cos float_cos float_sin in1 integer_max integer_fromfloat float_sin in1 integer_max integer_fromfloat float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_rot print_float print_float float_rot float_shove integer_dup 72 72 float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2241.2237048000006
Median total errors in population: 202.43079999999998
Error averages by case: (85.16068159999881 6.844 78.86612339999951 8.541 78.58097729999996 9.408 84.05097170000133 8.542 79.8061613999993 10.19 78.03247979999952 9.322 82.44540030000131 7.627 82.43563310000056 7.721 83.03546880000083 7.742 80.63823950000041 6.817 81.5335806000014 7.647 80.8654754999995 6.793 81.31246349999859 7.793 81.3467124000017 9.545 80.03125649999956 9.384 78.24571980000083 6.693 80.58042609999868 8.532 84.07836680000091 9.35 81.13112460000177 8.584 83.71873920000021 7.68 84.19642709999896 8.619 80.74636490000032 7.625 83.39030279999847 7.792 79.38770010000123 8.504 81.80190799999919 8.51)
Error minima by case: (0.0033 6 0.1403 6 0.1816 7 0.2761 6 0.3359 8 0.1483 7 0.2913 5 0.2926 6 0.0564 6 0.0919 6 0.2131 6 0.0055 5 0.3396 6 0.2189 8 0.4713 7 0.0077 5 0.1758 7 0.0825 7 0.3871 7 0.4047 6 0.3065 5 0.2686 6 0.1989 6 0.2913 6 0.4311 6)
Average genome size in population (length): 72.979
Average program size in population (points): 73.979
Average percent parens in population: 0.014
Minimum age in population: 134.0100379564886
Maximum age in population: 138.9263673991943
Average age in population: 136.7987789123355
Median age in population: 136.8450451558975
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.128
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 135829166
--- Timings ---
Current time: 1529615207346 milliseconds
Total Time:         323.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.6 seconds, 42.5%
Fitness Testing:    146.2 seconds, 45.2%
Report:              39.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction float_max} {:instruction 72} {:instruction float_mod} {:instruction 72} {:instruction 0} {:instruction integer_dup} {:instruction 72} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc integer_dup_times integer_div float_cos float_cos float_sin in1 integer_max integer_fromfloat float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 float_shove integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_rot float_max 72 float_mod 72 0 integer_dup 72 72 float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div integer_rot float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2508.8621780000003
Median total errors in population: 202.43079999999998
Error averages by case: (97.26734569999897 6.794 91.57417519999944 8.528 87.65381589999981 9.394 96.35338500000141 8.517 88.36252139999945 10.154 87.01606039999955 9.358 90.49770530000129 7.574 94.66259740000056 7.668 91.11727770000081 7.688 93.0108099000004 6.795 93.85758550000155 7.596 93.50392599999977 6.743 93.69176989999882 7.773 89.6731091000015 9.483 88.71716719999972 9.378 87.62607150000095 6.621 93.02900919999857 8.512 95.4037823000006 9.351 93.73258040000157 8.52 95.19642900000024 7.7 93.57407789999917 8.564 92.92873420000006 7.642 91.40590489999853 7.737 92.20839780000139 8.45 91.80093919999916 8.457)
Error minima by case: (0.0033 5 0.1607 6 0.7666 7 0.2966 6 0.6123 8 0.7999 8 0.2913 5 0.3131 6 0.0769 6 0.8854 6 0.2335 6 0.0057 5 0.6377 6 0.2394 8 0.4768 8 0.0282 5 0.1963 7 0.0825 7 0.4076 7 0.4047 6 0.6708 6 0.2686 6 0.1989 7 0.686 6 0.5462 6)
Average genome size in population (length): 73.335
Average program size in population (points): 74.335
Average percent parens in population: 0.014
Minimum age in population: 135.0100379564886
Maximum age in population: 140.2176922414085
Average age in population: 138.240465842655
Median age in population: 138.2665757210309
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.13
Error (vector) diversity:			 0.135
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 137662541
--- Timings ---
Current time: 1529615211076 milliseconds
Total Time:         327.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.9 seconds, 42.4%
Fitness Testing:    148.1 seconds, 45.2%
Report:              40.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_sub} {:instruction print_integer} {:instruction float_frominteger} {:instruction float_yank} {:instruction integer_shove} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_cos} {:instruction float_yank} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction print_float} {:instruction integer_add} {:instruction float_div} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_yank} {:instruction in2} {:instruction print_float} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_mod} {:instruction print_float} {:instruction float_rot} {:instruction float_yankdup} {:instruction integer_dup} {:instruction 72} {:instruction 72} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction integer_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_sub print_integer float_frominteger float_yank integer_shove float_yank float_mult float_dup integer_fromfloat print_integer float_cos float_yank float_cos float_sin in1 integer_max integer_fromfloat float_inc print_float integer_add float_div integer_sub float_div integer_mod float_flush float_yank integer_mult integer_shove float_yank in2 print_float integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_mod print_float float_rot float_yankdup integer_dup 72 72 integer_dup_times integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 integer_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2707.996012900001
Median total errors in population: 202.43079999999998
Error averages by case: (105.46543069999868 6.968 96.06809249999947 8.641 96.09544620000003 9.471 104.97552330000141 8.612 96.62675869999921 10.232 92.32369439999947 9.409 99.48725440000138 7.732 102.6512653000006 7.794 100.07270440000083 7.867 96.99140550000041 6.96 101.7529813000014 7.766 100.10545149999949 6.885 100.46932339999823 7.924 98.94617700000204 9.637 98.12248349999925 9.48 96.16498530000098 6.776 99.77138219999864 8.636 104.33737650000116 9.401 101.59653250000204 8.665 104.02831000000018 7.761 102.94729219999863 8.745 100.99184120000064 7.73 100.36833829999847 7.921 98.81539180000145 8.587 100.59057079999921 8.63)
Error minima by case: (0.0033 6 0.1605 6 0.0 6 0.2964 6 0.0 6 0.0 6 0.2913 5 0.3128 6 0.0694 6 0.1121 6 0.2333 6 0.0054 5 0.3598 6 0.2391 7 0.0 6 0.0279 5 0.1961 7 0.0 6 0.4073 7 0.0 6 0.3267 6 0.0 6 0.1989 6 0.2913 7 0.4513 6)
Average genome size in population (length): 73.209
Average program size in population (points): 74.209
Average percent parens in population: 0.014
Minimum age in population: 136.0100379564886
Maximum age in population: 141.7814483598061
Average age in population: 139.6882121026564
Median age in population: 139.72461102415
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.153
Error (vector) diversity:			 0.16
Behavioral diversity:				 0.16
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 139492791
--- Timings ---
Current time: 1529615214821 milliseconds
Total Time:         331.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.3 seconds, 42.4%
Fitness Testing:    150.0 seconds, 45.3%
Report:              40.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction integer_swap} {:instruction in1} {:instruction float_sin} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mod} {:instruction float_shove} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_yank} {:instruction in2} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sub} {:instruction print_float} {:instruction 72} {:instruction float_shove} {:instruction integer_dup} {:instruction integer_min} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_mult float_dup float_dup integer_fromfloat print_integer float_dup integer_fromfloat print_integer integer_pop float_dup float_cos integer_swap in1 float_sin in1 integer_fromfloat float_flush integer_swap integer_sub float_div integer_mod float_shove integer_max integer_fromfloat float_flush float_yank integer_mult integer_shove float_yank in2 tag_float_838 integer_add float_mod float_frominteger float_shove float_stackdepth float_sub print_float 72 float_shove integer_dup integer_min 72 float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2315.6927570000007
Median total errors in population: 202.43079999999998
Error averages by case: (88.3237161999991 6.815 81.09883439999948 8.563 82.89332409999945 9.397 87.67567290000127 8.535 83.34398169999987 10.155 81.1034650999995 9.321 85.62287520000125 7.584 84.84263700000055 7.712 85.90236970000086 7.738 82.41454290000038 6.816 84.73655950000136 7.631 83.64392290000006 6.776 83.32370069999929 7.777 85.02891280000146 9.532 84.40092269999958 9.38 81.95038770000077 6.669 82.60666109999882 8.539 86.48732870000079 9.351 84.01668880000155 8.571 85.9219445000002 7.665 87.70949449999915 8.599 83.03027559999975 7.611 86.03170549999862 7.781 82.60792880000122 8.484 85.48590399999915 8.487)
Error minima by case: (0.0038 5 0.1607 5 0.1816 8 0.2966 6 0.3359 8 0.1483 7 0.2913 5 0.3131 6 0.0769 6 0.0919 6 0.2335 6 0.0057 5 0.3396 6 0.2394 5 0.4713 7 0.0282 5 0.1963 6 0.0825 7 0.4076 6 0.4047 6 0.3065 6 0.2686 6 0.1989 5 0.2913 6 0.4311 6)
Average genome size in population (length): 73.166
Average program size in population (points): 74.166
Average percent parens in population: 0.014
Minimum age in population: 138.219972649182
Maximum age in population: 143.2421737662379
Average age in population: 141.0763451173794
Median age in population: 141.1060499288088
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.129
Error (vector) diversity:			 0.141
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 141321941
--- Timings ---
Current time: 1529615218729 milliseconds
Total Time:         335.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.8 seconds, 42.3%
Fitness Testing:    151.9 seconds, 45.3%
Report:              41.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_yank} {:instruction in2} {:instruction print_float} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_rot} {:instruction float_shove} {:instruction integer_dup} {:instruction 72} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_cos float_cos float_sin in1 integer_max integer_fromfloat float_shove float_shove float_swap integer_shove integer_swap float_mult integer_mod float_flush float_yank integer_mult integer_shove float_yank in2 print_float integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float float_rot float_shove integer_dup 72 72 float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2429.4941819000005
Median total errors in population: 202.43079999999998
Error averages by case: (93.43593479999875 6.822 84.8862254999995 8.5 86.60548759999972 9.386 92.66258500000113 8.496 86.80618959999968 10.152 82.92222439999959 9.355 88.8476594000011 7.561 91.18168060000042 7.652 89.28425980000075 7.692 85.56455680000028 6.81 90.29231140000127 7.584 88.84342409999978 6.765 88.95432319999904 7.773 87.91969310000124 9.495 88.5387945999997 9.393 86.08303930000068 6.637 88.3203591999989 8.475 91.12080780000095 9.322 90.34306590000135 8.542 90.94543170000023 7.715 93.28053139999896 8.567 88.6392283000001 7.641 89.64999819999873 7.749 87.88573370000107 8.442 91.50963649999923 8.445)
Error minima by case: (0.0028 6 0.1605 5 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 4 0.3128 6 0.0767 6 0.0919 6 0.2333 6 0.0054 5 0.3396 5 0.2391 7 0.4713 7 0.0279 5 0.1961 7 0.0825 7 0.4073 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 5)
Average genome size in population (length): 73.163
Average program size in population (points): 74.163
Average percent parens in population: 0.014
Minimum age in population: 140.1841969231054
Maximum age in population: 144.6496596485962
Average age in population: 142.5592036009008
Median age in population: 142.589048341692
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.143
Error (vector) diversity:			 0.154
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 143151091
--- Timings ---
Current time: 1529615222364 milliseconds
Total Time:         338.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.2 seconds, 42.3%
Fitness Testing:    153.8 seconds, 45.4%
Report:              41.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_dup} {:instruction 74} {:instruction integer_dup} {:instruction 74} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction float_mod} {:instruction float_swap} {:instruction 71} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction 72} {:instruction float_mod} {:instruction 74} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_pop print_integer float_inc float_yank float_mult float_dup integer_fromfloat print_integer print_integer float_inc float_yank integer_div float_cos float_cos float_sin in1 integer_max integer_fromfloat float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove integer_dup 74 integer_dup 74 float_mod integer_shove print_float integer_div float_mod float_swap 71 float_mod integer_yankdup 72 72 float_mod 74 float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2491.589242400001
Median total errors in population: 202.43079999999998
Error averages by case: (95.82858709999874 6.918 89.08588929999947 8.608 88.26533329999985 9.482 94.90916860000112 8.596 89.24267799999963 10.227 87.79848479999946 9.41 91.06481940000103 7.685 93.34264480000057 7.775 91.44463860000086 7.808 90.61528040000043 6.914 92.47399300000123 7.697 91.31004959999952 6.858 91.92197249999887 7.875 90.08623900000136 9.588 89.56733589999978 9.46 87.80944950000072 6.729 91.20623929999891 8.605 94.63043920000118 9.45 92.02780170000149 8.628 94.3402409000002 7.807 92.85095859999919 8.675 91.56846520000038 7.739 91.86385449999881 7.848 90.20136450000106 8.549 90.65231469999921 8.55)
Error minima by case: (0.0023 3 0.1579 1 0.1816 7 0.2937 2 0.3359 7 0.1483 7 0.2913 3 0.3102 3 0.074 3 0.0912 2 0.2307 2 0.0028 2 0.3389 3 0.2365 3 0.4713 7 0.0253 2 0.1934 3 0.0825 7 0.4047 2 0.4047 6 0.3058 2 0.2466 6 0.1989 2 0.2906 2 0.4305 2)
Average genome size in population (length): 72.488
Average program size in population (points): 73.488
Average percent parens in population: 0.014
Minimum age in population: 141.5768301139389
Maximum age in population: 146.0584295300918
Average age in population: 143.9718873014847
Median age in population: 144.0338716120303
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.147
Error (vector) diversity:			 0.156
Behavioral diversity:				 0.156
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 144963366
--- Timings ---
Current time: 1529615225991 milliseconds
Total Time:         342.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.5 seconds, 42.2%
Fitness Testing:    155.6 seconds, 45.5%
Report:              42.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction float_sin} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_dup_times} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 74} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 74} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction float_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_shove} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_cos float_cos float_sin float_yank float_cos float_cos float_sin in1 integer_max integer_fromfloat float_mult float_dup_times in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_rot print_float 72 float_mod integer_dup 74 float_mod integer_shove print_float print_float float_rot print_float 72 float_mod integer_dup 74 float_mod integer_shove print_float 72 float_mod float_swap integer_dup float_mod integer_yankdup 72 float_mod integer_shove print_float 72 float_shove float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop float_dup_items float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2237.020464300001
Median total errors in population: 202.43079999999998
Error averages by case: (84.84613939999923 6.893 79.97765549999947 8.614 78.11082029999933 9.478 84.82111120000108 8.586 78.78274760000019 10.215 77.05752679999951 9.426 80.79014130000108 7.658 83.22142780000057 7.755 80.5672671000008 7.82 81.21107360000045 6.911 82.71458670000133 7.655 81.2470885999999 6.843 81.97454489999924 7.835 80.07348130000085 9.545 78.7644995 9.496 76.37552740000072 6.745 80.95164709999882 8.568 83.48385270000036 9.442 82.42449350000115 8.617 83.26678980000014 7.809 83.65950949999953 8.656 80.51827329999972 7.74 81.75532179999871 7.837 81.04102000000111 8.561 82.16191759999913 8.517)
Error minima by case: (0.0033 5 0.1567 6 0.1816 8 0.2926 6 0.3359 8 0.1483 6 0.2913 5 0.3091 6 0.0729 6 0.0919 6 0.2295 6 0.0017 5 0.3396 6 0.2354 8 0.4713 8 0.0242 5 0.1923 6 0.0825 7 0.4036 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 72.454
Average program size in population (points): 73.454
Average percent parens in population: 0.014
Minimum age in population: 142.7583090570158
Maximum age in population: 147.7132816185649
Average age in population: 145.3983817064661
Median age in population: 145.4716405153143
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.148
Error (vector) diversity:			 0.153
Behavioral diversity:				 0.153
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 146774866
--- Timings ---
Current time: 1529615229854 milliseconds
Total Time:         346.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.0 seconds, 42.2%
Fitness Testing:    157.5 seconds, 45.5%
Report:              42.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction integer_min} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction float_sin} {:instruction float_tan} {:instruction float_cos} {:instruction float_cos} {:instruction float_yank} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction 0.5140252568782415} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction 74} {:instruction float_mod} {:instruction integer_shove} {:instruction float_dup_times} {:instruction integer_dup} {:instruction 72} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction integer_pop} {:instruction print_integer})
Best program: (float_sub print_integer integer_min float_yank float_yank float_cos float_cos float_sin float_tan float_cos float_cos float_yank in1 integer_max integer_fromfloat float_shove float_shove float_swap integer_shove integer_swap float_mult 0.5140252568782415 in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_rot print_float 72 74 float_mod integer_shove float_dup_times integer_dup 72 72 float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max integer_pop print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2692.840214500001
Median total errors in population: 202.43079999999998
Error averages by case: (102.996548499999 6.909 95.86722549999945 8.6 97.24647279999971 9.475 101.92870710000132 8.582 97.71277009999966 10.216 95.62301009999945 9.436 100.56370670000132 7.657 100.4057974000006 7.746 101.12276210000088 7.755 97.10139450000044 6.885 99.7720596000014 7.663 99.31734039999972 6.844 98.95156199999902 7.865 99.52594620000141 9.556 99.01076949999974 9.446 97.60457750000081 6.696 98.30405909999874 8.599 101.73421560000075 9.393 99.45313160000141 8.624 101.49802980000018 7.761 101.93154429999913 8.674 99.10569150000013 7.731 101.43476509999854 7.824 97.68877470000128 8.548 99.90435279999909 8.55)
Error minima by case: (0.0023 5 0.1481 6 0.7666 7 0.2839 6 0.1033 8 0.2317 8 0.2913 5 0.3004 6 0.0642 6 0.8727 6 0.2209 6 0.0062 5 0.625 6 0.2267 8 0.4768 8 0.0155 5 0.1836 7 0.0825 7 0.3949 7 0.1067 6 0.6581 6 0.2476 6 0.1989 6 0.6733 7 0.5335 6)
Average genome size in population (length): 72.759
Average program size in population (points): 73.759
Average percent parens in population: 0.014
Minimum age in population: 143.7583090570158
Maximum age in population: 148.9304070880718
Average age in population: 146.7712613725248
Median age in population: 146.7921462267335
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.133
Error (vector) diversity:			 0.142
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 148594066
--- Timings ---
Current time: 1529615233470 milliseconds
Total Time:         349.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.3 seconds, 42.1%
Fitness Testing:    159.4 seconds, 45.6%
Report:              43.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction integer_dup} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_yankdup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_max} {:instruction float_mod} {:instruction integer_dup} {:instruction 74} {:instruction float_mod} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 74} {:instruction float_mod} {:instruction float_dup_times} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_dup_times} {:instruction integer_dup} {:instruction 72} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction integer_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank integer_dup float_cos float_sin in1 integer_max integer_fromfloat float_shove float_shove float_swap integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_yankdup print_float float_frominteger print_float integer_max float_mod integer_dup 74 float_mod print_float 72 float_mod integer_dup 74 float_mod float_dup_times print_float 72 float_mod float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove print_float 72 float_dup_times integer_dup 72 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 integer_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2544.3184571000006
Median total errors in population: 202.43079999999998
Error averages by case: (97.53197689999854 6.94 90.71623539999949 8.624 90.63197220000006 9.455 96.7961500000013 8.588 91.77398399999926 10.19 89.3989571999995 9.368 93.5605498000012 7.655 95.09127130000057 7.784 93.89529100000082 7.819 92.37914840000039 6.938 94.1679353000013 7.672 92.44556919999938 6.876 93.95607519999852 7.882 92.57322740000158 9.577 92.06689889999942 9.425 90.11717310000074 6.721 93.18283759999872 8.578 96.12580440000121 9.4 93.52742420000176 8.627 95.75458460000017 7.779 97.42441809999872 8.674 92.95470840000046 7.718 94.3557184999986 7.849 91.45059020000126 8.544 95.21395579999917 8.543)
Error minima by case: (6.0E-4 6 0.1605 6 0.183 7 0.2964 6 0.3373 8 0.1497 7 0.2913 5 0.3129 6 0.0767 6 0.0905 6 0.2333 6 0.0055 5 0.3382 6 0.2392 8 0.4727 8 0.028 5 0.1961 6 0.0825 6 0.4074 6 0.4047 6 0.3051 6 0.2686 6 0.1989 6 0.2899 7 0.4297 6)
Average genome size in population (length): 72.967
Average program size in population (points): 73.967
Average percent parens in population: 0.014
Minimum age in population: 145.4261866943659
Maximum age in population: 150.1806894990962
Average age in population: 148.1738241053697
Median age in population: 148.2288150290318
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.152
Error (vector) diversity:			 0.162
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 150418341
--- Timings ---
Current time: 1529615237175 milliseconds
Total Time:         353.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.7 seconds, 42.1%
Fitness Testing:    161.2 seconds, 45.6%
Report:              43.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_yank} {:instruction print_integer} {:instruction float_sub} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_div} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_sin} {:instruction in1} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_flush} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_min} {:instruction integer_mod} {:instruction in2} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction in2} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_dup} {:instruction 72} {:instruction float_dup_times} {:instruction integer_dup} {:instruction 72} {:instruction 72} {:instruction float_add} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_inc float_yank print_integer float_sub float_stackdepth integer_flush integer_div float_yank float_mult float_dup integer_fromfloat float_dup_items float_dup float_sin in1 float_mod integer_fromfloat float_flush float_flush integer_yank integer_mult float_min integer_mod in2 tag_float_838 integer_add float_mod float_frominteger float_shove float_stackdepth in2 float_shove integer_stackdepth print_float float_rot 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod integer_dup 72 float_dup_times integer_dup 72 72 float_add integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2232.070233500001
Median total errors in population: 202.43079999999998
Error averages by case: (84.37005599999941 6.808 78.51446939999947 8.532 78.15203299999943 9.394 83.61427370000133 8.493 78.8917898999999 10.134 77.55670899999957 9.323 81.6210646000012 7.589 82.33741050000047 7.664 81.71922560000084 7.719 80.02813690000033 6.817 81.5470570000014 7.584 81.15052690000003 6.759 81.11537899999917 7.771 80.59901260000106 9.52 79.4755867999999 9.372 78.82479430000079 6.673 80.42551229999873 8.478 83.98400100000029 9.335 81.0674035000011 8.528 83.73670880000022 7.723 83.23054469999961 8.609 81.66052379999978 7.673 82.22704509999852 7.796 79.56069520000132 8.447 81.4552738999991 8.464)
Error minima by case: (0.0033 5 0.1613 6 0.1816 7 0.2971 6 0.3359 8 0.1483 7 0.2913 5 0.3136 6 0.0774 6 0.0919 6 0.2341 6 0.0062 5 0.3396 6 0.2399 8 0.4713 7 0.0287 5 0.1968 6 0.0825 7 0.4081 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 6 0.4311 6)
Average genome size in population (length): 73.145
Average program size in population (points): 74.145
Average percent parens in population: 0.014
Minimum age in population: 146.5285714232467
Maximum age in population: 151.4709501850134
Average age in population: 149.5918491075503
Median age in population: 149.6408582187354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.148
Error (vector) diversity:			 0.157
Behavioral diversity:				 0.157
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 152247074
--- Timings ---
Current time: 1529615240937 milliseconds
Total Time:         357.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.1 seconds, 42.0%
Fitness Testing:    163.1 seconds, 45.7%
Report:              43.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction in2} {:instruction float_mod} {:instruction float_shove} {:instruction float_stackdepth} {:instruction 72} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_cos float_flush float_yank float_yank float_cos float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_frominteger integer_pop float_stackdepth print_float float_shove float_div print_float in2 float_mod float_shove float_stackdepth 72 72 float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2552.132770300001
Median total errors in population: 202.43079999999998
Error averages by case: (98.33788769999916 6.883 92.96032419999952 8.585 89.52641229999973 9.396 97.80686980000107 8.585 90.59742109999969 10.135 89.43127429999952 9.33 92.85933570000111 7.616 96.05559460000057 7.746 93.20477760000087 7.763 94.68790870000043 6.875 95.26404680000121 7.626 95.02752469999956 6.847 95.15048339999893 7.83 92.18505500000136 9.527 90.76683569999966 9.37 88.9031162000007 6.681 94.43687019999888 8.539 97.47627970000072 9.365 94.84785870000142 8.58 97.21432570000017 7.732 94.81679289999938 8.625 94.66260560000029 7.693 93.64368229999869 7.814 93.36287050000108 8.5 92.74961689999917 8.514)
Error minima by case: (0.0038 5 0.1605 6 0.1816 8 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 6 0.0687 6 0.0401 6 0.2333 6 0.0055 5 0.2878 6 0.2392 7 0.4713 7 0.028 5 0.1961 6 0.0825 7 0.2198 7 0.4047 6 0.2547 6 0.2686 6 0.1989 6 0.2395 6 0.3793 6)
Average genome size in population (length): 72.873
Average program size in population (points): 73.873
Average percent parens in population: 0.014
Minimum age in population: 147.6018933351695
Maximum age in population: 152.9514583864577
Average age in population: 151.0299353971723
Median age in population: 151.0918262844146
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.144
Error (vector) diversity:			 0.149
Behavioral diversity:				 0.149
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 154068949
--- Timings ---
Current time: 1529615244513 milliseconds
Total Time:         360.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.4 seconds, 42.0%
Fitness Testing:    164.9 seconds, 45.7%
Report:              44.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_sin} {:instruction in1} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_flush} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_mod} {:instruction in2} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_yank} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction in2} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction print_float} {:instruction 71} {:instruction float_mod} {:instruction float_shove} {:instruction float_stackdepth} {:instruction 72} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction integer_min} {:instruction float_pop} {:instruction integer_max} {:instruction float_tan} {:instruction print_integer})
Best program: (float_sub float_stackdepth integer_flush float_dup_items float_yank float_mult float_dup float_frominteger float_dup_items float_dup float_sin in1 float_mod integer_fromfloat float_flush float_flush integer_yank integer_mult integer_shove integer_mod in2 tag_float_838 integer_add float_tan float_frominteger float_shove float_stackdepth float_shove float_yank print_float float_rot print_float 72 float_stackdepth print_float float_rot float_shove float_stackdepth print_float in2 float_mod integer_yankdup 72 print_float 71 float_mod float_shove float_stackdepth 72 72 float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div integer_min float_pop integer_max float_tan print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2124.025058600001
Median total errors in population: 202.43079999999998
Error averages by case: (80.10029649999971 6.832 73.69158849999951 8.554 74.56927889999908 9.427 79.12778450000106 8.529 75.61833820000048 10.187 74.3211175999995 9.341 77.98259370000106 7.604 77.49026970000054 7.716 78.48821000000082 7.724 75.30435280000039 6.831 76.62064260000132 7.604 75.41219530000045 6.792 76.43341099999984 7.81 77.04515630000047 9.524 75.88304570000038 9.394 74.02602290000078 6.661 75.69415319999894 8.522 78.83759820000013 9.357 76.25168870000053 8.573 78.50484540000016 7.706 80.11029879999982 8.612 75.74776449999939 7.677 78.83366049999879 7.787 74.33884500000107 8.498 77.83390009999921 8.496)
Error minima by case: (0.0033 5 0.1608 6 0.1816 8 0.2966 6 0.3359 8 0.1483 7 0.2913 5 0.3131 6 0.0769 6 0.0919 6 0.2336 6 0.0057 5 0.3396 6 0.2394 8 0.4713 7 0.0282 5 0.1963 6 0.0825 6 0.4076 7 0.4047 6 0.3065 6 0.2686 6 0.1989 7 0.2913 7 0.4311 6)
Average genome size in population (length): 72.912
Average program size in population (points): 73.912
Average percent parens in population: 0.014
Minimum age in population: 150.0931259378255
Maximum age in population: 154.6530936089717
Average age in population: 152.5098110966569
Median age in population: 152.5774598263348
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.139
Error (vector) diversity:			 0.149
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 155891874
--- Timings ---
Current time: 1529615248314 milliseconds
Total Time:         364.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.9 seconds, 41.9%
Fitness Testing:    166.7 seconds, 45.7%
Report:              44.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_swap} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_cos} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction float_pop} {:instruction 74} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_max} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_shove} {:instruction float_shove} {:instruction 72} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub integer_fromfloat float_dup_items float_dup float_sin in1 integer_max integer_fromfloat float_shove float_shove float_swap integer_swap float_shove float_swap integer_shove integer_swap float_mult float_cos in2 tag_float_138 integer_add float_mod float_frominteger integer_mod float_stackdepth print_float float_rot print_float 72 float_mod float_pop 74 float_mod integer_shove print_float 72 float_max float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove print_float 72 float_shove float_shove 72 72 float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2521.202378900001
Median total errors in population: 202.43079999999998
Error averages by case: (96.3944876999987 6.965 88.5709714999995 8.676 89.59944530000034 9.493 95.9902461000014 8.624 90.4154788999991 10.213 87.27130409999945 9.401 93.48508610000138 7.738 93.36262150000053 7.818 94.62649520000095 7.862 90.84030730000043 6.95 92.45111880000144 7.746 92.0198584999992 6.895 92.20158179999832 7.938 93.912904500002 9.629 90.55464179999913 9.479 90.13224890000083 6.79 90.6635908999988 8.648 95.67424590000122 9.457 92.55195890000199 8.662 95.37181040000016 7.81 95.88745059999872 8.732 92.00155190000069 7.763 94.67649299999847 7.926 90.4591957000013 8.597 93.65828359999914 8.617)
Error minima by case: (0.0023 5 0.1606 5 0.1816 6 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 6 0.0767 6 0.0919 6 0.2334 6 0.0055 5 0.3396 6 0.2392 8 0.4713 7 0.028 5 0.1961 6 0.0825 6 0.4074 7 0.4047 6 0.3065 5 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 72.636
Average program size in population (points): 73.636
Average percent parens in population: 0.014
Minimum age in population: 151.1076964716695
Maximum age in population: 156.3735528835977
Average age in population: 153.9633812949324
Median age in population: 154.0172521704447
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.156
Error (vector) diversity:			 0.165
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 157707874
--- Timings ---
Current time: 1529615252207 milliseconds
Total Time:         368.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.3 seconds, 41.9%
Fitness Testing:    168.6 seconds, 45.8%
Report:              45.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_cos} {:instruction float_dec} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_sin} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_yankdup} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_stackdepth} {:instruction print_float} {:instruction 71} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_shove} {:instruction integer_dup} {:instruction integer_min} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_integer})
Best program: (integer_sub float_cos float_dec float_sin in1 integer_max integer_fromfloat float_shove float_shove integer_yankdup integer_shove integer_swap float_sin float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth float_cos float_sin in1 integer_max integer_fromfloat float_shove float_shove float_cos float_sin in1 integer_fromfloat integer_fromfloat float_shove float_shove float_swap integer_shove integer_swap float_mult float_yankdup in2 tag_float_138 integer_add float_mod float_frominteger float_stackdepth print_float 71 72 float_mod integer_shove float_shove integer_dup integer_min 72 float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2663.739657600001
Median total errors in population: 202.43079999999998
Error averages by case: (102.31689999999871 6.878 96.33667629999947 8.589 94.97393840000012 9.476 101.35627980000142 8.548 96.0199092999992 10.189 94.79075129999949 9.408 98.45330670000139 7.67 99.77921990000057 7.752 98.7541999000009 7.829 97.76915420000037 6.894 98.9458980000015 7.643 97.8597757999994 6.846 98.7984956999985 7.832 97.27934310000173 9.53 96.11227499999949 9.489 95.568301700001 6.755 98.1263510999986 8.517 101.13447920000088 9.442 98.73688280000175 8.56 100.91997480000019 7.839 99.83425469999885 8.633 98.78874210000042 7.737 99.19032519999845 7.849 97.0594951000014 8.519 97.91272749999912 8.498)
Error minima by case: (0.0033 3 0.1605 1 0.7666 7 0.2964 2 0.6123 8 0.7999 7 0.2913 3 0.3129 3 0.0694 3 0.8852 2 0.2333 2 0.0055 2 0.6375 3 0.2392 3 0.4768 8 0.028 2 0.1961 3 0.0825 7 0.4074 2 0.4047 6 0.6693 2 0.2686 6 0.1989 2 0.2913 2 0.546 2)
Average genome size in population (length): 73.199
Average program size in population (points): 74.199
Average percent parens in population: 0.014
Minimum age in population: 152.698087667271
Maximum age in population: 157.1743583881156
Average age in population: 155.3894059140128
Median age in population: 155.4473637129328
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.15
Error (vector) diversity:			 0.156
Behavioral diversity:				 0.156
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 159537949
--- Timings ---
Current time: 1529615255964 milliseconds
Total Time:         372.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.7 seconds, 41.8%
Fitness Testing:    170.5 seconds, 45.8%
Report:              45.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_flush} {:instruction float_yank} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_yank} {:instruction in2} {:instruction tag_float_199} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction float_rot} {:instruction float_div} {:instruction integer_dup} {:instruction 72} {:instruction float_tan} {:instruction float_mod} {:instruction float_max} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_dup_items float_cos float_cos float_sin in1 integer_max integer_max integer_fromfloat float_shove float_shove float_swap integer_shove integer_mod float_flush float_yank integer_mult integer_shove float_yank in2 tag_float_199 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_shove float_div print_float float_rot float_div integer_dup 72 float_tan float_mod float_max float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_stackdepth integer_inc 72 float_mod 73 float_cos float_mod integer_inc 72 72 float_mod integer_shove print_float 72 float_mod float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2782.104669900001
Median total errors in population: 202.43079999999998
Error averages by case: (107.03513449999899 6.983 100.61243179999948 8.626 100.99540590000001 9.482 105.80176080000118 8.616 102.19353469999939 10.207 100.6490080999995 9.407 103.16717580000116 7.716 104.57367370000053 7.816 103.53033380000082 7.878 102.37038050000041 6.988 103.67200100000143 7.73 101.96818129999956 6.919 103.4643889999987 7.905 101.86260910000154 9.607 102.22577699999948 9.497 99.83267710000084 6.795 102.70522049999882 8.619 103.9775168000008 9.463 103.05593530000164 8.662 103.6334147000002 7.85 106.07427179999908 8.7 101.20340440000035 7.775 104.0040456999987 7.914 101.15081900000119 8.59 104.01456759999921 8.586)
Error minima by case: (0.0033 5 0.1606 6 0.1815 7 0.2964 5 0.3359 8 0.1483 7 0.6858 5 0.3129 6 0.0767 6 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2392 8 0.4713 8 0.028 5 0.1961 6 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.6796 6 0.7782 6 0.2913 6 0.4312 6)
Average genome size in population (length): 72.976
Average program size in population (points): 73.976
Average percent parens in population: 0.014
Minimum age in population: 154.5632099641034
Maximum age in population: 158.724114949555
Average age in population: 156.8479260598496
Median age in population: 156.9129770064285
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.155
Error (vector) diversity:			 0.166
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 161362399
--- Timings ---
Current time: 1529615259745 milliseconds
Total Time:         376.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.1 seconds, 41.8%
Fitness Testing:    172.4 seconds, 45.8%
Report:              46.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction in2} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub in1 integer_max integer_fromfloat float_shove float_shove in2 integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float float_rot print_float 72 float_mod integer_dup 73 float_mod integer_shove print_float 72 float_mod integer_shove print_float 72 float_mod integer_dup integer_yankdup 72 float_mod integer_shove integer_shove print_float 72 float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2703.1088985000006
Median total errors in population: 202.43079999999998
Error averages by case: (102.84808429999899 6.941 96.53206849999948 8.586 97.95320669999967 9.444 102.69875020000136 8.586 98.50067469999946 10.175 96.3594051999995 9.381 101.23679060000137 7.694 100.97024790000056 7.76 100.0692285000009 7.844 98.0661183000004 6.9 100.02164780000146 7.679 99.32335669999982 6.84 99.43904369999888 7.875 99.27350940000139 9.595 99.48861429999971 9.411 97.60121250000097 6.763 98.73758279999863 8.589 102.85018320000079 9.427 98.9839983000014 8.609 102.45550930000023 7.806 102.85330149999916 8.678 99.82314150000005 7.746 102.23814829999841 7.873 96.79247070000127 8.553 100.69860359999913 8.539)
Error minima by case: (0.0023 5 0.1605 5 0.1816 7 0.2964 5 0.3359 8 0.1483 7 0.3095 4 0.3129 5 0.0689 4 0.0919 4 0.2333 5 0.0055 5 0.3396 5 0.2392 4 0.4713 7 0.028 4 0.1961 5 0.0825 7 0.4074 5 0.4047 6 0.3065 5 0.2504 6 0.2171 4 0.2913 5 0.4311 5)
Average genome size in population (length): 73.033
Average program size in population (points): 74.033
Average percent parens in population: 0.014
Minimum age in population: 155.9546742407946
Maximum age in population: 160.3146601999789
Average age in population: 158.3486648679241
Median age in population: 158.4021660395379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.151
Error (vector) diversity:			 0.159
Behavioral diversity:				 0.161
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 163188274
--- Timings ---
Current time: 1529615263326 milliseconds
Total Time:         379.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.4 seconds, 41.7%
Fitness Testing:    174.2 seconds, 45.9%
Report:              46.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction 72} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 73} {:instruction float_mod} {:instruction integer_dup} {:instruction 76} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction 72} {:instruction integer_mod} {:instruction integer_dup} {:instruction 72} {:instruction 72} {:instruction float_pop} {:instruction integer_shove} {:instruction float_flush} {:instruction 71} {:instruction float_mod} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction integer_dup} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_shove} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_yank float_cos float_cos float_sin in1 integer_max integer_fromfloat float_shove float_shove float_swap integer_shove integer_swap integer_yank float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth print_float 72 print_float float_rot print_float 73 float_mod integer_dup 76 float_mod integer_shove print_float 72 72 integer_mod integer_dup 72 72 float_pop integer_shove float_flush 71 float_mod float_swap 72 float_mod integer_yankdup 72 integer_dup integer_dup 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_shove print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2559.3288807000004
Median total errors in population: 202.43079999999998
Error averages by case: (98.62262609999877 6.925 92.53368519999943 8.583 90.80782359999961 9.471 97.83866640000147 8.599 91.56710959999965 10.199 90.35249199999947 9.406 93.61981040000144 7.644 95.74701900000058 7.77 94.23297340000093 7.78 93.90652780000042 6.88 94.87413960000157 7.657 94.33603049999977 6.842 94.80869599999879 7.875 92.8938125000014 9.559 91.88563759999985 9.433 90.65487230000095 6.7 94.03331949999854 8.579 96.58297590000082 9.416 94.88306740000158 8.583 96.25117870000017 7.81 95.89795099999897 8.655 93.98237890000011 7.753 94.5313681999983 7.817 93.36121810000147 8.524 94.13250099999904 8.531)
Error minima by case: (0.0023 5 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.6858 5 0.3128 6 0.0767 6 0.0919 6 0.2333 5 0.0054 5 0.3396 6 0.2391 8 0.4713 7 0.0279 5 0.1961 7 0.0825 6 0.4073 6 0.4047 6 0.3065 6 0.6796 6 0.7782 6 0.2913 7 0.4311 6)
Average genome size in population (length): 72.797
Average program size in population (points): 73.797
Average percent parens in population: 0.014
Minimum age in population: 157.2878364060955
Maximum age in population: 161.722835347203
Average age in population: 159.7856914138509
Median age in population: 159.8179101237395
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.146
Error (vector) diversity:			 0.156
Behavioral diversity:				 0.156
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 165008449
--- Timings ---
Current time: 1529615266966 milliseconds
Total Time:         383.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.7 seconds, 41.7%
Fitness Testing:    176.0 seconds, 45.9%
Report:              47.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction float_sub} {:instruction print_float} {:instruction 72} {:instruction float_mult} {:instruction integer_dup} {:instruction 72} {:instruction 72} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction print_float} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_mult} {:instruction float_sin} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction in2} {:instruction float_mod} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction float_swap} {:instruction 72} {:instruction float_div} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction 72} {:instruction integer_mod} {:instruction 72} {:instruction float_shove} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_flush} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer integer_dec float_yank integer_div float_cos float_cos float_flush float_yank float_yank float_cos float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_swap float_mult float_max in2 tag_float_138 integer_add float_mod float_frominteger float_frominteger integer_pop float_stackdepth print_float integer_stackdepth float_stackdepth float_sub print_float 72 float_mult integer_dup 72 72 integer_rot float_shove integer_dup_items print_float float_flush float_shove float_stackdepth print_float print_float float_yankdup float_add integer_mult float_sin print_float 72 float_mod integer_dup 73 float_cos float_mod 72 float_mod integer_dup in2 float_mod print_float 72 float_mod float_swap 72 float_div print_float float_rot print_float 72 integer_mod 72 float_shove float_mod integer_dup 73 float_cos float_mod integer_inc 72 float_flush integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2424.0603389000007
Median total errors in population: 202.43079999999998
Error averages by case: (94.3314153999991 6.983 85.88302729999945 8.643 85.07495329999938 9.532 92.83326860000132 8.636 86.13963549999994 10.254 85.34164729999955 9.457 88.98976670000127 7.741 90.38641640000051 7.818 90.05441130000085 7.874 87.70598440000039 6.966 89.23458290000143 7.746 88.7767561000001 6.905 88.83306229999923 7.939 87.88301450000108 9.624 86.68726500000005 9.491 85.19656280000075 6.767 88.03568629999872 8.649 91.03340670000051 9.469 88.96809050000115 8.657 90.6331260000002 7.843 90.84154389999955 8.751 87.3888405999997 7.807 90.22614279999858 7.925 86.62792920000123 8.582 88.30080309999913 8.594)
Error minima by case: (0.0044 5 0.1613 3 0.0476 8 0.2971 4 0.6123 8 0.7999 8 0.2913 5 0.3136 5 0.0687 5 0.8859 4 0.2341 4 0.0062 4 0.6382 5 0.2399 5 0.4768 8 0.0287 4 0.1968 5 0.0825 7 0.4081 4 0.4047 6 0.6686 4 0.2686 6 0.1989 4 0.6865 4 0.5467 4)
Average genome size in population (length): 73.133
Average program size in population (points): 74.133
Average percent parens in population: 0.014
Minimum age in population: 158.5542569550476
Maximum age in population: 163.1637626166819
Average age in population: 161.1911532845032
Median age in population: 161.2046913274689
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.151
Error (vector) diversity:			 0.16
Behavioral diversity:				 0.16
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 166836999
--- Timings ---
Current time: 1529615270887 milliseconds
Total Time:         387.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.2 seconds, 41.6%
Fitness Testing:    177.9 seconds, 46.0%
Report:              47.8 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 8592.683300000008
Test mean error for best: 4.29634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518072   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518072   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_cos} {:instruction float_cos} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_sin} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction integer_add} {:instruction float_rot} {:instruction print_float} {:instruction float_flush} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 74} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction float_swap} {:instruction integer_dec} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction float_add} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_shove} {:instruction float_flush} {:instruction 72} {:instruction float_shove} {:instruction integer_dup} {:instruction 72} {:instruction 72} {:instruction float_mod} {:instruction float_flush} {:instruction float_mod} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction 72} {:instruction integer_pop} {:instruction integer_shove} {:instruction float_dup_times} {:instruction 72} {:instruction float_shove} {:instruction integer_dup} {:instruction float_swap} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_dup} {:instruction 73} {:instruction float_cos} {:instruction float_cos} {:instruction integer_inc} {:instruction 72} {:instruction float_min} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction 21} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (integer_sub float_cos float_cos float_sin in1 integer_max integer_fromfloat float_shove float_shove integer_yankdup integer_shove integer_swap float_sin float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove float_stackdepth integer_add float_rot print_float float_flush print_float 72 float_mod integer_dup 74 float_mod integer_shove print_float 72 float_mod float_swap integer_dec float_mod integer_yankdup 72 float_mod float_add integer_dup 73 float_cos integer_sub float_mod integer_shove float_flush 72 float_shove integer_dup 72 72 float_mod float_flush float_mod float_swap 72 float_mod 72 integer_pop integer_shove float_dup_times 72 float_shove integer_dup float_swap float_mod integer_shove print_float 72 float_mod integer_dup 73 float_cos float_cos integer_inc 72 float_min integer_dec integer_dec integer_mult float_mod print_integer print_float float_div 21 float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 9 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 202.43079999999998
Mean: 4.048616
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3224.837707200001
Median total errors in population: 202.43079999999998
Error averages by case: (123.69053199999851 7.037 118.18765689999944 8.685 118.81099250000034 9.565 122.81737560000143 8.687 119.73790109999877 10.218 118.04695539999948 9.516 121.6036268000014 7.768 121.46376500000059 7.862 122.0628971000009 7.906 119.14356500000042 7.023 120.7018890000014 7.731 119.53596619999911 6.993 120.55964389999814 7.966 120.61119880000199 9.64 119.88867149999915 9.492 118.67520370000096 6.763 119.90375689999863 8.689 122.66306900000131 9.495 120.38599470000202 8.679 122.42805560000019 7.933 122.62477119999855 8.759 120.01583630000073 7.878 122.40510889999844 7.926 118.78518930000139 8.61 120.70608479999915 8.561)
Error minima by case: (0.0014 4 0.1605 6 0.7666 7 0.2964 6 0.6123 8 0.7999 8 0.2913 5 0.3129 5 0.0767 6 0.8852 6 0.2333 6 0.0055 5 0.6375 6 0.2392 6 0.4768 8 0.028 5 0.1961 6 0.0825 6 0.4074 7 0.4047 6 0.6706 6 0.2671 6 0.1989 7 0.2913 7 0.546 6)
Average genome size in population (length): 72.903
Average program size in population (points): 73.903
Average percent parens in population: 0.014
Minimum age in population: 160.1079224610994
Maximum age in population: 164.788970269953
Average age in population: 162.5469500445081
Median age in population: 162.5800671641451
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.145
Error (vector) diversity:			 0.153
Behavioral diversity:				 0.153
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 168659674
--- Timings ---
Current time: 1529615274760 milliseconds
Total Time:         391.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.7 seconds, 41.6%
Fitness Testing:    179.8 seconds, 46.0%
Report:              48.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_stackdepth float_yank integer_div float_cos float_cos float_flush float_yank tagged_847 integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2494.562708000001
Median total errors in population: 202.43079999999998
Error averages by case: (95.53289199999922 6.968 89.47623489999948 8.646 88.26331269999974 9.483 94.85723290000111 8.615 89.21848769999966 10.203 87.65742039999948 9.429 91.06457610000108 7.658 93.53474700000058 7.803 91.25883160000078 7.846 91.16433920000046 6.972 92.73098630000116 7.69 92.1207138999997 6.932 92.25314869999909 7.898 89.95896670000111 9.552 89.8137460999998 9.494 87.8800555000007 6.781 91.51733229999886 8.569 94.56823840000054 9.424 92.0943546000012 8.618 94.22598480000012 7.887 92.72942139999925 8.702 91.75864920000019 7.784 91.79911919999878 7.887 90.45527450000102 8.537 90.71764189999926 8.533)
Error minima by case: (0.0014 5 0.156 6 0.1816 6 0.2918 6 0.3359 8 0.1483 7 0.2395 5 0.3083 6 0.0694 6 0.0919 6 0.2288 6 9.0E-4 5 0.3396 6 0.2346 7 0.4713 7 0.0234 5 0.1916 6 0.0825 6 0.4028 7 0.4047 6 0.3065 6 0.2686 6 0.1471 6 0.2913 7 0.4311 6)
Average genome size in population (length): 72.609
Average program size in population (points): 73.609
Average percent parens in population: 0.014
Minimum age in population: 161.5140432023333
Maximum age in population: 166.1046008572905
Average age in population: 163.9935450096485
Median age in population: 163.993799388185
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.167
Error (vector) diversity:			 0.174
Behavioral diversity:				 0.174
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 170474974
--- Timings ---
Current time: 1529615278881 milliseconds
Total Time:         395.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.2 seconds, 41.6%
Fitness Testing:    181.8 seconds, 46.0%
Report:              49.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_add} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction integer_pop} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_mod print_integer float_stackdepth float_add integer_div float_cos float_cos float_flush float_yank tagged_847 integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer integer_pop float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2386.161635400001
Median total errors in population: 202.43079999999998
Error averages by case: (91.16094809999879 6.88 85.28692669999943 8.573 83.90550289999979 9.442 90.34817730000138 8.566 84.68205529999956 10.178 82.98500569999949 9.375 87.61061580000134 7.604 88.82338430000061 7.736 88.1610932000009 7.78 86.54438870000044 6.856 88.04711250000149 7.623 86.21726689999969 6.808 87.91323309999882 7.812 86.88414850000143 9.539 84.83694179999969 9.411 84.87329040000088 6.714 87.24194419999863 8.531 90.35692050000087 9.387 87.80944450000148 8.565 90.21865720000018 7.768 87.42026189999925 8.631 88.12461310000012 7.688 88.48340729999842 7.817 86.06585400000141 8.519 85.8604414999991 8.497)
Error minima by case: (0.0023 5 0.1605 6 0.7666 6 0.2964 6 0.6123 8 0.7999 8 0.2913 5 0.3129 6 0.0767 6 0.8852 6 0.2333 6 0.0055 5 0.6375 6 0.2392 8 0.4768 8 0.028 5 0.1961 6 0.0825 7 0.4074 7 0.4047 6 0.6706 6 0.2686 6 0.1989 7 0.6858 6 0.546 6)
Average genome size in population (length): 72.423
Average program size in population (points): 73.423
Average percent parens in population: 0.014
Minimum age in population: 163.1071531185261
Maximum age in population: 167.441687228448
Average age in population: 165.4090259787177
Median age in population: 165.4645942918718
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.15
Error (vector) diversity:			 0.158
Behavioral diversity:				 0.158
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 172285649
--- Timings ---
Current time: 1529615282515 milliseconds
Total Time:         398.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.5 seconds, 41.5%
Fitness Testing:    183.7 seconds, 46.0%
Report:              49.5 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_stackdepth float_yank integer_div float_cos float_cos float_flush float_yank tagged_847 integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2342.1066070000006
Median total errors in population: 202.43079999999998
Error averages by case: (88.5078704999986 6.913 83.5647569999995 8.597 83.06593459999988 9.467 87.92607140000143 8.581 83.9712246999994 10.198 82.89841219999956 9.385 86.0630692000014 7.602 86.50988560000052 7.764 86.48142280000077 7.743 85.12264270000033 6.893 85.7913853000014 7.626 85.31928849999933 6.84 85.65572149999846 7.837 85.34917720000173 9.505 84.13236479999959 9.435 82.55802170000078 6.698 84.96356319999866 8.556 86.6420711000009 9.41 85.42664650000194 8.568 86.44450190000025 7.798 87.9979278999987 8.656 84.12503090000021 7.745 86.8886553999984 7.809 84.04680910000133 8.523 85.98915129999916 8.516)
Error minima by case: (0.0023 5 0.1605 6 0.1816 7 0.2964 5 0.3359 8 0.1483 7 0.2465 5 0.3129 6 0.0767 6 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2392 6 0.4713 7 0.028 5 0.1961 6 0.0825 7 0.4074 6 0.4047 6 0.3065 6 0.2686 6 0.1541 6 0.2913 7 0.4311 6)
Average genome size in population (length): 71.856
Average program size in population (points): 72.856
Average percent parens in population: 0.014
Minimum age in population: 164.1071531185261
Maximum age in population: 169.0358647526666
Average age in population: 166.9034430787468
Median age in population: 166.977278938681
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.143
Error (vector) diversity:			 0.153
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 174082149
--- Timings ---
Current time: 1529615286495 milliseconds
Total Time:         402.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.1 seconds, 41.5%
Fitness Testing:    185.5 seconds, 46.1%
Report:              50.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_stackdepth float_yank integer_div float_cos float_cos float_flush float_yank tagged_847 integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2650.023037600001
Median total errors in population: 202.43079999999998
Error averages by case: (103.72829129999856 6.944 97.30681849999952 8.64 94.91101880000018 9.496 102.75098510000144 8.648 95.45790989999904 10.19 94.28635479999951 9.423 93.93158960000137 7.654 101.34387770000058 7.786 94.36410000000085 7.799 98.75496540000039 6.939 100.51943500000144 7.668 99.88984299999943 6.882 99.99579929999845 7.865 92.83277270000161 9.444 96.32670119999945 9.484 90.74515880000092 6.749 99.29175559999862 8.563 98.39774380000091 9.484 100.08355280000178 8.609 98.1251218000002 7.859 101.2370486999988 8.672 95.68958750000044 7.784 94.78351159999846 7.855 98.40315560000141 8.541 99.35293909999918 8.535)
Error minima by case: (9.0E-4 4 0.1563 5 0.1816 8 0.2921 6 0.3359 8 0.1483 7 0.6815 5 0.3086 6 0.0724 5 0.0919 6 0.2291 6 0.0012 5 0.3396 6 0.2349 6 0.4713 7 0.0237 5 0.1918 6 0.0825 7 0.4031 7 0.4047 6 0.3065 6 0.6796 6 0.7739 6 0.2913 7 0.4311 6)
Average genome size in population (length): 70.017
Average program size in population (points): 71.017
Average percent parens in population: 0.015
Minimum age in population: 165.7030158070975
Maximum age in population: 170.4690749347494
Average age in population: 168.4177399012667
Median age in population: 168.4867991753536
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.15
Error (vector) diversity:			 0.16
Behavioral diversity:				 0.161
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 175832649
--- Timings ---
Current time: 1529615290202 milliseconds
Total Time:         406.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.5 seconds, 41.5%
Fitness Testing:    187.3 seconds, 46.1%
Report:              50.5 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_cos} {:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_136} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_cos float_sub print_integer float_stackdepth float_yank integer_div integer_stackdepth float_cos float_flush float_yank tagged_847 integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_136 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2390.788678600001
Median total errors in population: 202.43079999999998
Error averages by case: (94.89002439999936 6.911 88.13804179999948 8.585 85.31815659999931 9.485 93.52007680000116 8.616 86.47889220000006 10.244 85.71664169999954 9.419 80.66547140000098 7.639 92.1457936000005 7.785 83.29047360000082 7.807 89.97260520000036 6.893 91.21077550000136 7.663 89.58882890000011 6.831 91.01009379999937 7.841 81.48968920000068 9.185 86.50438659999998 9.478 77.28532590000049 6.734 90.21431829999895 8.587 84.59326810000015 9.445 90.66034460000097 8.608 84.24846600000019 7.839 93.38398219999974 8.647 81.71701789999962 7.738 81.63469559999888 7.836 88.75083730000114 8.565 91.44047139999913 8.539)
Error minima by case: (0.0033 5 0.1605 6 0.1816 8 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 6 0.0717 6 0.0919 6 0.2333 6 0.0055 5 0.3396 5 0.2382 8 0.4713 7 0.028 5 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 67.319
Average program size in population (points): 68.319
Average percent parens in population: 0.015
Minimum age in population: 167.1588818595439
Maximum age in population: 171.9293254392097
Average age in population: 170.015285110919
Median age in population: 170.0697564697598
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.177
Error (vector) diversity:			 0.182
Behavioral diversity:				 0.186
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 177515774
--- Timings ---
Current time: 1529615294076 milliseconds
Total Time:         410.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.9 seconds, 41.4%
Fitness Testing:    189.3 seconds, 46.1%
Report:              51.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction tagged_497} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer integer_fromfloat float_flush float_yank tagged_847 integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 tagged_497 float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2722.5267294
Median total errors in population: 201.43079999999998
Error averages by case: (111.92789759999872 6.872 104.76325429999942 8.619 95.8528287999999 9.529 110.66661810000147 8.594 96.7708641999995 10.28 96.31180479999948 9.456 88.85290850000123 7.661 108.12500020000057 7.761 88.40426920000085 7.762 106.24945870000043 6.85 107.25771000000167 7.689 106.56542849999951 6.809 107.04507329999848 7.8 86.70506330000117 8.774 96.96745789999953 9.533 85.74124450000073 6.683 106.36537819999857 8.569 98.49228300000082 9.475 107.05375810000189 8.596 98.25143790000018 7.77 109.72509999999869 8.651 96.00858810000024 7.729 89.75838569999858 7.795 105.40145680000144 8.556 106.8904596999991 8.56)
Error minima by case: (0.0033 5 0.1373 6 0.1816 7 0.2731 6 0.3359 8 0.1483 7 0.2913 4 0.2896 6 0.0534 5 0.0919 6 0.2101 6 0.0054 5 0.3396 6 0.2159 5 0.4713 7 0.0047 4 0.1728 7 0.0825 8 0.3841 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 6 0.4311 6)
Average genome size in population (length): 64.353
Average program size in population (points): 65.353
Average percent parens in population: 0.015
Minimum age in population: 168.2087680311996
Maximum age in population: 173.3628658836478
Average age in population: 171.5524976089761
Median age in population: 171.5713301988759
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 87
Genome diversity (% unique Plush genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.148
Error (vector) diversity:			 0.155
Behavioral diversity:				 0.159
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 179124724
--- Timings ---
Current time: 1529615297702 milliseconds
Total Time:         414.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.3 seconds, 41.4%
Fitness Testing:    191.1 seconds, 46.1%
Report:              51.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_949} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_stackdepth float_yank integer_div float_cos float_cos float_flush float_yank tagged_949 integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2933.1455633000005
Median total errors in population: 201.43079999999998
Error averages by case: (118.86069599999804 6.866 112.34355909999942 8.631 104.69185699999989 9.514 116.9026096000016 8.596 105.54925159999902 10.3 104.57180209999953 9.465 98.58487770000156 7.674 116.24068250000053 7.793 99.38775720000088 7.785 114.61964660000041 6.831 115.45824870000179 7.683 114.095521099999 6.821 115.31383649999792 7.814 97.82685530000175 8.742 105.79314369999938 9.502 95.75175990000106 6.682 114.69002459999845 8.591 107.49460550000099 9.488 114.5016391000025 8.605 107.27155500000022 7.796 115.54167589999837 8.643 104.87959500000035 7.771 99.5672513999983 7.816 113.0075771000016 8.565 113.66053509999914 8.565)
Error minima by case: (0.0015 5 0.144 6 0.1816 7 0.2828 6 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0694 6 0.0919 6 0.2333 6 0.0055 5 0.3396 5 0.2389 7 0.4713 7 0.028 4 0.1961 6 0.0825 8 0.4074 7 0.4047 6 0.3065 6 0.2686 6 0.1989 7 0.2913 7 0.4311 6)
Average genome size in population (length): 63.786
Average program size in population (points): 64.786
Average percent parens in population: 0.016
Minimum age in population: 170.309834650017
Maximum age in population: 175.1460956614287
Average age in population: 173.0228813355214
Median age in population: 173.070418879104
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.761
Total error diversity:				 0.141
Error (vector) diversity:			 0.153
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 180719374
--- Timings ---
Current time: 1529615301300 milliseconds
Total Time:         417.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.7 seconds, 41.4%
Fitness Testing:    192.8 seconds, 46.2%
Report:              52.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_yank} {:instruction 54.48468263133378} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_949} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction integer_yankdup} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_stackdepth float_yank 54.48468263133378 float_cos float_cos float_flush float_yank tagged_949 integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 integer_yankdup float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2939.7905194000004
Median total errors in population: 201.43079999999998
Error averages by case: (120.04865919999766 6.801 114.69856309999949 8.577 106.87883440000063 9.45 119.07443700000168 8.548 107.64272839999842 10.204 106.94572119999953 9.4 95.74525490000153 7.64 117.66276300000062 7.743 95.3149424000009 7.775 116.13928850000045 6.829 116.89240190000173 7.653 116.31879009999865 6.799 116.74642079999744 7.771 93.8140597000018 8.724 107.91761259999885 9.443 92.79686590000095 6.669 116.08085309999848 8.528 104.89666150000116 9.412 116.58666580000295 8.584 104.6744985000002 7.719 117.66165149999784 8.574 102.30592520000052 7.662 96.63430959999835 7.786 115.21638500000171 8.508 115.82922609999912 8.468)
Error minima by case: (0.0011 5 0.1605 6 0.1816 6 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0724 6 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2389 7 0.4713 7 0.028 5 0.1961 6 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2678 6 0.1989 6 0.2913 6 0.4311 6)
Average genome size in population (length): 64.099
Average program size in population (points): 65.099
Average percent parens in population: 0.015
Minimum age in population: 171.8142859043647
Maximum age in population: 176.313404210201
Average age in population: 174.4607776295286
Median age in population: 174.5180088991696
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.148
Error (vector) diversity:			 0.162
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 182321949
--- Timings ---
Current time: 1529615304946 milliseconds
Total Time:         421.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.1 seconds, 41.3%
Fitness Testing:    194.5 seconds, 46.2%
Report:              52.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_36} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction integer_dup} {:instruction tagged_95} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction integer_add} {:instruction float_div} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (tagged_36 print_integer float_inc float_yank integer_dup tagged_95 float_frominteger float_inc float_yank float_yank integer_add float_div in1 integer_max integer_fromfloat float_shove integer_max integer_fromfloat in2 tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2901.5750881000004
Median total errors in population: 201.43079999999998
Error averages by case: (119.96009669999825 6.897 112.71079149999947 8.611 109.12437290000054 9.456 117.9886354000013 8.635 110.03853179999868 10.215 108.51347879999955 9.364 92.56217270000123 7.654 117.09252880000057 7.791 93.42180270000085 7.81 115.16907050000036 6.883 116.2226741000015 7.705 114.93084269999885 6.814 115.99138289999786 7.829 91.73993090000181 8.783 110.43166529999885 9.403 89.26531990000076 6.708 115.32228349999873 8.587 98.62933720000117 9.405 115.05499420000255 8.602 98.3241064000002 7.75 116.69899929999826 8.672 94.53560380000059 7.687 93.62640229999853 7.845 113.35576810000127 8.574 114.60229569999912 8.582)
Error minima by case: (0.0015 5 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2899 5 0.3129 7 0.0724 5 0.0905 6 0.2333 6 0.0055 5 0.3382 6 0.2389 7 0.4713 7 0.018 5 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3051 6 0.2686 6 0.1975 7 0.2899 7 0.4297 6)
Average genome size in population (length): 64.094
Average program size in population (points): 65.094
Average percent parens in population: 0.015
Minimum age in population: 173.2406436653305
Maximum age in population: 178.2132819702683
Average age in population: 175.8693604741057
Median age in population: 175.9227210823554
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.143
Error (vector) diversity:			 0.152
Behavioral diversity:				 0.153
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 183924374
--- Timings ---
Current time: 1529615308940 milliseconds
Total Time:         425.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       175.5 seconds, 41.3%
Fitness Testing:    196.5 seconds, 46.2%
Report:              52.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_sub} {:instruction print_integer} {:instruction integer_flush} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction in1} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_sub print_integer integer_flush float_dup_items float_yank float_yank float_cos float_cos integer_max integer_fromfloat float_shove in1 integer_max integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod float_dup_items float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3064.9144593000005
Median total errors in population: 201.43079999999998
Error averages by case: (129.01621619999784 6.97 122.54617309999948 8.731 106.49948640000073 9.573 126.68388540000147 8.716 107.62204279999861 10.309 107.20509269999951 9.472 94.4134577000012 7.763 126.82967650000057 7.899 96.73051670000086 7.88 125.39844950000042 6.963 126.04294140000158 7.771 123.72305329999874 6.919 125.8782553999977 7.925 94.85220350000219 8.854 107.67400159999868 9.499 91.02984620000069 6.785 125.14265859999867 8.702 112.51503630000165 9.514 124.37847350000264 8.711 112.17076380000017 7.848 122.49054399999814 8.76 108.86166480000104 7.819 95.21458599999868 7.911 122.8930733000014 8.668 120.47536059999914 8.665)
Error minima by case: (0.0033 5 0.1605 6 0.1816 7 0.2964 6 0.3359 7 0.1483 7 0.2913 5 0.3129 7 0.0724 6 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2389 7 0.4713 7 0.0177 5 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 64.265
Average program size in population (points): 65.265
Average percent parens in population: 0.015
Minimum age in population: 174.6424827299844
Maximum age in population: 179.3809898476083
Average age in population: 177.3229839984962
Median age in population: 177.3884190524835
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.163
Error (vector) diversity:			 0.17
Behavioral diversity:				 0.171
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 185531199
--- Timings ---
Current time: 1529615312605 milliseconds
Total Time:         428.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.0 seconds, 41.3%
Fitness Testing:    198.3 seconds, 46.2%
Report:              53.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction in1} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_cos float_cos float_flush float_yank tagged_847 integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 in1 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2948.4663167000003
Median total errors in population: 201.43079999999998
Error averages by case: (123.10848969999824 6.83 117.57914939999947 8.595 106.07688040000025 9.462 121.31512140000146 8.607 107.15467909999897 10.226 106.6183265999995 9.371 91.02941110000135 7.643 120.6552709000006 7.768 91.45140560000091 7.742 119.02626720000043 6.813 119.86421060000153 7.656 118.46533389999901 6.805 119.70534869999788 7.799 90.65952050000156 8.721 107.28880969999915 9.416 87.92508770000084 6.669 119.04547659999862 8.567 103.5403616000013 9.401 118.73656610000249 8.592 103.30747920000016 7.735 121.08433809999828 8.64 101.02103750000062 7.667 91.86781849999853 7.791 117.25213730000144 8.547 119.0727892999991 8.552)
Error minima by case: (0.0043 5 0.1605 6 0.1816 8 0.2964 6 0.3359 7 0.1483 7 0.2913 5 0.3129 7 0.0724 6 0.0919 6 0.2333 7 0.0055 5 0.3396 6 0.2389 7 0.4713 7 0.028 4 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2686 6 0.1989 7 0.2913 7 0.4311 6)
Average genome size in population (length): 64.413
Average program size in population (points): 65.413
Average percent parens in population: 0.015
Minimum age in population: 175.9834967298439
Maximum age in population: 180.8600277758003
Average age in population: 178.7684701736228
Median age in population: 178.7814602190491
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.137
Error (vector) diversity:			 0.148
Behavioral diversity:				 0.149
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 187141624
--- Timings ---
Current time: 1529615316284 milliseconds
Total Time:         432.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.5 seconds, 41.3%
Fitness Testing:    200.0 seconds, 46.2%
Report:              54.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_stackdepth float_yank integer_div float_cos float_cos float_flush float_yank tagged_847 integer_mod float_cos in1 float_yank integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod 72 float_mod integer_yankdup 72 float_mod integer_shove integer_dup_items print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2829.0924002
Median total errors in population: 201.43079999999998
Error averages by case: (116.878710499998 6.835 111.5046456999995 8.549 103.8551136000001 9.477 115.70271110000168 8.569 104.94317299999884 10.281 103.91851559999947 9.422 88.60746750000132 7.611 114.59162790000062 7.745 88.74706520000097 7.725 113.06411740000041 6.789 113.81059370000182 7.656 112.87683929999884 6.782 113.66819889999765 7.804 87.0373138000013 8.712 104.9936052999992 9.489 85.53132400000061 6.699 112.98481109999835 8.533 97.18388880000067 9.411 113.44024750000283 8.573 96.91259030000019 7.769 114.57505209999819 8.618 94.80366430000004 7.692 89.3101880999985 7.758 111.98914360000165 8.527 112.60279189999906 8.533)
Error minima by case: (0.0038 6 0.1613 6 0.7666 7 0.2971 6 0.6123 8 0.7999 7 0.2913 5 0.3136 7 0.0719 6 0.8859 6 0.2341 6 0.0062 5 0.6382 6 0.2384 6 0.4768 8 0.0287 5 0.1968 6 0.0825 6 0.4081 7 0.4047 6 0.6713 5 0.2686 6 0.1989 6 0.6865 7 0.5467 6)
Average genome size in population (length): 64.656
Average program size in population (points): 65.656
Average percent parens in population: 0.015
Minimum age in population: 177.0635436142975
Maximum age in population: 182.242850458411
Average age in population: 180.171224615552
Median age in population: 180.2044867048756
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.146
Error (vector) diversity:			 0.151
Behavioral diversity:				 0.153
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 188758149
--- Timings ---
Current time: 1529615320181 milliseconds
Total Time:         436.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.1 seconds, 41.3%
Fitness Testing:    201.9 seconds, 46.3%
Report:              54.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_36} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction integer_dup} {:instruction tagged_95} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction integer_add} {:instruction float_sin} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction float_swap} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction float_mult} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_swap} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (tagged_36 print_integer float_inc float_yank integer_dup tagged_95 float_frominteger float_inc float_yank float_yank integer_add float_sin in1 integer_max integer_fromfloat float_shove integer_max integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 float_swap float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod float_mult float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_swap integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2824.726785400001
Median total errors in population: 201.43079999999998
Error averages by case: (116.20014869999837 6.885 111.06754679999943 8.665 100.37766919999996 9.561 114.82142500000143 8.646 101.88907779999927 10.332 101.56812819999946 9.495 90.71322430000119 7.695 114.36076130000058 7.829 90.82276230000093 7.815 113.02254760000042 6.883 113.5598182000016 7.701 111.9737045999991 6.862 113.43047519999818 7.843 88.71321910000134 8.776 101.61142339999945 9.562 87.17482750000073 6.739 112.67570069999863 8.611 100.41344690000089 9.523 112.64777070000216 8.63 100.0246892000002 7.842 111.09461679999855 8.677 97.60361820000027 7.781 91.44980449999866 7.832 111.23989250000146 8.598 108.88548669999906 8.602)
Error minima by case: (0.0021 5 0.1605 5 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0717 5 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2382 7 0.4713 7 0.028 5 0.1961 7 0.0825 7 0.4074 6 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 6 0.4311 6)
Average genome size in population (length): 64.488
Average program size in population (points): 65.488
Average percent parens in population: 0.015
Minimum age in population: 178.0635436142975
Maximum age in population: 183.7787839378319
Average age in population: 181.6104714438568
Median age in population: 181.6517535249873
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.143
Error (vector) diversity:			 0.154
Behavioral diversity:				 0.155
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 190370549
--- Timings ---
Current time: 1529615323653 milliseconds
Total Time:         440.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.4 seconds, 41.2%
Fitness Testing:    203.6 seconds, 46.3%
Report:              54.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_div} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_yank} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction integer_pop} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_stackdepth float_yank integer_div float_flush float_yank tagged_847 integer_mod float_yank in1 integer_max integer_fromfloat float_flush integer_swap integer_sub in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer integer_pop float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2826.3760388000005
Median total errors in population: 201.43079999999998
Error averages by case: (118.16119919999818 6.871 112.9254045999994 8.618 104.15077180000002 9.489 116.83624300000162 8.62 105.33464989999909 10.273 104.96891489999946 9.395 86.19321360000124 7.642 116.0936128000006 7.8 86.39597310000084 7.778 114.65117420000043 6.856 115.3050288000018 7.681 114.02749319999914 6.823 115.16874189999795 7.777 84.53617400000077 8.738 105.28721189999926 9.482 82.87623320000074 6.707 114.4575176999985 8.568 95.08011790000057 9.446 114.65991210000246 8.606 94.75268830000023 7.781 113.80244999999861 8.663 92.42947570000003 7.712 86.94983359999856 7.809 113.26943100000163 8.558 111.78757239999904 8.582)
Error minima by case: (0.0033 5 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 4 0.3129 7 0.0724 6 0.0919 6 0.2333 6 0.0055 5 0.3396 7 0.2389 7 0.4713 7 0.028 5 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.6796 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 64.717
Average program size in population (points): 65.717
Average percent parens in population: 0.015
Minimum age in population: 179.8206158301444
Maximum age in population: 185.2131907616483
Average age in population: 183.0068094545196
Median age in population: 183.0650397817462
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.152
Error (vector) diversity:			 0.158
Behavioral diversity:				 0.16
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 191988874
--- Timings ---
Current time: 1529615327199 milliseconds
Total Time:         443.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.7 seconds, 41.2%
Fitness Testing:    205.4 seconds, 46.3%
Report:              55.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer integer_div float_cos float_cos float_flush float_yank tagged_847 integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_yankdup integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3145.3312329000005
Median total errors in population: 201.43079999999998
Error averages by case: (129.1942626999979 6.958 123.79831519999946 8.697 117.8294140000009 9.601 128.21770380000166 8.685 118.59042089999814 10.343 117.63853529999946 9.55 101.26692710000145 7.711 126.7644782000006 7.883 101.74873570000094 7.862 125.26775110000042 6.98 126.00643720000164 7.762 125.46989129999851 6.904 125.87011109999727 7.887 100.29960960000238 8.81 118.8410216999986 9.629 98.47679860000099 6.824 125.21681989999847 8.614 108.42603340000151 9.504 125.81191080000296 8.686 108.20589520000017 7.912 126.4852652999978 8.744 106.0766884000009 7.85 102.09207979999843 7.915 124.36694390000167 8.64 124.77018269999908 8.648)
Error minima by case: (0.0033 5 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0716 6 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2381 6 0.4713 7 0.028 4 0.1961 6 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 65.209
Average program size in population (points): 66.209
Average percent parens in population: 0.015
Minimum age in population: 181.9743870725003
Maximum age in population: 186.6882853727188
Average age in population: 184.4503153162743
Median age in population: 184.4912562605215
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.172
Error (vector) diversity:			 0.185
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 193619624
--- Timings ---
Current time: 1529615330961 milliseconds
Total Time:         447.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       184.3 seconds, 41.2%
Fitness Testing:    207.1 seconds, 46.3%
Report:              55.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_max} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_949} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_flush} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_max integer_mod float_yank integer_div float_cos integer_mod float_yank integer_div float_cos float_cos float_flush float_yank tagged_949 integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove float_flush in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2713.7548563000005
Median total errors in population: 201.43079999999998
Error averages by case: (113.04065419999846 6.915 104.60410659999945 8.604 99.41260880000002 9.459 110.07243940000157 8.643 101.53823639999895 10.261 100.59196799999951 9.368 86.34977480000127 7.679 110.19356030000058 7.808 85.72434890000082 7.816 108.01854330000043 6.871 109.17238740000182 7.682 105.81413149999942 6.827 108.90352459999822 7.835 83.1656150000015 8.787 101.0313924999992 9.438 82.23364860000079 6.739 107.98298469999848 8.592 91.97245500000088 9.437 107.08035750000212 8.634 92.42043530000024 7.775 109.93558739999877 8.651 88.45570930000018 7.738 87.28893649999853 7.836 104.88171960000153 8.583 107.3077306999991 8.584)
Error minima by case: (0.0023 5 0.1613 5 0.1816 7 0.2971 6 0.3359 8 0.1483 7 0.2913 5 0.3136 7 0.0724 6 0.0919 6 0.2341 6 0.0062 5 0.3396 6 0.2389 7 0.4713 7 0.017 6 0.1968 6 0.0825 7 0.4081 7 0.4047 6 0.3065 6 0.2686 6 0.1989 7 0.2913 7 0.4311 6)
Average genome size in population (length): 65.149
Average program size in population (points): 66.149
Average percent parens in population: 0.015
Minimum age in population: 182.9743870725003
Maximum age in population: 188.5275821639834
Average age in population: 185.8534557838723
Median age in population: 185.8865466987061
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.159
Error (vector) diversity:			 0.166
Behavioral diversity:				 0.168
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 195248824
--- Timings ---
Current time: 1529615334742 milliseconds
Total Time:         451.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       185.7 seconds, 41.2%
Fitness Testing:    209.0 seconds, 46.3%
Report:              56.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_cos} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_949} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_flush} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_dup_times integer_div float_cos integer_mod float_yank integer_div float_cos float_cos float_flush float_yank tagged_949 integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove float_flush in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2931.1689326000005
Median total errors in population: 201.43079999999998
Error averages by case: (127.18013699999801 6.89 117.33196869999948 8.617 109.1642290000003 9.507 124.6498051000017 8.62 110.36259399999891 10.256 109.9760622999995 9.435 88.46158790000138 7.672 121.93330130000061 7.799 88.8613882000009 7.748 120.30137710000047 6.885 121.0525198000016 7.674 118.45972869999906 6.82 120.85621949999785 7.852 86.91970830000146 8.74 110.26048059999921 9.485 85.15743070000083 6.709 120.08615299999856 8.562 95.96182940000101 9.426 119.22597170000233 8.603 95.60100620000013 7.824 118.68348039999836 8.669 93.43207050000039 7.76 89.31329859999849 7.826 117.5610081000016 8.555 113.87357649999912 8.568)
Error minima by case: (0.0023 5 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0717 6 0.0919 6 0.2333 7 0.0055 5 0.3396 5 0.2382 6 0.4713 7 0.028 4 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 7)
Average genome size in population (length): 65.263
Average program size in population (points): 66.263
Average percent parens in population: 0.015
Minimum age in population: 183.9743870725003
Maximum age in population: 189.5275821639834
Average age in population: 187.3099319973545
Median age in population: 187.3472492711288
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.16
Error (vector) diversity:			 0.168
Behavioral diversity:				 0.172
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 196880649
--- Timings ---
Current time: 1529615338275 milliseconds
Total Time:         454.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       187.1 seconds, 41.2%
Fitness Testing:    210.8 seconds, 46.4%
Report:              56.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction print_integer} {:instruction float_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_cos} {:instruction integer_mod} {:instruction float_div} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_yankdup float_add print_integer float_inc float_add float_yank float_cos integer_mod float_div in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_fromfloat float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2658.6643259000007
Median total errors in population: 201.43079999999998
Error averages by case: (105.15273949999872 6.945 99.02237829999947 8.64 95.41761390000005 9.548 103.71470530000148 8.658 96.81136879999904 10.325 95.64545779999946 9.488 92.51036300000145 7.663 102.73071160000055 7.822 93.04343190000083 7.818 100.6410038000004 6.898 101.87885320000161 7.703 100.46199209999939 6.865 101.7260632999983 7.85 91.09787650000172 8.744 96.75050639999937 9.53 89.12762860000102 6.755 100.92192029999862 8.595 97.71683360000092 9.478 101.155628400002 8.632 97.30026250000023 7.832 101.63926599999866 8.691 94.6699111000003 7.785 93.4306330999984 7.83 99.4359484000015 8.586 99.37422849999913 8.606)
Error minima by case: (0.0015 6 0.1605 6 0.1816 7 0.2964 6 0.3359 7 0.1483 7 0.6638 5 0.3129 6 0.0687 6 0.0912 6 0.2333 5 0.0055 5 0.3389 5 0.2389 6 0.4713 7 0.028 6 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3058 6 0.6796 6 0.7572 6 0.2906 7 0.4304 6)
Average genome size in population (length): 64.916
Average program size in population (points): 65.916
Average percent parens in population: 0.015
Minimum age in population: 186.0995665911919
Maximum age in population: 190.6070281382381
Average age in population: 188.7313155954984
Median age in population: 188.762368210996
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.145
Error (vector) diversity:			 0.152
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 198503949
--- Timings ---
Current time: 1529615342353 milliseconds
Total Time:         458.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.6 seconds, 41.1%
Fitness Testing:    212.7 seconds, 46.4%
Report:              57.1 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction integer_mod} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction print_integer} {:instruction float_inc} {:instruction float_dup_items} {:instruction print_float} {:instruction float_dec} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction in1} {:instruction integer_max} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_mult} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction float_frominteger} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction integer_inc} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_yank} {:instruction float_dup_items} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction float_tan} {:instruction float_div} {:instruction float_swap} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer integer_mod float_yank float_yank float_cos float_cos print_integer float_inc float_dup_items print_float float_dec float_yank float_yank float_cos float_cos integer_max integer_fromfloat float_shove in1 integer_max integer_yankdup integer_fromfloat float_flush integer_swap integer_sub integer_shove float_mult in2 tag_float_138 integer_add float_mod tag_float_838 float_frominteger float_mod float_frominteger float_shove print_float 72 integer_inc float_swap 72 float_mod integer_yankdup 72 float_yank float_dup_items float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer float_tan float_div float_swap float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2566.6896009
Median total errors in population: 201.43079999999998
Error averages by case: (107.51153289999891 6.911 100.73164709999945 8.578 95.27777529999994 9.465 105.64116170000136 8.628 96.99990669999951 10.257 95.3640639999995 9.374 77.2872752000007 7.649 105.05426100000058 7.802 77.67287930000073 7.796 102.56476410000039 6.869 104.07605400000155 7.661 102.02155799999959 6.802 103.83544499999871 7.806 75.08635250000057 8.757 96.85437899999957 9.446 73.16393780000034 6.724 102.97116729999873 8.562 84.43553040000049 9.431 102.94765970000172 8.605 83.86613870000015 7.782 104.89001849999906 8.657 80.75876959999998 7.704 78.22793099999916 7.83 101.03228010000132 8.565 102.2051119999991 8.551)
Error minima by case: (0.0023 5 0.1605 6 0.1816 7 0.2964 6 0.3359 7 0.1483 7 0.2913 5 0.3129 7 0.0717 6 0.0919 6 0.2333 6 0.0055 5 0.3396 5 0.2382 7 0.4713 7 0.028 5 0.1961 6 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 65.132
Average program size in population (points): 66.132
Average percent parens in population: 0.015
Minimum age in population: 187.7203130107407
Maximum age in population: 192.1749218176326
Average age in population: 190.2197491981159
Median age in population: 190.2647333834307
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.161
Error (vector) diversity:			 0.168
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 200132674
--- Timings ---
Current time: 1529615346003 milliseconds
Total Time:         462.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.1 seconds, 41.1%
Fitness Testing:    214.4 seconds, 46.4%
Report:              57.7 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction float_dup_times} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction in2} {:instruction tag_float_138} {:instruction float_dup} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_cos} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction tagged_518} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_flush} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_yank integer_div integer_dup_times float_cos float_flush float_yank tagged_847 integer_mod float_cos in1 float_dup_times integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub in2 tag_float_138 float_dup float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_cos float_swap 72 float_mod integer_yankdup integer_add float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 tagged_518 float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_flush integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3043.6011710000007
Median total errors in population: 201.43079999999998
Error averages by case: (124.36219859999817 6.953 118.18134929999945 8.69 115.3701767000005 9.547 123.05040660000157 8.67 116.52748409999859 10.271 115.83340429999951 9.457 98.64923920000143 7.744 121.66908820000052 7.838 100.13342330000083 7.838 119.82757280000038 6.925 120.78742620000163 7.721 119.92808909999899 6.879 120.56281579999786 7.861 98.27743870000148 8.775 116.59592249999898 9.519 95.31687920000094 6.774 119.85610949999855 8.608 103.52893990000064 9.515 120.34415280000253 8.654 103.1865601000002 7.878 123.52138559999824 8.715 100.67867079999992 7.809 99.54363519999842 7.896 118.65654190000154 8.595 121.48126059999917 8.599)
Error minima by case: (0.0023 6 0.1605 6 0.1816 7 0.2828 6 0.3359 8 0.1483 7 0.2913 4 0.3129 7 0.0717 6 0.0912 6 0.2333 6 0.0055 5 0.3389 5 0.2382 7 0.4713 7 0.028 6 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3058 6 0.2686 6 0.1989 7 0.2906 7 0.4304 6)
Average genome size in population (length): 64.86
Average program size in population (points): 65.86
Average percent parens in population: 0.015
Minimum age in population: 189.0867596870392
Maximum age in population: 193.8578340906629
Average age in population: 191.6501825147461
Median age in population: 191.7131001947665
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.157
Error (vector) diversity:			 0.167
Behavioral diversity:				 0.17
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 201754549
--- Timings ---
Current time: 1529615349658 milliseconds
Total Time:         466.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       191.4 seconds, 41.1%
Fitness Testing:    216.3 seconds, 46.4%
Report:              58.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_949} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_dup_times} {:instruction print_integer})
Best program: (float_sub print_integer integer_mod float_yankdup integer_div float_cos float_cos float_flush float_yank tagged_949 integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_dup_times print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3128.7993939000003
Median total errors in population: 201.43079999999998
Error averages by case: (129.05329379999833 6.931 122.35271429999945 8.622 118.46039290000053 9.491 127.30490100000127 8.662 119.54849769999872 10.248 118.64807109999957 9.426 101.88220360000119 7.671 126.15418430000051 7.829 101.4512690000007 7.846 124.16582170000034 6.909 125.20368730000145 7.689 123.82153919999897 6.868 124.94906449999807 7.865 99.0873987000015 8.786 119.802165599999 9.463 98.31390170000083 6.729 124.21166819999867 8.578 107.73595890000077 9.429 124.70798890000223 8.639 107.13700550000021 7.838 124.74245889999845 8.685 104.7972936000002 7.745 102.83646649999864 7.86 122.82812940000126 8.577 122.6613175999993 8.556)
Error minima by case: (0.0084 5 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.6858 5 0.3128 6 0.0717 6 0.0919 6 0.2333 6 0.0054 5 0.3396 7 0.2382 6 0.4713 7 0.0279 5 0.1961 7 0.0825 7 0.4073 7 0.4047 6 0.3065 6 0.6796 6 0.7782 6 0.2913 7 0.4311 6)
Average genome size in population (length): 64.558
Average program size in population (points): 65.558
Average percent parens in population: 0.015
Minimum age in population: 190.5697425654913
Maximum age in population: 195.0710228533324
Average age in population: 193.1172493798
Median age in population: 193.1877264716011
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.157
Error (vector) diversity:			 0.163
Behavioral diversity:				 0.164
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 203368874
--- Timings ---
Current time: 1529615353278 milliseconds
Total Time:         469.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.9 seconds, 41.1%
Fitness Testing:    218.1 seconds, 46.4%
Report:              58.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_cos} {:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_shove} {:instruction in1} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction integer_mod} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_cos float_sub print_integer float_stackdepth float_shove in1 integer_max integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod tag_float_838 integer_add float_dec float_frominteger float_shove print_float 72 float_pop integer_mod 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3175.5078280000007
Median total errors in population: 201.43079999999998
Error averages by case: (128.280660999998 6.947 123.32401109999944 8.698 118.47632590000059 9.548 127.43431940000174 8.68 119.44381919999837 10.273 118.65859589999951 9.504 107.0579775000015 7.727 126.10699740000054 7.859 106.36951210000088 7.815 124.7957489000004 6.929 125.4004717000019 7.717 124.83368859999891 6.916 125.3064791999976 7.873 104.88678560000196 8.764 119.41911579999876 9.542 104.31915690000099 6.754 124.65643579999835 8.626 111.49617680000115 9.55 125.20722850000273 8.648 112.30111100000019 7.89 124.72818819999802 8.708 110.44905800000058 7.822 107.78691939999834 7.859 123.86704450000168 8.621 123.05999959999903 8.572)
Error minima by case: (0.003 5 0.1605 5 0.1626 7 0.2964 6 0.317 8 0.1294 6 0.2913 5 0.3129 7 0.0724 6 0.1108 6 0.2333 6 0.0055 5 0.3585 6 0.2389 6 0.4524 8 0.028 5 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3254 6 0.2464 6 0.1989 6 0.3103 7 0.4501 6)
Average genome size in population (length): 64.462
Average program size in population (points): 65.462
Average percent parens in population: 0.015
Minimum age in population: 191.7880453552755
Maximum age in population: 196.5996305482489
Average age in population: 194.5727920290055
Median age in population: 194.6223985388147
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.157
Error (vector) diversity:			 0.169
Behavioral diversity:				 0.17
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 204980699
--- Timings ---
Current time: 1529615357239 milliseconds
Total Time:         473.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.3 seconds, 41.0%
Fitness Testing:    220.0 seconds, 46.5%
Report:              59.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_shove} {:instruction 73} {:instruction tagged_497} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_stackdepth float_yank integer_div float_cos float_cos float_flush float_yank in1 integer_max integer_fromfloat float_shove float_max in2 tag_float_138 integer_add float_mod float_frominteger float_shove 72 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_shove 73 tagged_497 float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3182.356153
Median total errors in population: 201.43079999999998
Error averages by case: (135.22215309999808 6.967 129.29253789999947 8.673 117.41143330000102 9.574 134.3472969000017 8.707 118.32071469999819 10.301 117.88222229999944 9.487 95.19101910000143 7.69 132.62336700000057 7.856 95.67758950000086 7.817 130.8526870000004 6.961 131.80346230000163 7.736 131.38995199999857 6.91 131.59181729999722 7.913 94.11662190000202 8.819 118.63012459999858 9.54 92.03595300000099 6.815 130.90653739999843 8.611 107.26187440000169 9.473 131.45126300000302 8.641 106.54010170000016 7.931 131.4152108999977 8.745 104.645915300001 7.81 96.0926286999985 7.882 129.84862220000173 8.6 129.7230474999991 8.623)
Error minima by case: (0.0023 5 0.1613 6 0.1816 7 0.2971 6 0.3359 8 0.1483 7 0.291 5 0.3136 7 0.0719 6 0.0919 6 0.2341 6 0.0062 5 0.3396 6 0.2384 4 0.4713 7 0.0287 5 0.1968 7 0.0825 6 0.4081 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 6 0.4311 6)
Average genome size in population (length): 64.721
Average program size in population (points): 65.721
Average percent parens in population: 0.015
Minimum age in population: 192.9739275609491
Maximum age in population: 198.0454094828007
Average age in population: 196.0227901369203
Median age in population: 196.0469836687392
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.173
Error (vector) diversity:			 0.187
Behavioral diversity:				 0.19
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 206599074
--- Timings ---
Current time: 1529615360736 milliseconds
Total Time:         477.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       195.6 seconds, 41.0%
Fitness Testing:    221.8 seconds, 46.5%
Report:              59.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_dup_times} {:instruction float_yank} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mult} {:instruction float_dec} {:instruction in2} {:instruction tag_float_329} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_stackdepth} {:instruction print_float} {:instruction print_float} {:instruction 72} {:instruction float_shove} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction float_dup_items} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (integer_max float_yankdup float_flush float_yank tagged_847 integer_dup_times float_yank in1 integer_max integer_fromfloat float_flush integer_sub integer_shove integer_swap float_mult float_dec in2 tag_float_329 integer_add float_mod float_frominteger float_shove float_stackdepth print_float print_float 72 float_shove float_swap 72 float_mod integer_yankdup 72 float_mod integer_yankdup 72 float_mod float_dup_items float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3373.7461128000004
Median total errors in population: 201.43079999999998
Error averages by case: (142.9923575999985 7.043 136.41397340000012 8.763 126.87541920000079 9.582 141.79766240000168 8.769 128.27883929999842 10.292 127.61068689999955 9.491 104.45723560000141 7.801 140.10509310000054 7.942 105.1866756000009 7.937 138.36935550000038 7.026 139.21106140000163 7.808 138.44327459999937 6.976 139.0150815999974 7.977 103.31845930000213 8.838 128.31479419999872 9.534 100.03052260000086 6.849 138.2637501999991 8.69 112.48744850000142 9.532 138.69866200000283 8.734 112.06219730000024 7.938 136.51536789999784 8.807 109.16378120000074 7.874 105.50020589999839 7.982 136.80609850000113 8.702 134.2721089999994 8.669)
Error minima by case: (0.0033 5 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 6 0.0717 6 0.0919 6 0.2333 5 0.0055 5 0.3396 6 0.2382 6 0.4713 7 0.028 5 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 5)
Average genome size in population (length): 65.379
Average program size in population (points): 66.379
Average percent parens in population: 0.015
Minimum age in population: 194.8505620836088
Maximum age in population: 199.5458739358133
Average age in population: 197.4634337496348
Median age in population: 197.5014823718907
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.174
Error (vector) diversity:			 0.183
Behavioral diversity:				 0.186
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 208233699
--- Timings ---
Current time: 1529615364269 milliseconds
Total Time:         480.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       196.9 seconds, 41.0%
Fitness Testing:    223.5 seconds, 46.5%
Report:              60.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_shove} {:instruction tagged_969} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_pop} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_shove tagged_969 float_yank integer_div float_cos float_sub print_integer float_stackdepth float_yank integer_div float_cos float_pop float_flush float_yank tagged_847 integer_mod float_cos in1 integer_max integer_fromfloat float_flush in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2916.4040385000008
Median total errors in population: 201.43079999999998
Error averages by case: (121.18197419999828 6.916 115.42356799999948 8.632 109.13737920000042 9.52 120.35640940000144 8.664 109.9948814999988 10.274 108.48922739999948 9.477 91.37846940000135 7.673 118.70196150000058 7.814 90.90587160000081 7.784 116.81026530000044 6.921 117.93875770000143 7.692 117.025078299999 6.865 117.79818129999796 7.857 89.5830904000016 8.757 110.327244799999 9.522 88.4592192000009 6.752 117.1396944999987 8.575 97.49108870000097 9.447 117.77212310000235 8.619 97.26586770000021 7.876 117.32603869999845 8.703 95.05759380000045 7.773 92.23670209999851 7.849 116.10846450000147 8.577 115.36888619999908 8.587)
Error minima by case: (0.0033 6 0.1605 6 0.7666 6 0.2964 6 0.3877 8 0.7999 8 0.2913 5 0.3129 6 0.0724 5 0.8852 5 0.2333 6 0.0055 5 0.6375 6 0.2389 5 0.4768 7 0.028 4 0.1961 6 0.0825 6 0.4074 6 0.4047 6 0.6706 6 0.2686 6 0.1989 5 0.2913 6 0.546 6)
Average genome size in population (length): 65.236
Average program size in population (points): 66.236
Average percent parens in population: 0.015
Minimum age in population: 195.9133788279106
Maximum age in population: 201.0536658014328
Average age in population: 198.8539192138271
Median age in population: 198.8678578724812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.166
Error (vector) diversity:			 0.177
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 209864849
--- Timings ---
Current time: 1529615368126 milliseconds
Total Time:         484.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       198.4 seconds, 41.0%
Fitness Testing:    225.3 seconds, 46.5%
Report:              60.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_146} {:instruction integer_add} {:instruction integer_yankdup} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction integer_max} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_stackdepth float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_frominteger integer_fromfloat in2 tag_float_146 integer_add integer_yankdup tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap float_pop float_swap 72 integer_max integer_yankdup 72 float_mod float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3298.0388612
Median total errors in population: 201.43079999999998
Error averages by case: (141.0403613999985 6.996 133.49037230000005 8.728 121.39381780000048 9.564 139.71606720000182 8.71 122.3966850999985 10.286 122.00898049999954 9.478 100.60995960000136 7.789 137.19171000000054 7.909 101.43823400000093 7.909 135.23138010000042 6.99 136.2580434000019 7.776 135.38288499999902 6.96 135.99712199999718 7.94 99.21980660000179 8.827 122.57477679999887 9.541 96.8839503000009 6.813 135.26707389999888 8.674 112.96860950000114 9.541 135.78624800000324 8.706 112.41590390000027 7.924 134.39455629999787 8.778 110.02652500000048 7.842 101.70996599999852 7.957 134.0006380000012 8.662 131.69418849999934 8.641)
Error minima by case: (0.0023 4 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 6 0.0716 6 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2381 6 0.4713 7 0.028 5 0.1961 7 0.0825 6 0.4074 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 65.045
Average program size in population (points): 66.045
Average percent parens in population: 0.015
Minimum age in population: 197.2702193473593
Maximum age in population: 202.4267439101353
Average age in population: 200.2766568589843
Median age in population: 200.2935639662219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.184
Error (vector) diversity:			 0.195
Behavioral diversity:				 0.196
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 211491349
--- Timings ---
Current time: 1529615371651 milliseconds
Total Time:         488.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       199.8 seconds, 40.9%
Fitness Testing:    227.1 seconds, 46.5%
Report:              61.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction print_integer} {:instruction integer_div} {:instruction float_yank} {:instruction float_pop} {:instruction float_cos} {:instruction in1} {:instruction integer_sub} {:instruction float_cos} {:instruction float_shove} {:instruction integer_dec} {:instruction print_integer} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction 72} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (print_integer print_integer integer_div float_yank float_pop float_cos in1 integer_sub float_cos float_shove integer_dec print_integer in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_frominteger integer_yankdup 72 integer_shove float_stackdepth float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3427.9257150000003
Median total errors in population: 201.43079999999998
Error averages by case: (145.67103519999918 7.164 138.37430870000017 8.782 131.71267650000047 9.673 144.26044400000163 8.816 132.7606550999982 10.374 132.00051069999955 9.611 104.48714660000157 7.792 142.30729680000047 8.025 105.4966893000009 7.984 139.99297730000032 7.133 141.30284310000175 7.846 140.6912722999996 7.062 140.97652819999746 8.082 103.37071420000217 8.957 133.21579739999865 9.659 100.87817840000108 6.933 140.25563499999922 8.745 112.4899035000014 9.572 141.03346940000284 8.745 112.09677630000024 8.11 140.84074659999797 8.891 109.06907520000082 7.955 105.66411719999832 8.026 139.02201870000087 8.756 138.50389929999963 8.758)
Error minima by case: (0.0038 4 0.156 6 0.1816 6 0.2918 6 0.3359 8 0.1483 7 0.2913 5 0.3083 7 0.0694 5 0.0919 6 0.2288 6 9.0E-4 5 0.3396 6 0.2346 6 0.4713 7 0.0234 4 0.1916 7 0.0825 7 0.4028 7 0.4047 6 0.3065 6 0.2685 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 65.271
Average program size in population (points): 66.271
Average percent parens in population: 0.015
Minimum age in population: 198.7490363752953
Maximum age in population: 203.8480589617396
Average age in population: 201.8313857211585
Median age in population: 201.8939108840027
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.193
Error (vector) diversity:			 0.208
Behavioral diversity:				 0.21
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 213123649
--- Timings ---
Current time: 1529615375552 milliseconds
Total Time:         491.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       201.3 seconds, 40.9%
Fitness Testing:    228.9 seconds, 46.5%
Report:              61.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_add} {:instruction in1} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_sub} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction tagged_618} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction float_cos} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_stackdepth float_add in1 float_cos float_flush float_yank integer_div float_cos tagged_847 integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_sub in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_mod integer_shove print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 tagged_618 integer_dec integer_dec integer_mult float_mod print_integer float_cos float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2858.2534404000007
Median total errors in population: 201.43079999999998
Error averages by case: (116.48216379999852 6.952 111.01757989999946 8.663 108.43455590000045 9.558 115.05334800000125 8.673 109.91884529999898 10.279 109.67542259999946 9.496 92.82284530000113 7.68 114.44025580000057 7.827 92.99516210000087 7.827 112.96234580000045 6.937 113.5920348000015 7.709 112.07366149999906 6.897 113.42302119999837 7.883 90.84427060000186 8.774 109.59465449999905 9.538 88.36202820000067 6.779 112.6545998999988 8.59 94.62910820000131 9.485 112.74991610000208 8.633 94.26842100000019 7.901 114.79581349999863 8.718 92.19119010000078 7.803 93.58495099999877 7.875 111.24335240000126 8.567 112.8018928999991 8.598)
Error minima by case: (0.0028 5 0.1605 5 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2905 5 0.3129 7 0.0724 5 0.0919 6 0.2333 6 0.0055 5 0.3396 7 0.2389 7 0.4713 7 0.028 5 0.1961 7 0.0825 7 0.4074 6 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 6 0.4311 6)
Average genome size in population (length): 65.241
Average program size in population (points): 66.241
Average percent parens in population: 0.015
Minimum age in population: 200.2812142821999
Maximum age in population: 205.3108136951683
Average age in population: 203.2393504340311
Median age in population: 203.307501110765
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.161
Error (vector) diversity:			 0.171
Behavioral diversity:				 0.172
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 214754974
--- Timings ---
Current time: 1529615379101 milliseconds
Total Time:         495.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       202.6 seconds, 40.9%
Fitness Testing:    230.6 seconds, 46.6%
Report:              62.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_36} {:instruction print_integer} {:instruction float_inc} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_943} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_pop} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_pop} {:instruction float_dup} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_shove} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction float_dup} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (tagged_36 print_integer float_inc float_cos float_cos float_flush float_yank tagged_943 integer_mod float_cos in1 integer_pop integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_pop float_dup integer_mod float_mod integer_shove in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer float_dup float_div print_float float_pop integer_max float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3850.8389234
Median total errors in population: 201.43079999999998
Error averages by case: (156.99048949999968 7.193 150.13159380000093 8.917 141.7383017999997 9.744 155.5962911000016 8.903 143.14611969999848 10.434 141.97736419999956 9.653 133.96615080000137 8.005 154.05140790000058 8.096 134.6673327000006 8.102 151.3477116000004 7.185 153.10946170000176 7.952 152.17636700000043 7.165 152.84805849999765 8.138 132.73010960000235 9.017 143.02031009999868 9.73 129.03139270000108 7.021 152.13030230000027 8.855 140.32735900000148 9.687 151.82207940000276 8.908 139.74165690000027 8.11 152.4766137999982 8.931 137.5719558000004 8.04 134.9820684999987 8.14 151.06257129999983 8.827 150.62385370000035 8.819)
Error minima by case: (0.0015 5 0.1605 5 0.1816 7 0.2964 5 0.3359 8 0.1483 6 0.2913 4 0.3128 5 0.0687 4 0.0919 4 0.2333 5 0.0054 5 0.3396 5 0.2389 4 0.4713 7 0.0279 4 0.1961 5 0.0825 7 0.4073 5 0.4047 6 0.3065 5 0.2686 6 0.1989 4 0.2913 5 0.4311 5)
Average genome size in population (length): 65.343
Average program size in population (points): 66.343
Average percent parens in population: 0.015
Minimum age in population: 202.1147726521091
Maximum age in population: 207.0768711671315
Average age in population: 204.7292409948007
Median age in population: 204.7701860256788
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.188
Error (vector) diversity:			 0.203
Behavioral diversity:				 0.206
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 216388999
--- Timings ---
Current time: 1529615383074 milliseconds
Total Time:         499.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       204.2 seconds, 40.9%
Fitness Testing:    232.5 seconds, 46.6%
Report:              62.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_yank} {:instruction integer_flush} {:instruction print_integer} {:instruction float_inc} {:instruction float_rot} {:instruction float_yank} {:instruction -44.763396384417796} {:instruction float_cos} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction tagged_497} {:instruction float_mod} {:instruction integer_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_yank integer_flush print_integer float_inc float_rot float_yank -44.763396384417796 float_cos float_yank float_dup_times integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 tagged_497 float_mod integer_inc float_dup_items float_div in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3397.7726596000007
Median total errors in population: 201.43079999999998
Error averages by case: (139.2746801999984 7.082 130.5563295999995 8.769 127.22458950000102 9.551 136.92476710000147 8.782 129.09550159999804 10.294 128.03436599999955 9.481 116.80392000000145 7.79 135.39130200000056 7.993 117.19374600000091 7.969 133.19631990000045 7.07 134.25639840000147 7.843 131.72356989999855 7.007 133.88957439999746 8.027 114.25740390000249 8.871 128.70887259999859 9.521 112.310371500001 6.868 132.97459859999879 8.745 120.95490630000164 9.515 132.86222140000277 8.748 120.3065764000002 7.949 134.68038279999783 8.785 117.58592020000107 7.865 117.77564549999838 7.987 130.52808650000142 8.702 131.35260929999924 8.696)
Error minima by case: (0.0033 5 0.1613 6 0.1816 7 0.2971 6 0.3359 8 0.1483 7 0.2498 5 0.3136 6 0.0717 5 0.0919 6 0.2341 6 0.0062 5 0.3396 7 0.2381 6 0.4713 7 0.0287 5 0.1968 7 0.0825 6 0.4081 7 0.4047 6 0.3065 6 0.2686 6 0.1574 7 0.2913 7 0.4311 6)
Average genome size in population (length): 65.423
Average program size in population (points): 66.423
Average percent parens in population: 0.015
Minimum age in population: 203.6899742717762
Maximum age in population: 208.598668888854
Average age in population: 206.194772085886
Median age in population: 206.251735101368
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.864
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.179
Error (vector) diversity:			 0.191
Behavioral diversity:				 0.195
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 218024999
--- Timings ---
Current time: 1529615386845 milliseconds
Total Time:         503.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       205.8 seconds, 40.9%
Fitness Testing:    234.2 seconds, 46.5%
Report:              63.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_146} {:instruction integer_add} {:instruction integer_yankdup} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction integer_min} {:instruction float_div} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_dec} {:instruction integer_max} {:instruction print_integer})
Best program: (float_sub print_integer float_stackdepth float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_frominteger integer_fromfloat in2 tag_float_146 integer_add integer_yankdup tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_swap 72 float_mod integer_yankdup 72 integer_min float_div float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_dec integer_max print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3285.3489076000005
Median total errors in population: 201.43079999999998
Error averages by case: (138.5973909999986 7.109 131.78199079999948 8.768 125.9264460000007 9.603 136.97083920000134 8.825 127.42406179999858 10.32 126.54245539999955 9.507 100.77860810000116 7.78 135.8351260000005 7.974 101.15500280000076 7.968 133.81643500000038 7.082 134.84218090000138 7.816 133.4267081999989 7.039 134.55041479999792 8.031 98.79665210000154 8.91 127.32271939999876 9.559 96.87200820000068 6.898 133.7563333999989 8.72 107.97728900000114 9.529 134.0153368000024 8.759 107.52753260000017 7.987 135.26245619999844 8.857 104.98819770000063 7.885 101.68927939999865 8.004 132.05042100000128 8.725 133.0520217999992 8.736)
Error minima by case: (0.0023 4 0.1487 6 0.1816 7 0.2846 6 0.3359 8 0.1483 7 0.664 4 0.3011 7 0.0649 6 0.0919 6 0.2215 6 0.0055 5 0.3396 6 0.2274 6 0.4713 7 0.0162 4 0.1843 6 0.0825 6 0.3956 7 0.4047 6 0.3065 6 0.6796 6 0.7574 6 0.2913 7 0.4311 6)
Average genome size in population (length): 65.701
Average program size in population (points): 66.701
Average percent parens in population: 0.015
Minimum age in population: 205.264387729395
Maximum age in population: 209.665943263256
Average age in population: 207.6290512455584
Median age in population: 207.705891842572
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.187
Error (vector) diversity:			 0.198
Behavioral diversity:				 0.198
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 219668099
--- Timings ---
Current time: 1529615390464 milliseconds
Total Time:         506.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       207.2 seconds, 40.9%
Fitness Testing:    236.0 seconds, 46.6%
Report:              63.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction print_integer} {:instruction integer_div} {:instruction float_yank} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_943} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_pop} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction float_dup} {:instruction float_mod} {:instruction integer_yankdup} {:instruction tag_integer_748} {:instruction integer_yank} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_tan} {:instruction float_swap} {:instruction 72} {:instruction 56} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_shove} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (print_integer print_integer integer_div float_yank float_pop float_cos float_cos float_flush float_yank tagged_943 integer_mod float_cos in1 integer_pop integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap float_dup float_mod integer_yankdup tag_integer_748 integer_yank float_frominteger integer_add float_tan float_swap 72 56 print_float in1 integer_fromfloat 72 float_shove 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3464.5889437000005
Median total errors in population: 201.43079999999998
Error averages by case: (140.98097759999928 7.009 135.52424649999998 8.722 129.8916406000009 9.604 139.1582758000018 8.722 130.85247689999815 10.302 130.41817669999952 9.556 118.13331840000166 7.74 138.5111473000006 7.915 117.37940490000092 7.885 136.93850460000039 7.014 137.70793790000178 7.771 137.50053609999995 6.993 137.75447519999716 7.937 115.75544360000256 8.852 130.33858549999866 9.597 113.86973140000109 6.877 136.91064569999944 8.645 121.21532940000156 9.526 137.48603500000308 8.693 120.80120050000025 7.973 137.41660499999773 8.766 119.58627270000103 7.874 118.79922089999818 7.954 136.12312150000125 8.653 136.3136339999998 8.642)
Error minima by case: (0.0014 5 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0723 6 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2387 6 0.4713 7 0.028 5 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 65.932
Average program size in population (points): 66.932
Average percent parens in population: 0.015
Minimum age in population: 206.2997414354694
Maximum age in population: 211.06342805222
Average age in population: 209.0256565342272
Median age in population: 209.0637014298401
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.177
Error (vector) diversity:			 0.194
Behavioral diversity:				 0.196
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 221316749
--- Timings ---
Current time: 1529615394264 milliseconds
Total Time:         510.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       208.7 seconds, 40.9%
Fitness Testing:    237.9 seconds, 46.6%
Report:              63.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_146} {:instruction integer_add} {:instruction integer_yankdup} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 73} {:instruction float_pop} {:instruction float_swap} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_shove} {:instruction float_div} {:instruction print_float} {:instruction in2} {:instruction print_float} {:instruction float_shove} {:instruction integer_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 33} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction tagged_497} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_stackdepth float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub float_frominteger integer_fromfloat in2 tag_float_146 integer_add integer_yankdup tag_float_838 integer_add float_mod float_frominteger float_shove print_float 73 float_pop float_swap float_pop float_swap 72 float_shove float_div print_float in2 print_float float_shove integer_shove print_float 72 float_pop float_swap 33 float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 tagged_497 float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3518.7920958000004
Median total errors in population: 201.43079999999998
Error averages by case: (148.3827021999987 7.124 141.32554899999997 8.77 128.60650890000068 9.614 146.9083476000016 8.809 129.90611939999854 10.3 129.2518565999996 9.523 111.28105170000137 7.804 145.10455370000057 7.994 112.11599240000088 7.947 143.1318282000004 7.079 144.17426170000152 7.837 143.44473309999918 7.053 143.9120926999975 8.025 109.82836040000167 8.915 129.99259969999892 9.569 107.66204570000083 6.883 143.182360499999 8.75 125.66930900000128 9.564 143.8521540000028 8.766 125.28888370000027 8.001 140.25577929999804 8.832 122.71793370000073 7.911 112.35383299999843 7.994 141.88485780000113 8.722 138.06338179999938 8.709)
Error minima by case: (0.0045 5 0.1605 6 0.7666 8 0.2964 6 0.6123 8 0.7999 8 0.2906 5 0.3129 7 0.0677 6 0.8852 6 0.2333 5 0.0055 5 0.6375 6 0.2389 7 0.4768 8 0.028 5 0.1961 6 0.0825 7 0.4074 7 0.4047 5 0.6676 6 0.2686 6 0.1982 6 0.6858 7 0.546 6)
Average genome size in population (length): 66.412
Average program size in population (points): 67.412
Average percent parens in population: 0.015
Minimum age in population: 207.9570025595972
Maximum age in population: 212.7253117968923
Average age in population: 210.4166566671236
Median age in population: 210.4428915274313
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.171
Error (vector) diversity:			 0.186
Behavioral diversity:				 0.19
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 222977349
--- Timings ---
Current time: 1529615397847 milliseconds
Total Time:         514.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       210.0 seconds, 40.8%
Fitness Testing:    239.6 seconds, 46.6%
Report:              64.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_cos} {:instruction integer_inc} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_cos} {:instruction 91.72647085746559} {:instruction float_dup_times} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_yank integer_div integer_dup_times float_cos integer_inc float_yank tagged_847 integer_mod float_cos 91.72647085746559 float_dup_times integer_mod float_cos in1 integer_max integer_fromfloat integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove float_mod integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3436.269933
Median total errors in population: 201.43079999999998
Error averages by case: (139.4346501999986 7.31 132.02604099999954 8.96 129.39455030000062 9.848 137.34673690000153 8.954 130.84176649999867 10.525 130.09700209999951 9.742 117.79137640000128 7.997 135.98463140000052 8.16 118.38321080000091 8.129 133.90633360000047 7.264 134.99276510000158 8.021 134.78854739999932 7.24 135.06953329999774 8.205 115.38108580000187 9.056 130.25107909999886 9.823 113.17939420000083 7.113 133.9351697999987 8.89 121.16869150000124 9.745 134.5696313000027 8.943 120.17544260000018 8.212 137.30811289999832 9.026 118.03066760000056 8.126 118.79125049999854 8.21 132.59335630000137 8.877 135.5339063999995 8.919)
Error minima by case: (0.0037 5 0.1613 6 0.1816 6 0.2971 6 0.3359 9 0.1483 7 0.2913 5 0.3136 7 0.0717 6 0.0919 6 0.2341 6 0.0062 5 0.3396 6 0.2381 7 0.4713 7 0.0287 6 0.1968 7 0.0825 6 0.4081 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 6 0.4311 6)
Average genome size in population (length): 66.409
Average program size in population (points): 67.409
Average percent parens in population: 0.015
Minimum age in population: 209.2418041452109
Maximum age in population: 213.7032395074517
Average age in population: 211.8477158021826
Median age in population: 211.9113940225069
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.197
Error (vector) diversity:			 0.21
Behavioral diversity:				 0.215
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 224637999
--- Timings ---
Current time: 1529615401522 milliseconds
Total Time:         517.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       211.4 seconds, 40.8%
Fitness Testing:    241.4 seconds, 46.6%
Report:              64.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_inc} {:instruction float_swap} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction integer_div} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_sub} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_flush} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub integer_inc float_swap float_yank integer_div float_cos float_cos float_flush float_yank tagged_847 integer_mod integer_div in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat integer_dup integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_sub integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_flush print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3267.5409478000006
Median total errors in population: 201.43079999999998
Error averages by case: (135.6069604999988 7.103 128.4739959999995 8.811 118.74853630000025 9.675 134.18711450000143 8.842 120.737380299999 10.389 119.89290769999955 9.608 107.2411655000013 7.828 132.29590630000058 7.983 107.98486690000081 7.968 130.1043581000004 7.068 131.28527200000138 7.868 130.82098059999902 7.046 130.99159489999803 8.045 105.01417810000162 8.912 121.10832589999917 9.635 102.69492320000082 6.916 130.25241589999868 8.772 116.13144890000099 9.611 131.09265100000218 8.773 115.70777590000019 8.006 129.36663759999848 8.852 112.98054360000033 7.938 108.24718369999854 8.007 129.1756136000014 8.744 126.26921079999924 8.729)
Error minima by case: (0.0033 5 0.1613 6 0.1816 8 0.2971 6 0.3359 8 0.1483 6 0.2913 5 0.3136 7 0.0689 6 0.0919 6 0.2341 6 0.0062 5 0.3396 7 0.2379 7 0.4713 7 0.0284 5 0.1968 7 0.0825 7 0.4081 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 66.361
Average program size in population (points): 67.361
Average percent parens in population: 0.015
Minimum age in population: 210.7665650567675
Maximum age in population: 215.2531954335146
Average age in population: 213.2252550779521
Median age in population: 213.2656995852457
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.174
Error (vector) diversity:			 0.185
Behavioral diversity:				 0.189
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 226297199
--- Timings ---
Current time: 1529615405438 milliseconds
Total Time:         521.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       212.8 seconds, 40.8%
Fitness Testing:    243.4 seconds, 46.7%
Report:              65.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_mult} {:instruction integer_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_cos} {:instruction float_flush} {:instruction float_yankdup} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction float_div} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_mod} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction integer_dup_items} {:instruction 73} {:instruction tagged_618} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_mod} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub integer_mult integer_yankdup integer_div integer_div float_cos float_cos float_flush float_yankdup float_cos float_flush float_yankdup tagged_847 integer_mod float_cos in1 float_div integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 float_mod float_frominteger float_mod integer_yankdup 72 float_mod integer_shove float_mod print_float in1 integer_fromfloat 72 integer_dup_items 73 tagged_618 float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_mod integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3726.6926762000007
Median total errors in population: 201.43079999999998
Error averages by case: (157.41041059999966 7.176 150.08728070000095 8.844 141.02208630000047 9.715 155.27258780000165 8.898 142.2438353999979 10.39 141.16183729999958 9.653 119.03836360000145 7.874 154.6434478000005 8.051 119.58835560000088 8.036 152.47177800000034 7.15 153.75243210000173 7.91 151.14329500000002 7.127 153.5272685999973 8.093 117.4073758000025 8.952 142.06380929999847 9.663 115.33018490000102 6.983 152.83939260000008 8.813 126.80529010000168 9.673 152.3935814000031 8.815 126.47702340000019 8.122 148.61192369999773 8.917 123.30312720000117 8.028 119.93723289999843 8.065 150.62944530000001 8.778 147.02831080000038 8.777)
Error minima by case: (0.0023 5 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0724 6 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2389 6 0.4713 7 0.028 5 0.1961 6 0.0825 7 0.4074 7 0.4047 6 0.2547 6 0.2686 6 0.1989 6 0.2913 7 0.3793 6)
Average genome size in population (length): 66.135
Average program size in population (points): 67.135
Average percent parens in population: 0.015
Minimum age in population: 211.9484623874434
Maximum age in population: 216.750031367119
Average age in population: 214.6208135542436
Median age in population: 214.6630712741223
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.197
Error (vector) diversity:			 0.208
Behavioral diversity:				 0.21
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 227950849
--- Timings ---
Current time: 1529615409177 milliseconds
Total Time:         525.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       214.2 seconds, 40.8%
Fitness Testing:    245.3 seconds, 46.7%
Report:              65.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_add} {:instruction integer_div} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_cos} {:instruction tagged_847} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction float_min} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_dec} {:instruction print_float} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_add} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_stackdepth float_add integer_div float_cos float_flush float_yank float_yankdup integer_mod float_cos tagged_847 integer_mod integer_flush in1 float_min integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_frominteger integer_dec print_float integer_add float_frominteger integer_add print_float 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2740.8513512
Median total errors in population: 201.43079999999998
Error averages by case: (116.63701349999846 7.045 107.38783609999946 8.683 100.21469400000035 9.554 114.18010380000136 8.738 102.47515399999881 10.285 102.07933579999951 9.468 85.58609440000114 7.712 112.45419240000051 7.878 86.32166040000082 7.859 110.03316610000039 6.991 111.01962750000145 7.769 108.77498119999903 6.932 110.93020489999803 7.951 82.92782200000121 8.843 101.78688989999921 9.536 80.82849950000066 6.857 109.71543649999872 8.646 91.11458740000079 9.493 108.86336380000216 8.656 89.4976020000002 7.926 109.59677259999856 8.78 88.16605030000031 7.782 86.77301249999866 7.907 108.4495536000013 8.657 106.42069699999915 8.669)
Error minima by case: (0.0033 5 0.1613 6 0.1816 7 0.2971 7 0.3359 8 0.1483 6 0.6865 5 0.3136 7 0.0724 6 0.0919 6 0.2341 7 0.0062 5 0.3396 6 0.2389 6 0.4713 7 0.0287 4 0.1968 7 0.0825 7 0.4081 7 0.4047 6 0.3065 6 0.6796 6 0.7572 6 0.2913 7 0.4311 6)
Average genome size in population (length): 65.887
Average program size in population (points): 66.887
Average percent parens in population: 0.015
Minimum age in population: 212.9484623874434
Maximum age in population: 218.1854239060606
Average age in population: 216.00967565659
Median age in population: 216.0691034534708
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.164
Error (vector) diversity:			 0.173
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 229598324
--- Timings ---
Current time: 1529615412885 milliseconds
Total Time:         529.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       215.6 seconds, 40.8%
Fitness Testing:    247.1 seconds, 46.7%
Report:              66.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_dup_times} {:instruction float_div} {:instruction in1} {:instruction float_flush} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_swap} {:instruction tag_float_838} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_shove} {:instruction 73} {:instruction tagged_497} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_yank integer_dup_times float_div in1 float_flush in1 integer_max integer_fromfloat float_cos integer_max integer_fromfloat float_flush integer_swap float_mult integer_fromfloat in2 tag_float_138 integer_add float_swap tag_float_838 integer_add integer_add float_frominteger float_div print_float in1 integer_fromfloat 72 float_shove 73 tagged_497 integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3193.096753800001
Median total errors in population: 201.43079999999998
Error averages by case: (130.21389139999806 6.986 124.62069019999949 8.69 121.40360660000064 9.585 128.48233800000136 8.717 122.89298519999869 10.278 122.50015259999947 9.537 105.83640740000112 7.714 128.25927800000062 7.887 105.00643990000083 7.883 126.87952570000047 6.991 127.39875240000127 7.737 125.29170139999869 6.962 126.23733769999788 7.931 103.76429860000182 8.784 122.56342779999889 9.564 102.21044810000082 6.833 125.41667899999878 8.641 110.44333690000116 9.536 126.26647040000236 8.665 110.01881470000019 7.969 125.90510989999825 8.729 107.72429710000081 7.87 106.61784889999865 7.916 124.62954950000136 8.63 123.8823663999991 8.596)
Error minima by case: (0.0015 5 0.1605 5 0.1816 7 0.2837 6 0.3359 8 0.1483 7 0.2773 5 0.3129 7 0.0687 6 0.0919 5 0.2333 6 0.0055 5 0.3396 6 0.2382 7 0.4713 7 0.028 5 0.1961 7 0.0825 7 0.4074 6 0.4047 6 0.3065 6 0.2686 6 0.1849 6 0.2913 6 0.4311 6)
Average genome size in population (length): 66.415
Average program size in population (points): 67.415
Average percent parens in population: 0.015
Minimum age in population: 214.6742134730759
Maximum age in population: 219.9304152251711
Average age in population: 217.4591247479594
Median age in population: 217.5170167119245
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.172
Error (vector) diversity:			 0.186
Behavioral diversity:				 0.191
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 231258799
--- Timings ---
Current time: 1529615416689 milliseconds
Total Time:         533.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       217.1 seconds, 40.7%
Fitness Testing:    249.0 seconds, 46.7%
Report:              66.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_36} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_flush} {:instruction integer_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction integer_add} {:instruction integer_dup} {:instruction in1} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_rot} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction tag_float_325} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_pop} {:instruction float_dup_times} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (tagged_36 print_integer float_inc float_yank float_flush integer_inc print_float float_inc float_yank float_yank integer_add integer_dup in1 integer_yankdup integer_fromfloat float_shove integer_max integer_fromfloat integer_swap integer_sub integer_shove integer_rot in2 tag_float_138 integer_add float_mod tag_float_838 tag_float_325 integer_add integer_add float_frominteger integer_flush print_float integer_sub float_pop float_dup_times in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3526.951283900001
Median total errors in population: 201.43079999999998
Error averages by case: (143.82667599999897 7.055 139.0775714000005 8.755 130.99274910000096 9.626 142.6259053000016 8.773 132.13204169999813 10.311 131.5278625999995 9.571 116.99144570000148 7.757 142.47872430000055 7.951 117.33005960000085 7.905 140.92486490000041 7.041 141.6443234000016 7.798 140.56229099999948 7.011 141.46484039999726 7.974 115.71457650000234 8.855 132.10540649999862 9.597 113.803231500001 6.849 140.73105679999972 8.681 125.74245320000163 9.56 141.05802670000304 8.697 125.39923720000023 8.012 140.76581729999768 8.776 123.22532740000108 7.919 117.7929805999984 7.931 139.4159468000005 8.672 139.87686800000014 8.664)
Error minima by case: (0.0021 5 0.1613 5 0.1816 8 0.2971 6 0.3359 8 0.1483 7 0.2913 5 0.3136 7 0.0707 5 0.0919 6 0.2341 6 0.0062 5 0.3396 6 0.2381 6 0.4713 7 0.0287 5 0.1968 6 0.0825 7 0.4081 6 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 6 0.4311 6)
Average genome size in population (length): 66.446
Average program size in population (points): 67.446
Average percent parens in population: 0.015
Minimum age in population: 216.1247849972003
Maximum age in population: 220.9719215114537
Average age in population: 218.8587998503035
Median age in population: 218.8897087080598
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.161
Error (vector) diversity:			 0.178
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 232920024
--- Timings ---
Current time: 1529615420481 milliseconds
Total Time:         536.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       218.6 seconds, 40.7%
Fitness Testing:    250.8 seconds, 46.7%
Report:              67.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_div} {:instruction float_cos} {:instruction float_dup} {:instruction float_flush} {:instruction float_cos} {:instruction in1} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction float_dup} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_yank} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction float_mod} {:instruction float_pop} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_cos} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_cos} {:instruction print_integer})
Best program: (float_sub float_cos float_cos float_flush float_flush integer_dup_times integer_div float_cos float_dup float_flush float_cos in1 float_flush float_yank tagged_847 float_dup float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove float_yank in2 tag_float_138 integer_add float_mod tag_float_838 integer_add tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap integer_dup float_mod integer_yankdup 72 float_mod float_mod float_pop print_float 72 float_pop float_swap 72 float_mod float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_cos print_integer print_float float_div print_float float_pop integer_max float_cos print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3468.556833700001
Median total errors in population: 201.43079999999998
Error averages by case: (143.78768209999873 7.025 137.8324809000001 8.716 131.26474110000058 9.59 142.47154640000167 8.715 132.4122451999984 10.306 131.71033989999947 9.515 112.61336000000142 7.757 141.20639540000062 7.935 113.03548050000096 7.895 138.98156110000048 7.02 140.35018650000188 7.792 139.41829739999957 6.968 140.11642329999745 7.942 111.21445930000225 8.858 132.45200079999876 9.593 109.24488510000089 6.844 139.4341798999992 8.665 119.2461413000016 9.521 139.94086470000283 8.713 118.91705720000013 7.946 139.18868519999793 8.77 116.42406210000094 7.874 113.47181769999847 7.957 137.40585240000092 8.671 137.14408819999937 8.684)
Error minima by case: (0.0033 5 0.1613 5 0.1816 8 0.2846 5 0.3359 8 0.1483 7 0.6862 4 0.3136 5 0.0717 4 0.0919 4 0.2341 5 0.0062 5 0.3396 5 0.2381 4 0.4713 7 0.0284 4 0.1968 5 0.0825 7 0.4081 5 0.4047 6 0.3065 5 0.6796 6 0.7585 4 0.2913 5 0.4311 5)
Average genome size in population (length): 65.993
Average program size in population (points): 66.993
Average percent parens in population: 0.015
Minimum age in population: 217.3166642740036
Maximum age in population: 222.2441886023754
Average age in population: 220.2826567206008
Median age in population: 220.2987581091039
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.182
Error (vector) diversity:			 0.191
Behavioral diversity:				 0.194
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 234570024
--- Timings ---
Current time: 1529615424076 milliseconds
Total Time:         540.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       219.9 seconds, 40.7%
Fitness Testing:    252.6 seconds, 46.7%
Report:              67.7 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_inc} {:instruction float_swap} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction tagged_627} {:instruction integer_div} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_max} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_sub} {:instruction integer_yankdup} {:instruction 72} {:instruction integer_min} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction integer_max} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_float} {:instruction print_integer})
Best program: (float_sub integer_inc float_swap float_yank integer_div float_cos float_cos float_flush float_yank tagged_847 tagged_627 integer_div in1 integer_max integer_fromfloat integer_max integer_swap integer_sub integer_shove float_dec integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_max print_float 72 float_pop float_swap 72 float_sub integer_yankdup 72 integer_min integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult integer_max print_integer print_float float_div print_float float_pop integer_max float_rot print_float print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3158.3649895000003
Median total errors in population: 201.43079999999998
Error averages by case: (131.0893732999982 7.003 124.10706649999949 8.696 121.20913860000051 9.615 129.37061640000155 8.712 122.84220949999856 10.314 121.83076329999953 9.568 101.48083730000133 7.784 128.61668030000055 7.897 101.94610690000091 7.923 125.6050980000004 6.992 127.73314780000156 7.751 125.25085859999898 6.925 127.49642329999784 7.927 99.71852470000174 8.838 122.30804279999892 9.635 97.92170440000078 6.862 126.6767503999986 8.651 103.77206990000103 9.574 126.87845060000237 8.661 103.34159360000018 7.999 126.6444809999983 8.768 101.28158550000047 7.902 102.36064349999855 7.952 124.69800670000151 8.654 124.92181659999913 8.66)
Error minima by case: (0.0033 5 0.1479 6 0.1823 7 0.2837 6 0.3366 8 0.149 6 0.2913 5 0.3002 7 0.064 6 0.0912 6 0.2207 6 0.0062 5 0.3389 6 0.2265 6 0.472 7 0.0153 4 0.1834 7 0.0825 7 0.3947 7 0.4047 6 0.3058 6 0.2686 6 0.1989 6 0.2906 7 0.4305 6)
Average genome size in population (length): 65.89
Average program size in population (points): 66.89
Average percent parens in population: 0.015
Minimum age in population: 219.4387328746621
Maximum age in population: 223.5239217252546
Average age in population: 221.7167336149066
Median age in population: 221.773067541209
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.177
Error (vector) diversity:			 0.186
Behavioral diversity:				 0.189
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 236217424
--- Timings ---
Current time: 1529615427881 milliseconds
Total Time:         544.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       221.4 seconds, 40.7%
Fitness Testing:    254.4 seconds, 46.8%
Report:              68.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_cos} {:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction float_tan} {:instruction float_max} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction 72} {:instruction float_sin} {:instruction float_yankdup} {:instruction 74} {:instruction integer_dup_times} {:instruction print_float} {:instruction integer_shove} {:instruction float_div} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_inc} {:instruction 72} {:instruction float_div} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction integer_swap} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_cos float_sub print_integer float_stackdepth integer_mod float_cos in1 in1 integer_fromfloat float_yankdup integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 float_tan float_max tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 72 float_sin float_yankdup 74 integer_dup_times print_float integer_shove float_div float_swap 72 float_mod integer_yankdup 72 float_mod in1 integer_fromfloat float_mod integer_yankdup in2 integer_mult integer_shove integer_inc 72 float_div in1 integer_fromfloat 72 integer_swap 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3208.5479485000005
Median total errors in population: 201.43079999999998
Error averages by case: (133.12835339999816 7.1 126.62135779999947 8.759 121.98331870000067 9.673 131.17744700000173 8.837 123.10282679999835 10.373 122.74982159999952 9.59 103.47452150000161 7.816 130.7604011000006 7.984 103.74706470000095 7.936 128.69075860000044 7.062 129.84213960000164 7.85 127.18609269999865 7.03 129.62339349999755 8.009 101.38012220000239 8.871 122.9104320999988 9.652 99.92436590000099 6.878 128.83122699999842 8.755 107.65991550000143 9.576 128.84751110000275 8.776 106.77972230000026 8.005 126.92179499999803 8.847 105.50162670000081 7.93 104.30152109999823 8.001 126.90108620000166 8.741 125.7181263999991 8.732)
Error minima by case: (0.0015 5 0.1605 6 0.1816 7 0.2774 6 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0741 6 0.0912 6 0.2333 6 0.0055 5 0.3389 5 0.2391 7 0.4713 7 0.028 5 0.1961 6 0.0825 7 0.4074 7 0.4047 6 0.3057 6 0.2686 6 0.1989 6 0.2906 6 0.4304 6)
Average genome size in population (length): 66.046
Average program size in population (points): 67.046
Average percent parens in population: 0.015
Minimum age in population: 220.8062238832297
Maximum age in population: 225.4639792252841
Average age in population: 223.1739968183736
Median age in population: 223.2176899462251
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.168
Error (vector) diversity:			 0.181
Behavioral diversity:				 0.183
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 237869174
--- Timings ---
Current time: 1529615431649 milliseconds
Total Time:         547.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       222.8 seconds, 40.7%
Fitness Testing:    256.2 seconds, 46.8%
Report:              68.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_sub} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction float_yank} {:instruction in1} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_cos} {:instruction float_flush} {:instruction float_max} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_mod} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_yank} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_swap} {:instruction float_mult} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_div} {:instruction float_cos} {:instruction float_frominteger} {:instruction 72} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction integer_max} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_sub print_integer integer_mult float_dup_items integer_dup_times float_yank integer_div float_cos in1 integer_max float_yank in1 float_cos float_cos float_flush float_cos float_flush float_max float_yank integer_div float_cos float_mod float_flush float_yank tagged_847 integer_mod float_yank in1 integer_max integer_fromfloat print_float integer_swap float_mult float_dup integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_div float_cos float_frominteger 72 integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div integer_max float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3547.0859305000004
Median total errors in population: 201.43079999999998
Error averages by case: (146.32795419999866 6.975 140.32760600000017 8.734 136.39910950000117 9.555 144.77137400000163 8.706 137.97470849999775 10.256 136.85547339999948 9.515 116.91058040000145 7.747 143.90132510000052 7.895 116.28719920000086 7.892 142.3999589000004 7.004 143.04204110000168 7.737 141.5731185999991 6.947 142.85460999999708 7.932 114.24244810000243 8.792 137.6112149999982 9.535 113.37801830000092 6.824 142.0934333999993 8.632 120.62179480000172 9.505 142.2335479000033 8.693 121.18855870000021 7.949 142.0800195999975 8.726 118.83902520000106 7.871 117.76394619999844 7.936 138.72893020000097 8.635 140.0999341999997 8.587)
Error minima by case: (0.0037 3 0.1605 2 0.1816 6 0.2964 3 0.3359 8 0.1483 7 0.2913 3 0.3128 2 0.0686 3 0.0919 1 0.2333 3 0.0054 2 0.3396 3 0.2381 2 0.4713 7 0.0279 2 0.1961 3 0.0825 7 0.4073 2 0.4047 6 0.3065 2 0.2686 6 0.1989 2 0.2913 2 0.4311 2)
Average genome size in population (length): 66.11
Average program size in population (points): 67.11
Average percent parens in population: 0.015
Minimum age in population: 222.20938534847
Maximum age in population: 226.5266003961315
Average age in population: 224.5783291782588
Median age in population: 224.597912026298
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.175
Error (vector) diversity:			 0.185
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 239522499
--- Timings ---
Current time: 1529615435522 milliseconds
Total Time:         551.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       224.4 seconds, 40.7%
Fitness Testing:    258.0 seconds, 46.7%
Report:              69.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_36} {:instruction print_integer} {:instruction integer_add} {:instruction float_yank} {:instruction in1} {:instruction integer_flush} {:instruction print_integer} {:instruction float_add} {:instruction float_rot} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction float_mod} {:instruction 70} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_flush} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (tagged_36 print_integer integer_add float_yank in1 integer_flush print_integer float_add float_rot float_yank float_cos float_cos float_yank tagged_847 integer_mod float_cos in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove float_mod integer_yankdup 72 float_mod float_mod 70 integer_inc integer_yankdup 72 float_mod integer_flush float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3093.7101040000002
Median total errors in population: 201.43079999999998
Error averages by case: (127.7405711999977 7.026 121.41448959999947 8.731 118.04780740000072 9.602 126.6190280000016 8.746 118.85041539999834 10.327 118.28369819999952 9.505 100.2541750000016 7.746 124.92247640000059 7.928 100.91041250000093 7.886 123.15022340000039 7.014 124.0409211000016 7.791 123.42132289999866 6.957 123.82847869999756 7.94 99.25867170000204 8.836 119.09084259999888 9.562 96.99606250000106 6.84 123.10376809999856 8.673 102.48654490000108 9.515 123.64799990000277 8.698 102.17640250000021 7.925 122.96523849999804 8.807 99.76474320000055 7.853 101.2260244999983 7.94 120.94178230000159 8.679 121.3350034999991 8.706)
Error minima by case: (0.0055 6 0.1605 6 0.1816 8 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3128 7 0.0724 5 0.0401 6 0.2333 6 0.0054 5 0.2878 7 0.2389 6 0.4713 7 0.0279 4 0.1961 7 0.0825 7 0.4073 7 0.4047 6 0.2547 6 0.2686 6 0.1989 6 0.2395 7 0.3793 6)
Average genome size in population (length): 66.078
Average program size in population (points): 67.078
Average percent parens in population: 0.015
Minimum age in population: 223.6097237693292
Maximum age in population: 227.8748947004498
Average age in population: 225.9914520564757
Median age in population: 226.0245888506996
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.169
Error (vector) diversity:			 0.179
Behavioral diversity:				 0.182
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 241174699
--- Timings ---
Current time: 1529615439262 milliseconds
Total Time:         555.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       225.8 seconds, 40.6%
Fitness Testing:    259.8 seconds, 46.8%
Report:              69.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_inc} {:instruction float_swap} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction integer_dup} {:instruction tagged_847} {:instruction integer_mod} {:instruction integer_div} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_sub} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_shove} {:instruction float_rot} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub integer_inc float_swap float_yank integer_div float_cos float_cos float_flush integer_dup tagged_847 integer_mod integer_div in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add integer_swap integer_sub integer_shove integer_fromfloat float_frominteger float_shove print_float 72 float_pop float_swap 72 float_sub integer_yankdup 72 float_mod integer_shove float_shove float_rot in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3476.3331834000005
Median total errors in population: 201.43079999999998
Error averages by case: (143.00408049999845 7.069 135.70679399999952 8.799 132.77863070000083 9.589 141.18362180000156 8.772 134.25444229999823 10.284 133.91330609999946 9.515 116.0992655000013 7.829 139.5862057000005 7.961 117.40267790000084 7.983 137.88975820000036 7.096 138.65472340000167 7.81 136.7773449999989 7.028 138.42377049999752 7.997 114.99523870000182 8.883 134.13765059999866 9.572 112.3249296000008 6.88 137.61005839999882 8.717 120.00626920000143 9.562 137.62644520000285 8.755 119.28089730000026 7.979 139.01190159999797 8.81 117.01331520000073 7.878 116.95129549999848 8.016 135.81561590000152 8.674 135.74894459999916 8.678)
Error minima by case: (0.0028 5 0.1613 6 0.7666 7 0.2971 6 0.6123 8 0.7999 8 0.6732 5 0.3136 7 0.0716 6 0.8859 6 0.2341 6 0.0062 5 0.6382 5 0.2381 7 0.4768 8 0.0253 4 0.1968 6 0.0825 7 0.4081 7 0.4047 6 0.6713 6 0.6796 6 0.7549 6 0.2913 7 0.5467 7)
Average genome size in population (length): 65.337
Average program size in population (points): 66.337
Average percent parens in population: 0.015
Minimum age in population: 224.7223375709455
Maximum age in population: 229.8075603139953
Average age in population: 227.3803322623144
Median age in population: 227.4237066848823
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.166
Error (vector) diversity:			 0.184
Behavioral diversity:				 0.187
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 242808499
--- Timings ---
Current time: 1529615442908 milliseconds
Total Time:         559.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       227.1 seconds, 40.6%
Fitness Testing:    261.7 seconds, 46.8%
Report:              70.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction print_integer} {:instruction integer_add} {:instruction print_integer} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction tagged_95} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_cos} {:instruction in1} {:instruction float_cos} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tag_integer_75} {:instruction integer_mod} {:instruction float_div} {:instruction in1} {:instruction integer_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_249} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction integer_shove} {:instruction float_div} {:instruction float_yank} {:instruction 72} {:instruction 72} {:instruction float_mod} {:instruction 72} {:instruction integer_add} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_flush} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction 72} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_swap} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction float_min} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (print_integer print_integer integer_add print_integer float_yank integer_div float_cos tagged_95 float_frominteger float_inc float_cos in1 float_cos integer_max integer_fromfloat float_cos float_cos float_flush float_yank tag_integer_75 integer_mod float_div in1 integer_max integer_sub integer_shove integer_fromfloat in2 tag_float_249 integer_add float_mod tag_float_838 integer_add float_frominteger float_shove print_float 72 float_pop float_swap 72 integer_shove float_div float_yank 72 72 float_mod 72 integer_add integer_yankdup 72 float_mod integer_flush float_div print_float in1 integer_fromfloat 72 72 float_dup_times integer_mult float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_swap integer_dec integer_dec integer_mult float_mod print_integer print_float float_div float_min float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2998.2371388
Median total errors in population: 201.43079999999998
Error averages by case: (121.39508229999839 7.022 116.32361339999945 8.732 113.37502540000027 9.545 119.52240090000136 8.759 114.50232079999901 10.254 114.4746023999995 9.48 99.7043046000013 7.768 119.98133230000053 7.919 100.80320380000089 7.9 118.4620445000004 7.032 119.01121800000159 7.786 117.45426869999928 6.963 118.86753579999824 7.917 98.09447210000137 8.822 114.68934079999904 9.548 95.48332330000092 6.841 118.07236019999876 8.669 101.51489720000089 9.508 118.11048770000207 8.71 99.85969920000021 7.945 116.95505489999864 8.788 99.12694880000026 7.812 100.3213811999985 7.941 116.52613400000139 8.647 116.66408649999903 8.634)
Error minima by case: (0.0033 5 0.1613 6 0.0 6 0.2971 6 0.0 6 0.0 6 0.2913 5 0.3136 7 0.0724 5 0.0401 6 0.2341 6 0.0062 5 0.2878 6 0.2389 5 0.0 6 0.0287 5 0.1968 7 0.0 6 0.4081 7 0.0 6 0.2547 6 0.0 6 0.1989 6 0.2395 7 0.3793 5)
Average genome size in population (length): 64.938
Average program size in population (points): 65.938
Average percent parens in population: 0.015
Minimum age in population: 226.1564314631566
Maximum age in population: 230.7221314074347
Average age in population: 228.7939213801749
Median age in population: 228.843061150986
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.172
Error (vector) diversity:			 0.181
Behavioral diversity:				 0.184
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 244432524
--- Timings ---
Current time: 1529615446605 milliseconds
Total Time:         562.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       228.5 seconds, 40.6%
Fitness Testing:    263.4 seconds, 46.8%
Report:              70.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_inc} {:instruction float_yank} {:instruction integer_dup} {:instruction tagged_95} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_pop} {:instruction in1} {:instruction float_flush} {:instruction in1} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_dup} {:instruction tag_float_838} {:instruction integer_rot} {:instruction integer_max} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction integer_dec} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_mod} {:instruction float_add} {:instruction 72} {:instruction float_mod} {:instruction float_mult} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_inc float_yank integer_dup tagged_95 float_frominteger float_inc float_yank float_yank integer_dup_times float_pop in1 float_flush in1 float_mod integer_fromfloat float_shove integer_max integer_fromfloat in2 tag_float_138 integer_add float_dup tag_float_838 integer_rot integer_max float_frominteger integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times integer_dec 72 float_mod integer_shove float_mod float_add 72 float_mod float_mult float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3441.2442617000006
Median total errors in population: 201.43079999999998
Error averages by case: (140.90466799999925 7.079 134.9019288000002 8.773 128.23622360000059 9.599 139.35462830000174 8.781 129.8233035999984 10.32 129.08124589999954 9.535 115.7633022000015 7.8 138.62196910000054 7.994 114.11227590000094 7.957 136.82071620000036 7.08 136.89602880000172 7.801 135.5687327999996 7.035 137.6188061999975 7.988 112.07523110000214 8.86 129.37509069999888 9.568 112.34922560000098 6.884 136.85788529999934 8.695 121.17783430000138 9.574 137.0201225000027 8.76 121.82723630000027 8.002 136.702915499998 8.793 119.43289290000084 7.915 116.59286429999837 7.999 134.24873330000113 8.706 135.7214004999998 8.661)
Error minima by case: (0.0026 5 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0724 6 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2389 7 0.4713 7 0.028 5 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 65.403
Average program size in population (points): 66.403
Average percent parens in population: 0.015
Minimum age in population: 227.2239756330879
Maximum age in population: 232.1817559653848
Average age in population: 230.2375867893561
Median age in population: 230.2869951109372
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.175
Error (vector) diversity:			 0.188
Behavioral diversity:				 0.191
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 246068174
--- Timings ---
Current time: 1529615450556 milliseconds
Total Time:         566.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       230.1 seconds, 40.6%
Fitness Testing:    265.3 seconds, 46.8%
Report:              71.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_yank} {:instruction in2} {:instruction float_cos} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_dup} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_mult} {:instruction integer_add} {:instruction float_mod} {:instruction float_dec} {:instruction float_min} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_dup} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 74} {:instruction float_cos} {:instruction float_mod} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 74} {:instruction float_cos} {:instruction integer_shove} {:instruction float_div} {:instruction float_div} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_flush} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_yank float_sub print_integer float_stackdepth float_yank in2 float_cos float_cos float_cos float_flush float_yank tagged_847 integer_mod float_dup in1 integer_max integer_fromfloat float_flush integer_swap integer_stackdepth integer_shove integer_fromfloat in2 float_mult integer_add float_mod float_dec float_min float_mod float_frominteger float_dup print_float 72 float_pop in1 integer_fromfloat 72 float_dup_times 74 float_cos float_mod float_cos integer_dup_items integer_mod in1 integer_fromfloat 72 float_dup_times 74 float_cos integer_shove float_div float_div in1 integer_fromfloat integer_fromfloat 72 float_dup_times 73 float_flush float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3229.1988130000004
Median total errors in population: 201.43079999999998
Error averages by case: (134.39378929999833 7.073 125.56295799999954 8.769 124.35979130000048 9.633 132.86769910000152 8.791 126.34233349999873 10.305 124.78654869999951 9.566 105.4266074000013 7.777 130.2311367000006 7.939 106.19592650000094 7.929 126.73188600000042 7.063 129.29812390000143 7.798 127.18866349999908 7.037 129.04447819999803 8.008 104.07186040000163 8.886 126.25345169999909 9.6 101.65411090000092 6.861 128.29361199999857 8.697 106.44819620000071 9.575 128.86087850000214 8.718 106.0623976000002 8.017 130.97418319999832 8.827 103.65861810000023 7.9 106.49709749999847 7.992 125.54994230000148 8.689 128.32352249999914 8.671)
Error minima by case: (0.0038 5 0.1605 6 0.1816 7 0.2964 7 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0694 6 0.0919 6 0.2333 7 0.0055 5 0.3396 6 0.2381 7 0.4713 7 0.025 5 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 65.315
Average program size in population (points): 66.315
Average percent parens in population: 0.015
Minimum age in population: 228.2239756330879
Maximum age in population: 233.6731876305083
Average age in population: 231.6603890317926
Median age in population: 231.6883148300475
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.171
Error (vector) diversity:			 0.18
Behavioral diversity:				 0.184
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 247701774
--- Timings ---
Current time: 1529615454807 milliseconds
Total Time:         570.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       231.5 seconds, 40.6%
Fitness Testing:    267.4 seconds, 46.8%
Report:              71.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_sub} {:instruction float_inc} {:instruction float_flush} {:instruction float_cos} {:instruction float_flush} {:instruction float_flush} {:instruction float_yank} {:instruction float_swap} {:instruction integer_mod} {:instruction float_div} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction tagged_556} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction 72} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction 72} {:instruction float_mod} {:instruction integer_pop} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_flush} {:instruction float_min} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction float_pop} {:instruction integer_max} {:instruction float_yank} {:instruction print_integer})
Best program: (integer_dec print_integer float_inc float_yank float_sub float_inc float_flush float_cos float_flush float_flush float_yank float_swap integer_mod float_div in1 integer_max integer_fromfloat float_flush integer_swap tagged_556 integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add integer_sub float_frominteger float_shove print_float 72 float_pop float_swap print_float 72 float_pop float_swap 72 integer_fromfloat float_yankdup 72 float_dup_items integer_dup_times integer_dec 72 float_mod integer_pop in1 integer_fromfloat 72 float_dup_times 73 float_flush float_min integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div float_pop integer_max float_yank print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3132.5610873000005
Median total errors in population: 201.43079999999998
Error averages by case: (126.60978519999829 7.013 120.50172529999949 8.671 116.36629750000012 9.576 125.2161851000017 8.693 117.63499229999894 10.315 117.33374509999953 9.518 106.1105223000013 7.71 123.97786200000056 7.901 106.21656250000093 7.893 122.80156280000041 6.999 123.16382500000167 7.729 121.24601279999915 6.947 123.04613119999786 7.931 104.35785590000162 8.84 117.6186440999993 9.555 102.76961100000078 6.826 122.22545069999849 8.65 112.7178544000011 9.534 121.95848380000227 8.667 112.30246590000021 7.954 123.31171409999844 8.741 109.81367450000046 7.882 106.83159089999859 7.918 119.48965040000172 8.652 120.19188249999912 8.632)
Error minima by case: (0.0023 5 0.1613 5 0.1816 7 0.2971 5 0.3359 8 0.1483 7 0.2913 4 0.3136 5 0.0717 4 0.0919 4 0.2341 5 0.0062 5 0.3396 5 0.2381 4 0.4713 7 0.0287 4 0.1968 5 0.0825 7 0.4081 5 0.4047 6 0.3065 5 0.2686 6 0.1989 4 0.2913 5 0.4311 5)
Average genome size in population (length): 65.333
Average program size in population (points): 66.333
Average percent parens in population: 0.015
Minimum age in population: 230.1285293902423
Maximum age in population: 235.1546967241429
Average age in population: 233.0805286639825
Median age in population: 233.1448040505273
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.161
Error (vector) diversity:			 0.178
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 249335899
--- Timings ---
Current time: 1529615458420 milliseconds
Total Time:         574.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       232.9 seconds, 40.5%
Fitness Testing:    269.2 seconds, 46.8%
Report:              72.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction print_integer} {:instruction float_shove} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction float_yank} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_mod} {:instruction in1} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction float_min} {:instruction integer_shove} {:instruction integer_add} {:instruction in2} {:instruction tag_float_219} {:instruction integer_add} {:instruction float_mod} {:instruction integer_add} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction 72} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (print_integer print_integer float_shove float_yank integer_div float_dec float_cos float_flush float_yank float_yank integer_div integer_pop integer_mod in1 integer_max float_frominteger float_shove integer_fromfloat float_flush integer_swap float_min integer_shove integer_add in2 tag_float_219 integer_add float_mod integer_add tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 72 integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div integer_max float_sub integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3638.3922712000003
Median total errors in population: 201.43079999999998
Error averages by case: (154.02670209999903 7.077 146.4200368000005 8.742 139.29419009999992 9.565 151.61781870000152 8.81 140.5229066999985 10.245 140.19905239999954 9.509 113.2457064000013 7.796 151.05984820000054 7.959 114.04413780000088 7.935 149.2538891000004 7.083 150.1577751000015 7.793 148.23838369999962 7.012 149.9227687999975 8.016 111.88161320000185 8.825 140.48034229999885 9.533 109.65124250000086 6.847 149.18354889999958 8.695 123.67719200000138 9.548 148.6563925000027 8.731 123.27396510000024 8.002 147.38202909999796 8.806 119.80209870000078 7.89 114.31417319999858 8.005 146.88514780000054 8.683 145.43131000000005 8.663)
Error minima by case: (0.0033 5 0.1603 5 0.1816 7 0.2961 5 0.3359 8 0.1483 7 0.2913 4 0.3126 5 0.0717 4 0.0919 4 0.2331 5 0.0052 5 0.3396 5 0.2381 4 0.4713 7 0.018 4 0.1958 5 0.0825 7 0.4071 5 0.4047 6 0.3065 5 0.2686 6 0.1989 4 0.2913 5 0.4311 5)
Average genome size in population (length): 65.284
Average program size in population (points): 66.284
Average percent parens in population: 0.015
Minimum age in population: 231.4609111160821
Maximum age in population: 236.5262473385345
Average age in population: 234.5473037579833
Median age in population: 234.6157809216037
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.183
Error (vector) diversity:			 0.194
Behavioral diversity:				 0.197
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 250968824
--- Timings ---
Current time: 1529615462361 milliseconds
Total Time:         578.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       234.3 seconds, 40.5%
Fitness Testing:    271.2 seconds, 46.9%
Report:              73.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_max} {:instruction tagged_847} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction float_rot} {:instruction float_max} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_flush} {:instruction 72} {:instruction float_mod} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_sub} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_yankdup print_integer float_stackdepth float_yank float_max tagged_847 in1 integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 float_rot float_max tag_float_838 integer_add float_mod integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_flush 72 float_mod print_float in1 integer_fromfloat float_sub float_dup_times 73 float_cos float_sub integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3483.7587873
Median total errors in population: 201.43079999999998
Error averages by case: (143.3805014999984 7.083 136.51237599999988 8.768 129.5101248000006 9.639 141.8501725000016 8.795 130.9873543999985 10.359 129.64768119999957 9.566 116.24678750000147 7.828 140.6963432000006 7.975 118.73131120000082 7.949 137.6896949000004 7.032 139.7809673000015 7.812 137.95269369999923 7.023 139.53406109999776 8.002 116.53646600000206 8.888 130.871977999999 9.548 112.53805620000101 6.849 138.79693489999892 8.747 124.39091540000133 9.572 139.20118820000252 8.751 123.52653000000014 7.957 135.56307969999818 8.832 121.49133770000083 7.923 117.17811009999845 8.0 137.2362997000012 8.712 133.58182209999933 8.716)
Error minima by case: (0.0044 4 0.1613 5 0.1816 7 0.2971 6 0.3359 8 0.1483 7 0.2913 5 0.3136 7 0.0724 6 0.0919 6 0.2341 6 0.0062 5 0.3396 6 0.2389 6 0.4713 7 0.0287 6 0.1968 6 0.0825 7 0.4081 6 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 6 0.4311 6)
Average genome size in population (length): 65.195
Average program size in population (points): 66.195
Average percent parens in population: 0.015
Minimum age in population: 232.4609111160821
Maximum age in population: 238.2078625441513
Average age in population: 235.9399011213449
Median age in population: 235.9983058130696
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.16
Error (vector) diversity:			 0.17
Behavioral diversity:				 0.17
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 252599599
--- Timings ---
Current time: 1529615466137 milliseconds
Total Time:         582.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       235.7 seconds, 40.5%
Fitness Testing:    273.1 seconds, 46.9%
Report:              73.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction integer_dup} {:instruction print_integer} {:instruction print_integer} {:instruction integer_div} {:instruction float_yank} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction tagged_847} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_add} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_rot} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction tag_float_325} {:instruction integer_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 74} {:instruction float_pop} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_pop} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_dup print_integer float_inc float_yank integer_dup print_integer print_integer integer_div float_yank float_pop float_cos float_cos float_flush tagged_847 float_cos float_cos float_flush float_cos in1 integer_max integer_fromfloat float_flush integer_shove float_add float_flush integer_swap integer_sub integer_shove integer_rot in2 tag_float_138 integer_add float_mod tag_float_838 tag_float_325 integer_add integer_add float_frominteger float_shove print_float 74 float_pop integer_dup_items in1 integer_fromfloat 72 float_pop 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3569.343729500001
Median total errors in population: 201.43079999999998
Error averages by case: (147.4662460999987 7.127 139.72914080000018 8.765 137.42694070000024 9.652 145.54248480000163 8.832 138.78234739999795 10.36 138.52384459999953 9.612 119.13811990000144 7.815 143.48827300000053 7.986 118.36201820000088 7.983 142.0779886000004 7.093 142.6129888000016 7.848 140.33080589999915 7.04 142.45700949999724 8.051 115.82290240000226 8.92 138.5632306999985 9.624 115.2302043000009 6.887 141.62305409999934 8.76 121.77703140000143 9.604 141.42544220000298 8.755 121.31737720000025 8.057 146.0049214999977 8.864 118.92940150000075 7.961 119.91564979999846 8.011 139.72024430000099 8.723 142.01306179999986 8.733)
Error minima by case: (0.0033 5 0.1605 6 0.1816 8 0.2964 6 0.3359 8 0.1483 7 0.6737 5 0.3129 6 0.0717 6 0.0912 6 0.2333 6 0.0055 5 0.3389 5 0.2381 3 0.4713 7 0.0257 4 0.1961 5 0.0825 7 0.4074 6 0.4047 6 0.3058 6 0.6796 6 0.7556 5 0.2906 6 0.4304 6)
Average genome size in population (length): 64.975
Average program size in population (points): 65.975
Average percent parens in population: 0.015
Minimum age in population: 235.0886892053183
Maximum age in population: 239.3131143163433
Average age in population: 237.4108142818585
Median age in population: 237.4640939136762
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.166
Error (vector) diversity:			 0.187
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 254225124
--- Timings ---
Current time: 1529615469762 milliseconds
Total Time:         586.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       237.2 seconds, 40.5%
Fitness Testing:    274.8 seconds, 46.9%
Report:              74.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_cos} {:instruction integer_sub} {:instruction print_integer} {:instruction float_cos} {:instruction print_integer} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_249} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction integer_shove} {:instruction float_div} {:instruction float_yank} {:instruction 72} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_inc float_yank float_cos integer_sub print_integer float_cos print_integer float_yank tagged_847 integer_mod integer_flush in1 integer_sub integer_shove integer_fromfloat in2 tag_float_249 integer_add float_mod tag_float_838 integer_add float_frominteger float_shove print_float 72 float_pop float_swap 72 integer_shove float_div float_yank 72 in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3359.0729253000004
Median total errors in population: 201.43079999999998
Error averages by case: (137.64605359999868 7.115 130.89154419999952 8.82 128.22601350000096 9.674 136.5587345000014 8.809 129.16403959999823 10.388 128.17761409999954 9.611 111.07633980000136 7.885 134.0927838000006 8.039 111.59754410000083 8.042 132.4089161000004 7.122 133.2704574000015 7.898 132.8255298999988 7.085 133.0835359999975 8.041 110.2331674000024 8.927 129.48267889999863 9.661 108.05511360000094 6.931 132.41178859999903 8.783 115.65346490000175 9.64 132.90925360000278 8.796 115.36598370000023 8.047 135.70590869999802 8.865 112.69225160000134 7.97 111.94790049999855 8.065 131.36592090000102 8.748 132.51438629999953 8.754)
Error minima by case: (0.0028 5 0.1613 6 0.1816 7 0.2837 6 0.3359 8 0.1483 7 0.2913 5 0.3136 7 0.0689 6 0.0919 6 0.2341 6 0.0062 5 0.3396 6 0.2381 7 0.4713 7 0.0287 4 0.1968 7 0.0825 8 0.4081 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 65.036
Average program size in population (points): 66.036
Average percent parens in population: 0.015
Minimum age in population: 236.0886892053183
Maximum age in population: 240.9771554134932
Average age in population: 238.8373797850515
Median age in population: 238.8667718759603
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.196
Error (vector) diversity:			 0.207
Behavioral diversity:				 0.208
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 255852549
--- Timings ---
Current time: 1529615473622 milliseconds
Total Time:         589.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       238.8 seconds, 40.5%
Fitness Testing:    276.7 seconds, 46.9%
Report:              74.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction tagged_943} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_div} {:instruction float_div} {:instruction integer_div} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_div} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_swap} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction integer_min} {:instruction float_pop} {:instruction integer_sub} {:instruction 72} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction tagged_365} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_stackdepth tagged_943 integer_mod float_yank integer_div float_div integer_div integer_max integer_fromfloat float_cos float_cos float_flush float_yank tagged_847 integer_mod float_div in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_swap float_mod float_frominteger float_shove print_float integer_min float_pop integer_sub 72 float_mod float_dup_times float_mult float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float tagged_365 integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3151.171445600001
Median total errors in population: 201.43079999999998
Error averages by case: (131.45033409999778 6.949 125.22903529999945 8.646 121.17672560000071 9.502 130.00974860000161 8.703 122.54388959999842 10.224 122.31219989999947 9.466 99.41621560000144 7.678 128.61545090000058 7.892 99.25070810000094 7.837 127.25168630000043 6.951 127.7983645000017 7.694 126.05350679999864 6.91 127.65723079999755 7.885 97.15673910000203 8.739 122.27298869999878 9.476 95.8221988000009 6.754 126.88780699999855 8.629 104.69964410000118 9.483 126.84204380000273 8.667 104.29048560000022 7.895 126.51609989999807 8.695 102.3190204000006 7.808 100.03085069999841 7.877 124.39753120000157 8.607 123.64894019999905 8.555)
Error minima by case: (0.0044 5 0.1605 5 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0717 6 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2382 7 0.4713 7 0.028 5 0.1961 6 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2484 6 0.1989 6 0.2913 6 0.4311 6)
Average genome size in population (length): 64.266
Average program size in population (points): 65.266
Average percent parens in population: 0.016
Minimum age in population: 237.5750270976264
Maximum age in population: 242.1973437888062
Average age in population: 240.2903518270714
Median age in population: 240.3558979223971
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.163
Error (vector) diversity:			 0.171
Behavioral diversity:				 0.171
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 257460824
--- Timings ---
Current time: 1529615477205 milliseconds
Total Time:         593.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       240.2 seconds, 40.5%
Fitness Testing:    278.4 seconds, 46.9%
Report:              74.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_shove} {:instruction integer_dec} {:instruction float_mod} {:instruction float_flush} {:instruction float_yank} {:instruction float_sin} {:instruction integer_mod} {:instruction float_yank} {:instruction float_div} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction float_swap} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction 72} {:instruction integer_dup_items} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction 19.495457975963788} {:instruction integer_max} {:instruction print_integer})
Best program: (float_sub float_shove integer_dec float_mod float_flush float_yank float_sin integer_mod float_yank float_div in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 float_swap float_mod tag_float_838 integer_add float_mod float_frominteger integer_yankdup 72 integer_dup_items integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer integer_fromfloat float_div print_float float_pop 19.495457975963788 integer_max print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2955.926591900001
Median total errors in population: 201.43079999999998
Error averages by case: (123.32664769999806 6.926 117.0803848999995 8.641 113.06416360000057 9.499 121.99829180000154 8.688 114.29698109999843 10.262 114.0140195999995 9.456 91.54373870000138 7.712 120.6021780000006 7.828 93.00022400000087 7.842 118.71834070000045 6.885 119.7212255000016 7.704 118.75862989999868 6.885 119.47972609999759 7.848 91.16650170000173 8.785 114.11800699999878 9.461 88.12299230000093 6.759 118.75618789999857 8.63 95.72083930000096 9.466 119.35141370000264 8.629 95.16699250000016 7.837 119.49693709999812 8.701 93.20766380000042 7.764 92.43568809999842 7.886 117.61719260000152 8.593 117.8846242999991 8.59)
Error minima by case: (0.0044 5 0.1613 6 0.7666 7 0.2971 6 0.6123 8 0.7999 8 0.2913 5 0.3136 7 0.0724 6 0.8859 6 0.2341 6 0.0062 5 0.6382 6 0.2389 7 0.4768 9 0.0287 4 0.1968 7 0.0825 7 0.4081 7 0.4047 6 0.6713 6 0.2686 6 0.1989 6 0.2913 7 0.5467 7)
Average genome size in population (length): 64.473
Average program size in population (points): 65.473
Average percent parens in population: 0.016
Minimum age in population: 239.0901341665608
Maximum age in population: 243.6646232301148
Average age in population: 241.6892302690099
Median age in population: 241.7320575747584
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.145
Error (vector) diversity:			 0.155
Behavioral diversity:				 0.158
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 259074458
--- Timings ---
Current time: 1529615481150 milliseconds
Total Time:         597.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       241.5 seconds, 40.4%
Fitness Testing:    280.4 seconds, 46.9%
Report:              75.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_shove} {:instruction print_integer} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction integer_div} {:instruction integer_mod} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction float_stackdepth} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_mod} {:instruction in1} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_dec} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_add} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction tagged_497} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_pop} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction float_sin} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_shove print_integer float_yank float_yank float_cos float_cos float_flush float_yank integer_div integer_mod float_cos float_flush float_yank float_stackdepth integer_div integer_pop integer_mod in1 integer_max float_frominteger float_shove integer_fromfloat float_flush integer_shove integer_max in2 tag_float_138 integer_add float_mod tag_float_838 float_frominteger integer_dec integer_dec print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_add in1 integer_fromfloat 72 float_dup_times 73 tagged_497 float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_pop print_integer print_float float_div float_sin float_dup_times integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3174.5983607000003
Median total errors in population: 201.43079999999998
Error averages by case: (127.01643749999806 6.994 120.2226425999995 8.677 120.81576850000067 9.593 126.1093674000016 8.728 122.15249689999828 10.32 121.46556559999956 9.514 109.56855660000151 7.727 123.83648930000058 7.895 110.5102922000008 7.868 122.28665650000036 6.95 122.96315680000161 7.744 122.7876099999988 6.934 122.77810229999774 7.916 108.9825452000022 8.859 122.34687679999885 9.549 106.33835990000104 6.838 121.99067899999845 8.662 111.56394140000113 9.526 122.64552980000266 8.646 110.89840430000024 7.933 125.66403329999808 8.745 108.1045012000006 7.868 110.66357669999832 7.913 120.71351060000156 8.642 123.47626029999923 8.656)
Error minima by case: (0.0033 6 0.1615 6 0.1816 8 0.2974 7 0.3359 8 0.1483 7 0.2913 4 0.3139 7 0.0717 6 0.0401 6 0.2343 6 0.0065 5 0.2878 6 0.2382 6 0.4713 7 0.029 4 0.1971 6 0.0825 6 0.4084 7 0.4047 6 0.2547 6 0.2686 6 0.1989 6 0.2395 5 0.3793 6)
Average genome size in population (length): 64.701
Average program size in population (points): 65.701
Average percent parens in population: 0.016
Minimum age in population: 240.6510084454079
Maximum age in population: 245.3767448729847
Average age in population: 243.0670332777298
Median age in population: 243.1001639127476
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.165
Error (vector) diversity:			 0.179
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 260694133
--- Timings ---
Current time: 1529615484925 milliseconds
Total Time:         601.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       243.0 seconds, 40.4%
Fitness Testing:    282.2 seconds, 46.9%
Report:              75.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction print_integer} {:instruction print_integer} {:instruction float_yank} {:instruction integer_div} {:instruction integer_dup} {:instruction float_max} {:instruction float_flush} {:instruction float_yank} {:instruction float_yank} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_mod} {:instruction in1} {:instruction float_div} {:instruction integer_min} {:instruction float_shove} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction integer_add} {:instruction in2} {:instruction tag_float_219} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_min} {:instruction 72} {:instruction float_mod} {:instruction float_div} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction tagged_497} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_swap} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_dup} {:instruction print_integer} {:instruction float_mult} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_min print_integer print_integer float_yank integer_div integer_dup float_max float_flush float_yank float_yank integer_div integer_pop integer_mod in1 float_div integer_min float_shove integer_fromfloat float_flush integer_swap float_stackdepth integer_shove integer_add in2 tag_float_219 integer_add float_mod tag_float_838 tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_min 72 float_mod float_div 72 float_dup_times 73 tagged_497 float_mod integer_inc 72 float_mod integer_dec integer_dec float_cos float_mod integer_inc print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_swap integer_inc 72 float_mod float_mod integer_dec integer_dec integer_mult float_dup print_integer float_mult float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3215.6615152000004
Median total errors in population: 201.43079999999998
Error averages by case: (131.10741699999824 7.117 124.87535149999943 8.787 123.93993030000028 9.632 129.8263234000016 8.834 125.1882638999988 10.358 124.54037289999955 9.575 106.22823820000139 7.817 128.5633810000005 8.0 106.71952950000087 7.965 126.75972010000037 7.097 127.62797190000167 7.857 126.35110349999918 7.02 127.40703119999806 8.025 104.93248590000188 8.913 125.13116349999909 9.63 102.88940390000089 6.905 126.61145529999852 8.749 108.06309080000099 9.589 126.90710800000225 8.753 107.64785980000025 8.033 128.9244035999984 8.823 105.19032650000047 7.935 107.12262329999844 8.008 125.20658320000155 8.729 127.01637699999911 8.733)
Error minima by case: (0.0044 6 0.1613 5 0.1801 7 0.2971 6 0.3344 8 0.1468 7 0.2913 5 0.3136 7 0.0717 5 0.0919 6 0.2341 6 0.0062 5 0.3396 6 0.2381 7 0.4699 7 0.0287 5 0.1968 6 0.0825 7 0.4081 7 0.4047 6 0.3065 6 0.2686 6 0.1989 7 0.2913 6 0.4311 6)
Average genome size in population (length): 64.83
Average program size in population (points): 65.83
Average percent parens in population: 0.015
Minimum age in population: 241.6670605102645
Maximum age in population: 246.4015278467042
Average age in population: 244.4593485979274
Median age in population: 244.4629996691622
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.176
Error (vector) diversity:			 0.189
Behavioral diversity:				 0.189
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 262317408
--- Timings ---
Current time: 1529615488476 milliseconds
Total Time:         604.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       244.3 seconds, 40.4%
Fitness Testing:    284.0 seconds, 47.0%
Report:              76.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction integer_div} {:instruction float_cos} {:instruction integer_dup_items} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_yank} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_99} {:instruction integer_add} {:instruction integer_sub} {:instruction tag_float_838} {:instruction integer_div} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_min} {:instruction 72} {:instruction integer_flush} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_dup} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction print_float} {:instruction 73} {:instruction float_flush} {:instruction float_min} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_shove} {:instruction float_pop} {:instruction integer_max} {:instruction float_yank} {:instruction print_integer})
Best program: (float_sub integer_mult float_stackdepth integer_dup_times integer_div float_cos integer_dup_items float_flush float_yank tagged_847 integer_mod float_yank in1 integer_max integer_fromfloat print_float integer_swap integer_sub float_dup integer_fromfloat in2 tag_float_99 integer_add integer_sub tag_float_838 integer_div float_frominteger float_shove print_float 72 float_pop float_min 72 integer_flush integer_fromfloat 72 float_dup_times 73 float_dup float_div print_float in1 integer_fromfloat 72 print_float 73 float_flush float_min integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_shove float_pop integer_max float_yank print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3098.6983846000003
Median total errors in population: 201.43079999999998
Error averages by case: (126.90625939999832 7.015 120.88516709999946 8.676 119.35760500000033 9.563 125.39200410000147 8.697 120.47385879999881 10.277 119.76876989999957 9.504 100.95172590000135 7.71 124.45525030000053 7.887 100.15174330000085 7.879 122.61568860000038 6.964 123.52293350000154 7.735 122.63075069999903 6.948 123.37062719999807 7.918 98.24425640000143 8.798 121.08012679999906 9.56 97.18809080000092 6.792 122.63441699999859 8.612 102.72209730000073 9.504 122.87888900000222 8.671 103.07593430000027 7.973 125.56153989999838 8.713 100.30331060000016 7.862 101.57521479999846 7.901 121.3572277000015 8.586 123.24489619999923 8.605)
Error minima by case: (0.0028 5 0.1605 6 0.1808 7 0.2964 6 0.3352 8 0.1476 7 0.2395 5 0.3129 7 0.0717 6 0.0926 5 0.2333 6 0.0055 5 0.3403 6 0.2382 7 0.4706 7 0.028 5 0.1961 6 0.0825 8 0.4074 7 0.4047 6 0.3072 6 0.2686 6 0.1471 7 0.2913 7 0.4319 6)
Average genome size in population (length): 64.764
Average program size in population (points): 65.764
Average percent parens in population: 0.015
Minimum age in population: 243.1367649123809
Maximum age in population: 247.7219027065534
Average age in population: 245.9160178287285
Median age in population: 245.956530356453
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.171
Error (vector) diversity:			 0.182
Behavioral diversity:				 0.185
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 263938883
--- Timings ---
Current time: 1529615491959 milliseconds
Total Time:         608.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       245.6 seconds, 40.4%
Fitness Testing:    285.7 seconds, 47.0%
Report:              76.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction print_integer} {:instruction float_shove} {:instruction float_yank} {:instruction integer_div} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_cos} {:instruction integer_pop} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction integer_div} {:instruction integer_mod} {:instruction float_cos} {:instruction tagged_1110} {:instruction integer_mod} {:instruction float_frominteger} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_yank} {:instruction in1} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_dec} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 75} {:instruction float_mod} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_mult} {:instruction 72} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (print_integer print_integer float_shove float_yank integer_div integer_dup integer_pop integer_mod integer_dup_times float_cos integer_fromfloat integer_mult float_stackdepth integer_dup_times integer_div integer_dup_times integer_fromfloat integer_pop integer_mod integer_dup_times float_cos integer_pop float_cos float_flush float_yank integer_div integer_mod float_cos tagged_1110 integer_mod float_frominteger in1 integer_stackdepth integer_shove integer_fromfloat in2 tag_float_138 integer_add float_yank in1 integer_add float_mod tag_float_838 integer_add float_frominteger integer_dec integer_dec print_float 72 float_pop float_swap 75 float_mod integer_pop integer_yankdup float_mult 72 print_float 72 float_pop print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc integer_swap float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_dec integer_fromfloat float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3811.2329298000004
Median total errors in population: 201.43079999999998
Error averages by case: (157.14179289999979 7.035 152.11246050000136 8.752 147.82657839999942 9.657 156.1994832000015 8.75 149.15570769999803 10.334 147.45524239999952 9.633 124.4755240000015 7.773 155.4772454000005 7.948 124.50477610000087 7.911 153.1745125000003 7.054 154.76461090000174 7.792 153.14156540000045 7.009 154.67440129999733 7.975 122.86019760000221 8.82 148.89366949999854 9.674 121.391215100001 6.839 153.98729980000076 8.674 130.0311301000015 9.622 154.04829290000302 8.726 129.7166278000002 8.078 153.25513349999773 8.765 127.8192040000008 7.967 125.11064499999841 7.961 152.59846229999948 8.663 151.34715150000088 8.658)
Error minima by case: (0.0033 5 0.1357 5 0.1816 6 0.2716 5 0.3359 8 0.1483 7 0.2913 4 0.2881 5 0.0519 4 0.0919 4 0.2085 5 0.0055 5 0.3396 5 0.2144 4 0.4713 7 0.0032 4 0.1713 5 0.0825 7 0.3826 5 0.4047 6 0.3065 5 0.2686 6 0.1989 4 0.2913 5 0.4311 5)
Average genome size in population (length): 64.683
Average program size in population (points): 65.683
Average percent parens in population: 0.016
Minimum age in population: 244.1367649123809
Maximum age in population: 249.3599139352783
Average age in population: 247.2757677289999
Median age in population: 247.3321011929817
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.869
Total error diversity:				 0.174
Error (vector) diversity:			 0.19
Behavioral diversity:				 0.192
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 265558458
--- Timings ---
Current time: 1529615495706 milliseconds
Total Time:         611.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       247.0 seconds, 40.4%
Fitness Testing:    287.6 seconds, 47.0%
Report:              77.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction print_float} {:instruction float_yank} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_swap} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_yank} {:instruction in1} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_967} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_dec} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction float_shove} {:instruction 72} {:instruction float_add} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction tagged_497} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_pop} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction float_sin} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_dup} {:instruction print_integer})
Best program: (float_sub float_cos float_cos float_flush print_float float_yank float_swap integer_fromfloat float_add float_swap integer_max integer_fromfloat float_flush integer_mod integer_flush in1 integer_inc integer_shove integer_fromfloat in2 tag_float_138 integer_add float_yank in1 integer_add float_mod tag_float_967 integer_add float_frominteger integer_dec print_float 72 float_pop float_swap 72 float_mod float_shove 72 float_add in1 integer_fromfloat 72 float_dup_times 73 tagged_497 float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_pop print_integer print_float float_div float_sin float_dup_times float_yank float_rot float_div print_float float_pop integer_max float_dup print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3288.6535964000004
Median total errors in population: 201.43079999999998
Error averages by case: (134.86104099999787 7.002 126.92755509999951 8.677 126.52757490000099 9.567 133.44421160000164 8.721 127.80770899999806 10.281 125.71288499999952 9.533 110.53084920000146 7.681 130.62189300000057 7.87 110.74565200000087 7.837 127.75962490000039 6.959 129.76338980000153 7.724 128.02256999999847 6.931 129.6000664999973 7.917 109.02568330000253 8.762 127.75211959999858 9.538 107.1447032000009 6.8 128.8575863999985 8.634 112.6733708000017 9.505 129.03762980000292 8.652 112.36775920000021 7.953 133.5140450999977 8.728 109.7841002000012 7.848 111.26437339999845 7.879 127.2965009000017 8.633 129.3827024999991 8.596)
Error minima by case: (0.0023 5 0.1605 5 0.1816 7 0.2964 5 0.3359 8 0.1483 7 0.2913 4 0.3129 5 0.0717 4 0.0919 4 0.2333 5 0.0055 5 0.3396 5 0.2382 4 0.4713 7 0.0257 4 0.1961 5 0.0825 7 0.4074 5 0.4047 6 0.3065 5 0.2686 6 0.1989 4 0.2913 5 0.4311 5)
Average genome size in population (length): 64.187
Average program size in population (points): 65.187
Average percent parens in population: 0.016
Minimum age in population: 246.127665090985
Maximum age in population: 250.9685794415902
Average age in population: 248.7272008019246
Median age in population: 248.7799173095203
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.169
Error (vector) diversity:			 0.184
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 267165708
--- Timings ---
Current time: 1529615499312 milliseconds
Total Time:         615.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       248.4 seconds, 40.3%
Fitness Testing:    289.3 seconds, 47.0%
Report:              77.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_yank} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction float_yankdup} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction 72} {:instruction print_float} {:instruction float_mult} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction 72} {:instruction integer_dup_items} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_yank float_cos float_flush integer_pop float_cos float_cos float_flush float_yank tagged_847 in1 integer_max integer_fromfloat float_flush integer_fromfloat integer_shove integer_fromfloat in2 tag_float_138 float_yankdup float_mod tag_float_838 integer_add float_mod float_frominteger integer_add 72 print_float float_mult integer_yankdup 72 float_mod integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times integer_yankdup 72 integer_dup_items integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer integer_fromfloat float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3646.2099144000003
Median total errors in population: 201.43079999999998
Error averages by case: (152.40102089999948 7.049 146.11491670000072 8.763 142.46776639999996 9.608 151.07829330000146 8.77 143.60223259999856 10.298 143.03394159999948 9.548 115.6843885000013 7.764 149.71994860000058 7.975 115.74337510000082 7.947 148.07813330000047 7.08 149.00167980000145 7.801 146.58500760000018 7.028 148.90613739999782 8.004 113.97146390000175 8.864 143.2488983999989 9.585 112.63484660000091 6.889 148.20998239999983 8.683 119.64030170000093 9.533 148.2565835000024 8.729 119.37160660000016 8.032 150.00119949999817 8.787 117.70876820000049 7.915 116.33621539999852 8.0 146.77907350000018 8.695 147.6131329000003 8.674)
Error minima by case: (0.003 4 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0724 6 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2389 7 0.4713 7 0.025 5 0.1961 6 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2686 6 0.1989 7 0.2913 7 0.4311 6)
Average genome size in population (length): 64.469
Average program size in population (points): 65.469
Average percent parens in population: 0.016
Minimum age in population: 247.127665090985
Maximum age in population: 252.0842286549524
Average age in population: 250.1040909959529
Median age in population: 250.1633541534126
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.181
Error (vector) diversity:			 0.197
Behavioral diversity:				 0.198
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 268779408
--- Timings ---
Current time: 1529615503139 milliseconds
Total Time:         619.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       249.9 seconds, 40.3%
Fitness Testing:    291.1 seconds, 47.0%
Report:              78.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction print_integer} {:instruction float_dup} {:instruction float_yank} {:instruction integer_div} {:instruction integer_dup} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction float_yank} {:instruction integer_div} {:instruction integer_pop} {:instruction float_sub} {:instruction in1} {:instruction float_div} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction tagged_847} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_shove} {:instruction float_add} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_rot} {:instruction in2} {:instruction tag_float_138} {:instruction float_inc} {:instruction float_mod} {:instruction tag_float_838} {:instruction tag_float_325} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 74} {:instruction float_shove} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_pop} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_min print_integer float_dup float_yank integer_div integer_dup float_cos float_flush float_yank float_yank integer_div integer_pop float_sub in1 float_div float_pop float_cos float_cos float_flush tagged_847 float_cos float_cos float_flush float_cos in1 integer_max integer_fromfloat float_flush integer_shove float_add float_flush float_yankdup integer_sub integer_shove integer_rot in2 tag_float_138 float_inc float_mod tag_float_838 tag_float_325 integer_fromfloat integer_add float_frominteger float_shove print_float 74 float_shove integer_dup_items in1 integer_fromfloat 72 float_pop 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2912.6244402
Median total errors in population: 201.43079999999998
Error averages by case: (118.12281709999831 6.893 110.79036139999948 8.625 107.76240200000032 9.444 116.29782670000144 8.636 109.38071239999887 10.186 108.35762589999953 9.386 99.40631610000136 7.673 115.36455050000059 7.786 99.89745470000086 7.8 112.6969517000004 6.85 114.37589160000155 7.65 111.5685431999991 6.84 114.12479189999823 7.827 97.63722430000185 8.749 109.12752339999918 9.375 93.9966024000009 6.722 113.32592979999862 8.577 101.82076860000129 9.445 113.5314538000021 8.603 101.40691600000022 7.788 114.74316619999854 8.655 98.74067210000071 7.732 100.3516183999985 7.838 111.2947273000014 8.527 112.3535926999992 8.541)
Error minima by case: (0.0033 5 0.1613 6 0.0 6 0.2971 7 0.0 6 0.0 6 0.2913 5 0.3136 7 0.0687 6 0.0919 6 0.2341 6 0.0062 5 0.3396 6 0.2389 7 0.0 6 0.0287 5 0.1968 7 0.0 6 0.4081 7 0.0 6 0.3065 6 0.0 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 64.148
Average program size in population (points): 65.148
Average percent parens in population: 0.016
Minimum age in population: 249.0334479839459
Maximum age in population: 253.3672174529872
Average age in population: 251.5355124083081
Median age in population: 251.6087866924104
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.155
Error (vector) diversity:			 0.164
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 270384808
--- Timings ---
Current time: 1529615506790 milliseconds
Total Time:         623.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       251.3 seconds, 40.3%
Fitness Testing:    292.9 seconds, 47.0%
Report:              78.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_sub} {:instruction print_integer} {:instruction integer_mult} {:instruction print_integer} {:instruction print_integer} {:instruction integer_add} {:instruction print_integer} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_yank} {:instruction float_yank} {:instruction tagged_847} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_rot} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_yank} {:instruction in1} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_dec} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_add} {:instruction in1} {:instruction integer_fromfloat} {:instruction tag_float_726} {:instruction float_dup_times} {:instruction 73} {:instruction tagged_497} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_pop} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction float_sin} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_sub print_integer integer_mult print_integer print_integer integer_add print_integer float_yank integer_div float_cos float_cos float_yank float_yank tagged_847 float_cos float_flush float_yank tagged_847 in1 integer_max integer_fromfloat float_flush integer_fromfloat integer_shove integer_fromfloat integer_fromfloat float_flush integer_swap integer_rot in2 tag_float_138 integer_add float_yank in1 integer_add float_mod tag_float_838 integer_add float_frominteger integer_dec print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_add in1 integer_fromfloat tag_float_726 float_dup_times 73 tagged_497 float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_pop print_integer print_float float_div float_sin float_dup_times integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3294.894113200001
Median total errors in population: 201.43079999999998
Error averages by case: (136.03993079999876 6.958 130.9541325999995 8.662 128.93382800000037 9.605 134.67302120000136 8.664 130.23244429999875 10.325 129.81087749999955 9.598 104.97448840000129 7.721 134.1959022000005 7.868 105.10224950000088 7.871 132.84882390000033 6.964 133.40129780000146 7.732 131.90082989999908 6.916 133.26345549999812 7.895 103.37538930000167 8.788 129.959642399999 9.669 101.7073259000008 6.81 132.51638909999875 8.601 106.57192570000105 9.54 132.54026870000214 8.638 105.97844360000015 8.029 134.0076242999984 8.717 104.13527000000052 7.925 105.68735349999862 7.908 131.11958620000135 8.598 132.37861289999915 8.583)
Error minima by case: (0.0028 3 0.1605 1 0.1816 7 0.2964 2 0.3359 8 0.1483 7 0.2913 3 0.3129 3 0.0719 3 0.0919 2 0.2333 2 0.0055 2 0.3396 3 0.2384 3 0.4713 7 0.028 2 0.1961 3 0.0825 7 0.4074 2 0.4047 6 0.3065 2 0.2686 6 0.1989 2 0.2913 2 0.4311 2)
Average genome size in population (length): 64.099
Average program size in population (points): 65.099
Average percent parens in population: 0.016
Minimum age in population: 250.3573681602728
Maximum age in population: 254.6680718592947
Average age in population: 252.9170518671799
Median age in population: 252.9502222566259
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.167
Error (vector) diversity:			 0.179
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 271989108
--- Timings ---
Current time: 1529615510727 milliseconds
Total Time:         627.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       252.7 seconds, 40.3%
Fitness Testing:    294.9 seconds, 47.0%
Report:              79.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_36} {:instruction integer_dup_items} {:instruction float_sub} {:instruction float_sub} {:instruction float_cos} {:instruction float_cos} {:instruction float_cos} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction float_yank} {:instruction integer_div} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_dec} {:instruction float_cos} {:instruction integer_dup_items} {:instruction float_flush} {:instruction float_yank} {:instruction float_cos} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_cos} {:instruction float_pop} {:instruction integer_max} {:instruction in1} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction integer_sub} {:instruction tag_float_838} {:instruction integer_div} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_min} {:instruction 72} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction print_float} {:instruction 73} {:instruction float_flush} {:instruction float_min} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction float_pop} {:instruction integer_max} {:instruction float_yank} {:instruction print_integer})
Best program: (tagged_36 integer_dup_items float_sub float_sub float_cos float_cos float_cos integer_sub integer_dup float_cos float_flush float_yank float_yank integer_div integer_pop float_shove integer_dec float_cos integer_dup_items float_flush float_yank float_cos integer_mod float_cos in1 integer_max integer_fromfloat integer_dup_times integer_mod float_cos float_pop integer_max in1 in2 tag_float_138 integer_add integer_sub tag_float_838 integer_div float_frominteger float_shove print_float 72 float_pop float_min 72 float_yankdup integer_fromfloat 72 float_dup_times 73 float_cos float_div print_float in1 integer_fromfloat 72 print_float 73 float_flush float_min integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div float_pop integer_max float_yank print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3196.1530063000005
Median total errors in population: 201.43079999999998
Error averages by case: (131.16746229999828 7.037 125.72303629999945 8.728 120.80759240000054 9.591 129.93287050000143 8.761 121.82780489999861 10.294 121.1924848999995 9.554 104.25393690000126 7.708 128.91134240000048 7.91 104.46679090000087 7.881 127.37435150000034 7.053 128.1069135000015 7.751 127.10711799999902 6.997 127.95473539999806 7.976 102.74607400000183 8.844 121.85816049999893 9.59 100.58914010000075 6.863 127.27512519999864 8.649 109.42925330000114 9.533 127.57520250000232 8.709 108.40216700000025 8.028 126.6931363999984 8.776 106.99771310000054 7.87 104.94024629999858 7.96 126.08807210000144 8.617 125.4092758999991 8.643)
Error minima by case: (4.0E-4 3 0.1613 5 0.1816 7 0.2971 6 0.3359 8 0.1483 7 0.6638 5 0.3136 7 0.0686 6 0.0775 5 0.2341 6 0.0062 5 0.3252 5 0.2389 6 0.4713 7 0.0287 5 0.1968 6 0.0825 7 0.4081 7 0.4047 6 0.2921 6 0.6796 6 0.7572 6 0.277 6 0.4168 6)
Average genome size in population (length): 63.838
Average program size in population (points): 64.838
Average percent parens in population: 0.016
Minimum age in population: 251.8201011772873
Maximum age in population: 256.0614064941119
Average age in population: 254.3842315840221
Median age in population: 254.4485028538632
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.168
Error (vector) diversity:			 0.181
Behavioral diversity:				 0.182
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 273586833
--- Timings ---
Current time: 1529615514432 milliseconds
Total Time:         630.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       254.2 seconds, 40.3%
Fitness Testing:    296.6 seconds, 47.0%
Report:              79.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction integer_add} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction integer_max} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_max} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction 72} {:instruction integer_min} {:instruction float_div} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction integer_max} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_dec} {:instruction integer_max} {:instruction print_integer})
Best program: (float_sub float_inc float_yank float_yank integer_add integer_pop float_shove integer_dec float_stackdepth integer_max in1 integer_max integer_fromfloat float_flush integer_swap integer_rot integer_shove integer_max in2 tag_float_138 integer_add float_mod tag_float_838 tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop 72 integer_min float_div float_div print_float in1 integer_fromfloat 72 float_dup_times 73 integer_max float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_dec integer_max print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3292.1926628000006
Median total errors in population: 201.43079999999998
Error averages by case: (137.037459799998 6.977 129.75820039999948 8.669 125.33682130000093 9.535 135.01590430000167 8.709 127.15253039999791 10.254 126.62346399999959 9.484 106.90617730000156 7.678 134.00438130000057 7.867 107.02356870000091 7.83 132.2269666000004 6.973 133.00744120000164 7.72 130.13500619999834 6.931 132.84673419999714 7.902 104.56081660000251 8.795 126.6752768999985 9.512 101.63179170000096 6.766 131.96859659999862 8.639 111.24449490000146 9.499 131.6449195000032 8.667 110.34732860000027 7.95 132.74012369999767 8.702 109.12645970000086 7.853 107.71495649999834 7.875 129.75569360000165 8.591 129.74554879999914 8.584)
Error minima by case: (0.0023 5 0.1605 6 0.1816 8 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0717 6 0.0919 6 0.2333 6 0.0055 5 0.3396 5 0.2382 5 0.4713 7 0.028 4 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 63.812
Average program size in population (points): 64.812
Average percent parens in population: 0.016
Minimum age in population: 252.9607295156522
Maximum age in population: 257.5315321691667
Average age in population: 255.7511636890205
Median age in population: 255.8071639264226
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.164
Error (vector) diversity:			 0.179
Behavioral diversity:				 0.18
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 275183858
--- Timings ---
Current time: 1529615517926 milliseconds
Total Time:         634.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       255.5 seconds, 40.3%
Fitness Testing:    298.3 seconds, 47.0%
Report:              80.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction print_integer} {:instruction float_stackdepth} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction tagged_36} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_div} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_flush} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction float_div} {:instruction tagged_497} {:instruction in2} {:instruction integer_inc} {:instruction tag_float_838} {:instruction integer_add} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_swap} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_dup} {:instruction print_integer} {:instruction float_mult} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub print_integer float_stackdepth float_cos float_cos float_flush float_flush float_yank tagged_847 tagged_36 integer_dup_items in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove float_div in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float float_mod integer_yankdup 72 float_mod in1 integer_fromfloat 72 float_dup_times 73 float_flush float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult in1 integer_fromfloat 72 float_dup_times float_div tagged_497 in2 integer_inc tag_float_838 integer_add print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_swap integer_inc 72 float_mod float_mod integer_dec integer_dec integer_mult float_dup print_integer float_mult float_div print_float float_pop integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3500.2114515000003
Median total errors in population: 201.43079999999998
Error averages by case: (143.30061339999892 7.151 137.85070640000023 8.817 133.79945430000038 9.678 141.5210746000014 8.838 135.37581649999834 10.373 135.0585183999995 9.622 114.56855470000141 7.859 141.42225300000052 8.032 115.73893640000097 8.018 140.25877000000042 7.153 140.58062920000154 7.848 138.22816259999956 7.092 140.44601779999763 8.084 113.66672400000232 8.938 135.11902059999872 9.675 111.14665780000081 6.931 139.5912779999994 8.761 120.3289269000015 9.618 139.41312400000268 8.8 119.81613570000016 8.108 141.606052199998 8.849 117.24394330000099 8.012 115.30678709999849 8.055 137.74239370000058 8.751 139.30290089999983 8.715)
Error minima by case: (0.0028 5 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0716 5 0.0401 6 0.2333 6 0.0055 5 0.2878 6 0.2381 7 0.4713 7 0.028 4 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.2547 6 0.2686 6 0.1989 6 0.2395 7 0.3793 6)
Average genome size in population (length): 64.61
Average program size in population (points): 65.61
Average percent parens in population: 0.016
Minimum age in population: 254.6750771797261
Maximum age in population: 259.0567515033336
Average age in population: 257.1675547929773
Median age in population: 257.1858423802919
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.182
Error (vector) diversity:			 0.197
Behavioral diversity:				 0.198
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 276800483
--- Timings ---
Current time: 1529615521676 milliseconds
Total Time:         637.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       257.0 seconds, 40.3%
Fitness Testing:    300.1 seconds, 47.0%
Report:              80.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_mult} {:instruction in1} {:instruction float_flush} {:instruction float_flush} {:instruction float_yank} {:instruction float_sub} {:instruction print_integer} {:instruction float_dec} {:instruction integer_yank} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction 78.11064382697936} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction in1} {:instruction float_yank} {:instruction tagged_751} {:instruction print_integer} {:instruction float_max} {:instruction in1} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction float_swap} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction 72} {:instruction integer_dup_items} {:instruction integer_shove} {:instruction integer_add} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction integer_inc} {:instruction 72} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_div} {:instruction print_integer} {:instruction print_float} {:instruction integer_max} {:instruction float_dup} {:instruction print_integer})
Best program: (float_sub integer_mult in1 float_flush float_flush float_yank float_sub print_integer float_dec integer_yank in1 integer_max integer_fromfloat 78.11064382697936 in2 tag_float_138 integer_add in1 float_yank tagged_751 print_integer float_max in1 integer_mod integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 float_swap float_mod tag_float_838 integer_add float_mod float_frominteger integer_yankdup 72 integer_dup_items integer_shove integer_add print_float in1 integer_fromfloat 72 float_dup_times 73 integer_inc 72 float_cos integer_dec integer_dec integer_mult float_div print_integer print_float integer_max float_dup print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3013.6488472000005
Median total errors in population: 201.43079999999998
Error averages by case: (122.31197079999802 6.985 116.27235729999946 8.672 112.47561660000044 9.581 121.01080880000157 8.699 113.80243869999862 10.311 113.38521609999952 9.533 99.72931810000131 7.669 119.77902680000052 7.849 100.28691390000087 7.82 118.16052260000038 6.949 118.91790290000164 7.729 117.10933219999896 6.894 118.72714009999781 7.911 97.50002660000176 8.777 113.72700969999893 9.567 96.3228248000008 6.78 117.97627329999847 8.609 105.7393932000012 9.52 118.36630640000254 8.629 105.06507710000022 7.957 120.39688389999816 8.732 102.75671770000066 7.849 100.66832879999852 7.86 116.65328570000155 8.606 118.42415509999913 8.596)
Error minima by case: (0.0033 6 0.1605 4 0.1816 7 0.2964 5 0.3359 8 0.1483 7 0.6858 5 0.3129 6 0.0717 6 0.0401 5 0.2333 5 0.0055 5 0.2878 6 0.2381 6 0.4713 7 0.028 4 0.1961 6 0.0825 7 0.4074 5 0.4047 6 0.2547 5 0.6796 6 0.7782 5 0.2395 5 0.3793 5)
Average genome size in population (length): 64.715
Average program size in population (points): 65.715
Average percent parens in population: 0.016
Minimum age in population: 255.6842512058469
Maximum age in population: 260.6555777819497
Average age in population: 258.5943614267593
Median age in population: 258.64299528188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.159
Error (vector) diversity:			 0.173
Behavioral diversity:				 0.176
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 278419433
--- Timings ---
Current time: 1529615525654 milliseconds
Total Time:         641.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       258.5 seconds, 40.3%
Fitness Testing:    301.9 seconds, 47.0%
Report:              81.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_sub} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_flush} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction 23.41613892955472} {:instruction integer_rot} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_yank} {:instruction in1} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_dec} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_min} {:instruction print_float} {:instruction float_dec} {:instruction integer_max} {:instruction print_integer})
Best program: (float_sub float_sub float_cos float_cos float_flush float_flush in1 integer_fromfloat integer_fromfloat float_flush 23.41613892955472 integer_rot in2 tag_float_138 integer_add float_yank in1 integer_add float_mod tag_float_838 integer_dup float_frominteger integer_dec print_float 72 float_pop in1 integer_fromfloat 72 float_dup_times 73 float_yankdup float_mod integer_inc 72 integer_fromfloat integer_dec integer_dec integer_mult float_mod print_integer print_float float_min print_float float_dec integer_max print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3023.839242900001
Median total errors in population: 201.43079999999998
Error averages by case: (124.91123029999807 7.013 117.38019729999942 8.701 116.21008630000058 9.581 123.28163170000126 8.738 117.3770744999988 10.292 116.44453079999954 9.54 98.8776190000012 7.731 121.34523860000056 7.909 98.42734820000078 7.88 119.34041460000037 7.005 120.44434450000132 7.75 118.29652669999892 6.939 120.24181379999791 7.929 96.30896540000163 8.819 117.28919509999893 9.575 95.36546590000081 6.818 119.4592449999988 8.633 99.53767620000116 9.521 119.63701900000213 8.669 99.14902240000016 7.969 122.11050169999814 8.748 96.82946760000043 7.86 99.83028939999859 7.916 117.69160230000124 8.636 119.22773659999909 8.653)
Error minima by case: (0.0033 5 0.1579 5 0.1816 7 0.2937 5 0.3359 8 0.1483 7 0.2913 4 0.3102 5 0.0716 4 0.0919 4 0.2307 5 0.0028 5 0.3396 5 0.2365 4 0.4713 7 0.0253 4 0.1934 5 0.0825 7 0.4047 5 0.4047 6 0.3065 5 0.2686 6 0.1989 4 0.2913 5 0.4311 5)
Average genome size in population (length): 64.717
Average program size in population (points): 65.717
Average percent parens in population: 0.016
Minimum age in population: 256.9115424819127
Maximum age in population: 262.151704166801
Average age in population: 260.0053398380329
Median age in population: 260.0542871773145
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.176
Error (vector) diversity:			 0.19
Behavioral diversity:				 0.191
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 280038333
--- Timings ---
Current time: 1529615529207 milliseconds
Total Time:         645.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       260.0 seconds, 40.3%
Fitness Testing:    303.6 seconds, 47.0%
Report:              81.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction in1} {:instruction float_yank} {:instruction print_integer} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_mult} {:instruction in1} {:instruction integer_div} {:instruction float_sub} {:instruction float_flush} {:instruction integer_div} {:instruction float_yank} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_779} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction 72} {:instruction integer_min} {:instruction float_div} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction integer_max} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_min} {:instruction print_float} {:instruction float_dec} {:instruction integer_max} {:instruction print_integer})
Best program: (float_dup print_integer in1 float_yank print_integer float_yankdup print_integer float_mult in1 integer_div float_sub float_flush integer_div float_yank integer_div integer_stackdepth float_cos float_flush float_yank tagged_779 integer_mod float_cos in1 integer_fromfloat float_flush integer_swap integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod float_frominteger float_shove print_float 72 float_pop 72 integer_min float_div float_div print_float in1 integer_fromfloat 72 float_dup_times 73 integer_max float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_min print_float float_dec integer_max print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3738.7598006000007
Median total errors in population: 201.43079999999998
Error averages by case: (153.95926349999905 7.033 148.47804200000044 8.745 145.43594389999998 9.622 151.75307820000148 8.745 146.39811799999833 10.31 146.21490899999952 9.604 122.75599960000122 7.769 152.33908620000054 7.96 122.72152390000083 7.945 151.26137130000038 7.069 151.64664940000156 7.785 149.2840207999997 7.005 151.7625570999977 7.971 120.92524950000214 8.817 145.92656119999867 9.642 120.0252361000008 6.876 150.87609349999963 8.67 126.79299770000146 9.578 149.85300060000253 8.719 126.2336377000001 8.061 149.82204989999806 8.769 124.77616910000097 7.938 123.32624619999864 7.987 147.67539690000055 8.686 148.57259930000004 8.638)
Error minima by case: (0.0033 5 0.1605 5 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0719 6 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2384 6 0.4713 7 0.028 4 0.1961 6 0.0825 6 0.4074 7 0.4047 6 0.3065 6 0.2678 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 64.263
Average program size in population (points): 65.263
Average percent parens in population: 0.016
Minimum age in population: 258.6900856066032
Maximum age in population: 263.458647218773
Average age in population: 261.4196832762012
Median age in population: 261.4472558790468
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.179
Error (vector) diversity:			 0.192
Behavioral diversity:				 0.195
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 281645558
--- Timings ---
Current time: 1529615533242 milliseconds
Total Time:         649.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       261.4 seconds, 40.3%
Fitness Testing:    305.5 seconds, 47.1%
Report:              82.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_dec} {:instruction print_integer} {:instruction float_cos} {:instruction float_cos} {:instruction float_cos} {:instruction float_dup} {:instruction tagged_847} {:instruction integer_mod} {:instruction integer_yank} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction integer_add} {:instruction float_mod} {:instruction integer_div} {:instruction print_float} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction print_float} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction tagged_497} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction 72} {:instruction float_dup_times} {:instruction 74} {:instruction float_cos} {:instruction integer_shove} {:instruction float_div} {:instruction float_div} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_flush} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction float_min} {:instruction float_div} {:instruction integer_yankdup} {:instruction float_sub} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub integer_dec print_integer float_cos float_cos float_cos float_dup tagged_847 integer_mod integer_yank in1 integer_max integer_fromfloat float_dup_times integer_sub integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod integer_add float_mod integer_div print_float float_mod float_frominteger float_dup_items print_float integer_fromfloat 72 float_dup_times integer_stackdepth integer_fromfloat 72 float_dup_times 73 tagged_497 integer_pop integer_yankdup 72 float_dup_times 74 float_cos integer_shove float_div float_div in1 integer_fromfloat integer_fromfloat 72 float_dup_times 73 float_flush float_mod integer_inc 72 integer_dec integer_dec integer_mult float_mod print_integer float_min float_div integer_yankdup float_sub integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2836.5322369000005
Median total errors in population: 201.43079999999998
Error averages by case: (119.30494799999809 6.872 109.11200189999941 8.6 107.02939510000037 9.486 115.60442010000156 8.619 108.13846869999867 10.223 107.74955379999956 9.426 90.75515780000134 7.622 115.35418610000053 7.785 91.13827430000089 7.786 113.86631990000036 6.869 114.63934310000177 7.642 110.80759899999916 6.812 114.52130709999783 7.818 90.05208640000161 8.709 108.08795339999907 9.491 88.00489120000083 6.725 113.78893839999847 8.559 93.59764610000086 9.423 111.22397470000236 8.576 93.07477430000023 7.851 113.37450789999829 8.651 90.15090320000016 7.748 91.51311309999848 7.825 109.54543670000152 8.56 109.88103659999906 8.538)
Error minima by case: (0.0023 3 0.1605 1 0.1816 7 0.2964 2 0.3359 8 0.1483 7 0.2913 3 0.3129 3 0.0717 3 0.0919 2 0.2333 2 0.0055 2 0.3396 3 0.2381 3 0.4713 7 0.0173 2 0.1961 3 0.0825 7 0.4074 2 0.4047 6 0.3065 2 0.2686 6 0.1989 2 0.2913 2 0.4311 2)
Average genome size in population (length): 64.29
Average program size in population (points): 65.29
Average percent parens in population: 0.016
Minimum age in population: 260.1083513505313
Maximum age in population: 264.7711739758495
Average age in population: 262.8680828049128
Median age in population: 262.8996853753577
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.154
Error (vector) diversity:			 0.168
Behavioral diversity:				 0.17
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 283253733
--- Timings ---
Current time: 1529615536956 milliseconds
Total Time:         653.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       263.0 seconds, 40.3%
Fitness Testing:    307.3 seconds, 47.0%
Report:              82.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_36} {:instruction integer_inc} {:instruction float_swap} {:instruction tagged_908} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_pop} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction integer_max} {:instruction 48.274932321926514} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_751} {:instruction print_integer} {:instruction float_max} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction tag_float_138} {:instruction float_swap} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction 72} {:instruction integer_dup_items} {:instruction integer_shove} {:instruction integer_add} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction integer_inc} {:instruction 72} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_div} {:instruction print_integer} {:instruction print_float} {:instruction integer_max} {:instruction float_dup} {:instruction print_integer})
Best program: (tagged_36 integer_inc float_swap tagged_908 float_stackdepth float_yank float_add float_stackdepth float_pop integer_div integer_dup_times integer_mult integer_max 48.274932321926514 float_cos float_flush float_yank tagged_751 print_integer float_max in1 integer_max integer_fromfloat float_flush integer_swap integer_sub integer_shove float_swap in2 tag_float_138 float_swap float_mod tag_float_838 integer_add float_mod float_frominteger integer_yankdup 72 integer_dup_items integer_shove integer_add print_float in1 integer_fromfloat 72 float_dup_times 73 integer_inc 72 float_cos integer_dec integer_dec integer_mult float_div print_integer print_float integer_max float_dup print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3611.219672200001
Median total errors in population: 201.43079999999998
Error averages by case: (149.7052236999992 6.98 143.65674880000049 8.668 141.00632910000002 9.606 147.76311780000148 8.708 141.9743942999984 10.296 140.2484755999995 9.57 116.2855001000014 7.714 147.5280552000006 7.892 116.58828970000087 7.837 145.18166570000042 6.983 146.80631520000165 7.727 145.14089999999985 6.943 146.69017629999766 7.887 115.19785630000183 8.767 142.13013219999888 9.604 113.46717350000104 6.778 146.03768469999966 8.654 120.58254020000126 9.561 145.48547550000254 8.661 120.33289690000016 7.99 146.76759249999805 8.716 118.11218270000066 7.909 117.01011549999845 7.903 144.1124863000004 8.621 144.83134440000003 8.602)
Error minima by case: (0.0023 5 0.1615 5 0.7666 6 0.2974 5 0.6123 8 0.7999 8 0.2913 4 0.3139 5 0.0717 4 0.8862 4 0.2343 5 0.0065 5 0.6385 5 0.2381 4 0.4768 8 0.029 4 0.1971 5 0.0825 7 0.4084 5 0.4047 6 0.6716 5 0.2686 5 0.1989 4 0.6868 5 0.547 5)
Average genome size in population (length): 64.244
Average program size in population (points): 65.244
Average percent parens in population: 0.016
Minimum age in population: 261.1083513505313
Maximum age in population: 266.2325797626619
Average age in population: 264.3354219446487
Median age in population: 264.3697047321376
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.165
Error (vector) diversity:			 0.19
Behavioral diversity:				 0.194
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 284860583
--- Timings ---
Current time: 1529615540660 milliseconds
Total Time:         656.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       264.3 seconds, 40.2%
Fitness Testing:    309.1 seconds, 47.1%
Report:              83.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_mult} {:instruction in1} {:instruction float_flush} {:instruction float_flush} {:instruction float_yank} {:instruction float_yank} {:instruction tagged_847} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction float_yankdup} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction 72} {:instruction print_float} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_pop} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_shove} {:instruction 73} {:instruction tagged_497} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_pop} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction float_sin} {:instruction float_swap} {:instruction float_div} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction print_integer})
Best program: (float_sub integer_mult in1 float_flush float_flush float_yank float_yank tagged_847 in1 integer_max integer_fromfloat integer_min integer_fromfloat integer_shove integer_fromfloat in2 tag_float_138 float_yankdup float_mod tag_float_838 integer_add float_mod float_frominteger integer_add 72 print_float integer_shove float_div print_float 72 float_mod integer_yankdup 72 float_pop in1 integer_fromfloat 72 float_shove 73 tagged_497 float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_pop print_integer print_float float_div float_sin float_swap float_div integer_max float_dec integer_max print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3039.835555400001
Median total errors in population: 201.43079999999998
Error averages by case: (124.74587739999822 6.961 119.92959789999945 8.717 115.03530920000013 9.58 123.6169959000017 8.707 116.12568889999889 10.294 115.35843479999951 9.504 97.15732340000147 7.666 122.83203720000058 7.867 96.39709840000093 7.837 121.87725330000043 6.956 122.13797700000178 7.713 120.98782629999927 6.911 122.09489139999813 7.893 95.07281550000167 8.827 116.11988269999924 9.566 94.21260770000097 6.793 121.3568206999984 8.614 102.87979260000085 9.504 121.52433090000218 8.632 103.5568687000002 7.931 120.55338759999859 8.737 101.34422930000026 7.818 97.88497249999836 7.882 120.21346960000167 8.638 118.66506649999904 8.607)
Error minima by case: (0.0035 4 0.1605 6 0.7666 7 0.2964 6 0.6123 8 0.7999 7 0.2913 5 0.3129 7 0.0716 6 0.8852 6 0.2333 6 0.0055 5 0.6375 6 0.2381 7 0.4768 8 0.028 5 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.6706 6 0.2686 6 0.1989 6 0.2913 7 0.546 6)
Average genome size in population (length): 63.948
Average program size in population (points): 64.948
Average percent parens in population: 0.016
Minimum age in population: 263.4939061821675
Maximum age in population: 267.7946333752199
Average age in population: 265.7625512748453
Median age in population: 265.772769214169
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.834
Total error diversity:				 0.165
Error (vector) diversity:			 0.175
Behavioral diversity:				 0.176
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 286459983
--- Timings ---
Current time: 1529615544668 milliseconds
Total Time:         660.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       265.8 seconds, 40.2%
Fitness Testing:    311.0 seconds, 47.1%
Report:              83.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
;;******************************
;; -*- Number IO problem report - generation 184
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction float_dec} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction integer_div} {:instruction float_cos} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction float_mod} {:instruction integer_mult} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction 72} {:instruction integer_dup_items} {:instruction integer_shove} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction float_sin} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction integer_rot} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_dup} {:instruction print_integer})
Best program: (integer_add print_integer float_dup_times float_yank float_cos float_cos float_dec float_yank float_dup_times float_cos float_cos float_cos float_flush integer_div float_cos float_flush float_yankdup float_flush float_yank integer_sub integer_mod float_cos in1 integer_max float_mod float_frominteger float_mod integer_yankdup integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 float_mod integer_mult float_frominteger integer_yankdup 72 integer_dup_items integer_shove float_div print_float in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div float_sin float_dup_times float_yank float_rot integer_rot print_float float_pop integer_max float_dup print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2835.1818750000007
Median total errors in population: 201.43079999999998
Error averages by case: (115.54578929999846 6.942 107.63642159999945 8.643 107.93254310000023 9.496 111.90028460000137 8.653 109.72335999999889 10.275 108.92565389999953 9.411 94.38949300000117 7.651 113.53474370000052 7.83 95.3673227000008 7.805 111.96340680000036 6.918 112.60986450000159 7.706 108.50826009999925 6.847 112.4022054999983 7.885 92.99815780000152 8.779 109.43976799999916 9.474 90.3836031000007 6.77 111.55429639999862 8.611 94.43487240000078 9.416 109.39221780000194 8.631 93.71250810000022 7.83 112.15176189999875 8.705 91.11518850000024 7.744 95.11688939999866 7.848 107.60536460000127 8.602 109.73489819999914 8.631)
Error minima by case: (0.0033 6 0.1613 6 0.1614 7 0.2971 6 0.3157 7 0.1281 7 0.2913 5 0.3136 6 0.0724 5 0.0919 6 0.2341 7 0.0062 5 0.3396 7 0.2389 6 0.4512 7 0.0287 4 0.1968 7 0.0825 7 0.4081 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 63.338
Average program size in population (points): 64.338
Average percent parens in population: 0.016
Minimum age in population: 264.8106345421282
Maximum age in population: 269.1380046923027
Average age in population: 267.2030471519913
Median age in population: 267.2627371218999
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.152
Error (vector) diversity:			 0.162
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 288043958
--- Timings ---
Current time: 1529615548264 milliseconds
Total Time:         664.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       267.2 seconds, 40.2%
Fitness Testing:    312.7 seconds, 47.1%
Report:              84.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
;;******************************
;; -*- Number IO problem report - generation 185
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction float_flush} {:instruction float_dup} {:instruction print_float} {:instruction float_inc} {:instruction float_yank} {:instruction integer_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_943} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction tagged_847} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_184} {:instruction float_min} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction 72} {:instruction float_yank} {:instruction 73} {:instruction float_mod} {:instruction 72} {:instruction float_sub} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction integer_max} {:instruction float_max} {:instruction print_integer})
Best program: (float_cos integer_swap float_flush float_dup print_float float_inc float_yank integer_yank integer_div float_cos float_cos float_flush float_yank tagged_943 in1 integer_max integer_fromfloat float_flush integer_swap tagged_847 float_flush integer_swap integer_mod integer_fromfloat in2 tag_float_184 float_min float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 72 float_yank 73 float_mod 72 float_sub integer_yankdup 72 float_mod in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_cos integer_dec integer_dec integer_mult float_mod print_integer print_float integer_max float_max print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3159.8985448000008
Median total errors in population: 201.43079999999998
Error averages by case: (127.46713639999784 6.951 120.94167879999947 8.637 119.57524400000102 9.525 125.42664850000159 8.677 121.01588249999799 10.262 119.78833089999951 9.478 106.47633240000155 7.678 125.64067540000055 7.839 108.73538260000093 7.808 124.06994750000044 6.943 124.83352650000158 7.711 121.87942739999839 6.888 123.8592498999973 7.899 107.08079830000251 8.794 120.96263319999848 9.482 103.12761490000102 6.752 123.91468279999853 8.614 110.51396120000156 9.451 122.76079730000305 8.62 109.56511250000023 7.907 125.80877789999782 8.705 107.09384990000085 7.811 107.30343329999829 7.858 121.07576230000161 8.571 123.5506583999991 8.57)
Error minima by case: (0.0033 5 0.1605 6 0.5316 7 0.2964 7 0.6123 8 0.7999 8 0.6645 5 0.3129 7 0.0694 5 0.8852 6 0.2333 6 0.0055 5 0.6375 6 0.2389 7 0.4768 8 0.028 4 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.6693 6 0.6796 6 0.7579 7 0.2913 7 0.4311 6)
Average genome size in population (length): 62.793
Average program size in population (points): 63.793
Average percent parens in population: 0.016
Minimum age in population: 266.0701273147744
Maximum age in population: 270.7007681458466
Average age in population: 268.6106624161195
Median age in population: 268.6473107419262
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.161
Error (vector) diversity:			 0.177
Behavioral diversity:				 0.178
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 289614458
--- Timings ---
Current time: 1529615552010 milliseconds
Total Time:         668.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       268.8 seconds, 40.2%
Fitness Testing:    314.4 seconds, 47.0%
Report:              85.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
;;******************************
;; -*- Number IO problem report - generation 186
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_swap} {:instruction float_flush} {:instruction integer_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_yank} {:instruction integer_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_943} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction tagged_847} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_mod} {:instruction float_min} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction 72} {:instruction float_yank} {:instruction 73} {:instruction float_mod} {:instruction 72} {:instruction float_sub} {:instruction integer_yankdup} {:instruction 72} {:instruction float_mod} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction integer_max} {:instruction float_max} {:instruction print_integer})
Best program: (float_cos integer_swap float_flush integer_inc print_float float_inc float_yank integer_yank integer_div float_cos float_cos float_flush float_yank tagged_943 in1 integer_max integer_fromfloat float_flush integer_swap tagged_847 float_flush integer_swap integer_mod integer_fromfloat in2 float_mod float_min float_mod tag_float_838 integer_add integer_sub float_frominteger float_shove print_float 72 72 float_yank 73 float_mod 72 float_sub integer_yankdup 72 float_mod in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_cos integer_dec integer_dec integer_mult float_mod print_integer print_float integer_max float_max print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3159.6482068000005
Median total errors in population: 201.43079999999998
Error averages by case: (129.3284533999982 6.98 123.64789919999946 8.683 119.63643510000057 9.534 128.24665030000145 8.739 120.91510169999857 10.243 119.88352099999956 9.456 103.08444970000146 7.726 127.04769590000058 7.857 103.39552330000089 7.855 125.2936294000004 6.973 126.2747060000015 7.714 124.77551039999886 6.936 126.14652189999786 7.915 101.97781750000208 8.828 120.93172029999889 9.487 99.27171000000091 6.819 125.44290359999863 8.629 107.86781380000131 9.483 125.76958720000239 8.664 107.52104310000021 7.905 127.75790199999835 8.755 103.88843230000079 7.82 103.86140549999838 7.917 124.14613980000145 8.621 125.38563439999912 8.611)
Error minima by case: (0.0033 3 0.1605 1 0.1816 7 0.2964 2 0.3359 8 0.1483 7 0.6858 3 0.3129 3 0.0724 3 0.0919 2 0.2333 2 0.0055 2 0.3396 3 0.2389 3 0.4713 7 0.028 2 0.1961 3 0.0825 7 0.4074 2 0.4047 6 0.3065 2 0.6796 6 0.7782 2 0.2913 2 0.4311 2)
Average genome size in population (length): 62.939
Average program size in population (points): 63.939
Average percent parens in population: 0.016
Minimum age in population: 267.8635997436711
Maximum age in population: 272.2996111791545
Average age in population: 270.0216030313606
Median age in population: 270.04887175133
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.167
Error (vector) diversity:			 0.177
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 291188633
--- Timings ---
Current time: 1529615555787 milliseconds
Total Time:         672.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       270.3 seconds, 40.2%
Fitness Testing:    316.3 seconds, 47.1%
Report:              85.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
;;******************************
;; -*- Number IO problem report - generation 187
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_shove} {:instruction print_integer} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction float_dec} {:instruction float_yank} {:instruction integer_div} {:instruction integer_mod} {:instruction float_cos} {:instruction tagged_1110} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction float_min} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_dec} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_add} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction tagged_497} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_pop} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction float_sin} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_shove print_integer float_yank float_yank float_cos float_cos float_dec float_yank integer_div integer_mod float_cos tagged_1110 integer_mod integer_flush in1 float_min integer_shove integer_fromfloat in2 tag_float_138 integer_add float_frominteger integer_dec print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_add in1 integer_fromfloat 72 float_dup_times 73 tagged_497 float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_pop print_integer print_float float_div float_sin float_dup_times integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3006.1607501000008
Median total errors in population: 201.43079999999998
Error averages by case: (123.19919859999794 6.966 118.57700589999942 8.675 111.97183760000048 9.59 122.34178460000153 8.686 113.07322169999871 10.281 112.44367339999945 9.517 95.62653550000134 7.684 121.40339560000055 7.858 94.75204400000099 7.853 120.27984570000041 6.956 120.70930480000162 7.708 119.79667199999876 6.925 120.63703449999771 7.909 93.28269410000149 8.799 113.06248879999897 9.556 92.57971970000087 6.777 119.94993589999852 8.606 102.95790090000101 9.499 120.20136210000261 8.61 103.66588670000016 7.955 121.52587119999815 8.735 101.31902010000032 7.852 96.31317679999844 7.878 118.89983730000151 8.593 119.52230259999907 8.601)
Error minima by case: (0.0033 5 0.1416 5 0.1816 7 0.2774 6 0.3359 8 0.1483 7 0.2913 5 0.2939 7 0.0577 6 0.0919 6 0.2144 5 0.0062 5 0.3396 6 0.2202 6 0.4713 7 0.009 5 0.1772 7 0.0825 6 0.3884 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 62.727
Average program size in population (points): 63.727
Average percent parens in population: 0.016
Minimum age in population: 269.120417960598
Maximum age in population: 273.6468918431327
Average age in population: 271.4373048925204
Median age in population: 271.4792120214437
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.164
Error (vector) diversity:			 0.173
Behavioral diversity:				 0.174
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 292757416
--- Timings ---
Current time: 1529615559214 milliseconds
Total Time:         675.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       271.7 seconds, 40.2%
Fitness Testing:    318.0 seconds, 47.1%
Report:              85.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
;;******************************
;; -*- Number IO problem report - generation 188
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_shove} {:instruction print_integer} {:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction float_dec} {:instruction float_yank} {:instruction integer_div} {:instruction integer_mod} {:instruction float_cos} {:instruction tagged_1110} {:instruction float_flush} {:instruction integer_swap} {:instruction in1} {:instruction float_min} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_dec} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction 72} {:instruction float_add} {:instruction float_shove} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_sub} {:instruction float_mod} {:instruction float_pop} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction float_mod} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_shove print_integer float_yank float_yank float_cos float_cos float_dec float_yank integer_div integer_mod float_cos tagged_1110 float_flush integer_swap in1 float_min integer_shove integer_fromfloat in2 tag_float_138 integer_add float_frominteger integer_dec print_float 72 float_pop float_swap 72 float_mod integer_yankdup 72 float_add float_shove 72 float_mod integer_yankdup float_sub float_mod float_pop in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer float_mod integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3119.9221455000006
Median total errors in population: 201.43079999999998
Error averages by case: (125.83169789999806 6.983 120.41340979999946 8.654 120.23276720000077 9.543 124.53298030000146 8.7 121.66372359999849 10.271 119.85812319999945 9.489 104.24556780000124 7.703 123.97466450000059 7.863 104.53432080000094 7.86 122.22828980000047 6.957 123.22425790000142 7.702 121.13603099999874 6.939 123.1567980999978 7.914 102.51939390000197 8.814 121.4376039999988 9.515 100.94345780000073 6.788 122.41260859999866 8.614 105.80349760000139 9.499 122.34297790000251 8.65 105.34221000000012 7.951 124.86062529999809 8.715 102.78019800000072 7.857 105.04954499999862 7.908 120.65229320000142 8.601 122.66810229999909 8.587)
Error minima by case: (0.0033 5 0.1477 6 0.7666 7 0.2836 6 0.6123 8 0.7999 8 0.2913 5 0.3001 6 0.0639 5 0.8724 6 0.2205 6 0.0055 5 0.6247 5 0.2264 6 0.4768 8 0.0152 4 0.1833 6 0.0825 7 0.3946 7 0.4047 6 0.6578 6 0.2686 6 0.1989 6 0.2913 7 0.5332 6)
Average genome size in population (length): 61.79
Average program size in population (points): 62.79
Average percent parens in population: 0.016
Minimum age in population: 270.120417960598
Maximum age in population: 275.1167352561011
Average age in population: 272.845077300871
Median age in population: 272.8824724137088
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.162
Error (vector) diversity:			 0.179
Behavioral diversity:				 0.182
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 294302941
--- Timings ---
Current time: 1529615563042 milliseconds
Total Time:         679.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       273.2 seconds, 40.2%
Fitness Testing:    319.7 seconds, 47.1%
Report:              86.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
;;******************************
;; -*- Number IO problem report - generation 189
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_yank} {:instruction float_cos} {:instruction float_cos} {:instruction float_dec} {:instruction float_yank} {:instruction integer_div} {:instruction integer_mod} {:instruction float_cos} {:instruction tagged_1110} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction tag_integer_834} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction print_float} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction 72} {:instruction print_float} {:instruction 73} {:instruction float_cos} {:instruction -49} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_flush} {:instruction float_min} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_tan} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_yank float_yank float_cos float_cos float_dec float_yank integer_div integer_mod float_cos tagged_1110 integer_mod float_mod in1 tag_integer_834 integer_fromfloat float_flush print_float integer_swap integer_sub float_dup integer_fromfloat in2 tag_float_138 integer_add tag_float_838 integer_add float_mod float_frominteger integer_add 72 print_float 73 float_cos -49 print_float in1 integer_fromfloat 72 float_dup_times 73 float_flush float_min integer_inc 72 float_mod integer_dec integer_dec integer_mult float_tan print_integer print_float float_div float_yankdup integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3604.0841940000005
Median total errors in population: 201.43079999999998
Error averages by case: (147.25370079999865 6.947 141.71000850000024 8.64 138.17744010000035 9.56 146.7974655000017 8.681 139.20905559999824 10.25 138.25381349999952 9.517 119.40533170000144 7.684 144.50649850000048 7.835 119.64205700000092 7.819 143.42093570000037 6.958 143.8220824000017 7.712 143.3984406999994 6.912 143.74936369999747 7.882 118.69961930000235 8.774 139.38132179999866 9.506 116.53501020000094 6.774 143.07032519999927 8.616 125.54562560000133 9.469 143.33228840000288 8.621 124.74623810000016 7.916 146.85371189999785 8.712 122.62589840000078 7.84 120.12285729999839 7.877 142.02487590000098 8.588 144.13722819999984 8.573)
Error minima by case: (0.0033 5 0.1613 6 0.7666 7 0.2971 6 0.3877 8 0.7999 8 0.2913 5 0.3136 7 0.0718 5 0.8859 6 0.2341 6 0.0062 5 0.6382 5 0.2383 7 0.4768 8 0.018 4 0.1968 7 0.0825 6 0.4081 7 0.4047 6 0.6713 6 0.2686 6 0.1989 7 0.6865 7 0.5467 6)
Average genome size in population (length): 61.464
Average program size in population (points): 62.464
Average percent parens in population: 0.016
Minimum age in population: 271.508700144022
Maximum age in population: 276.5681721487601
Average age in population: 274.2886347716437
Median age in population: 274.3232540730596
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.163
Error (vector) diversity:			 0.175
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 295840166
--- Timings ---
Current time: 1529615566592 milliseconds
Total Time:         682.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       274.6 seconds, 40.2%
Fitness Testing:    321.4 seconds, 47.1%
Report:              86.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
;;******************************
;; -*- Number IO problem report - generation 190
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction float_sub} {:instruction print_integer} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction tagged_36} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction float_pop} {:instruction float_swap} {:instruction float_mod} {:instruction integer_dup} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_inc} {:instruction 72} {:instruction float_mod} {:instruction tagged_803} {:instruction integer_swap} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction print_float} {:instruction 72} {:instruction float_mult} {:instruction float_swap} {:instruction 72} {:instruction float_dup} {:instruction integer_yankdup} {:instruction 72} {:instruction float_add} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction tagged_497} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_pop} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction integer_pop} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (print_integer float_sub print_integer integer_dup_items integer_yank in1 integer_max integer_fromfloat tagged_36 integer_dup_items in1 integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 integer_add float_add integer_add float_pop float_swap float_mod integer_dup float_shove print_float 72 float_inc 72 float_mod tagged_803 integer_swap in1 integer_fromfloat 72 print_float 72 float_mult float_swap 72 float_dup integer_yankdup 72 float_add in1 integer_fromfloat 72 float_dup_times 73 tagged_497 float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_pop print_integer print_float float_div integer_pop float_dup_times integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2833.9323044000007
Median total errors in population: 201.43079999999998
Error averages by case: (115.17770799999823 6.953 109.21080579999952 8.647 107.51234090000032 9.52 114.0233366000016 8.662 108.57199559999886 10.241 107.78569709999942 9.439 92.70734740000141 7.656 112.6417676000006 7.819 92.27241760000095 7.807 110.92551260000045 6.913 111.76680010000155 7.681 111.00457909999909 6.875 111.57897689999803 7.867 90.4323323000014 8.768 108.84409699999927 9.476 89.29810880000088 6.74 110.86002279999856 8.582 95.19688810000083 9.458 111.26415610000228 8.588 95.74813810000013 7.872 112.99345679999851 8.699 93.05778790000036 7.768 93.5958398999984 7.839 109.64557990000152 8.555 110.81461139999907 8.577)
Error minima by case: (0.0027 5 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2906 5 0.3129 7 0.0689 6 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2389 6 0.4713 7 0.028 4 0.1961 6 0.0825 7 0.4074 7 0.4047 5 0.3065 6 0.2686 6 0.1982 6 0.2913 7 0.4311 6)
Average genome size in population (length): 61.363
Average program size in population (points): 62.363
Average percent parens in population: 0.016
Minimum age in population: 272.508700144022
Maximum age in population: 277.8717099931738
Average age in population: 275.698035397441
Median age in population: 275.73288014112
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.155
Error (vector) diversity:			 0.17
Behavioral diversity:				 0.172
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 297374916
--- Timings ---
Current time: 1529615570332 milliseconds
Total Time:         686.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       276.2 seconds, 40.2%
Fitness Testing:    323.1 seconds, 47.1%
Report:              87.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
;;******************************
;; -*- Number IO problem report - generation 191
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_sub} {:instruction print_integer} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_yank} {:instruction float_div} {:instruction float_cos} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction tagged_847} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction float_min} {:instruction float_mod} {:instruction tag_float_50} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction integer_dup} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_sub} {:instruction float_mod} {:instruction float_pop} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction float_mod} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_sub print_integer integer_mult float_dup_items integer_dup_times float_yank float_div float_cos in1 integer_max integer_fromfloat float_flush integer_swap tagged_847 float_flush integer_swap integer_shove integer_fromfloat in2 tag_float_138 float_min float_mod tag_float_50 integer_add float_mod float_frominteger float_shove print_float 72 integer_dup float_swap 72 float_mod integer_yankdup float_sub float_mod float_pop in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer float_mod integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2852.2730388000014
Median total errors in population: 201.43079999999998
Error averages by case: (117.73269579999825 6.91 112.85042949999946 8.646 107.38343200000035 9.536 117.15039400000158 8.643 108.492434299999 10.291 107.64654549999942 9.48 87.77413510000127 7.661 115.72412790000058 7.827 88.22232210000084 7.799 114.70800520000044 6.923 115.02547000000162 7.719 114.54440369999898 6.902 114.96764899999793 7.844 87.10713970000114 8.759 108.54482309999918 9.538 84.77110030000073 6.764 114.24190169999854 8.609 94.8663419000009 9.5 114.47382660000243 8.626 94.56282940000018 7.881 116.32683679999835 8.67 91.84456120000016 7.803 88.61561529999864 7.848 113.13436950000158 8.58 114.22664919999909 8.576)
Error minima by case: (0.0044 5 0.1613 5 0.7666 7 0.2971 6 0.6123 8 0.7999 8 0.2913 5 0.3136 7 0.0724 5 0.8859 6 0.2088 7 0.0062 5 0.6346 6 0.2389 6 0.4768 8 0.0287 5 0.1933 6 0.0825 7 0.4081 7 0.4047 6 0.6713 6 0.2686 6 0.1989 6 0.2395 6 0.5467 6)
Average genome size in population (length): 60.863
Average program size in population (points): 61.863
Average percent parens in population: 0.016
Minimum age in population: 274.2553616029623
Maximum age in population: 279.3894825496988
Average age in population: 277.0594214515095
Median age in population: 277.1132699355672
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.173
Error (vector) diversity:			 0.189
Behavioral diversity:				 0.192
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 298897274
--- Timings ---
Current time: 1529615573993 milliseconds
Total Time:         690.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       277.8 seconds, 40.2%
Fitness Testing:    324.8 seconds, 47.1%
Report:              87.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
;;******************************
;; -*- Number IO problem report - generation 192
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_yank} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction integer_pop} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_swap} {:instruction tagged_847} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_184} {:instruction float_min} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction 72} {:instruction integer_min} {:instruction float_div} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction tagged_37} {:instruction 73} {:instruction integer_max} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction float_dec} {:instruction integer_max} {:instruction print_integer})
Best program: (float_sub float_yank float_cos float_flush integer_pop float_cos float_cos float_flush float_yank integer_pop in1 integer_max integer_fromfloat float_flush integer_fromfloat integer_shove integer_fromfloat integer_swap tagged_847 float_flush integer_swap integer_shove integer_fromfloat in2 tag_float_184 float_min float_mod tag_float_838 integer_add integer_sub float_frominteger float_shove print_float 72 float_pop 72 integer_min float_div float_div print_float in1 integer_fromfloat 72 tagged_37 73 integer_max float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_rot print_float float_dec integer_max print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3012.4802253999997
Median total errors in population: 201.43079999999998
Error averages by case: (124.98390879999826 6.911 119.04061359999955 8.638 118.49807490000074 9.51 123.88350280000125 8.667 119.9504666999986 10.248 118.64168019999958 9.447 93.76744420000105 7.655 123.0089319000005 7.819 93.88183760000075 7.805 121.08725430000042 6.928 122.13400520000138 7.679 120.18382339999884 6.858 121.95396429999799 7.85 92.17437720000129 8.776 119.91318729999878 9.489 89.88876250000061 6.741 121.14953989999876 8.586 95.51764360000074 9.445 121.13967120000228 8.583 95.0517221000002 7.856 123.0092203999984 8.684 92.20431240000022 7.754 94.52726869999883 7.821 119.24024700000126 8.566 120.77576519999927 8.557)
Error minima by case: (0.0028 5 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0719 6 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2384 6 0.4713 7 0.028 5 0.1961 7 0.0825 6 0.4074 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 60.265
Average program size in population (points): 61.265
Average percent parens in population: 0.017
Minimum age in population: 275.5960765469526
Maximum age in population: 280.5668413938039
Average age in population: 278.4983526897405
Median age in population: 278.5646868610699
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.16
Error (vector) diversity:			 0.17
Behavioral diversity:				 0.172
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 300404624
--- Timings ---
Current time: 1529615577411 milliseconds
Total Time:         693.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       279.1 seconds, 40.2%
Fitness Testing:    326.5 seconds, 47.1%
Report:              88.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
;;******************************
;; -*- Number IO problem report - generation 193
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction integer_mod} {:instruction float_flush} {:instruction float_dup_items} {:instruction tagged_847} {:instruction integer_mod} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_div} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction 72} {:instruction print_float} {:instruction 73} {:instruction float_cos} {:instruction -49} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_flush} {:instruction float_min} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_tan} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (integer_add integer_mod float_flush float_dup_items tagged_847 integer_mod integer_shove integer_mod float_div in1 integer_max integer_fromfloat integer_sub integer_fromfloat in2 tag_float_138 integer_add tag_float_838 integer_add float_mod float_frominteger integer_add 72 print_float 73 float_cos -49 print_float in1 integer_fromfloat 72 float_dup_times 73 float_flush float_min integer_inc 72 float_mod integer_dec integer_dec integer_mult float_tan print_integer print_float float_div float_yankdup integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3181.2573277000006
Median total errors in population: 201.43079999999998
Error averages by case: (130.42029189999778 6.925 125.3990965999995 8.658 124.64549770000097 9.559 129.76833060000143 8.691 125.34022819999821 10.267 124.04572769999952 9.516 101.07106690000141 7.659 128.4222221000005 7.833 101.5245190000008 7.782 126.38168070000037 6.936 127.71653030000145 7.697 127.21796389999855 6.869 127.6172744999976 7.868 100.36031020000169 8.753 125.61940279999864 9.524 98.40094840000096 6.743 126.96717339999863 8.611 104.59639750000115 9.492 127.38506640000271 8.616 104.1470029000002 7.922 129.14619209999793 8.699 102.11947300000065 7.818 101.8837102999984 7.829 126.07087270000144 8.596 127.55834789999915 8.569)
Error minima by case: (0.0033 5 0.1613 5 0.7666 7 0.2971 5 0.6123 8 0.7999 8 0.2499 4 0.3136 5 0.0719 4 0.8859 4 0.2341 5 0.0062 5 0.6382 5 0.2384 4 0.4768 8 0.0287 4 0.1968 5 0.0825 6 0.4081 5 0.4047 6 0.6713 5 0.2686 6 0.1575 4 0.6865 5 0.5467 5)
Average genome size in population (length): 60.376
Average program size in population (points): 61.376
Average percent parens in population: 0.017
Minimum age in population: 277.0861539778402
Maximum age in population: 281.978854859344
Average age in population: 279.9479384766603
Median age in population: 280.0197344603228
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.159
Error (vector) diversity:			 0.169
Behavioral diversity:				 0.172
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 301914699
--- Timings ---
Current time: 1529615581189 milliseconds
Total Time:         697.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       280.6 seconds, 40.2%
Fitness Testing:    328.2 seconds, 47.1%
Report:              88.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
;;******************************
;; -*- Number IO problem report - generation 194
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_yank} {:instruction integer_div} {:instruction float_cos} {:instruction float_mod} {:instruction in1} {:instruction integer_dup} {:instruction float_yank} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_mod} {:instruction in1} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction float_rot} {:instruction float_max} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_div} {:instruction print_float} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_dec} {:instruction print_float} {:instruction 72} {:instruction float_mult} {:instruction integer_shove} {:instruction 71} {:instruction float_dup_times} {:instruction float_mod} {:instruction integer_inc} {:instruction 70} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_pop} {:instruction integer_max} {:instruction float_cos} {:instruction print_integer})
Best program: (float_sub float_sub integer_stackdepth integer_mult float_dup_items integer_dup_times float_yank integer_div float_cos float_mod in1 integer_dup float_yank integer_div integer_pop integer_mod in1 integer_max float_frominteger float_shove integer_fromfloat in2 tag_float_138 float_rot float_max tag_float_838 integer_add float_mod integer_add float_mod float_frominteger integer_div print_float float_frominteger integer_dec integer_dec print_float 72 float_mult integer_shove 71 float_dup_times float_mod integer_inc 70 float_mod integer_dec integer_dec in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_pop integer_max float_cos print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3206.463796300001
Median total errors in population: 201.43079999999998
Error averages by case: (133.23725569999812 7.053 126.40821649999955 8.671 123.10385570000071 9.619 131.34954700000154 8.729 124.37283779999825 10.29 122.85395789999956 9.558 101.7391398000014 7.68 131.26729720000057 7.929 102.80940680000089 7.87 128.44216070000044 7.024 130.36504320000142 7.74 127.58552909999861 6.981 129.79586219999754 7.959 100.41272860000191 8.816 124.67307349999888 9.627 98.03958110000092 6.823 128.96187099999852 8.635 106.90380760000112 9.536 129.1384726000026 8.661 106.40021180000019 8.069 129.15622489999797 8.742 103.84920170000065 7.918 102.45953339999852 7.915 127.13628860000152 8.625 126.92669189999928 8.606)
Error minima by case: (0.0033 5 0.1605 6 0.1816 8 0.2964 6 0.3359 8 0.1483 7 0.2395 5 0.3129 7 0.0689 5 0.0919 6 0.2333 6 0.0055 5 0.3396 6 0.2382 6 0.4713 7 0.028 4 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2841 6 0.1471 6 0.2913 7 0.4311 6)
Average genome size in population (length): 59.913
Average program size in population (points): 60.913
Average percent parens in population: 0.017
Minimum age in population: 278.4547518647476
Maximum age in population: 283.2659184830139
Average age in population: 281.3825955937206
Median age in population: 281.44078542275
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.192
Error (vector) diversity:			 0.199
Behavioral diversity:				 0.201
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 303413349
--- Timings ---
Current time: 1529615584916 milliseconds
Total Time:         701.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       282.0 seconds, 40.2%
Fitness Testing:    330.0 seconds, 47.1%
Report:              89.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
;;******************************
;; -*- Number IO problem report - generation 195
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_cos} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_shove} {:instruction float_pop} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_184} {:instruction float_min} {:instruction integer_swap} {:instruction tag_float_838} {:instruction integer_add} {:instruction tag_float_183} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_dup_times} {:instruction print_float} {:instruction 73} {:instruction float_cos} {:instruction -49} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_flush} {:instruction float_min} {:instruction integer_inc} {:instruction 72} {:instruction float_sin} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_tan} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_sub integer_div float_cos integer_mod float_cos in1 in1 integer_fromfloat float_flush integer_swap integer_add integer_shove float_pop integer_shove integer_fromfloat in2 tag_float_184 float_min integer_swap tag_float_838 integer_add tag_float_183 integer_add float_mod tag_float_838 integer_add float_frominteger integer_add integer_dup_times print_float 73 float_cos -49 print_float in1 integer_fromfloat 72 float_dup_times 73 float_flush float_min integer_inc 72 float_sin integer_dec integer_dec integer_mult float_tan print_integer print_float float_div float_yankdup integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2700.0560281000007
Median total errors in population: 201.43079999999998
Error averages by case: (107.61650679999862 6.908 100.7618198999995 8.636 101.2251521000001 9.495 106.70384790000158 8.627 102.18180659999915 10.231 101.08991959999952 9.439 92.0828742000014 7.65 104.03839120000059 7.793 92.8018872000009 7.808 102.42303770000044 6.906 103.20599100000157 7.671 102.80675459999954 6.868 103.05215639999848 7.851 91.3308190000015 8.775 102.50605029999943 9.494 88.99878650000082 6.76 102.32654459999857 8.574 93.78922080000069 9.466 102.85551920000192 8.614 93.5118571000002 7.855 107.59857239999887 8.674 90.62581149999997 7.744 93.06088039999847 7.84 101.25795440000144 8.557 105.43686669999911 8.531)
Error minima by case: (0.0023 5 0.1597 6 0.1816 7 0.2956 6 0.3359 8 0.1483 7 0.2913 5 0.3121 7 0.0717 6 0.0919 6 0.2325 6 0.0047 5 0.3396 6 0.2382 7 0.4713 7 0.0272 6 0.1953 7 0.0825 7 0.4066 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 59.744
Average program size in population (points): 60.744
Average percent parens in population: 0.017
Minimum age in population: 279.4547518647476
Maximum age in population: 285.0171039420782
Average age in population: 282.8391965533215
Median age in population: 282.8785865077323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.162
Error (vector) diversity:			 0.174
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 304907549
--- Timings ---
Current time: 1529615588510 milliseconds
Total Time:         704.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       283.3 seconds, 40.2%
Fitness Testing:    331.8 seconds, 47.1%
Report:              89.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
;;******************************
;; -*- Number IO problem report - generation 196
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_shove} {:instruction integer_dec} {:instruction print_integer} {:instruction float_cos} {:instruction float_cos} {:instruction float_cos} {:instruction float_dup} {:instruction tagged_847} {:instruction integer_mod} {:instruction float_yank} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction float_yankdup} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction float_swap} {:instruction 72} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_sub} {:instruction float_mod} {:instruction float_swap} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction tagged_164} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction float_mod} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_mod integer_shove integer_dec print_integer float_cos float_cos float_cos float_dup tagged_847 integer_mod float_yank in1 integer_max integer_fromfloat float_dup_times integer_sub integer_shove integer_fromfloat in2 tag_float_138 float_yankdup float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop float_swap 72 float_mod integer_yankdup float_sub float_mod float_swap in1 integer_fromfloat 72 float_dup_times 73 float_cos tagged_164 integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer float_mod integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3378.865104200001
Median total errors in population: 201.43079999999998
Error averages by case: (138.75995679999846 6.937 132.34197300000005 8.667 127.74827990000074 9.51 136.9137633000018 8.701 128.31291079999818 10.222 126.90349779999953 9.471 112.52507670000176 7.69 137.14032130000055 7.862 112.64910700000101 7.835 135.57740020000045 6.957 136.3053969000018 7.692 132.26421779999913 6.902 136.18289079999744 7.894 111.58513700000243 8.789 127.94143039999877 9.508 109.18269180000121 6.771 135.34019799999925 8.629 117.72534280000157 9.499 134.98422080000293 8.622 118.2225512000002 7.919 131.14289169999802 8.686 115.87703040000096 7.826 113.27637339999814 7.863 132.3570622000012 8.582 129.996382199999 8.575)
Error minima by case: (0.0044 5 0.1605 5 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.2888 7 0.0724 6 0.0919 6 0.229 6 0.0054 5 0.3396 6 0.2389 6 0.4713 7 0.0279 4 0.1961 7 0.0825 7 0.4073 6 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 6 0.4311 6)
Average genome size in population (length): 59.126
Average program size in population (points): 60.126
Average percent parens in population: 0.017
Minimum age in population: 280.4547518647476
Maximum age in population: 286.2294995906313
Average age in population: 284.2771163772465
Median age in population: 284.3204040299095
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.165
Error (vector) diversity:			 0.181
Behavioral diversity:				 0.183
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 306386274
--- Timings ---
Current time: 1529615592434 milliseconds
Total Time:         708.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       284.8 seconds, 40.2%
Fitness Testing:    333.7 seconds, 47.1%
Report:              90.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
;;******************************
;; -*- Number IO problem report - generation 197
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_mult} {:instruction in1} {:instruction float_swap} {:instruction float_flush} {:instruction float_yank} {:instruction float_sub} {:instruction integer_mod} {:instruction float_cos} {:instruction in1} {:instruction integer_fromfloat} {:instruction tagged_135} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_dec} {:instruction float_swap} {:instruction 72} {:instruction 72} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction float_pop} {:instruction float_swap} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_flush} {:instruction print_float} {:instruction 72} {:instruction float_inc} {:instruction 72} {:instruction float_mod} {:instruction tagged_803} {:instruction integer_swap} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction float_cos} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction float_dup} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub integer_mult in1 float_swap float_flush float_yank float_sub integer_mod float_cos in1 integer_fromfloat tagged_135 integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_dec float_swap 72 72 integer_add float_add integer_add float_pop float_swap float_mod integer_dup integer_flush print_float 72 float_inc 72 float_mod tagged_803 integer_swap in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod float_mod integer_inc 72 float_mod integer_dec integer_dec in1 integer_fromfloat 72 float_dup_times 73 float_cos float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer float_dup integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2768.2073018000006
Median total errors in population: 201.43079999999998
Error averages by case: (111.60500409999827 6.956 106.0361583999995 8.653 105.46424580000043 9.544 110.43012200000146 8.665 106.84243269999874 10.242 106.11652669999953 9.487 90.08039130000135 7.668 109.38964440000055 7.84 91.46611940000088 7.842 108.12726970000043 6.953 108.58707760000156 7.693 107.42218339999906 6.909 108.46645589999805 7.883 89.75539680000142 8.78 106.84610739999898 9.551 86.83736130000092 6.792 107.68417489999864 8.56 92.98999210000079 9.472 107.85997120000233 8.614 92.58023000000014 7.914 110.74496869999838 8.705 89.79602270000007 7.789 90.91823389999854 7.875 106.26137820000143 8.564 108.39983319999915 8.549)
Error minima by case: (0.0028 5 0.1603 6 0.1816 7 0.2961 6 0.3359 8 0.1483 7 0.6855 5 0.3126 7 0.0719 5 0.0919 6 0.2331 6 0.0052 5 0.3396 6 0.2384 7 0.4713 7 0.0277 5 0.1958 6 0.0825 6 0.4071 7 0.4047 6 0.3065 6 0.6796 6 0.7779 6 0.2913 6 0.4311 5)
Average genome size in population (length): 59.088
Average program size in population (points): 60.088
Average percent parens in population: 0.017
Minimum age in population: 283.2118581848995
Maximum age in population: 287.5612211034413
Average age in population: 285.6617334157845
Median age in population: 285.6859098000939
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.16
Error (vector) diversity:			 0.17
Behavioral diversity:				 0.172
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 307864224
--- Timings ---
Current time: 1529615595930 milliseconds
Total Time:         712.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       286.2 seconds, 40.2%
Fitness Testing:    335.3 seconds, 47.1%
Report:              90.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
;;******************************
;; -*- Number IO problem report - generation 198
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_inc} {:instruction integer_div} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction float_mult} {:instruction integer_div} {:instruction float_cos} {:instruction integer_div} {:instruction float_mod} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_184} {:instruction float_min} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction float_pop} {:instruction 72} {:instruction integer_min} {:instruction integer_dec} {:instruction float_div} {:instruction tag_float_604} {:instruction in1} {:instruction integer_fromfloat} {:instruction print_float} {:instruction tagged_37} {:instruction 73} {:instruction integer_max} {:instruction float_mod} {:instruction integer_dup_times} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_pop} {:instruction 73} {:instruction tagged_618} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_dup_times} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_mod} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub float_sub integer_pop integer_inc integer_div float_yank integer_div float_dec float_mult integer_div float_cos integer_div float_mod in1 integer_rot integer_fromfloat in2 tag_float_184 float_min float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 float_pop 72 integer_min integer_dec float_div tag_float_604 in1 integer_fromfloat print_float tagged_37 73 integer_max float_mod integer_dup_times print_float in1 integer_fromfloat 72 float_pop 73 tagged_618 float_mod integer_inc 72 float_dup_times integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_mod integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2869.4646167000005
Median total errors in population: 201.43079999999998
Error averages by case: (117.6567171999983 6.899 112.87722859999948 8.651 111.03266500000032 9.511 116.60676480000147 8.626 112.12951369999885 10.241 111.77540109999954 9.482 90.3520109000012 7.679 115.88475220000049 7.816 88.50239840000077 7.774 114.75243670000037 6.913 115.15133780000158 7.671 113.90265039999909 6.868 115.06790429999815 7.832 87.08864960000102 8.736 112.14013549999913 9.533 87.39427480000072 6.746 114.34065229999867 8.559 93.27764020000082 9.457 114.47842560000221 8.621 93.9443406000002 7.871 115.77817659999846 8.657 91.59030240000027 7.788 91.04373019999869 7.848 112.16190820000142 8.546 113.65459959999917 8.555)
Error minima by case: (0.0021 5 0.1605 6 0.1816 7 0.2964 6 0.3359 8 0.1483 7 0.2913 5 0.3129 7 0.0717 5 0.0919 6 0.2333 6 0.0055 5 0.3396 7 0.2382 6 0.4713 7 0.028 5 0.1961 7 0.0825 7 0.4074 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 7 0.4311 6)
Average genome size in population (length): 59.356
Average program size in population (points): 60.356
Average percent parens in population: 0.017
Minimum age in population: 284.8387154087156
Maximum age in population: 289.3147535786176
Average age in population: 287.0798022046383
Median age in population: 287.1133379073682
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.157
Error (vector) diversity:			 0.176
Behavioral diversity:				 0.18
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 309348674
--- Timings ---
Current time: 1529615599808 milliseconds
Total Time:         716.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       287.6 seconds, 40.2%
Fitness Testing:    337.2 seconds, 47.1%
Report:              91.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
;;******************************
;; -*- Number IO problem report - generation 199
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_mult} {:instruction float_mod} {:instruction float_flush} {:instruction float_flush} {:instruction float_yank} {:instruction float_sub} {:instruction print_integer} {:instruction float_dec} {:instruction float_shove} {:instruction float_add} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction float_min} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction in1} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_fromfloat} {:instruction 72} {:instruction 73} {:instruction integer_min} {:instruction 72} {:instruction integer_min} {:instruction float_div} {:instruction float_div} {:instruction print_float} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_dup_times} {:instruction 73} {:instruction integer_max} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction print_float} {:instruction float_dec} {:instruction integer_max} {:instruction print_integer})
Best program: (float_sub integer_mult float_mod float_flush float_flush float_yank float_sub print_integer float_dec float_shove float_add integer_mod integer_flush in1 integer_sub integer_shove integer_dup_times integer_shove integer_fromfloat integer_mod integer_flush in1 float_min integer_shove integer_fromfloat integer_dup_times integer_shove integer_fromfloat in2 tag_float_138 integer_add float_mod in1 integer_add float_mod float_frominteger print_float integer_fromfloat 72 73 integer_min 72 integer_min float_div float_div print_float in1 integer_fromfloat 72 float_dup_times 73 integer_max float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float float_div print_float float_dec integer_max print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3093.9736989000007
Median total errors in population: 201.43079999999998
Error averages by case: (123.6468228999978 6.88 119.17270219999946 8.616 116.2815707000005 9.477 122.9900534000015 8.657 117.12422019999832 10.215 115.32993439999947 9.447 105.25590310000139 7.644 122.20204290000059 7.779 105.15141100000086 7.803 120.92092400000041 6.875 121.53451540000164 7.64 119.97090559999866 6.832 121.50422469999768 7.808 104.23456890000202 8.733 117.19685989999871 9.468 102.59502620000099 6.746 120.79912449999854 8.557 108.16690570000124 9.46 120.79961780000268 8.575 107.89247110000024 7.876 122.71264179999791 8.656 105.90054150000061 7.776 105.79687569999844 7.826 119.40030480000149 8.54 120.97453049999905 8.533)
Error minima by case: (0.0033 5 0.1613 6 0.1816 7 0.2971 6 0.3359 9 0.1483 7 0.664 5 0.3136 7 0.0689 6 0.0919 6 0.2341 5 0.0062 5 0.3396 6 0.2381 7 0.4713 7 0.0287 5 0.1968 6 0.0825 7 0.4081 7 0.4047 6 0.3065 6 0.6796 6 0.7574 6 0.2913 7 0.4311 6)
Average genome size in population (length): 59.42
Average program size in population (points): 60.42
Average percent parens in population: 0.017
Minimum age in population: 285.8387154087156
Maximum age in population: 290.4796104322487
Average age in population: 288.5005291357792
Median age in population: 288.5361757179447
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.143
Error (vector) diversity:			 0.154
Behavioral diversity:				 0.157
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 310834923
--- Timings ---
Current time: 1529615603566 milliseconds
Total Time:         719.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       289.0 seconds, 40.1%
Fitness Testing:    339.1 seconds, 47.1%
Report:              91.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
;;******************************
;; -*- Number IO problem report - generation 200
Test total error for best: 8610.68310000001
Test mean error for best: 4.30534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -185.0406196792 | Program output: -185.0518072  
Correct output: -63.2352586418 | Program output: -63.0518072   
Correct output: 27.2333812574  | Program output: 28.0518072    
Correct output: -136.3711223178 | Program output: -136.0518072  
Correct output: 70.3877365207  | Program output: 71.0518072    
Correct output: 89.2001357371  | Program output: 90.0518072    
Correct output: 147.760546183  | Program output: 147.0518072   
Correct output: -137.3875804218 | Program output: -137.0518072  
Correct output: 161.1514033166 | Program output: 161.0518079   
Correct output: -95.9599100442 | Program output: -95.0518072   
Correct output: -120.308055299 | Program output: -120.0518072  
Correct output: -72.0801834627 | Program output: -72.0518072   
Correct output: -109.7122076235 | Program output: -109.0518072  
Correct output: 106.3138786569 | Program output: 106.0518075   
Correct output: 29.5231501286  | Program output: 30.0518072    
Correct output: 85.102682212   | Program output: 85.0518072    
Correct output: -100.2708478706 | Program output: -100.0518072  
Correct output: -22.9175151841 | Program output: -23.0518072   
Correct output: -94.4820838905 | Program output: -94.0518072   
Correct output: -11.5953117725 | Program output: -12.0518072   
Correct output: -13.7453326675 | Program output: -13.0518072   
Correct output: -20.3203574079 | Program output: -21.0518072   
Correct output: 161.8529283055 | Program output: 161.0518072   
Correct output: -55.7604817115 | Program output: -55.0518072   
Correct output: -28.6206702826 | Program output: -28.0518072   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_flush} {:instruction float_yank} {:instruction tagged_847} {:instruction float_cos} {:instruction float_cos} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction tagged_36} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_fromfloat} {:instruction in2} {:instruction tag_float_138} {:instruction integer_add} {:instruction float_mod} {:instruction tag_float_838} {:instruction integer_add} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_shove} {:instruction print_float} {:instruction 72} {:instruction integer_add} {:instruction float_add} {:instruction integer_add} {:instruction float_pop} {:instruction integer_yankdup} {:instruction 72} {:instruction float_add} {:instruction float_swap} {:instruction integer_shove} {:instruction float_mod} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction 72} {:instruction float_max} {:instruction in1} {:instruction integer_fromfloat} {:instruction 72} {:instruction float_sub} {:instruction 73} {:instruction tag_float_160} {:instruction float_mod} {:instruction integer_inc} {:instruction 72} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction print_float} {:instruction integer_max} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sub integer_yankdup float_cos float_flush integer_pop float_cos float_cos float_flush float_yank tagged_847 float_cos float_cos integer_max integer_fromfloat float_flush integer_dup_times integer_swap integer_sub integer_fromfloat tagged_36 integer_dup_items in1 integer_fromfloat in2 tag_float_138 integer_add float_mod tag_float_838 integer_add float_mod float_frominteger float_shove print_float 72 integer_add float_add integer_add float_pop integer_yankdup 72 float_add float_swap integer_shove float_mod float_yankdup integer_yankdup 72 float_max in1 integer_fromfloat 72 float_sub 73 tag_float_160 float_mod integer_inc 72 float_mod integer_dec integer_dec integer_mult float_mod print_integer print_float integer_max float_rot print_integer)
Errors: [0.0112 6 0.1835 8 0.8184 9 0.3193 8 0.6641 10 0.8517 9 0.7087 7 0.3358 7 0.0996 7 0.9081 6 0.2562 7 0.0284 6 0.6604 7 0.2621 8 0.5287 9 0.0509 6 0.219 8 0.1343 9 0.4303 8 0.4565 7 0.6935 8 0.7314 7 0.8011 7 0.7087 8 0.5689 8]
Total: 201.43079999999998
Mean: 4.028616
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2895.179618700001
Median total errors in population: 201.43079999999998
Error averages by case: (118.0265576999981 6.853 112.14813309999946 8.558 109.86120820000046 9.435 117.28582760000165 8.615 110.69172029999861 10.188 108.8936398999995 9.416 94.47376550000136 7.568 115.3944956000006 7.745 94.61292390000092 7.711 113.3025128000004 6.83 114.72764850000176 7.594 113.28880459999912 6.794 114.70800249999796 7.799 93.5290291000018 8.694 110.84428489999897 9.42 92.01373720000086 6.684 114.01792769999844 8.535 98.45116330000096 9.371 114.13778650000239 8.528 97.97680060000017 7.804 115.14691699999824 8.62 96.12948270000031 7.691 95.10993029999852 7.729 112.74218190000163 8.501 112.48813729999905 8.494)
Error minima by case: (0.0033 6 0.1613 6 0.1816 7 0.2971 6 0.3359 8 0.1483 7 0.2913 5 0.3136 7 0.0717 6 0.0919 6 0.2341 6 0.0062 5 0.3396 6 0.2382 7 0.4713 7 0.0257 6 0.1968 6 0.0825 6 0.4081 7 0.4047 6 0.3065 6 0.2686 6 0.1989 6 0.2913 6 0.4311 7)
Average genome size in population (length): 59.423
Average program size in population (points): 60.423
Average percent parens in population: 0.017
Minimum age in population: 287.2667342292995
Maximum age in population: 291.9853530294813
Average age in population: 289.9254572238831
Median age in population: 289.9618483148839
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.143
Error (vector) diversity:			 0.158
Behavioral diversity:				 0.161
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 312321373
--- Timings ---
Current time: 1529615607011 milliseconds
Total Time:         723.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       290.3 seconds, 40.1%
Fitness Testing:    340.8 seconds, 47.1%
Report:              92.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
