Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-26.67383789963928 -75] -101.67383789963928]
Train Case:   1 | Input/Output: [[-22.257244017717156 -9] -31.257244017717156]
Train Case:   2 | Input/Output: [[-76.45935248073022 30] -46.45935248073022]
Train Case:   3 | Input/Output: [[88.08064668070446 63] 151.08064668070446]
Train Case:   4 | Input/Output: [[-68.65884984098241 31] -37.65884984098241]
Train Case:   5 | Input/Output: [[87.10311212334668 47] 134.10311212334668]
Train Case:   6 | Input/Output: [[-70.39444498152639 100] 29.60555501847361]
Train Case:   7 | Input/Output: [[-72.9331639543035 -56] -128.9331639543035]
Train Case:   8 | Input/Output: [[6.7526738390922105 82] 88.75267383909221]
Train Case:   9 | Input/Output: [[20.017418250396375 -48] -27.982581749603625]
Train Case:  10 | Input/Output: [[-22.06052662384714 -14] -36.06052662384714]
Train Case:  11 | Input/Output: [[-27.494059154523185 -71] -98.49405915452319]
Train Case:  12 | Input/Output: [[88.44490496299241 30] 118.44490496299241]
Train Case:  13 | Input/Output: [[89.22456696463595 1] 90.22456696463595]
Train Case:  14 | Input/Output: [[-31.73913819370773 -65] -96.73913819370773]
Train Case:  15 | Input/Output: [[75.78970974876316 48] 123.78970974876316]
Train Case:  16 | Input/Output: [[-46.71394155362323 -42] -88.71394155362323]
Train Case:  17 | Input/Output: [[-70.43592038868172 -15] -85.43592038868172]
Train Case:  18 | Input/Output: [[83.54964880041118 -54] 29.549648800411177]
Train Case:  19 | Input/Output: [[-20.44149792194861 90] 69.55850207805139]
Train Case:  20 | Input/Output: [[3.4526566369270597 -13] -9.54734336307294]
Train Case:  21 | Input/Output: [[39.19386224022145 34] 73.19386224022145]
Train Case:  22 | Input/Output: [[-99.85132675061455 -74] -173.85132675061453]
Train Case:  23 | Input/Output: [[7.52272101533265 -24] -16.47727898466735]
Train Case:  24 | Input/Output: [[-69.8753187944444 29] -40.8753187944444]
Test Case:   0 | Input/Output: [[-30.938935687771348 -55] -85.93893568777135]
Test Case:   1 | Input/Output: [[15.404089217953555 0] 15.404089217953555]
Test Case:   2 | Input/Output: [[83.22209552604926 -39] 44.22209552604926]
Test Case:   3 | Input/Output: [[44.068784738277856 -34] 10.068784738277856]
Test Case:   4 | Input/Output: [[-60.1224422168638 -55] -115.1224422168638]
Test Case:   5 | Input/Output: [[85.2473798200586 54] 139.2473798200586]
Test Case:   6 | Input/Output: [[91.32249655682332 -52] 39.322496556823324]
Test Case:   7 | Input/Output: [[20.324224092206848 34] 54.32422409220685]
Test Case:   8 | Input/Output: [[-85.68032313004204 18] -67.68032313004204]
Test Case:   9 | Input/Output: [[88.13613920258527 -18] 70.13613920258527]
Test Case:  10 | Input/Output: [[-79.88959793575383 -42] -121.88959793575383]
Test Case:  11 | Input/Output: [[83.33016655616149 -25] 58.33016655616149]
Test Case:  12 | Input/Output: [[-86.63215539639705 -75] -161.63215539639705]
Test Case:  13 | Input/Output: [[2.7688437197085136 -80] -77.23115628029149]
Test Case:  14 | Input/Output: [[94.01330844060834 3] 97.01330844060834]
Test Case:  15 | Input/Output: [[43.80312694444348 59] 102.80312694444348]
Test Case:  16 | Input/Output: [[-43.03105805990983 85] 41.96894194009017]
Test Case:  17 | Input/Output: [[8.49453301723571 67] 75.49453301723571]
Test Case:  18 | Input/Output: [[-21.257653203954007 -7] -28.257653203954007]
Test Case:  19 | Input/Output: [[23.461672313709855 43] 66.46167231370985]
Test Case:  20 | Input/Output: [[-21.467313468743782 -30] -51.46731346874378]
Test Case:  21 | Input/Output: [[-85.32137253885816 -66] -151.32137253885816]
Test Case:  22 | Input/Output: [[-52.038925569875396 -61] -113.0389255698754]
Test Case:  23 | Input/Output: [[86.33148843285474 -10] 76.33148843285474]
Test Case:  24 | Input/Output: [[-40.248272550296264 38] -2.2482725502962637]
Test Case:  25 | Input/Output: [[15.45664446192687 -58] -42.54335553807313]
Test Case:  26 | Input/Output: [[-50.14885177259991 3] -47.14885177259991]
Test Case:  27 | Input/Output: [[77.52354704649505 -53] 24.523547046495054]
Test Case:  28 | Input/Output: [[-46.78303755455182 19] -27.783037554551818]
Test Case:  29 | Input/Output: [[-50.75797338074215 -99] -149.75797338074216]
Test Case:  30 | Input/Output: [[22.819077031633483 87] 109.81907703163348]
Test Case:  31 | Input/Output: [[88.92232731017043 -76] 12.92232731017043]
Test Case:  32 | Input/Output: [[90.68749958812276 -75] 15.687499588122762]
Test Case:  33 | Input/Output: [[-22.23922866185717 -94] -116.23922866185717]
Test Case:  34 | Input/Output: [[-59.22654532346891 85] 25.773454676531088]
Test Case:  35 | Input/Output: [[-68.9019774586451 29] -39.901977458645106]
Test Case:  36 | Input/Output: [[-23.485286008561673 33] 9.514713991438327]
Test Case:  37 | Input/Output: [[9.303382918620827 4] 13.303382918620827]
Test Case:  38 | Input/Output: [[49.24963804465898 37] 86.24963804465898]
Test Case:  39 | Input/Output: [[-98.67116325439993 41] -57.67116325439993]
Test Case:  40 | Input/Output: [[9.589212901644274 40] 49.589212901644274]
Test Case:  41 | Input/Output: [[29.701755189528228 -4] 25.701755189528228]
Test Case:  42 | Input/Output: [[-96.82257385227604 17] -79.82257385227604]
Test Case:  43 | Input/Output: [[-65.07933822452105 -43] -108.07933822452105]
Test Case:  44 | Input/Output: [[-26.53722423601006 -12] -38.53722423601006]
Test Case:  45 | Input/Output: [[-99.1464842812333 23] -76.1464842812333]
Test Case:  46 | Input/Output: [[15.939314844620327 -95] -79.06068515537967]
Test Case:  47 | Input/Output: [[-36.14100341801485 70] 33.85899658198515]
Test Case:  48 | Input/Output: [[84.1629806472989 -99] -14.837019352701105]
Test Case:  49 | Input/Output: [[31.89716169224124 64] 95.89716169224124]
Test Case:  50 | Input/Output: [[75.82602022972944 71] 146.82602022972944]
Test Case:  51 | Input/Output: [[21.242010444536774 1] 22.242010444536774]
Test Case:  52 | Input/Output: [[-20.00391704288748 33] 12.99608295711252]
Test Case:  53 | Input/Output: [[-30.987876902852605 25] -5.987876902852605]
Test Case:  54 | Input/Output: [[-46.82397438589938 26] -20.823974385899383]
Test Case:  55 | Input/Output: [[97.54182649026501 55] 152.541826490265]
Test Case:  56 | Input/Output: [[3.712653012192476 11] 14.712653012192476]
Test Case:  57 | Input/Output: [[-28.174274763719097 -90] -118.1742747637191]
Test Case:  58 | Input/Output: [[-58.905198893755454 -6] -64.90519889375545]
Test Case:  59 | Input/Output: [[35.661034486172554 96] 131.66103448617255]
Test Case:  60 | Input/Output: [[48.559236565686206 -100] -51.440763434313794]
Test Case:  61 | Input/Output: [[-77.13516130207385 36] -41.135161302073854]
Test Case:  62 | Input/Output: [[-89.39310171088577 -54] -143.3931017108858]
Test Case:  63 | Input/Output: [[75.58447362334078 55] 130.58447362334078]
Test Case:  64 | Input/Output: [[52.476798720262906 75] 127.4767987202629]
Test Case:  65 | Input/Output: [[-59.79469275240559 -31] -90.79469275240558]
Test Case:  66 | Input/Output: [[-32.21299851791359 -4] -36.21299851791359]
Test Case:  67 | Input/Output: [[-88.4478695856932 -31] -119.4478695856932]
Test Case:  68 | Input/Output: [[38.68195376389298 -44] -5.318046236107023]
Test Case:  69 | Input/Output: [[-43.674622062006875 -52] -95.67462206200688]
Test Case:  70 | Input/Output: [[-43.99716897761987 94] 50.00283102238013]
Test Case:  71 | Input/Output: [[-5.9018120726577905 -61] -66.90181207265779]
Test Case:  72 | Input/Output: [[25.07172115720948 90] 115.07172115720948]
Test Case:  73 | Input/Output: [[15.19013191621228 70] 85.19013191621228]
Test Case:  74 | Input/Output: [[25.63564520011718 -30] -4.364354799882818]
Test Case:  75 | Input/Output: [[-29.815586370930845 39] 9.184413629069155]
Test Case:  76 | Input/Output: [[5.159869761746023 70] 75.15986976174602]
Test Case:  77 | Input/Output: [[70.06769749839617 62] 132.06769749839617]
Test Case:  78 | Input/Output: [[55.37658093507852 30] 85.37658093507852]
Test Case:  79 | Input/Output: [[55.00345555268922 -15] 40.00345555268922]
Test Case:  80 | Input/Output: [[-91.93524829913311 3] -88.93524829913311]
Test Case:  81 | Input/Output: [[31.067512203430823 -74] -42.93248779656918]
Test Case:  82 | Input/Output: [[62.65664298375589 53] 115.65664298375589]
Test Case:  83 | Input/Output: [[-1.3466802500190482 -5] -6.346680250019048]
Test Case:  84 | Input/Output: [[41.22735449200138 84] 125.22735449200138]
Test Case:  85 | Input/Output: [[-92.9566302911461 91] -1.956630291146098]
Test Case:  86 | Input/Output: [[9.609668866647624 -68] -58.390331133352376]
Test Case:  87 | Input/Output: [[57.658093934899455 72] 129.65809393489945]
Test Case:  88 | Input/Output: [[-95.13217281629902 64] -31.13217281629902]
Test Case:  89 | Input/Output: [[4.279861428247926 -81] -76.72013857175207]
Test Case:  90 | Input/Output: [[72.32075236656434 -98] -25.679247633435665]
Test Case:  91 | Input/Output: [[-0.8706144645254597 18] 17.12938553547454]
Test Case:  92 | Input/Output: [[-25.868523505789454 -84] -109.86852350578945]
Test Case:  93 | Input/Output: [[62.247948713182694 -82] -19.752051286817306]
Test Case:  94 | Input/Output: [[69.28512761744935 -64] 5.285127617449348]
Test Case:  95 | Input/Output: [[43.44844000409458 -87] -43.55155999590542]
Test Case:  96 | Input/Output: [[-61.43227359667336 -4] -65.43227359667335]
Test Case:  97 | Input/Output: [[-46.51724071076826 -56] -102.51724071076826]
Test Case:  98 | Input/Output: [[7.866511743676767 1] 8.866511743676767]
Test Case:  99 | Input/Output: [[-69.55562960040834 -100] -169.55562960040834]
Test Case: 100 | Input/Output: [[-92.2199152316401 40] -52.2199152316401]
Test Case: 101 | Input/Output: [[5.363162007360373 89] 94.36316200736037]
Test Case: 102 | Input/Output: [[41.29336973769355 37] 78.29336973769355]
Test Case: 103 | Input/Output: [[-1.1207151460216949 13] 11.879284853978305]
Test Case: 104 | Input/Output: [[-81.00108538229051 26] -55.00108538229051]
Test Case: 105 | Input/Output: [[-94.58315144989842 -6] -100.58315144989842]
Test Case: 106 | Input/Output: [[-62.177321148899736 -47] -109.17732114889974]
Test Case: 107 | Input/Output: [[81.41990053051967 -11] 70.41990053051967]
Test Case: 108 | Input/Output: [[52.20279913795861 82] 134.2027991379586]
Test Case: 109 | Input/Output: [[-26.459955549893508 -3] -29.459955549893508]
Test Case: 110 | Input/Output: [[-60.65536283201713 -80] -140.65536283201715]
Test Case: 111 | Input/Output: [[-73.13965278132355 20] -53.13965278132355]
Test Case: 112 | Input/Output: [[15.731305723754446 -13] 2.7313057237544456]
Test Case: 113 | Input/Output: [[55.52807284920493 66] 121.52807284920493]
Test Case: 114 | Input/Output: [[22.290657512797637 -99] -76.70934248720236]
Test Case: 115 | Input/Output: [[40.692358061709626 24] 64.69235806170963]
Test Case: 116 | Input/Output: [[54.487473594221 -43] 11.487473594221001]
Test Case: 117 | Input/Output: [[27.661430447617448 -20] 7.661430447617448]
Test Case: 118 | Input/Output: [[-55.085925866833605 -28] -83.0859258668336]
Test Case: 119 | Input/Output: [[97.46468226709558 -13] 84.46468226709558]
Test Case: 120 | Input/Output: [[-51.933396075448556 38] -13.933396075448556]
Test Case: 121 | Input/Output: [[35.27879930052322 26] 61.27879930052322]
Test Case: 122 | Input/Output: [[-5.972961136380334 84] 78.02703886361967]
Test Case: 123 | Input/Output: [[15.295798037073723 56] 71.29579803707372]
Test Case: 124 | Input/Output: [[25.271876736175884 90] 115.27187673617588]
Test Case: 125 | Input/Output: [[-36.93018679105968 46] 9.069813208940317]
Test Case: 126 | Input/Output: [[6.285420997212853 80] 86.28542099721285]
Test Case: 127 | Input/Output: [[-47.610881359554355 -25] -72.61088135955436]
Test Case: 128 | Input/Output: [[-84.72813863805754 19] -65.72813863805754]
Test Case: 129 | Input/Output: [[-27.030400646512447 -98] -125.03040064651245]
Test Case: 130 | Input/Output: [[38.411283770784564 -47] -8.588716229215436]
Test Case: 131 | Input/Output: [[75.60199957809778 16] 91.60199957809778]
Test Case: 132 | Input/Output: [[-32.889609077462794 -8] -40.889609077462794]
Test Case: 133 | Input/Output: [[86.17225630135547 -6] 80.17225630135547]
Test Case: 134 | Input/Output: [[-43.587481439835884 81] 37.412518560164116]
Test Case: 135 | Input/Output: [[-17.600165821752185 50] 32.399834178247815]
Test Case: 136 | Input/Output: [[79.37681124758126 25] 104.37681124758126]
Test Case: 137 | Input/Output: [[81.64276301460674 -34] 47.64276301460674]
Test Case: 138 | Input/Output: [[31.322517483734202 -89] -57.6774825162658]
Test Case: 139 | Input/Output: [[11.752978663321883 0] 11.752978663321883]
Test Case: 140 | Input/Output: [[-68.71035735039752 -66] -134.71035735039752]
Test Case: 141 | Input/Output: [[92.15034345846257 -20] 72.15034345846257]
Test Case: 142 | Input/Output: [[-70.2700623859422 -62] -132.2700623859422]
Test Case: 143 | Input/Output: [[55.27344481577069 48] 103.27344481577069]
Test Case: 144 | Input/Output: [[57.21640831240887 9] 66.21640831240887]
Test Case: 145 | Input/Output: [[-30.684923875830577 -54] -84.68492387583058]
Test Case: 146 | Input/Output: [[-69.7776954534643 6] -63.777695453464304]
Test Case: 147 | Input/Output: [[-29.619555856700842 7] -22.619555856700842]
Test Case: 148 | Input/Output: [[-90.99347339154806 -2] -92.99347339154806]
Test Case: 149 | Input/Output: [[-74.84660432749737 -11] -85.84660432749737]
Test Case: 150 | Input/Output: [[35.50550946657273 -40] -4.494490533427268]
Test Case: 151 | Input/Output: [[19.266200025039467 -66] -46.73379997496053]
Test Case: 152 | Input/Output: [[17.39416367341026 -63] -45.60583632658974]
Test Case: 153 | Input/Output: [[82.51327965299299 49] 131.513279652993]
Test Case: 154 | Input/Output: [[-46.9262388333818 -22] -68.9262388333818]
Test Case: 155 | Input/Output: [[-30.348908965715054 -78] -108.34890896571505]
Test Case: 156 | Input/Output: [[-38.131388886320885 49] 10.868611113679115]
Test Case: 157 | Input/Output: [[70.24856703430984 -89] -18.751432965690157]
Test Case: 158 | Input/Output: [[97.98321700952854 12] 109.98321700952854]
Test Case: 159 | Input/Output: [[-5.046733335203484 2] -3.046733335203484]
Test Case: 160 | Input/Output: [[-21.755848037856822 10] -11.755848037856822]
Test Case: 161 | Input/Output: [[-58.88168117155202 -39] -97.88168117155202]
Test Case: 162 | Input/Output: [[7.6789765539203785 10] 17.67897655392038]
Test Case: 163 | Input/Output: [[-19.17943059509544 -20] -39.17943059509544]
Test Case: 164 | Input/Output: [[-28.445185109764154 21] -7.445185109764154]
Test Case: 165 | Input/Output: [[35.855026217056576 36] 71.85502621705658]
Test Case: 166 | Input/Output: [[-10.54822360527028 -84] -94.54822360527028]
Test Case: 167 | Input/Output: [[-42.28191140798179 -60] -102.2819114079818]
Test Case: 168 | Input/Output: [[56.141173261024875 -29] 27.141173261024875]
Test Case: 169 | Input/Output: [[-73.6271212344974 63] -10.627121234497395]
Test Case: 170 | Input/Output: [[-18.052935576578236 74] 55.947064423421764]
Test Case: 171 | Input/Output: [[-76.13010145856096 38] -38.13010145856096]
Test Case: 172 | Input/Output: [[83.83233671284657 99] 182.83233671284657]
Test Case: 173 | Input/Output: [[78.64723477167965 -1] 77.64723477167965]
Test Case: 174 | Input/Output: [[97.4917660495081 -13] 84.4917660495081]
Test Case: 175 | Input/Output: [[0.11081704102051049 -97] -96.88918295897949]
Test Case: 176 | Input/Output: [[-55.93594530546522 -88] -143.93594530546522]
Test Case: 177 | Input/Output: [[14.826808191138312 -76] -61.17319180886169]
Test Case: 178 | Input/Output: [[84.5761231178137 -45] 39.576123117813694]
Test Case: 179 | Input/Output: [[82.1851331114357 -96] -13.814866888564296]
Test Case: 180 | Input/Output: [[-76.78108611879706 -78] -154.78108611879708]
Test Case: 181 | Input/Output: [[-70.40064570797128 -62] -132.40064570797128]
Test Case: 182 | Input/Output: [[67.60502192278551 69] 136.6050219227855]
Test Case: 183 | Input/Output: [[36.292180576586844 30] 66.29218057658684]
Test Case: 184 | Input/Output: [[69.864290970305 4] 73.864290970305]
Test Case: 185 | Input/Output: [[-20.003908665099374 42] 21.996091334900626]
Test Case: 186 | Input/Output: [[84.96150879383865 -61] 23.961508793838647]
Test Case: 187 | Input/Output: [[20.239460683333064 -82] -61.760539316666936]
Test Case: 188 | Input/Output: [[-35.914040590778825 52] 16.085959409221175]
Test Case: 189 | Input/Output: [[-85.53063955080302 88] 2.4693604491969836]
Test Case: 190 | Input/Output: [[35.729810644364505 -85] -49.270189355635495]
Test Case: 191 | Input/Output: [[44.335304827731505 -10] 34.335304827731505]
Test Case: 192 | Input/Output: [[-76.15402810399965 35] -41.15402810399965]
Test Case: 193 | Input/Output: [[-36.8516438867649 76] 39.1483561132351]
Test Case: 194 | Input/Output: [[-30.075994915799285 -60] -90.07599491579928]
Test Case: 195 | Input/Output: [[-81.11539932823368 18] -63.11539932823368]
Test Case: 196 | Input/Output: [[-44.93123495953133 -88] -132.93123495953134]
Test Case: 197 | Input/Output: [[-1.3152363752195981 -63] -64.3152363752196]
Test Case: 198 | Input/Output: [[-5.894701182152559 84] 78.10529881784744]
Test Case: 199 | Input/Output: [[6.635064510977912 79] 85.63506451097791]
Test Case: 200 | Input/Output: [[-17.863840478545683 54] 36.13615952145432]
Test Case: 201 | Input/Output: [[-74.78618554229655 -71] -145.78618554229655]
Test Case: 202 | Input/Output: [[71.190716471955 -85] -13.809283528045]
Test Case: 203 | Input/Output: [[-70.76775177472612 -91] -161.76775177472612]
Test Case: 204 | Input/Output: [[-97.46703820159877 42] -55.46703820159877]
Test Case: 205 | Input/Output: [[95.81662570120054 13] 108.81662570120054]
Test Case: 206 | Input/Output: [[52.80281794464284 -26] 26.80281794464284]
Test Case: 207 | Input/Output: [[-40.43534178570736 -23] -63.43534178570736]
Test Case: 208 | Input/Output: [[35.18772224818244 53] 88.18772224818244]
Test Case: 209 | Input/Output: [[-48.780517056066586 -63] -111.78051705606659]
Test Case: 210 | Input/Output: [[21.20477158559531 -63] -41.79522841440469]
Test Case: 211 | Input/Output: [[66.96883645369184 87] 153.96883645369184]
Test Case: 212 | Input/Output: [[-39.15200403965451 92] 52.84799596034549]
Test Case: 213 | Input/Output: [[-41.32723982106179 -40] -81.3272398210618]
Test Case: 214 | Input/Output: [[-7.7400046954196 2] -5.7400046954196]
Test Case: 215 | Input/Output: [[44.47619446477984 -46] -1.5238055352201627]
Test Case: 216 | Input/Output: [[97.9784219056582 77] 174.9784219056582]
Test Case: 217 | Input/Output: [[-98.22199134442424 79] -19.22199134442424]
Test Case: 218 | Input/Output: [[55.369603126035855 1] 56.369603126035855]
Test Case: 219 | Input/Output: [[46.39059151808823 -13] 33.39059151808823]
Test Case: 220 | Input/Output: [[22.250860799208922 8] 30.250860799208922]
Test Case: 221 | Input/Output: [[-96.81770618969516 -52] -148.81770618969517]
Test Case: 222 | Input/Output: [[81.51351814972188 -82] -0.48648185027812474]
Test Case: 223 | Input/Output: [[-65.48059782727933 -37] -102.48059782727933]
Test Case: 224 | Input/Output: [[94.61657815517279 42] 136.6165781551728]
Test Case: 225 | Input/Output: [[-85.00401096237435 -92] -177.00401096237437]
Test Case: 226 | Input/Output: [[-74.65720655428846 -4] -78.65720655428846]
Test Case: 227 | Input/Output: [[36.24830262112383 -76] -39.75169737887617]
Test Case: 228 | Input/Output: [[40.91797180061545 5] 45.91797180061545]
Test Case: 229 | Input/Output: [[-59.64192450672379 11] -48.64192450672379]
Test Case: 230 | Input/Output: [[-78.06972175704573 85] 6.930278242954273]
Test Case: 231 | Input/Output: [[-61.06624808270011 52] -9.066248082700113]
Test Case: 232 | Input/Output: [[-50.49900943847583 76] 25.50099056152417]
Test Case: 233 | Input/Output: [[77.19122865542121 -49] 28.191228655421213]
Test Case: 234 | Input/Output: [[67.8786113566027 -67] 0.8786113566027041]
Test Case: 235 | Input/Output: [[-79.87267845877615 -100] -179.87267845877614]
Test Case: 236 | Input/Output: [[-44.15467775307753 -50] -94.15467775307752]
Test Case: 237 | Input/Output: [[73.65603812732994 -18] 55.656038127329936]
Test Case: 238 | Input/Output: [[92.66501384365927 69] 161.66501384365927]
Test Case: 239 | Input/Output: [[-5.47610141553092 -17] -22.47610141553092]
Test Case: 240 | Input/Output: [[-23.03914348879755 18] -5.039143488797549]
Test Case: 241 | Input/Output: [[-59.631656705008496 -62] -121.6316567050085]
Test Case: 242 | Input/Output: [[-32.92291416283106 -66] -98.92291416283106]
Test Case: 243 | Input/Output: [[36.97533846962821 -31] 5.975338469628213]
Test Case: 244 | Input/Output: [[-84.43779714786518 79] -5.437797147865183]
Test Case: 245 | Input/Output: [[-22.69604337773295 -52] -74.69604337773295]
Test Case: 246 | Input/Output: [[-20.559552835726763 9] -11.559552835726763]
Test Case: 247 | Input/Output: [[36.225963445317575 64] 100.22596344531757]
Test Case: 248 | Input/Output: [[-66.96262311532801 -80] -146.96262311532803]
Test Case: 249 | Input/Output: [[71.24447759641748 68] 139.24447759641748]
Test Case: 250 | Input/Output: [[51.04326596432594 -49] 2.04326596432594]
Test Case: 251 | Input/Output: [[62.473281546070666 81] 143.47328154607067]
Test Case: 252 | Input/Output: [[8.959465315364241 -78] -69.04053468463576]
Test Case: 253 | Input/Output: [[-11.533977508255731 -34] -45.53397750825573]
Test Case: 254 | Input/Output: [[83.59678916620217 -39] 44.59678916620217]
Test Case: 255 | Input/Output: [[-23.08751225381556 -51] -74.08751225381556]
Test Case: 256 | Input/Output: [[-24.555188176348693 -69] -93.5551881763487]
Test Case: 257 | Input/Output: [[97.07707435951377 92] 189.07707435951377]
Test Case: 258 | Input/Output: [[32.51411004514972 65] 97.51411004514972]
Test Case: 259 | Input/Output: [[-84.8576501653356 -96] -180.8576501653356]
Test Case: 260 | Input/Output: [[18.6435874288877 -56] -37.3564125711123]
Test Case: 261 | Input/Output: [[-72.40388737768782 -94] -166.40388737768782]
Test Case: 262 | Input/Output: [[99.24789722223804 -97] 2.247897222238038]
Test Case: 263 | Input/Output: [[75.0715189196747 42] 117.0715189196747]
Test Case: 264 | Input/Output: [[44.68512041658494 -91] -46.31487958341506]
Test Case: 265 | Input/Output: [[27.972747185363374 74] 101.97274718536337]
Test Case: 266 | Input/Output: [[18.32730852580673 -58] -39.67269147419327]
Test Case: 267 | Input/Output: [[-25.360225801798904 -53] -78.3602258017989]
Test Case: 268 | Input/Output: [[-15.148617454051518 -98] -113.14861745405152]
Test Case: 269 | Input/Output: [[74.3884487713872 -1] 73.3884487713872]
Test Case: 270 | Input/Output: [[-71.60900024664866 45] -26.609000246648662]
Test Case: 271 | Input/Output: [[-27.05942716275797 5] -22.05942716275797]
Test Case: 272 | Input/Output: [[-85.04074061546481 77] -8.040740615464813]
Test Case: 273 | Input/Output: [[-39.74282009115559 -54] -93.7428200911556]
Test Case: 274 | Input/Output: [[-10.838275468358376 16] 5.1617245316416245]
Test Case: 275 | Input/Output: [[-85.46580697912984 -62] -147.46580697912984]
Test Case: 276 | Input/Output: [[65.62535650796886 43] 108.62535650796886]
Test Case: 277 | Input/Output: [[89.98918609260537 -63] 26.989186092605365]
Test Case: 278 | Input/Output: [[-95.3982226241673 -90] -185.39822262416732]
Test Case: 279 | Input/Output: [[-81.01018773903645 -56] -137.01018773903644]
Test Case: 280 | Input/Output: [[56.68912067001358 -16] 40.68912067001358]
Test Case: 281 | Input/Output: [[-1.573891020120925 69] 67.42610897987907]
Test Case: 282 | Input/Output: [[53.71759207784527 97] 150.71759207784527]
Test Case: 283 | Input/Output: [[83.35947938498387 -31] 52.35947938498387]
Test Case: 284 | Input/Output: [[74.66795228394082 69] 143.66795228394082]
Test Case: 285 | Input/Output: [[-95.28130431746004 -27] -122.28130431746004]
Test Case: 286 | Input/Output: [[29.95768182514655 -34] -4.042318174853449]
Test Case: 287 | Input/Output: [[53.013261605165525 66] 119.01326160516552]
Test Case: 288 | Input/Output: [[-29.61772352611858 86] 56.38227647388142]
Test Case: 289 | Input/Output: [[66.88618285833044 -58] 8.886182858330443]
Test Case: 290 | Input/Output: [[-41.726803533666114 5] -36.726803533666114]
Test Case: 291 | Input/Output: [[-3.5576448338494657 -39] -42.557644833849466]
Test Case: 292 | Input/Output: [[-99.6094235441175 -94] -193.6094235441175]
Test Case: 293 | Input/Output: [[40.31148682689542 32] 72.31148682689542]
Test Case: 294 | Input/Output: [[12.53126849996373 -57] -44.46873150003627]
Test Case: 295 | Input/Output: [[76.64972244237632 61] 137.64972244237632]
Test Case: 296 | Input/Output: [[28.033615616046205 39] 67.0336156160462]
Test Case: 297 | Input/Output: [[64.34261690707257 96] 160.34261690707257]
Test Case: 298 | Input/Output: [[36.81312564889288 -29] 7.813125648892878]
Test Case: 299 | Input/Output: [[91.18593622707257 91] 182.18593622707257]
Test Case: 300 | Input/Output: [[17.993721050690283 -62] -44.00627894930972]
Test Case: 301 | Input/Output: [[-95.34182313684387 97] 1.6581768631561289]
Test Case: 302 | Input/Output: [[-55.66881649207811 69] 13.331183507921892]
Test Case: 303 | Input/Output: [[-99.855572369952 82] -17.855572369952]
Test Case: 304 | Input/Output: [[-31.61498020563924 37] 5.385019794360758]
Test Case: 305 | Input/Output: [[-61.61859093148223 17] -44.61859093148223]
Test Case: 306 | Input/Output: [[29.389298645235954 -72] -42.610701354764046]
Test Case: 307 | Input/Output: [[76.42996082681907 89] 165.42996082681907]
Test Case: 308 | Input/Output: [[37.72139475159227 24] 61.72139475159227]
Test Case: 309 | Input/Output: [[24.319218365770794 47] 71.3192183657708]
Test Case: 310 | Input/Output: [[-88.23276246342944 -30] -118.23276246342944]
Test Case: 311 | Input/Output: [[-31.29830345111651 -30] -61.29830345111651]
Test Case: 312 | Input/Output: [[-6.008949847601912 71] 64.99105015239809]
Test Case: 313 | Input/Output: [[-56.90563747552082 -57] -113.90563747552082]
Test Case: 314 | Input/Output: [[74.10503940167612 -94] -19.894960598323877]
Test Case: 315 | Input/Output: [[55.09298138891475 -67] -11.907018611085249]
Test Case: 316 | Input/Output: [[-11.98189952458408 6] -5.98189952458408]
Test Case: 317 | Input/Output: [[17.06234029239873 -86] -68.93765970760127]
Test Case: 318 | Input/Output: [[-51.757980527719404 2] -49.757980527719404]
Test Case: 319 | Input/Output: [[13.373222084332667 15] 28.373222084332667]
Test Case: 320 | Input/Output: [[38.62772945784246 -90] -51.37227054215754]
Test Case: 321 | Input/Output: [[-17.388265354858618 -65] -82.38826535485862]
Test Case: 322 | Input/Output: [[-33.09116076457619 -70] -103.09116076457619]
Test Case: 323 | Input/Output: [[74.6484397961226 -50] 24.648439796122602]
Test Case: 324 | Input/Output: [[63.65699855963135 -46] 17.656998559631347]
Test Case: 325 | Input/Output: [[-22.985069590320606 57] 34.014930409679394]
Test Case: 326 | Input/Output: [[58.584319770660386 23] 81.58431977066039]
Test Case: 327 | Input/Output: [[21.13982773183301 80] 101.13982773183301]
Test Case: 328 | Input/Output: [[-29.897431165945477 -52] -81.89743116594548]
Test Case: 329 | Input/Output: [[65.16975796598985 22] 87.16975796598985]
Test Case: 330 | Input/Output: [[-90.0414066572871 -25] -115.0414066572871]
Test Case: 331 | Input/Output: [[14.122763452707645 19] 33.122763452707645]
Test Case: 332 | Input/Output: [[-57.39527750350841 -37] -94.39527750350841]
Test Case: 333 | Input/Output: [[-40.97689462062857 -97] -137.97689462062857]
Test Case: 334 | Input/Output: [[35.10988984705841 80] 115.10988984705841]
Test Case: 335 | Input/Output: [[48.276631586510774 -36] 12.276631586510774]
Test Case: 336 | Input/Output: [[35.68279291816211 -8] 27.682792918162107]
Test Case: 337 | Input/Output: [[10.882153567664844 70] 80.88215356766484]
Test Case: 338 | Input/Output: [[-94.08417314643157 -44] -138.08417314643157]
Test Case: 339 | Input/Output: [[34.40797582693938 41] 75.40797582693938]
Test Case: 340 | Input/Output: [[86.60927782491876 -70] 16.609277824918763]
Test Case: 341 | Input/Output: [[-72.29302128574756 -15] -87.29302128574756]
Test Case: 342 | Input/Output: [[-54.894078957931214 -4] -58.894078957931214]
Test Case: 343 | Input/Output: [[-62.4504967384885 -11] -73.45049673848851]
Test Case: 344 | Input/Output: [[48.178541931203824 -11] 37.178541931203824]
Test Case: 345 | Input/Output: [[-7.31100890388403 -20] -27.31100890388403]
Test Case: 346 | Input/Output: [[12.898577445288012 -85] -72.10142255471199]
Test Case: 347 | Input/Output: [[36.8138163095048 -97] -60.1861836904952]
Test Case: 348 | Input/Output: [[-13.90926211049512 20] 6.090737889504879]
Test Case: 349 | Input/Output: [[-35.239965843577565 37] 1.760034156422435]
Test Case: 350 | Input/Output: [[29.43625101233519 84] 113.43625101233519]
Test Case: 351 | Input/Output: [[-58.87266909914253 90] 31.127330900857473]
Test Case: 352 | Input/Output: [[87.95494563506722 45] 132.95494563506722]
Test Case: 353 | Input/Output: [[-17.083479705375424 -86] -103.08347970537542]
Test Case: 354 | Input/Output: [[-80.8539225992184 91] 10.146077400781607]
Test Case: 355 | Input/Output: [[-46.62901189413458 81] 34.37098810586542]
Test Case: 356 | Input/Output: [[38.930961210084064 -47] -8.069038789915936]
Test Case: 357 | Input/Output: [[-84.81614551503722 -77] -161.81614551503722]
Test Case: 358 | Input/Output: [[-58.618179610650415 -77] -135.61817961065043]
Test Case: 359 | Input/Output: [[1.5608939304511864 84] 85.56089393045119]
Test Case: 360 | Input/Output: [[79.15461544310182 -22] 57.15461544310182]
Test Case: 361 | Input/Output: [[-54.03732363397864 -3] -57.03732363397864]
Test Case: 362 | Input/Output: [[-7.316395709884844 82] 74.68360429011516]
Test Case: 363 | Input/Output: [[4.25169058794495 82] 86.25169058794495]
Test Case: 364 | Input/Output: [[-54.91441419720984 -81] -135.91441419720985]
Test Case: 365 | Input/Output: [[33.50778874012315 22] 55.50778874012315]
Test Case: 366 | Input/Output: [[-77.03957237229974 -98] -175.03957237229974]
Test Case: 367 | Input/Output: [[22.161987362607633 58] 80.16198736260763]
Test Case: 368 | Input/Output: [[-84.7737230026378 4] -80.7737230026378]
Test Case: 369 | Input/Output: [[-43.041196060186394 -17] -60.041196060186394]
Test Case: 370 | Input/Output: [[-78.396968628338 55] -23.396968628338]
Test Case: 371 | Input/Output: [[-23.773253728858563 84] 60.22674627114144]
Test Case: 372 | Input/Output: [[-25.24648119526769 80] 54.75351880473231]
Test Case: 373 | Input/Output: [[74.3141451688511 -42] 32.3141451688511]
Test Case: 374 | Input/Output: [[31.567329533846078 72] 103.56732953384608]
Test Case: 375 | Input/Output: [[47.5575064744792 13] 60.5575064744792]
Test Case: 376 | Input/Output: [[-36.79734725718229 67] 30.202652742817712]
Test Case: 377 | Input/Output: [[-45.42435455569671 -61] -106.42435455569671]
Test Case: 378 | Input/Output: [[20.927830119387835 9] 29.927830119387835]
Test Case: 379 | Input/Output: [[-47.50491822691873 -55] -102.50491822691873]
Test Case: 380 | Input/Output: [[48.59539074965349 8] 56.59539074965349]
Test Case: 381 | Input/Output: [[-34.16001040777117 -8] -42.16001040777117]
Test Case: 382 | Input/Output: [[-21.536213257914795 -15] -36.536213257914795]
Test Case: 383 | Input/Output: [[-80.4586428277641 -16] -96.4586428277641]
Test Case: 384 | Input/Output: [[-85.70201654521324 61] -24.70201654521324]
Test Case: 385 | Input/Output: [[-19.400104162404546 -69] -88.40010416240455]
Test Case: 386 | Input/Output: [[9.097141966449456 -43] -33.902858033550544]
Test Case: 387 | Input/Output: [[27.62470694266122 -44] -16.37529305733878]
Test Case: 388 | Input/Output: [[-89.7736168062923 70] -19.773616806292296]
Test Case: 389 | Input/Output: [[92.81021384476975 -20] 72.81021384476975]
Test Case: 390 | Input/Output: [[2.9841268340680074 100] 102.98412683406801]
Test Case: 391 | Input/Output: [[-33.34244683924791 -57] -90.34244683924791]
Test Case: 392 | Input/Output: [[-77.3645462463382 86] 8.635453753661807]
Test Case: 393 | Input/Output: [[76.96089223039806 -77] -0.039107769601940845]
Test Case: 394 | Input/Output: [[-37.29128747180312 84] 46.70871252819688]
Test Case: 395 | Input/Output: [[-22.054017745520383 19] -3.054017745520383]
Test Case: 396 | Input/Output: [[40.35958385630812 93] 133.35958385630812]
Test Case: 397 | Input/Output: [[-2.4952604994743552 -15] -17.495260499474355]
Test Case: 398 | Input/Output: [[77.60006378102523 -94] -16.399936218974773]
Test Case: 399 | Input/Output: [[88.85983542331465 -8] 80.85983542331465]
Test Case: 400 | Input/Output: [[-28.04925292204365 -3] -31.04925292204365]
Test Case: 401 | Input/Output: [[-27.686572124325977 -58] -85.68657212432598]
Test Case: 402 | Input/Output: [[4.9420121505352625 -75] -70.05798784946474]
Test Case: 403 | Input/Output: [[58.26229107739283 -96] -37.73770892260717]
Test Case: 404 | Input/Output: [[-78.80107167081471 -60] -138.8010716708147]
Test Case: 405 | Input/Output: [[-77.38507724559085 3] -74.38507724559085]
Test Case: 406 | Input/Output: [[46.56224850575924 67] 113.56224850575924]
Test Case: 407 | Input/Output: [[64.98282919294357 -81] -16.01717080705643]
Test Case: 408 | Input/Output: [[-40.4613769455372 -91] -131.4613769455372]
Test Case: 409 | Input/Output: [[57.01172458959152 66] 123.01172458959152]
Test Case: 410 | Input/Output: [[41.18179780235002 -38] 3.181797802350019]
Test Case: 411 | Input/Output: [[61.260450539308835 -28] 33.260450539308835]
Test Case: 412 | Input/Output: [[85.56838541552284 -73] 12.56838541552284]
Test Case: 413 | Input/Output: [[-51.68155071611764 32] -19.68155071611764]
Test Case: 414 | Input/Output: [[81.08309003656655 -24] 57.083090036566546]
Test Case: 415 | Input/Output: [[46.19593190680499 -46] 0.1959319068049865]
Test Case: 416 | Input/Output: [[50.82987952042694 -5] 45.82987952042694]
Test Case: 417 | Input/Output: [[92.48606779221839 -91] 1.4860677922183925]
Test Case: 418 | Input/Output: [[70.36731912618072 -65] 5.367319126180718]
Test Case: 419 | Input/Output: [[-94.72222381347176 3] -91.72222381347176]
Test Case: 420 | Input/Output: [[-46.92739160082673 -54] -100.92739160082672]
Test Case: 421 | Input/Output: [[48.395549492293185 -2] 46.395549492293185]
Test Case: 422 | Input/Output: [[-16.135078891605886 60] 43.864921108394114]
Test Case: 423 | Input/Output: [[-74.79323287855274 -23] -97.79323287855274]
Test Case: 424 | Input/Output: [[71.66989402118102 -64] 7.6698940211810225]
Test Case: 425 | Input/Output: [[-84.33709336580328 15] -69.33709336580328]
Test Case: 426 | Input/Output: [[78.89502886978897 10] 88.89502886978897]
Test Case: 427 | Input/Output: [[-69.91178940720941 -78] -147.91178940720943]
Test Case: 428 | Input/Output: [[74.71206003750731 -98] -23.287939962492686]
Test Case: 429 | Input/Output: [[-13.626977954692748 39] 25.373022045307252]
Test Case: 430 | Input/Output: [[47.72396245099006 95] 142.72396245099006]
Test Case: 431 | Input/Output: [[77.21969104502716 9] 86.21969104502716]
Test Case: 432 | Input/Output: [[32.81149163523955 51] 83.81149163523955]
Test Case: 433 | Input/Output: [[51.60257823413821 82] 133.6025782341382]
Test Case: 434 | Input/Output: [[88.80600287642568 1] 89.80600287642568]
Test Case: 435 | Input/Output: [[33.71253376993323 -89] -55.28746623006677]
Test Case: 436 | Input/Output: [[-86.50541138347864 98] 11.494588616521355]
Test Case: 437 | Input/Output: [[-41.91490279020793 -21] -62.91490279020793]
Test Case: 438 | Input/Output: [[-87.44336235537149 96] 8.556637644628509]
Test Case: 439 | Input/Output: [[-26.050844688187368 38] 11.949155311812632]
Test Case: 440 | Input/Output: [[-17.453125115331062 40] 22.546874884668938]
Test Case: 441 | Input/Output: [[-66.46945160143792 75] 8.530548398562075]
Test Case: 442 | Input/Output: [[-96.9614382561603 -56] -152.9614382561603]
Test Case: 443 | Input/Output: [[38.943392703945676 20] 58.943392703945676]
Test Case: 444 | Input/Output: [[33.63011736007263 -11] 22.63011736007263]
Test Case: 445 | Input/Output: [[62.71265804442828 -49] 13.71265804442828]
Test Case: 446 | Input/Output: [[29.543475931156365 -10] 19.543475931156365]
Test Case: 447 | Input/Output: [[-80.87531251533639 -56] -136.8753125153364]
Test Case: 448 | Input/Output: [[-47.754849520408314 -80] -127.75484952040831]
Test Case: 449 | Input/Output: [[55.33791801272696 -8] 47.33791801272696]
Test Case: 450 | Input/Output: [[64.95793025493529 -62] 2.9579302549352917]
Test Case: 451 | Input/Output: [[57.86098695636937 -14] 43.86098695636937]
Test Case: 452 | Input/Output: [[-70.0658031223868 -35] -105.0658031223868]
Test Case: 453 | Input/Output: [[-63.709361155212264 -8] -71.70936115521226]
Test Case: 454 | Input/Output: [[32.838474655544076 -85] -52.161525344455924]
Test Case: 455 | Input/Output: [[-32.009036168649274 -18] -50.009036168649274]
Test Case: 456 | Input/Output: [[-61.72233570155097 98] 36.27766429844903]
Test Case: 457 | Input/Output: [[97.09583273116255 71] 168.09583273116255]
Test Case: 458 | Input/Output: [[-17.417406150021762 -16] -33.41740615002176]
Test Case: 459 | Input/Output: [[14.171263581999852 16] 30.171263581999852]
Test Case: 460 | Input/Output: [[79.01300282463626 80] 159.01300282463626]
Test Case: 461 | Input/Output: [[27.743625818825677 -61] -33.25637418117432]
Test Case: 462 | Input/Output: [[-33.83518615691301 -44] -77.83518615691301]
Test Case: 463 | Input/Output: [[66.96132676242834 85] 151.96132676242834]
Test Case: 464 | Input/Output: [[-18.18450981549023 49] 30.81549018450977]
Test Case: 465 | Input/Output: [[20.658339809897825 -42] -21.341660190102175]
Test Case: 466 | Input/Output: [[-51.28714975243878 55] 3.712850247561221]
Test Case: 467 | Input/Output: [[-69.53164853643696 -39] -108.53164853643696]
Test Case: 468 | Input/Output: [[-98.48562028269885 -37] -135.48562028269885]
Test Case: 469 | Input/Output: [[-35.03736904202883 31] -4.037369042028828]
Test Case: 470 | Input/Output: [[-88.05391670752208 70] -18.053916707522077]
Test Case: 471 | Input/Output: [[66.47321006427401 19] 85.47321006427401]
Test Case: 472 | Input/Output: [[-91.91008307254933 7] -84.91008307254933]
Test Case: 473 | Input/Output: [[-28.90679523776285 43] 14.09320476223715]
Test Case: 474 | Input/Output: [[31.3677264245367 12] 43.3677264245367]
Test Case: 475 | Input/Output: [[-51.72117487244052 76] 24.27882512755948]
Test Case: 476 | Input/Output: [[-11.131934384188696 59] 47.868065615811304]
Test Case: 477 | Input/Output: [[-14.184295893806691 -74] -88.18429589380669]
Test Case: 478 | Input/Output: [[-31.05130953174107 93] 61.94869046825893]
Test Case: 479 | Input/Output: [[-7.6430524927634025 5] -2.6430524927634025]
Test Case: 480 | Input/Output: [[-51.39725022440582 -86] -137.3972502244058]
Test Case: 481 | Input/Output: [[30.688029154469007 27] 57.68802915446901]
Test Case: 482 | Input/Output: [[4.254444226193897 32] 36.2544442261939]
Test Case: 483 | Input/Output: [[37.668728807027975 -16] 21.668728807027975]
Test Case: 484 | Input/Output: [[-3.4124653210389226 68] 64.58753467896108]
Test Case: 485 | Input/Output: [[35.91901190785481 25] 60.91901190785481]
Test Case: 486 | Input/Output: [[74.28682696662989 -58] 16.28682696662989]
Test Case: 487 | Input/Output: [[70.53833738665745 -2] 68.53833738665745]
Test Case: 488 | Input/Output: [[-63.82271661718959 7] -56.82271661718959]
Test Case: 489 | Input/Output: [[-6.047428993275844 74] 67.95257100672416]
Test Case: 490 | Input/Output: [[-58.14883720810844 46] -12.14883720810844]
Test Case: 491 | Input/Output: [[-63.519917481441055 48] -15.519917481441055]
Test Case: 492 | Input/Output: [[-4.547469112910463 68] 63.45253088708954]
Test Case: 493 | Input/Output: [[-20.777569005892047 79] 58.22243099410795]
Test Case: 494 | Input/Output: [[-3.9215441242830877 -30] -33.92154412428309]
Test Case: 495 | Input/Output: [[21.379992643479113 78] 99.37999264347911]
Test Case: 496 | Input/Output: [[-89.2666164366363 -81] -170.2666164366363]
Test Case: 497 | Input/Output: [[40.03854241743437 54] 94.03854241743437]
Test Case: 498 | Input/Output: [[89.4783543365763 69] 158.4783543365763]
Test Case: 499 | Input/Output: [[35.13989927904504 5] 40.13989927904504]
Test Case: 500 | Input/Output: [[69.7625314405017 96] 165.7625314405017]
Test Case: 501 | Input/Output: [[-42.92863538784142 79] 36.07136461215858]
Test Case: 502 | Input/Output: [[-68.91533457675725 -64] -132.91533457675723]
Test Case: 503 | Input/Output: [[95.3777622116564 52] 147.3777622116564]
Test Case: 504 | Input/Output: [[-67.53737879931356 -12] -79.53737879931356]
Test Case: 505 | Input/Output: [[-67.80395610253726 -44] -111.80395610253726]
Test Case: 506 | Input/Output: [[-64.71056203095085 57] -7.710562030950854]
Test Case: 507 | Input/Output: [[40.487427145117664 1] 41.487427145117664]
Test Case: 508 | Input/Output: [[-48.783152441924706 63] 14.216847558075294]
Test Case: 509 | Input/Output: [[29.16393553495226 42] 71.16393553495226]
Test Case: 510 | Input/Output: [[-96.16295828374506 3] -93.16295828374506]
Test Case: 511 | Input/Output: [[-64.05376461093948 -70] -134.05376461093948]
Test Case: 512 | Input/Output: [[-91.43418626144906 -2] -93.43418626144906]
Test Case: 513 | Input/Output: [[-17.698492826713036 83] 65.30150717328696]
Test Case: 514 | Input/Output: [[-37.47221644786669 9] -28.472216447866693]
Test Case: 515 | Input/Output: [[-68.060869081564 94] 25.939130918436007]
Test Case: 516 | Input/Output: [[95.33664473508958 -26] 69.33664473508958]
Test Case: 517 | Input/Output: [[2.589718839437708 -79] -76.41028116056229]
Test Case: 518 | Input/Output: [[-80.34302404852554 7] -73.34302404852554]
Test Case: 519 | Input/Output: [[-53.75561925028735 -15] -68.75561925028735]
Test Case: 520 | Input/Output: [[14.47007253565586 41] 55.47007253565586]
Test Case: 521 | Input/Output: [[32.23955052599533 -28] 4.239550525995327]
Test Case: 522 | Input/Output: [[10.374110791699962 21] 31.374110791699962]
Test Case: 523 | Input/Output: [[-70.64419675241014 76] 5.355803247589861]
Test Case: 524 | Input/Output: [[-78.01274503512039 -18] -96.01274503512039]
Test Case: 525 | Input/Output: [[48.853032012743995 -36] 12.853032012743995]
Test Case: 526 | Input/Output: [[32.21495506875132 35] 67.21495506875132]
Test Case: 527 | Input/Output: [[96.22210662965017 -97] -0.7778933703498296]
Test Case: 528 | Input/Output: [[-30.093714094104314 28] -2.093714094104314]
Test Case: 529 | Input/Output: [[-90.07492655801583 -22] -112.07492655801583]
Test Case: 530 | Input/Output: [[-87.01458901315881 -93] -180.0145890131588]
Test Case: 531 | Input/Output: [[-8.065611481713901 80] 71.9343885182861]
Test Case: 532 | Input/Output: [[26.80765413921162 58] 84.80765413921162]
Test Case: 533 | Input/Output: [[-76.85639974188759 -91] -167.85639974188757]
Test Case: 534 | Input/Output: [[83.25237345823444 -10] 73.25237345823444]
Test Case: 535 | Input/Output: [[40.14932983925874 -18] 22.14932983925874]
Test Case: 536 | Input/Output: [[-23.251329709321084 -65] -88.25132970932108]
Test Case: 537 | Input/Output: [[-61.880019585519655 -19] -80.88001958551965]
Test Case: 538 | Input/Output: [[-83.95184527260015 67] -16.951845272600153]
Test Case: 539 | Input/Output: [[-67.84077135273267 -5] -72.84077135273267]
Test Case: 540 | Input/Output: [[-26.954004341235077 -8] -34.95400434123508]
Test Case: 541 | Input/Output: [[53.27843723425488 93] 146.27843723425488]
Test Case: 542 | Input/Output: [[51.42245477538103 -62] -10.577545224618973]
Test Case: 543 | Input/Output: [[-61.227034174763006 30] -31.227034174763006]
Test Case: 544 | Input/Output: [[47.5256111427708 88] 135.5256111427708]
Test Case: 545 | Input/Output: [[-11.688501177514453 41] 29.311498822485547]
Test Case: 546 | Input/Output: [[23.05085831310194 -84] -60.94914168689806]
Test Case: 547 | Input/Output: [[-75.87703537262021 36] -39.87703537262021]
Test Case: 548 | Input/Output: [[-29.472760307657595 -2] -31.472760307657595]
Test Case: 549 | Input/Output: [[22.511611914896747 47] 69.51161191489675]
Test Case: 550 | Input/Output: [[53.038718247850056 18] 71.03871824785006]
Test Case: 551 | Input/Output: [[77.12198721242129 -72] 5.121987212421288]
Test Case: 552 | Input/Output: [[35.224625733569525 11] 46.224625733569525]
Test Case: 553 | Input/Output: [[-76.90227796131734 -88] -164.90227796131734]
Test Case: 554 | Input/Output: [[-93.48568736175385 30] -63.48568736175385]
Test Case: 555 | Input/Output: [[-10.722843733004495 -56] -66.7228437330045]
Test Case: 556 | Input/Output: [[28.241709084027207 60] 88.2417090840272]
Test Case: 557 | Input/Output: [[97.07649949652085 -24] 73.07649949652085]
Test Case: 558 | Input/Output: [[-55.00905940824175 -36] -91.00905940824174]
Test Case: 559 | Input/Output: [[-1.7487262892893511 96] 94.25127371071065]
Test Case: 560 | Input/Output: [[4.001232769138312 48] 52.00123276913831]
Test Case: 561 | Input/Output: [[48.488686694184906 -92] -43.511313305815094]
Test Case: 562 | Input/Output: [[-40.905999150758056 11] -29.905999150758056]
Test Case: 563 | Input/Output: [[36.21518228418549 23] 59.21518228418549]
Test Case: 564 | Input/Output: [[-96.41370344369669 7] -89.41370344369669]
Test Case: 565 | Input/Output: [[37.98309878659117 55] 92.98309878659117]
Test Case: 566 | Input/Output: [[79.05031120371342 34] 113.05031120371342]
Test Case: 567 | Input/Output: [[-86.66704887389744 7] -79.66704887389744]
Test Case: 568 | Input/Output: [[62.26181068379728 -5] 57.26181068379728]
Test Case: 569 | Input/Output: [[-5.063699900342684 39] 33.936300099657316]
Test Case: 570 | Input/Output: [[32.452909192702094 87] 119.4529091927021]
Test Case: 571 | Input/Output: [[-46.860192321179106 -11] -57.860192321179106]
Test Case: 572 | Input/Output: [[-32.47792011025348 38] 5.5220798897465215]
Test Case: 573 | Input/Output: [[99.58214895104254 86] 185.58214895104254]
Test Case: 574 | Input/Output: [[12.237877333759116 -34] -21.762122666240884]
Test Case: 575 | Input/Output: [[68.06100641420883 -2] 66.06100641420883]
Test Case: 576 | Input/Output: [[-47.896929885563225 15] -32.896929885563225]
Test Case: 577 | Input/Output: [[-80.04122089401505 8] -72.04122089401505]
Test Case: 578 | Input/Output: [[99.64247760653129 -46] 53.64247760653129]
Test Case: 579 | Input/Output: [[-27.51367569919563 71] 43.48632430080437]
Test Case: 580 | Input/Output: [[19.27776336666274 52] 71.27776336666274]
Test Case: 581 | Input/Output: [[99.53251367263763 -31] 68.53251367263763]
Test Case: 582 | Input/Output: [[-2.733032995970788 -71] -73.73303299597079]
Test Case: 583 | Input/Output: [[31.07874829203689 82] 113.07874829203689]
Test Case: 584 | Input/Output: [[-16.50701378498644 23] 6.492986215013559]
Test Case: 585 | Input/Output: [[-55.56103672928474 -87] -142.56103672928475]
Test Case: 586 | Input/Output: [[34.25450833579018 -59] -24.745491664209823]
Test Case: 587 | Input/Output: [[10.308498711409243 88] 98.30849871140924]
Test Case: 588 | Input/Output: [[21.543975646415575 -81] -59.456024353584425]
Test Case: 589 | Input/Output: [[97.4169097544576 23] 120.4169097544576]
Test Case: 590 | Input/Output: [[12.559160979787308 -38] -25.440839020212692]
Test Case: 591 | Input/Output: [[-55.42268408059623 24] -31.422684080596227]
Test Case: 592 | Input/Output: [[-11.612517211440704 40] 28.387482788559296]
Test Case: 593 | Input/Output: [[-85.53487504131074 29] -56.53487504131074]
Test Case: 594 | Input/Output: [[24.36474817212597 -37] -12.63525182787403]
Test Case: 595 | Input/Output: [[-34.060619174932924 -14] -48.060619174932924]
Test Case: 596 | Input/Output: [[31.787255619635744 -9] 22.787255619635744]
Test Case: 597 | Input/Output: [[-52.19175192213115 53] 0.8082480778688534]
Test Case: 598 | Input/Output: [[66.24067638430938 45] 111.24067638430938]
Test Case: 599 | Input/Output: [[93.38624737784431 -29] 64.38624737784431]
Test Case: 600 | Input/Output: [[1.1936430709668286 -18] -16.80635692903317]
Test Case: 601 | Input/Output: [[24.91101471154562 63] 87.91101471154562]
Test Case: 602 | Input/Output: [[58.03209691229304 -38] 20.032096912293042]
Test Case: 603 | Input/Output: [[-24.096682568567587 29] 4.903317431432413]
Test Case: 604 | Input/Output: [[11.762037742482917 6] 17.762037742482917]
Test Case: 605 | Input/Output: [[-35.7447647879501 -12] -47.7447647879501]
Test Case: 606 | Input/Output: [[60.87976857390325 -17] 43.87976857390325]
Test Case: 607 | Input/Output: [[91.02747365740356 -4] 87.02747365740356]
Test Case: 608 | Input/Output: [[-66.49273922303318 -47] -113.49273922303318]
Test Case: 609 | Input/Output: [[-79.98668753691354 76] -3.9866875369135357]
Test Case: 610 | Input/Output: [[-13.732955541528739 -80] -93.73295554152874]
Test Case: 611 | Input/Output: [[59.22935305798583 28] 87.22935305798583]
Test Case: 612 | Input/Output: [[-47.294505218410144 -3] -50.294505218410144]
Test Case: 613 | Input/Output: [[-82.83674260515824 50] -32.836742605158236]
Test Case: 614 | Input/Output: [[-36.86870629498606 98] 61.13129370501394]
Test Case: 615 | Input/Output: [[-8.589916514185816 24] 15.410083485814184]
Test Case: 616 | Input/Output: [[27.889692793394104 84] 111.8896927933941]
Test Case: 617 | Input/Output: [[86.76912844260292 -81] 5.76912844260292]
Test Case: 618 | Input/Output: [[48.17475179210692 10] 58.17475179210692]
Test Case: 619 | Input/Output: [[72.89379441971477 -64] 8.893794419714766]
Test Case: 620 | Input/Output: [[46.5934135006423 42] 88.5934135006423]
Test Case: 621 | Input/Output: [[-97.02423898596133 24] -73.02423898596133]
Test Case: 622 | Input/Output: [[-12.239686177773862 36] 23.760313822226138]
Test Case: 623 | Input/Output: [[-21.305329907715148 76] 54.69467009228485]
Test Case: 624 | Input/Output: [[40.349999590915786 42] 82.34999959091579]
Test Case: 625 | Input/Output: [[37.899471231681986 84] 121.89947123168199]
Test Case: 626 | Input/Output: [[-1.7002679338630173 99] 97.29973206613698]
Test Case: 627 | Input/Output: [[14.726093329730645 -59] -44.273906670269355]
Test Case: 628 | Input/Output: [[94.32139441687309 -29] 65.32139441687309]
Test Case: 629 | Input/Output: [[47.74518205728643 -94] -46.25481794271357]
Test Case: 630 | Input/Output: [[-15.935522907722756 -70] -85.93552290772276]
Test Case: 631 | Input/Output: [[-56.68114145495666 2] -54.68114145495666]
Test Case: 632 | Input/Output: [[-73.43548359469168 58] -15.435483594691675]
Test Case: 633 | Input/Output: [[34.594165776147946 -71] -36.405834223852054]
Test Case: 634 | Input/Output: [[-77.01494157242476 -78] -155.01494157242476]
Test Case: 635 | Input/Output: [[79.00763836127231 75] 154.0076383612723]
Test Case: 636 | Input/Output: [[49.281716855488355 40] 89.28171685548836]
Test Case: 637 | Input/Output: [[77.05845134683003 -52] 25.058451346830026]
Test Case: 638 | Input/Output: [[-27.951079784223793 -89] -116.9510797842238]
Test Case: 639 | Input/Output: [[-4.508366042642081 -26] -30.50836604264208]
Test Case: 640 | Input/Output: [[-79.32355982451926 -47] -126.32355982451926]
Test Case: 641 | Input/Output: [[78.48206738105625 99] 177.48206738105625]
Test Case: 642 | Input/Output: [[-21.15843563046029 94] 72.84156436953971]
Test Case: 643 | Input/Output: [[-9.73433057851598 48] 38.26566942148402]
Test Case: 644 | Input/Output: [[63.742166658485985 28] 91.74216665848598]
Test Case: 645 | Input/Output: [[57.27339754042532 -37] 20.27339754042532]
Test Case: 646 | Input/Output: [[31.56573103723116 -63] -31.43426896276884]
Test Case: 647 | Input/Output: [[-50.57882058708609 -54] -104.57882058708608]
Test Case: 648 | Input/Output: [[-40.265813380405625 -65] -105.26581338040563]
Test Case: 649 | Input/Output: [[-43.1608719074873 53] 9.839128092512702]
Test Case: 650 | Input/Output: [[-31.87363020004608 -94] -125.87363020004608]
Test Case: 651 | Input/Output: [[-80.32440449501848 -57] -137.32440449501848]
Test Case: 652 | Input/Output: [[70.64989841330086 -40] 30.64989841330086]
Test Case: 653 | Input/Output: [[7.896075689228297 44] 51.8960756892283]
Test Case: 654 | Input/Output: [[35.89852603294213 65] 100.89852603294213]
Test Case: 655 | Input/Output: [[32.78011854130514 47] 79.78011854130514]
Test Case: 656 | Input/Output: [[48.123133403003834 -32] 16.123133403003834]
Test Case: 657 | Input/Output: [[-57.11057002010993 -50] -107.11057002010993]
Test Case: 658 | Input/Output: [[38.22284993828222 -23] 15.222849938282224]
Test Case: 659 | Input/Output: [[-49.938337014576085 -74] -123.93833701457609]
Test Case: 660 | Input/Output: [[23.42931370864983 -30] -6.570686291350171]
Test Case: 661 | Input/Output: [[-30.615579402226317 77] 46.38442059777368]
Test Case: 662 | Input/Output: [[-68.38541656991195 -71] -139.38541656991197]
Test Case: 663 | Input/Output: [[98.7449573156033 -91] 7.744957315603301]
Test Case: 664 | Input/Output: [[79.79223004668711 -12] 67.79223004668711]
Test Case: 665 | Input/Output: [[-62.931424497104224 -76] -138.93142449710422]
Test Case: 666 | Input/Output: [[29.75765636206168 -16] 13.757656362061681]
Test Case: 667 | Input/Output: [[82.62597939438919 73] 155.6259793943892]
Test Case: 668 | Input/Output: [[73.21929608861834 -61] 12.219296088618336]
Test Case: 669 | Input/Output: [[89.0892612213122 -68] 21.0892612213122]
Test Case: 670 | Input/Output: [[84.35572461126864 35] 119.35572461126864]
Test Case: 671 | Input/Output: [[-63.683336344726605 -61] -124.6833363447266]
Test Case: 672 | Input/Output: [[82.4609543659914 -20] 62.4609543659914]
Test Case: 673 | Input/Output: [[15.550299686635796 26] 41.550299686635796]
Test Case: 674 | Input/Output: [[57.50800767366397 -60] -2.4919923263360317]
Test Case: 675 | Input/Output: [[98.97070245534928 10] 108.97070245534928]
Test Case: 676 | Input/Output: [[56.34907971547361 19] 75.34907971547361]
Test Case: 677 | Input/Output: [[-44.72398484873317 -26] -70.72398484873317]
Test Case: 678 | Input/Output: [[75.2096588302982 -15] 60.209658830298196]
Test Case: 679 | Input/Output: [[86.25617415104506 -43] 43.25617415104506]
Test Case: 680 | Input/Output: [[-75.33031080826196 56] -19.330310808261956]
Test Case: 681 | Input/Output: [[34.11989370171062 -40] -5.880106298289377]
Test Case: 682 | Input/Output: [[-46.9387546814364 91] 44.0612453185636]
Test Case: 683 | Input/Output: [[73.63799258809937 -19] 54.637992588099365]
Test Case: 684 | Input/Output: [[-99.59094914324102 -64] -163.590949143241]
Test Case: 685 | Input/Output: [[41.0939350924852 53] 94.0939350924852]
Test Case: 686 | Input/Output: [[38.21800175930119 -66] -27.78199824069881]
Test Case: 687 | Input/Output: [[-28.108641791171607 -84] -112.1086417911716]
Test Case: 688 | Input/Output: [[-22.989551357907146 -58] -80.98955135790715]
Test Case: 689 | Input/Output: [[68.44535310183394 20] 88.44535310183394]
Test Case: 690 | Input/Output: [[-94.42691960083285 -15] -109.42691960083285]
Test Case: 691 | Input/Output: [[32.06373969416413 92] 124.06373969416413]
Test Case: 692 | Input/Output: [[1.607805490883507 86] 87.6078054908835]
Test Case: 693 | Input/Output: [[-0.8758942418698012 -13] -13.875894241869801]
Test Case: 694 | Input/Output: [[-40.99157709508303 78] 37.00842290491697]
Test Case: 695 | Input/Output: [[-42.31021390757317 24] -18.31021390757317]
Test Case: 696 | Input/Output: [[69.68197225115932 -67] 2.6819722511593227]
Test Case: 697 | Input/Output: [[-99.93183092971852 72] -27.931830929718515]
Test Case: 698 | Input/Output: [[94.95940385645278 -6] 88.95940385645278]
Test Case: 699 | Input/Output: [[-14.946876488042491 -80] -94.94687648804249]
Test Case: 700 | Input/Output: [[80.76928502485015 13] 93.76928502485015]
Test Case: 701 | Input/Output: [[-94.37608443687388 56] -38.37608443687388]
Test Case: 702 | Input/Output: [[19.193073876511235 -47] -27.806926123488765]
Test Case: 703 | Input/Output: [[-91.78926660051292 -73] -164.78926660051292]
Test Case: 704 | Input/Output: [[-96.8469089276459 -44] -140.8469089276459]
Test Case: 705 | Input/Output: [[10.571214430187808 96] 106.57121443018781]
Test Case: 706 | Input/Output: [[25.89867862208959 -35] -9.10132137791041]
Test Case: 707 | Input/Output: [[-43.218234593322435 -8] -51.218234593322435]
Test Case: 708 | Input/Output: [[2.3225024077850662 82] 84.32250240778507]
Test Case: 709 | Input/Output: [[-53.7539554232555 -39] -92.75395542325549]
Test Case: 710 | Input/Output: [[-90.79536437625329 -97] -187.7953643762533]
Test Case: 711 | Input/Output: [[65.88950723255499 48] 113.88950723255499]
Test Case: 712 | Input/Output: [[32.03466950664452 25] 57.03466950664452]
Test Case: 713 | Input/Output: [[73.69444659407898 -96] -22.305553405921017]
Test Case: 714 | Input/Output: [[24.378493535069026 -1] 23.378493535069026]
Test Case: 715 | Input/Output: [[-8.745980877924893 15] 6.254019122075107]
Test Case: 716 | Input/Output: [[63.53183532962686 -16] 47.53183532962686]
Test Case: 717 | Input/Output: [[31.094037518822773 -52] -20.905962481177227]
Test Case: 718 | Input/Output: [[5.584586347707486 60] 65.58458634770749]
Test Case: 719 | Input/Output: [[-56.64880608035685 -59] -115.64880608035685]
Test Case: 720 | Input/Output: [[-48.09656411009276 -44] -92.09656411009276]
Test Case: 721 | Input/Output: [[73.93345482156312 0] 73.93345482156312]
Test Case: 722 | Input/Output: [[-66.94029620745138 -87] -153.94029620745138]
Test Case: 723 | Input/Output: [[36.67600750095005 89] 125.67600750095005]
Test Case: 724 | Input/Output: [[-23.630788275540723 -26] -49.63078827554072]
Test Case: 725 | Input/Output: [[14.545450548646514 70] 84.54545054864651]
Test Case: 726 | Input/Output: [[-13.046801896053779 -52] -65.04680189605378]
Test Case: 727 | Input/Output: [[-7.332204766542347 8] 0.6677952334576531]
Test Case: 728 | Input/Output: [[-97.58941236222039 15] -82.58941236222039]
Test Case: 729 | Input/Output: [[22.894419969653512 74] 96.89441996965351]
Test Case: 730 | Input/Output: [[-67.36208076019187 -20] -87.36208076019187]
Test Case: 731 | Input/Output: [[87.04817234197483 79] 166.04817234197483]
Test Case: 732 | Input/Output: [[-35.48146607711628 -27] -62.48146607711628]
Test Case: 733 | Input/Output: [[-90.74571923598495 46] -44.74571923598495]
Test Case: 734 | Input/Output: [[-46.54279968003037 -16] -62.54279968003037]
Test Case: 735 | Input/Output: [[85.3970787091832 93] 178.3970787091832]
Test Case: 736 | Input/Output: [[22.312958833407848 -97] -74.68704116659215]
Test Case: 737 | Input/Output: [[-5.98960283158803 21] 15.01039716841197]
Test Case: 738 | Input/Output: [[-50.58550996432456 42] -8.585509964324558]
Test Case: 739 | Input/Output: [[-18.063792264732285 99] 80.93620773526771]
Test Case: 740 | Input/Output: [[-0.8979787209700874 -38] -38.89797872097009]
Test Case: 741 | Input/Output: [[-9.683735084182103 -4] -13.683735084182103]
Test Case: 742 | Input/Output: [[-79.47231713217187 -79] -158.47231713217187]
Test Case: 743 | Input/Output: [[80.39466021334277 36] 116.39466021334277]
Test Case: 744 | Input/Output: [[-96.35628594327552 -30] -126.35628594327552]
Test Case: 745 | Input/Output: [[-8.034549454381136 52] 43.965450545618864]
Test Case: 746 | Input/Output: [[3.7678893011275676 53] 56.76788930112757]
Test Case: 747 | Input/Output: [[-6.22262124949313 -55] -61.22262124949313]
Test Case: 748 | Input/Output: [[58.302164279096814 59] 117.30216427909681]
Test Case: 749 | Input/Output: [[-2.293345147000082 -26] -28.293345147000082]
Test Case: 750 | Input/Output: [[-0.7837158346319058 26] 25.216284165368094]
Test Case: 751 | Input/Output: [[65.86794372362633 1] 66.86794372362633]
Test Case: 752 | Input/Output: [[-58.32260565402099 67] 8.67739434597901]
Test Case: 753 | Input/Output: [[77.64708652312822 89] 166.64708652312822]
Test Case: 754 | Input/Output: [[48.629481171577424 -64] -15.370518828422576]
Test Case: 755 | Input/Output: [[11.048416476400178 6] 17.048416476400178]
Test Case: 756 | Input/Output: [[-20.181193947671133 59] 38.81880605232887]
Test Case: 757 | Input/Output: [[-80.57663021725679 -62] -142.5766302172568]
Test Case: 758 | Input/Output: [[-23.70218810665969 41] 17.29781189334031]
Test Case: 759 | Input/Output: [[-28.597734677758567 37] 8.402265322241433]
Test Case: 760 | Input/Output: [[85.79433140235184 27] 112.79433140235184]
Test Case: 761 | Input/Output: [[-1.8124565621492934 76] 74.1875434378507]
Test Case: 762 | Input/Output: [[41.50082904957125 -46] -4.4991709504287485]
Test Case: 763 | Input/Output: [[39.22608701141888 50] 89.22608701141888]
Test Case: 764 | Input/Output: [[-56.20575683502131 -34] -90.2057568350213]
Test Case: 765 | Input/Output: [[-85.02208833063243 34] -51.02208833063243]
Test Case: 766 | Input/Output: [[93.03210520310807 23] 116.03210520310807]
Test Case: 767 | Input/Output: [[67.73278849477052 24] 91.73278849477052]
Test Case: 768 | Input/Output: [[69.79665464011634 -67] 2.796654640116344]
Test Case: 769 | Input/Output: [[-61.9307165797403 42] -19.9307165797403]
Test Case: 770 | Input/Output: [[-30.69525527259725 81] 50.30474472740275]
Test Case: 771 | Input/Output: [[-10.807042143772236 50] 39.192957856227764]
Test Case: 772 | Input/Output: [[68.39523583964802 -43] 25.395235839648024]
Test Case: 773 | Input/Output: [[-19.25482657748043 -16] -35.25482657748043]
Test Case: 774 | Input/Output: [[-2.1422384349428114 -91] -93.14223843494281]
Test Case: 775 | Input/Output: [[97.03000919524905 -43] 54.03000919524905]
Test Case: 776 | Input/Output: [[82.83154921396837 -69] 13.831549213968373]
Test Case: 777 | Input/Output: [[75.91160278192942 12] 87.91160278192942]
Test Case: 778 | Input/Output: [[-96.68810049109611 -79] -175.68810049109612]
Test Case: 779 | Input/Output: [[-57.19640592578619 18] -39.19640592578619]
Test Case: 780 | Input/Output: [[-41.701463958405526 -89] -130.70146395840553]
Test Case: 781 | Input/Output: [[-6.933071856446276 79] 72.06692814355372]
Test Case: 782 | Input/Output: [[45.90455392171856 -73] -27.09544607828144]
Test Case: 783 | Input/Output: [[-84.8272392776142 31] -53.8272392776142]
Test Case: 784 | Input/Output: [[-4.697289137020476 -69] -73.69728913702048]
Test Case: 785 | Input/Output: [[-72.48077814308797 -30] -102.48077814308797]
Test Case: 786 | Input/Output: [[37.45150923732368 -82] -44.54849076267632]
Test Case: 787 | Input/Output: [[-32.04265047466424 -58] -90.04265047466424]
Test Case: 788 | Input/Output: [[69.98709539770957 -49] 20.987095397709567]
Test Case: 789 | Input/Output: [[-24.325803031809684 -66] -90.32580303180968]
Test Case: 790 | Input/Output: [[-89.6793250775352 -14] -103.6793250775352]
Test Case: 791 | Input/Output: [[-15.20748032364287 -43] -58.20748032364287]
Test Case: 792 | Input/Output: [[-46.87603477777644 95] 48.12396522222356]
Test Case: 793 | Input/Output: [[19.811035996466515 53] 72.81103599646652]
Test Case: 794 | Input/Output: [[82.53614476014255 -32] 50.53614476014255]
Test Case: 795 | Input/Output: [[14.622669592084065 22] 36.622669592084065]
Test Case: 796 | Input/Output: [[-78.19332241179586 2] -76.19332241179586]
Test Case: 797 | Input/Output: [[-72.46371366078274 -97] -169.46371366078273]
Test Case: 798 | Input/Output: [[-28.625201368761438 -72] -100.62520136876144]
Test Case: 799 | Input/Output: [[63.00464028148224 -37] 26.00464028148224]
Test Case: 800 | Input/Output: [[-30.006149551988102 59] 28.993850448011898]
Test Case: 801 | Input/Output: [[-40.027631462421056 -58] -98.02763146242106]
Test Case: 802 | Input/Output: [[46.47031479328709 98] 144.4703147932871]
Test Case: 803 | Input/Output: [[47.4451368862573 18] 65.4451368862573]
Test Case: 804 | Input/Output: [[-63.193267911313924 5] -58.193267911313924]
Test Case: 805 | Input/Output: [[21.691210528239992 68] 89.69121052823999]
Test Case: 806 | Input/Output: [[-33.33570641015709 14] -19.335706410157087]
Test Case: 807 | Input/Output: [[15.011182360020257 46] 61.01118236002026]
Test Case: 808 | Input/Output: [[-2.711772595307721 -11] -13.711772595307721]
Test Case: 809 | Input/Output: [[-45.28565492880501 93] 47.71434507119499]
Test Case: 810 | Input/Output: [[-11.744163240867195 96] 84.2558367591328]
Test Case: 811 | Input/Output: [[16.979878792361475 0] 16.979878792361475]
Test Case: 812 | Input/Output: [[-46.60616567415319 50] 3.393834325846811]
Test Case: 813 | Input/Output: [[-26.14344716854862 -12] -38.14344716854862]
Test Case: 814 | Input/Output: [[-3.852927935219526 65] 61.147072064780474]
Test Case: 815 | Input/Output: [[-94.3521970048981 84] -10.352197004898102]
Test Case: 816 | Input/Output: [[-36.14431197097283 14] -22.14431197097283]
Test Case: 817 | Input/Output: [[97.64397840435953 87] 184.64397840435953]
Test Case: 818 | Input/Output: [[-34.949815094201114 18] -16.949815094201114]
Test Case: 819 | Input/Output: [[-4.39306682528256 -57] -61.39306682528256]
Test Case: 820 | Input/Output: [[27.591831782656158 -53] -25.408168217343842]
Test Case: 821 | Input/Output: [[44.95677567642184 49] 93.95677567642184]
Test Case: 822 | Input/Output: [[20.61293367240549 80] 100.61293367240549]
Test Case: 823 | Input/Output: [[53.59193079700154 100] 153.59193079700154]
Test Case: 824 | Input/Output: [[66.83853851294433 -47] 19.838538512944325]
Test Case: 825 | Input/Output: [[34.53813490957526 77] 111.53813490957526]
Test Case: 826 | Input/Output: [[-61.28004387543622 -62] -123.28004387543622]
Test Case: 827 | Input/Output: [[-75.33767473721369 78] 2.662325262786311]
Test Case: 828 | Input/Output: [[-62.68537830112724 -79] -141.68537830112723]
Test Case: 829 | Input/Output: [[7.35064123735954 -31] -23.64935876264046]
Test Case: 830 | Input/Output: [[18.093724305690074 -37] -18.906275694309926]
Test Case: 831 | Input/Output: [[4.715085217638858 42] 46.71508521763886]
Test Case: 832 | Input/Output: [[-62.60834026391473 -57] -119.60834026391473]
Test Case: 833 | Input/Output: [[75.04393578175132 -57] 18.043935781751316]
Test Case: 834 | Input/Output: [[25.454592032438384 -11] 14.454592032438384]
Test Case: 835 | Input/Output: [[-53.54295751519604 74] 20.457042484803956]
Test Case: 836 | Input/Output: [[-12.274033120051328 94] 81.72596687994867]
Test Case: 837 | Input/Output: [[-11.76578280965937 -3] -14.76578280965937]
Test Case: 838 | Input/Output: [[-46.832354360548976 -56] -102.83235436054898]
Test Case: 839 | Input/Output: [[-88.4289715285219 -68] -156.4289715285219]
Test Case: 840 | Input/Output: [[-15.541104606654855 63] 47.458895393345145]
Test Case: 841 | Input/Output: [[-95.73015577709441 -27] -122.73015577709441]
Test Case: 842 | Input/Output: [[72.68747106364191 31] 103.68747106364191]
Test Case: 843 | Input/Output: [[53.75128666313043 -48] 5.751286663130429]
Test Case: 844 | Input/Output: [[97.8366180492497 -39] 58.836618049249694]
Test Case: 845 | Input/Output: [[-28.048091869086832 73] 44.95190813091317]
Test Case: 846 | Input/Output: [[-76.08606267801039 -83] -159.0860626780104]
Test Case: 847 | Input/Output: [[-65.17737816643492 -81] -146.17737816643492]
Test Case: 848 | Input/Output: [[-66.16113066899665 -25] -91.16113066899665]
Test Case: 849 | Input/Output: [[63.67204026783489 85] 148.6720402678349]
Test Case: 850 | Input/Output: [[33.126611640513545 49] 82.12661164051354]
Test Case: 851 | Input/Output: [[-32.22152924398402 -36] -68.22152924398402]
Test Case: 852 | Input/Output: [[34.49674209035339 90] 124.4967420903534]
Test Case: 853 | Input/Output: [[-19.46404247455915 -48] -67.46404247455915]
Test Case: 854 | Input/Output: [[13.464130989676448 -10] 3.4641309896764483]
Test Case: 855 | Input/Output: [[6.447098483993969 -98] -91.55290151600603]
Test Case: 856 | Input/Output: [[12.547305745196738 -91] -78.45269425480326]
Test Case: 857 | Input/Output: [[-9.041104671427064 59] 49.958895328572936]
Test Case: 858 | Input/Output: [[-92.35191573155336 -84] -176.35191573155336]
Test Case: 859 | Input/Output: [[-30.034574420596115 -4] -34.034574420596115]
Test Case: 860 | Input/Output: [[51.67627106563086 -92] -40.32372893436914]
Test Case: 861 | Input/Output: [[-55.51917214982998 -4] -59.51917214982998]
Test Case: 862 | Input/Output: [[-7.766614133844513 -6] -13.766614133844513]
Test Case: 863 | Input/Output: [[-37.89422011847239 -38] -75.89422011847239]
Test Case: 864 | Input/Output: [[-91.08460698671401 19] -72.08460698671401]
Test Case: 865 | Input/Output: [[90.93681640742565 14] 104.93681640742565]
Test Case: 866 | Input/Output: [[37.10749323528816 -28] 9.10749323528816]
Test Case: 867 | Input/Output: [[-67.52118131047362 -75] -142.52118131047362]
Test Case: 868 | Input/Output: [[-35.320288247551844 88] 52.679711752448156]
Test Case: 869 | Input/Output: [[-53.044471120236224 -56] -109.04447112023622]
Test Case: 870 | Input/Output: [[-42.53514086748966 -57] -99.53514086748966]
Test Case: 871 | Input/Output: [[48.66886942176049 5] 53.66886942176049]
Test Case: 872 | Input/Output: [[93.07744926703583 6] 99.07744926703583]
Test Case: 873 | Input/Output: [[97.17820680914036 -55] 42.17820680914036]
Test Case: 874 | Input/Output: [[-20.547865203362022 -36] -56.54786520336202]
Test Case: 875 | Input/Output: [[63.89915319359213 -2] 61.89915319359213]
Test Case: 876 | Input/Output: [[26.469197212082676 -29] -2.530802787917324]
Test Case: 877 | Input/Output: [[-80.1402515971007 -82] -162.1402515971007]
Test Case: 878 | Input/Output: [[-27.817790934188764 -1] -28.817790934188764]
Test Case: 879 | Input/Output: [[-62.78400524447072 74] 11.21599475552928]
Test Case: 880 | Input/Output: [[-23.710428287609858 -73] -96.71042828760986]
Test Case: 881 | Input/Output: [[48.730820224699556 6] 54.730820224699556]
Test Case: 882 | Input/Output: [[56.47566472062249 59] 115.47566472062249]
Test Case: 883 | Input/Output: [[-78.69461393766207 52] -26.69461393766207]
Test Case: 884 | Input/Output: [[-94.11876057021773 68] -26.11876057021773]
Test Case: 885 | Input/Output: [[60.59839081442021 11] 71.59839081442021]
Test Case: 886 | Input/Output: [[48.60932098271638 5] 53.60932098271638]
Test Case: 887 | Input/Output: [[-92.93215692532743 -12] -104.93215692532743]
Test Case: 888 | Input/Output: [[-98.03724861946286 97] -1.0372486194628578]
Test Case: 889 | Input/Output: [[53.44456799763526 3] 56.44456799763526]
Test Case: 890 | Input/Output: [[-92.3577717775462 -36] -128.3577717775462]
Test Case: 891 | Input/Output: [[-78.82502891069345 -83] -161.82502891069345]
Test Case: 892 | Input/Output: [[-49.8399747123831 57] 7.160025287616897]
Test Case: 893 | Input/Output: [[-35.50981824746029 -33] -68.50981824746029]
Test Case: 894 | Input/Output: [[47.70578717452918 -78] -30.294212825470822]
Test Case: 895 | Input/Output: [[-23.515380295401698 -99] -122.5153802954017]
Test Case: 896 | Input/Output: [[77.50567647804883 -81] -3.4943235219511735]
Test Case: 897 | Input/Output: [[-32.600782668547694 89] 56.399217331452306]
Test Case: 898 | Input/Output: [[32.6483079664612 58] 90.6483079664612]
Test Case: 899 | Input/Output: [[-87.95730390792316 68] -19.957303907923162]
Test Case: 900 | Input/Output: [[-8.667549041697725 95] 86.33245095830227]
Test Case: 901 | Input/Output: [[28.32330919191523 0] 28.32330919191523]
Test Case: 902 | Input/Output: [[69.52043672139632 10] 79.52043672139632]
Test Case: 903 | Input/Output: [[83.70505651727987 -70] 13.705056517279871]
Test Case: 904 | Input/Output: [[2.6509281579800046 -90] -87.34907184202]
Test Case: 905 | Input/Output: [[21.66213166788708 50] 71.66213166788708]
Test Case: 906 | Input/Output: [[-69.47956290275636 20] -49.479562902756356]
Test Case: 907 | Input/Output: [[62.42831172925821 60] 122.42831172925821]
Test Case: 908 | Input/Output: [[-14.99769754936328 73] 58.00230245063672]
Test Case: 909 | Input/Output: [[62.058288754301714 59] 121.05828875430171]
Test Case: 910 | Input/Output: [[-61.49781356944788 -66] -127.49781356944789]
Test Case: 911 | Input/Output: [[-3.5190537158150192 -63] -66.51905371581502]
Test Case: 912 | Input/Output: [[22.74826745642757 -84] -61.25173254357243]
Test Case: 913 | Input/Output: [[-68.98755153739637 -99] -167.98755153739637]
Test Case: 914 | Input/Output: [[-24.32861472872429 63] 38.67138527127571]
Test Case: 915 | Input/Output: [[59.87277139131868 -81] -21.12722860868132]
Test Case: 916 | Input/Output: [[-8.41780404327406 -41] -49.41780404327406]
Test Case: 917 | Input/Output: [[-63.60195085725859 -67] -130.6019508572586]
Test Case: 918 | Input/Output: [[97.56420464842478 44] 141.56420464842478]
Test Case: 919 | Input/Output: [[-96.62353840029996 -39] -135.62353840029996]
Test Case: 920 | Input/Output: [[-61.56016340650892 -4] -65.56016340650892]
Test Case: 921 | Input/Output: [[-33.18948079946931 36] 2.810519200530692]
Test Case: 922 | Input/Output: [[-67.82253532507193 56] -11.822535325071925]
Test Case: 923 | Input/Output: [[-57.57303224404391 9] -48.57303224404391]
Test Case: 924 | Input/Output: [[66.71922218794415 62] 128.71922218794415]
Test Case: 925 | Input/Output: [[51.718901607712496 -9] 42.718901607712496]
Test Case: 926 | Input/Output: [[93.79365528301457 33] 126.79365528301457]
Test Case: 927 | Input/Output: [[37.01792201062008 -95] -57.98207798937992]
Test Case: 928 | Input/Output: [[72.56154445919859 -75] -2.4384555408014137]
Test Case: 929 | Input/Output: [[99.75405716831926 56] 155.75405716831926]
Test Case: 930 | Input/Output: [[50.857987819369725 -93] -42.142012180630275]
Test Case: 931 | Input/Output: [[73.34742475624614 34] 107.34742475624614]
Test Case: 932 | Input/Output: [[-21.499895912923407 59] 37.50010408707659]
Test Case: 933 | Input/Output: [[-9.090876380049167 -85] -94.09087638004917]
Test Case: 934 | Input/Output: [[52.61934530081126 16] 68.61934530081126]
Test Case: 935 | Input/Output: [[45.29081084056793 -85] -39.70918915943207]
Test Case: 936 | Input/Output: [[57.748077882654485 -28] 29.748077882654485]
Test Case: 937 | Input/Output: [[79.51897049421248 -7] 72.51897049421248]
Test Case: 938 | Input/Output: [[-67.76351864963219 0] -67.76351864963219]
Test Case: 939 | Input/Output: [[48.21128722749799 18] 66.21128722749799]
Test Case: 940 | Input/Output: [[-6.638934357173241 -64] -70.63893435717324]
Test Case: 941 | Input/Output: [[-44.6911133611797 -71] -115.6911133611797]
Test Case: 942 | Input/Output: [[3.2431242909707834 -17] -13.756875709029217]
Test Case: 943 | Input/Output: [[-92.29913266604808 -63] -155.29913266604808]
Test Case: 944 | Input/Output: [[22.649107516179768 -36] -13.350892483820232]
Test Case: 945 | Input/Output: [[-63.17809722264454 -14] -77.17809722264454]
Test Case: 946 | Input/Output: [[74.05283644057096 50] 124.05283644057096]
Test Case: 947 | Input/Output: [[74.77775252150636 26] 100.77775252150636]
Test Case: 948 | Input/Output: [[-86.23264224916898 35] -51.232642249168975]
Test Case: 949 | Input/Output: [[-91.05927473316856 -13] -104.05927473316856]
Test Case: 950 | Input/Output: [[-55.728295011978155 -80] -135.72829501197816]
Test Case: 951 | Input/Output: [[-42.59469850591526 40] -2.594698505915261]
Test Case: 952 | Input/Output: [[45.85677764574382 -78] -32.14322235425618]
Test Case: 953 | Input/Output: [[-1.8307987363868534 30] 28.169201263613147]
Test Case: 954 | Input/Output: [[-47.06992401606633 -33] -80.06992401606632]
Test Case: 955 | Input/Output: [[-84.04889377671054 81] -3.0488937767105426]
Test Case: 956 | Input/Output: [[39.767365434866235 71] 110.76736543486624]
Test Case: 957 | Input/Output: [[-96.15735262196958 53] -43.15735262196958]
Test Case: 958 | Input/Output: [[-10.408079384843674 -27] -37.408079384843674]
Test Case: 959 | Input/Output: [[-77.64829631019236 27] -50.648296310192364]
Test Case: 960 | Input/Output: [[-38.07944910869392 21] -17.07944910869392]
Test Case: 961 | Input/Output: [[-13.677207595897784 -10] -23.677207595897784]
Test Case: 962 | Input/Output: [[31.566420319810817 62] 93.56642031981082]
Test Case: 963 | Input/Output: [[-25.69880837305915 9] -16.69880837305915]
Test Case: 964 | Input/Output: [[-46.786949619975225 53] 6.213050380024775]
Test Case: 965 | Input/Output: [[-98.24568831961122 7] -91.24568831961122]
Test Case: 966 | Input/Output: [[54.927696858140195 -72] -17.072303141859805]
Test Case: 967 | Input/Output: [[14.237687600287401 -22] -7.762312399712599]
Test Case: 968 | Input/Output: [[-36.28884446516667 -23] -59.28884446516667]
Test Case: 969 | Input/Output: [[-86.94473230330213 76] -10.944732303302132]
Test Case: 970 | Input/Output: [[66.73707608303366 -6] 60.73707608303366]
Test Case: 971 | Input/Output: [[-56.43881522466299 -71] -127.43881522466299]
Test Case: 972 | Input/Output: [[-84.56160625589332 -17] -101.56160625589332]
Test Case: 973 | Input/Output: [[-99.69611750461111 43] -56.69611750461111]
Test Case: 974 | Input/Output: [[-30.192551308702264 97] 66.80744869129774]
Test Case: 975 | Input/Output: [[92.26778931713969 -79] 13.267789317139687]
Test Case: 976 | Input/Output: [[-81.68648457401633 11] -70.68648457401633]
Test Case: 977 | Input/Output: [[87.43683491800059 26] 113.43683491800059]
Test Case: 978 | Input/Output: [[-44.49462834357054 69] 24.50537165642946]
Test Case: 979 | Input/Output: [[60.34910096845377 -67] -6.650899031546231]
Test Case: 980 | Input/Output: [[-34.81303258998267 50] 15.186967410017331]
Test Case: 981 | Input/Output: [[-88.8811694124539 -96] -184.88116941245391]
Test Case: 982 | Input/Output: [[48.20511937726019 13] 61.20511937726019]
Test Case: 983 | Input/Output: [[29.796954395418794 -58] -28.203045604581206]
Test Case: 984 | Input/Output: [[-92.9585635579141 -81] -173.9585635579141]
Test Case: 985 | Input/Output: [[-57.84393568916819 99] 41.15606431083181]
Test Case: 986 | Input/Output: [[-48.351548075442594 90] 41.648451924557406]
Test Case: 987 | Input/Output: [[-85.39261869843762 92] 6.607381301562384]
Test Case: 988 | Input/Output: [[-56.04981079523712 20] -36.04981079523712]
Test Case: 989 | Input/Output: [[-57.52319641826593 59] 1.4768035817340674]
Test Case: 990 | Input/Output: [[84.51350978003936 1] 85.51350978003936]
Test Case: 991 | Input/Output: [[45.22904650708628 -34] 11.22904650708628]
Test Case: 992 | Input/Output: [[56.85741213659861 25] 81.85741213659861]
Test Case: 993 | Input/Output: [[-67.3518562238139 83] 15.648143776186103]
Test Case: 994 | Input/Output: [[-36.45872587814356 -4] -40.45872587814356]
Test Case: 995 | Input/Output: [[66.03965426363419 8] 74.03965426363419]
Test Case: 996 | Input/Output: [[75.23611706608293 56] 131.23611706608293]
Test Case: 997 | Input/Output: [[-30.368199414293187 50] 19.631800585706813]
Test Case: 998 | Input/Output: [[-41.17120335899007 -45] -86.17120335899007]
Test Case: 999 | Input/Output: [[82.81991857772579 10] 92.81991857772579]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -8 98 116 96 -38 -90 -12 -1 29 13 112 -59 108 20 -36 8
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_cos} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction in2} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_dup_items} {:instruction integer_min} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_max} {:instruction integer_pop} {:instruction integer_add} {:instruction float_tan} {:instruction float_div} {:instruction float_div} {:instruction float_div} {:instruction integer_swap} {:instruction integer_sub} {:instruction tagged_199} {:instruction in1} {:instruction integer_swap} {:instruction float_inc} {:instruction tagged_660} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_div} {:instruction integer_dec} {:instruction float_rot} {:instruction print_float} {:instruction float_dec} {:instruction float_flush} {:instruction float_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_min} {:instruction in1} {:instruction in1} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction float_flush} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_mult} {:instruction float_tan} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction 54} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_yankdup})
Best program: (float_dup_items float_cos float_inc integer_add integer_sub in2 integer_yank integer_swap float_dup_items integer_min float_dup_items integer_yankdup integer_stackdepth float_inc float_max integer_pop integer_add float_tan float_div float_div float_div integer_swap integer_sub tagged_199 in1 integer_swap float_inc tagged_660 float_yankdup print_integer float_sub integer_yankdup integer_mult float_stackdepth integer_pop float_div integer_dec float_rot print_float float_dec float_flush float_mod integer_mod float_dec float_yankdup integer_stackdepth integer_div integer_stackdepth integer_rot integer_dup_times float_dup float_min in1 in1 integer_dup_items float_swap integer_inc float_rot in2 float_flush float_add float_inc float_shove float_mult float_tan integer_dec float_sub integer_sub integer_sub integer_flush integer_dup_items 54 integer_inc float_swap integer_yankdup float_yankdup)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 17382.2305184
Median total errors in population: 25344.0
Error averages by case: (694.2549289999979 14.128 670.6995045999989 13.246 680.8795959000004 13.214 698.5773346999979 13.361 677.7677396999978 12.599 692.037047899999 13.418 681.8472538000005 13.312 700.352613200001 14.169 677.2846603999999 12.502 664.5865207999991 13.928 672.4860187000019 13.331 692.0339085000019 13.267 686.6983281000005 12.534 669.9009020999989 12.575 692.0254646000009 13.357 688.1186717999999 13.341 687.6305429999973 13.353 687.1503524000007 13.264 669.8846157000022 12.544 684.4008431000011 13.306 655.0483380999988 13.053 674.2521458000001 12.487 715.8045018999981 14.076 658.6885039000016 13.922 678.2861807 13.247)
Error minima by case: (2.4073 3 2.0E-4 1 0.4594 1 8.9194 3 0.0668 1 9.8969 3 0.2085 8 29.6666 2 0.2473 2 2.0174 8 1.5316 2 0.7725 2 8.5551 2 0.0 0 0.7391 2 21.2103 3 0.5307 2 0.4359 2 0.2644 2 1.4415 8 0.5605 8 0.4533 2 72.1974 3 0.4773 8 1.8327 2)
Average genome size in population (length): 51.061
Average program size in population (points): 52.061
Average percent parens in population: 0.041
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.329
Error (vector) diversity:			 0.358
Behavioral diversity:				 0.376
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1280486
--- Timings ---
Current time: 1529614831135 milliseconds
Total Time:           3.4 seconds
Initialization:       0.1 seconds,  3.4%
Reproduction:         0.6 seconds, 17.0%
Fitness Testing:      2.7 seconds, 79.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_cos} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction in2} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_dup_items} {:instruction integer_min} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_mult} {:instruction float_inc} {:instruction float_max} {:instruction integer_pop} {:instruction integer_add} {:instruction float_tan} {:instruction float_div} {:instruction float_div} {:instruction float_div} {:instruction integer_swap} {:instruction integer_sub} {:instruction tagged_199} {:instruction in1} {:instruction integer_swap} {:instruction float_inc} {:instruction tagged_660} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_rot} {:instruction print_float} {:instruction float_dec} {:instruction float_flush} {:instruction float_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_min} {:instruction in1} {:instruction in1} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction float_flush} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_mult} {:instruction float_tan} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction 54} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_yankdup})
Best program: (float_dup_items float_cos float_inc integer_add integer_sub in2 integer_yank integer_swap float_dup_items integer_min float_dup_items integer_yankdup float_mult float_inc float_max integer_pop integer_add float_tan float_div float_div float_div integer_swap integer_sub tagged_199 in1 integer_swap float_inc tagged_660 float_yankdup print_integer float_sub integer_yankdup integer_mult float_stackdepth integer_pop integer_rot integer_dec float_rot print_float float_dec float_flush float_mod integer_mod float_dec float_yankdup integer_stackdepth integer_div integer_stackdepth integer_rot integer_dup_times float_dup float_min in1 in1 integer_dup_items float_swap integer_inc float_rot in2 float_flush float_add float_inc float_shove float_mult float_tan integer_dec float_sub integer_sub integer_sub integer_flush integer_dup_items 54 integer_inc float_swap integer_yankdup float_yankdup)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 5986.949722599993
Median total errors in population: 2206.6039
Error averages by case: (247.38999709999837 11.441 198.77850699999814 10.613 216.86170489999964 10.526 266.398581099997 10.915 211.50576150000128 10.198 253.55420320000064 11.043 228.1380832000001 12.243 261.41867469999994 11.464 227.8197301000016 10.117 200.63730780000003 12.654 203.5478427 10.722 244.40831340000176 10.595 242.4682695000005 10.145 216.79127449999805 10.279 242.63163390000173 10.768 247.38420509999827 10.798 235.7038203000008 10.704 232.42199170000157 10.638 215.79405849999944 10.09 234.0474564000007 12.329 179.21564950000015 11.678 216.4739936000018 9.953 290.3621153000009 11.511 186.09484940000004 12.591 212.4226982000018 10.664)
Error minima by case: (11.2968 3 2.0E-4 1 1.4594 1 56.0806 3 0.0668 1 0.6314 3 0.2085 8 1.9332 2 3.7527 2 2.0174 8 1.5316 2 8.1171 2 17.7158 2 0.0 0 6.3621 2 28.7897 3 1.2861 2 0.4359 2 0.2644 2 1.4415 8 0.5605 8 0.8061 2 46.4747 3 0.4773 8 1.8327 2)
Average genome size in population (length): 56.435
Average program size in population (points): 57.435
Average percent parens in population: 0.024
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.502
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.292
Error (vector) diversity:			 0.312
Behavioral diversity:				 0.335
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2695261
--- Timings ---
Current time: 1529614835636 milliseconds
Total Time:           8.6 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.0 seconds, 35.2%
Fitness Testing:      4.2 seconds, 48.9%
Report:               1.3 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_cos} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction in2} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_dup_items} {:instruction integer_min} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_max} {:instruction integer_pop} {:instruction integer_add} {:instruction float_tan} {:instruction float_div} {:instruction float_div} {:instruction float_div} {:instruction integer_swap} {:instruction integer_sub} {:instruction tagged_199} {:instruction in1} {:instruction integer_swap} {:instruction float_inc} {:instruction tagged_660} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_div} {:instruction integer_dec} {:instruction float_rot} {:instruction print_float} {:instruction float_dec} {:instruction float_flush} {:instruction float_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_min} {:instruction in1} {:instruction in1} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction float_flush} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_mult} {:instruction float_tan} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction 54} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_yankdup})
Best program: (float_dup_items float_cos float_inc integer_add integer_sub in2 integer_yank integer_swap float_dup_items integer_min float_dup_items integer_yankdup integer_stackdepth float_inc float_max integer_pop integer_add float_tan float_div float_div float_div integer_swap integer_sub tagged_199 in1 integer_swap float_inc tagged_660 float_yankdup print_integer float_sub integer_yankdup integer_mult float_stackdepth integer_pop float_div integer_dec float_rot print_float float_dec float_flush float_mod integer_mod float_dec float_yankdup integer_stackdepth integer_div integer_stackdepth integer_rot integer_dup_times float_dup float_min in1 in1 integer_dup_items float_swap integer_inc float_rot in2 float_flush float_add float_inc float_shove float_mult float_tan integer_dec float_sub integer_sub integer_sub integer_flush integer_dup_items 54 integer_inc float_swap integer_yankdup float_yankdup)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4395.008384399995
Median total errors in population: 1270.0
Error averages by case: (188.37153369999967 7.025 137.5249809999994 6.046 160.75031380000019 5.488 187.49302229999952 6.603 160.1332776000003 5.808 175.19714819999973 6.637 209.02737949999974 12.718 181.63713249999992 6.437 188.72006300000027 5.559 160.27307680000013 12.489 141.24669150000045 6.103 185.47538230000038 6.103 162.0319289000002 5.684 138.2948993000001 5.903 181.57296860000056 6.072 173.83575179999949 6.535 166.49946540000025 6.037 149.91482709999988 6.076 172.47387549999996 5.758 199.0897311999997 13.178 132.64530679999987 10.881 157.98243580000013 5.586 200.22623460000025 7.103 141.15971130000008 12.428 159.0152459000002 6.159)
Error minima by case: (14.6738 3 1.1027 1 8.8673 1 58.0991 3 0.0668 1 41.1216 3 19.3944 9 41.9332 2 4.2289 2 2.9826 8 1.0605 2 11.4941 1 25.4634 2 0.0 0 9.7391 2 30.8082 3 1.7139 2 1.5641 2 16.7746 2 6.7017 9 0.0841 8 10.3371 2 72.1974 2 1.0454 8 2.5506 1)
Average genome size in population (length): 47.365
Average program size in population (points): 48.365
Average percent parens in population: 0.030
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.949
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.127
Error (vector) diversity:			 0.136
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3880661
--- Timings ---
Current time: 1529614839210 milliseconds
Total Time:          12.1 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.5 seconds, 37.3%
Fitness Testing:      5.7 seconds, 47.1%
Report:               1.8 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_pop} {:instruction float_div} {:instruction float_sub} {:instruction float_inc} {:instruction print_float} {:instruction integer_add} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_rot} {:instruction print_float} {:instruction float_dec} {:instruction float_flush} {:instruction float_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_min} {:instruction in1} {:instruction in1} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction float_flush} {:instruction float_add} {:instruction float_inc})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_pop float_div float_sub float_inc print_float integer_add float_yankdup print_integer float_sub integer_yankdup integer_mult float_stackdepth integer_pop integer_rot integer_dec float_rot print_float float_dec float_flush float_mod integer_mod float_dec float_yankdup integer_stackdepth integer_div integer_stackdepth integer_rot integer_dup_times float_dup float_min in1 in1 integer_dup_items float_swap integer_inc float_rot in2 float_flush float_add float_inc)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3851.4307172999997
Median total errors in population: 1248.0
Error averages by case: (177.4229838 4.492 117.11599139999998 3.356 134.35398830000005 2.786 163.62106159999996 4.346 135.0506985 3.272 148.87671209999996 4.331 196.5631796 12.167 160.91787349999998 3.773 176.98498380000004 3.34 150.12758000000002 12.258 121.6763838 3.502 173.7799302 3.503 133.2673991 3.514 107.09728240000003 3.089 168.3631279 3.518 149.56167699999997 4.337 147.6116755 3.53 123.35414670000002 3.509 155.7495794 3.393 188.00046820000003 12.988 115.83589610000001 10.413 135.9127699 3.376 177.93089190000003 4.469 125.86010800000001 12.291 133.32632859999998 3.515)
Error minima by case: (5.3262 3 6.0909 1 21.2931 1 55.5036 3 12.4926 1 39.5036 3 8.8954 9 21.9332 2 22.0 2 2.8163 7 10.8942 2 8.5059 1 22.5036 2 0.0 0 10.2609 2 40.5036 3 6.3531 2 3.0751 2 4.2508 2 1.174 9 4.0001 8 10.3371 2 66.8513 2 8.0528 9 15.709 1)
Average genome size in population (length): 40.219
Average program size in population (points): 41.219
Average percent parens in population: 0.034
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.442
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 83
Genome diversity (% unique Plush genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.043
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 4887011
--- Timings ---
Current time: 1529614842554 milliseconds
Total Time:          15.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         5.9 seconds, 37.9%
Fitness Testing:      7.2 seconds, 46.3%
Report:               2.3 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_cos} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction in2} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_dup_items} {:instruction integer_min} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_max} {:instruction integer_pop} {:instruction integer_add} {:instruction float_tan} {:instruction float_div} {:instruction float_div} {:instruction float_div} {:instruction integer_swap} {:instruction integer_sub} {:instruction tagged_199} {:instruction in1} {:instruction integer_swap} {:instruction float_inc} {:instruction tagged_660} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_div} {:instruction integer_dec} {:instruction float_rot} {:instruction print_float} {:instruction float_dec} {:instruction float_flush} {:instruction float_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_min} {:instruction in1} {:instruction in1} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction float_flush} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_mult} {:instruction float_tan} {:instruction print_float} {:instruction float_sub} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_yank} {:instruction 54} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_yankdup})
Best program: (float_dup_items float_cos float_inc integer_add integer_sub in2 integer_yank integer_swap float_dup_items integer_min float_dup_items integer_rot integer_stackdepth float_inc float_max integer_pop integer_add float_tan float_div float_div float_div integer_swap integer_sub tagged_199 in1 integer_swap float_inc tagged_660 float_yankdup print_integer float_sub integer_yankdup integer_mult float_stackdepth integer_pop float_div integer_dec float_rot print_float float_dec float_flush float_mod integer_mod float_dec float_yankdup integer_stackdepth integer_div integer_stackdepth integer_rot integer_dup_times float_dup float_min in1 in1 integer_dup_items float_swap integer_inc float_rot in2 float_flush float_add float_inc float_shove float_mult float_tan print_float float_sub integer_sub integer_sub integer_flush float_yank 54 integer_inc float_swap integer_yankdup float_yankdup)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4078.2278171999988
Median total errors in population: 1246.0
Error averages by case: (183.89062289999998 4.788 125.5081418999999 3.267 143.04763420000006 3.484 174.61706599999988 4.633 143.4160787000001 3.156 160.21595739999992 4.619 201.19008110000004 11.712 169.26593759999997 4.493 186.42083770000005 3.651 158.03800300000006 12.303 130.14610940000006 3.788 180.40530170000005 3.772 144.97457390000005 4.171 119.4118566 2.595 175.4141479000001 3.815 160.3141677999999 4.638 155.54375700000008 3.822 132.83312259999997 3.788 163.76361669999991 3.661 194.13578890000014 12.562 126.92921330000003 10.492 146.41706759999994 3.656 186.1396220000001 4.748 136.49689499999997 12.316 141.99021630000004 3.772)
Error minima by case: (55.6738 3 8.0 1 0.4594 1 61.0 3 8.3412 1 45.0 3 27.6056 7 55.0 2 22.0 1 5.4942 8 9.9395 2 52.4941 1 28.0 2 0.0 0 50.7391 2 16.9773 3 26.9332 2 14.0 2 27.5496 2 2.8331 10 5.4162 8 32.0 2 73.0 2 6.6891 9 5.1247 1)
Average genome size in population (length): 50.708
Average program size in population (points): 51.708
Average percent parens in population: 0.026
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.002875
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.041
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6155248
--- Timings ---
Current time: 1529614846093 milliseconds
Total Time:          19.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.4 seconds, 38.6%
Fitness Testing:      8.8 seconds, 46.1%
Report:               2.8 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_cos} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction in2} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_dup_items} {:instruction integer_min} {:instruction float_cos} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_max} {:instruction integer_pop} {:instruction integer_add} {:instruction float_tan} {:instruction float_div} {:instruction float_div} {:instruction float_div} {:instruction integer_swap} {:instruction integer_sub} {:instruction tagged_199} {:instruction in1} {:instruction integer_swap} {:instruction float_inc} {:instruction tagged_660} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_div} {:instruction integer_dec} {:instruction float_rot} {:instruction print_float} {:instruction float_dec} {:instruction float_flush} {:instruction float_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup})
Best program: (float_dup_items float_cos float_inc integer_add integer_sub in2 integer_yank integer_swap float_dup_items integer_min float_cos integer_yankdup integer_stackdepth float_inc float_max integer_pop integer_add float_tan float_div float_div float_div integer_swap integer_sub tagged_199 in1 integer_swap float_inc tagged_660 float_yankdup print_integer float_sub integer_yankdup integer_mult float_stackdepth integer_pop float_div integer_dec float_rot print_float float_dec float_flush float_mod integer_mod float_dec float_yankdup)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3810.6715919999974
Median total errors in population: 1246.0
Error averages by case: (175.01066559999992 4.809 115.58540299999986 3.003 132.9879245000001 3.789 163.9463070999999 4.651 131.6193035000001 2.903 149.2135444999999 4.628 188.39267150000012 11.277 161.1483391 4.806 173.57022200000006 3.683 145.5541388 12.222 120.30416780000013 3.818 171.39782970000007 3.793 133.78358450000007 4.465 108.09349740000005 2.076 166.40224090000012 3.839 149.03717139999983 4.632 146.83894390000003 3.84 124.9773919999999 3.808 152.6905926999999 3.684 181.3120161000002 12.139 114.49270470000012 10.41 134.0993618 3.668 179.39505390000005 4.763 123.99683329999998 12.21 130.11968230000002 3.786)
Error minima by case: (74.0 3 8.0 1 2.7245 1 38.0 3 29.0 1 45.0 3 0.8358 7 16.6877 2 4.3687 1 5.4942 9 13.0 2 70.0 1 28.0 2 0.0 0 64.0 2 46.0 3 26.9332 2 14.0 2 21.9626 2 1.8331 8 4.0001 8 21.2511 2 73.0 2 2.0101 6 27.0 1)
Average genome size in population (length): 57.213
Average program size in population (points): 58.213
Average percent parens in population: 0.021
Minimum age in population: 5.25
Maximum age in population: 9.3125
Average age in population: 7.526625
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 64
Genome diversity (% unique Plush genomes):	 0.754
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.754
Total error diversity:				 0.037
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7585848
--- Timings ---
Current time: 1529614849346 milliseconds
Total Time:          22.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.7 seconds, 38.6%
Fitness Testing:     10.4 seconds, 46.3%
Report:               3.3 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_cos} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction in2} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_dup_items} {:instruction integer_min} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_max} {:instruction integer_pop} {:instruction integer_add} {:instruction float_tan} {:instruction float_div} {:instruction float_div} {:instruction float_div} {:instruction integer_swap} {:instruction integer_sub} {:instruction tagged_199} {:instruction in1} {:instruction integer_swap} {:instruction float_inc} {:instruction tagged_660} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_inc} {:instruction integer_pop} {:instruction float_div} {:instruction integer_dec} {:instruction float_rot} {:instruction print_float} {:instruction float_dec} {:instruction float_flush} {:instruction float_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_dup})
Best program: (float_dup_items float_cos float_inc integer_add integer_sub in2 integer_yank integer_swap float_dup_items integer_min float_dup_items integer_yankdup integer_stackdepth float_inc float_max integer_pop integer_add float_tan float_div float_div float_div integer_swap integer_sub tagged_199 in1 integer_swap float_inc tagged_660 float_yankdup print_integer float_sub integer_yankdup integer_mult integer_inc integer_pop float_div integer_dec float_rot print_float float_dec float_flush float_mod integer_mod float_dec float_yankdup integer_stackdepth integer_div integer_stackdepth integer_rot integer_dup_times float_dup)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3333.986947199997
Median total errors in population: 1246.0
Error averages by case: (157.48646269999995 4.497 95.63421749999993 2.676 112.7458631000001 3.482 145.43335839999995 4.371 112.9487028 2.598 130.1584335999999 4.361 171.57641730000003 11.259 142.3034828 4.504 156.22918060000003 3.403 126.98556310000006 12.176 100.43701140000006 3.498 153.4939525 3.481 115.32487960000002 4.219 87.72318010000004 1.772 147.37237450000006 3.542 130.09783109999992 4.365 127.35693950000002 3.534 104.44301129999992 3.495 133.9957192 3.411 165.88180940000007 12.134 94.23310400000003 10.341 115.86048199999992 3.408 160.0044857000001 4.45 104.19648839999996 12.173 111.4189966 3.495)
Error minima by case: (60.0097 3 6.2083 1 28.0 1 38.0 2 29.0 1 0.6314 2 6.5173 7 55.0 2 46.1525 1 5.4942 8 10.2169 2 57.6502 1 17.7158 2 0.0 0 60.1403 2 16.9773 2 26.9332 2 14.0 2 13.0505 2 2.8331 8 0.8477 9 30.5937 2 46.4747 2 6.3664 8 27.0 1)
Average genome size in population (length): 57.165
Average program size in population (points): 58.165
Average percent parens in population: 0.021
Minimum age in population: 6.75
Maximum age in population: 10.9375
Average age in population: 9.025625
Median age in population: 9.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.797
Total error diversity:				 0.044
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 9015448
--- Timings ---
Current time: 1529614852720 milliseconds
Total Time:          25.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.1 seconds, 39.1%
Fitness Testing:     12.0 seconds, 46.3%
Report:               3.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_pop} {:instruction float_div} {:instruction float_sub} {:instruction float_inc} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_dec integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_pop float_div float_sub float_inc print_float integer_add in2 integer_min)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 4321.818845499998
Median total errors in population: 1246.0
Error averages by case: (193.36855869999994 5.025 135.28374349999987 3.227 154.34648000000004 4.009 184.82910149999992 4.841 152.72950320000004 3.111 171.0350077 4.825 208.4352277000001 11.321 179.6688694 5.029 195.19429590000004 3.872 165.4575965999999 12.261 139.90828900000005 4.034 189.85423570000012 4.003 155.58567290000008 4.641 129.95620210000004 2.312 184.93712510000006 4.059 170.42894009999983 4.833 166.2272364 4.057 144.66116800000003 4.023 173.04764219999998 3.875 201.33499200000014 12.172 135.07588960000004 10.467 155.90095710000006 3.867 197.46483010000003 4.976 144.47136729999994 12.246 151.5239137000001 4.006)
Error minima by case: (69.0133 3 8.0 1 28.0 1 38.0 2 29.0 1 45.0 2 26.3273 7 8.4759 2 71.0 1 4.9596 8 13.0 2 70.0 1 28.0 2 0.0 0 64.0 2 16.9773 2 26.9332 2 14.0 2 27.5496 2 2.8331 9 4.5473 8 32.0 2 73.0 2 2.0101 6 27.0 1)
Average genome size in population (length): 55.581
Average program size in population (points): 56.581
Average percent parens in population: 0.022
Minimum age in population: 8.125
Maximum age in population: 12.5
Average age in population: 10.539875
Median age in population: 10.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.036
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 10405448
--- Timings ---
Current time: 1529614855902 milliseconds
Total Time:          29.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.4 seconds, 39.3%
Fitness Testing:     13.5 seconds, 46.5%
Report:               4.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction in2} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_dup_items} {:instruction float_div} {:instruction float_div} {:instruction integer_swap} {:instruction integer_sub} {:instruction tagged_349} {:instruction in1} {:instruction integer_swap} {:instruction float_inc} {:instruction tagged_660} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_rot} {:instruction print_float} {:instruction float_dec} {:instruction float_flush} {:instruction float_mod} {:instruction integer_mod} {:instruction float_tan} {:instruction float_yankdup} {:instruction print_float} {:instruction float_dec} {:instruction float_flush} {:instruction float_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction in1} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction float_flush} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_mult} {:instruction float_tan} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction 54} {:instruction integer_inc})
Best program: (float_dup_items float_yankdup float_inc integer_add integer_sub in2 integer_yank integer_swap float_dup_items float_div float_div integer_swap integer_sub tagged_349 in1 integer_swap float_inc tagged_660 float_yankdup print_integer float_sub integer_yankdup integer_mult float_stackdepth integer_pop integer_rot integer_dec float_rot print_float float_dec float_flush float_mod integer_mod float_tan float_yankdup print_float float_dec float_flush float_mod integer_mod float_dec in1 integer_dup_items float_swap integer_inc float_rot in2 float_flush float_add float_inc float_shove float_mult float_tan integer_dec float_sub integer_sub integer_sub integer_flush integer_dup_items 54 integer_inc)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3580.174401899997
Median total errors in population: 1246.0
Error averages by case: (168.54867519999996 4.554 107.44059239999991 2.748 123.14651240000008 3.551 153.0865998 4.412 122.42212800000004 2.661 138.45826759999994 4.394 181.14327040000003 11.287 152.88389709999998 4.554 162.8372415 3.439 137.22403340000008 12.186 112.18587970000004 3.571 163.62441710000004 3.531 122.68031160000004 4.249 97.31637190000002 1.821 158.40516910000008 3.592 138.16946949999993 4.412 138.6419368 3.591 116.44068979999993 3.56 144.90595079999997 3.46 175.07309110000006 12.155 104.01786120000003 10.349 124.43504279999998 3.444 170.5664565 4.502 113.72947869999996 12.16 121.06705749999999 3.541)
Error minima by case: (30.6738 3 8.0 1 2.3434 1 38.0 2 6.4571 1 0.6314 2 27.6056 7 16.6877 2 71.0 1 5.4942 8 13.0 2 27.4941 1 17.7158 2 0.0 0 25.7391 2 16.9773 2 17.7139 2 14.0 2 10.8841 2 2.8331 9 4.5399 9 32.0 2 46.4747 2 2.0101 6 3.2406 1)
Average genome size in population (length): 54.254
Average program size in population (points): 55.254
Average percent parens in population: 0.023
Minimum age in population: 9.5625
Maximum age in population: 13.9453125
Average age in population: 11.99653125
Median age in population: 12.0234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.042
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 11762373
--- Timings ---
Current time: 1529614859222 milliseconds
Total Time:          32.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.7 seconds, 39.4%
Fitness Testing:     15.1 seconds, 46.7%
Report:               4.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_cos} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction in2} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_min} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction float_max} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_sub} {:instruction tagged_199} {:instruction in1} {:instruction integer_swap} {:instruction float_inc} {:instruction tagged_660} {:instruction float_yankdup} {:instruction print_integer} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_div} {:instruction integer_dec} {:instruction float_rot} {:instruction print_float} {:instruction float_dec} {:instruction float_flush} {:instruction float_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_dup})
Best program: (float_dup_items float_cos float_inc integer_add integer_sub in2 integer_yank integer_yank float_dup_items integer_min float_dup_items integer_yankdup integer_stackdepth integer_dup_items float_max integer_pop integer_pop integer_swap integer_sub tagged_199 in1 integer_swap float_inc tagged_660 float_yankdup print_integer integer_pop integer_yankdup integer_mult float_stackdepth integer_pop float_div integer_dec float_rot print_float float_dec float_flush float_mod integer_mod float_dec float_yankdup integer_stackdepth integer_div integer_stackdepth integer_rot integer_dup_times float_dup)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3846.973066399998
Median total errors in population: 1246.0
Error averages by case: (176.53430909999994 4.613 116.83509229999993 2.795 134.17491920000006 3.601 164.5775546 4.472 134.62471850000003 2.689 150.1949529999999 4.458 193.158685 11.344 161.05971970000002 4.604 176.68510469999995 3.486 147.96262240000004 12.252 121.28520550000006 3.619 172.3641838 3.585 135.04577620000003 4.311 109.34717610000003 1.842 167.16165000000007 3.633 150.59263249999992 4.461 147.39875280000004 3.636 124.39221119999996 3.612 154.20040929999996 3.494 186.40150759999997 12.213 116.17753250000003 10.412 136.86222719999998 3.492 178.04490269999997 4.568 125.84579749999997 12.236 133.02142299999997 3.596)
Error minima by case: (26.6738 3 8.0 1 28.0 1 61.0 3 29.0 1 0.6314 3 27.6056 7 55.0 2 6.7527 1 4.392 9 13.0 2 27.4941 1 17.7158 2 0.0 0 31.7391 2 40.7967 3 41.0 2 14.0 2 27.5496 2 2.8331 9 3.4527 9 32.0 2 46.4747 2 2.0454 9 27.0 1)
Average genome size in population (length): 52.56
Average program size in population (points): 53.56
Average percent parens in population: 0.024
Minimum age in population: 10.5625
Maximum age in population: 15.43359375
Average age in population: 13.48549609375
Median age in population: 13.544921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.039
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 13076873
--- Timings ---
Current time: 1529614862365 milliseconds
Total Time:          35.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.0 seconds, 39.5%
Fitness Testing:     16.6 seconds, 46.7%
Report:               4.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_flush} {:instruction tag_float_487} {:instruction integer_mult} {:instruction print_float} {:instruction print_integer} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_max} {:instruction tagged_199} {:instruction in1} {:instruction integer_swap})
Best program: (float_pop integer_rot float_cos integer_flush tag_float_487 integer_mult print_float print_integer float_shove in1 float_inc print_float integer_dup_times float_stackdepth float_shove float_max tagged_199 in1 integer_swap)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 3503.759473299997
Median total errors in population: 1246.0
Error averages by case: (162.55783719999994 4.577 102.6488517999999 2.76 118.34308580000013 3.581 152.6569579999999 4.442 118.33606900000005 2.665 137.50477749999988 4.434 176.7354899 11.282 148.3586504 4.597 164.08340130000002 3.48 135.3187949 12.204 107.87935020000009 3.59 158.9178074 3.576 121.40947000000003 4.292 95.57013690000004 1.826 154.06553680000013 3.627 136.91359569999983 4.442 133.49849520000004 3.624 110.89483929999992 3.588 141.71648839999992 3.48 169.74909670000005 12.152 104.54599230000007 10.381 122.47658589999995 3.47 165.7177212 4.547 114.24777149999997 12.215 117.21167 3.569)
Error minima by case: (50.3262 3 8.0 1 28.0 1 27.0806 3 21.3128 1 42.1031 3 5.3828 7 14.9332 2 12.6172 1 5.4942 8 6.0605 2 45.5059 1 28.0 2 0.0 0 35.2609 2 16.9773 3 2.7139 2 14.0 2 27.5496 2 2.8331 9 4.0001 8 7.1939 2 23.8513 2 6.6891 10 27.0 1)
Average genome size in population (length): 52.737
Average program size in population (points): 53.737
Average percent parens in population: 0.024
Minimum age in population: 11.5625
Maximum age in population: 16.7265625
Average age in population: 14.98302734375
Median age in population: 15.005859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.032
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 14395698
--- Timings ---
Current time: 1529614865596 milliseconds
Total Time:          38.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.4 seconds, 39.7%
Fitness Testing:     18.1 seconds, 46.7%
Report:               5.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_rot} {:instruction -15} {:instruction integer_flush} {:instruction tag_float_487} {:instruction integer_mult} {:instruction print_float} {:instruction print_integer} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction -60} {:instruction float_shove} {:instruction float_max} {:instruction tag_float_868})
Best program: (float_pop integer_rot -15 integer_flush tag_float_487 integer_mult print_float print_integer float_shove in1 float_inc print_float integer_dup_times -60 float_shove float_max tag_float_868)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 17
Size: 18
Percent parens: 0.056
--- Population Statistics ---
Average total errors in population: 3896.4602730999973
Median total errors in population: 1246.0
Error averages by case: (178.15288679999986 4.706 119.14330979999986 2.888 137.53949130000012 3.713 166.62653549999985 4.567 137.05534290000008 2.809 152.48844469999995 4.546 194.35017940000014 11.296 163.87466389999994 4.708 177.30052140000012 3.594 148.59051259999995 12.225 123.61388110000013 3.722 174.72596680000012 3.69 137.13552560000002 4.395 111.38816840000004 1.96 169.57938820000012 3.738 152.49612629999984 4.561 150.04767810000007 3.743 127.56232589999992 3.698 155.23856419999996 3.592 186.9154147000002 12.169 116.57607710000012 10.401 137.7761068 3.6 181.65745500000014 4.66 126.15209259999996 12.217 135.571614 3.704)
Error minima by case: (74.0 3 8.0 1 28.0 1 61.0 3 29.0 1 45.0 3 27.6056 7 16.6877 2 30.9217 1 5.4942 9 13.0 2 70.0 1 28.0 2 0.0 0 64.0 2 46.0 3 41.0 2 14.0 2 26.2478 2 2.8331 9 4.0001 7 15.3629 2 73.0 2 2.0101 6 27.0 1)
Average genome size in population (length): 50.807
Average program size in population (points): 51.807
Average percent parens in population: 0.025
Minimum age in population: 12.5625
Maximum age in population: 18.2548828125
Average age in population: 16.4298994140625
Median age in population: 16.44482421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.038
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 15666323
--- Timings ---
Current time: 1529614868671 milliseconds
Total Time:          41.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.7 seconds, 39.8%
Fitness Testing:     19.6 seconds, 46.7%
Report:               5.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_flush} {:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_flush} {:instruction tag_float_487} {:instruction integer_mult} {:instruction print_float} {:instruction print_integer} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_max} {:instruction tagged_199} {:instruction in1} {:instruction integer_swap})
Best program: (integer_mod float_pop float_pop integer_rot float_cos integer_flush integer_mod float_pop float_pop integer_inc in1 integer_rot float_cos integer_flush tag_float_487 integer_mult print_float print_integer float_shove in1 float_inc print_float integer_dup_times float_stackdepth float_shove float_max tagged_199 in1 integer_swap)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 3922.664322399998
Median total errors in population: 1246.0
Error averages by case: (179.12180479999992 4.688 119.13857889999991 2.885 135.8921464000001 3.692 168.56475779999988 4.55 136.39282940000004 2.786 154.07183820000003 4.531 194.75564870000002 11.346 164.020187 4.694 179.97615140000002 3.56 151.99570319999995 12.239 123.61715220000006 3.703 175.02058380000005 3.677 138.80317910000002 4.381 112.97849410000002 1.937 169.8199738000001 3.726 154.3866199999999 4.549 150.04884440000004 3.732 126.92287859999995 3.704 158.87666169999997 3.59 187.86460020000013 12.219 119.85057530000006 10.429 140.17088069999997 3.586 181.38433120000008 4.633 129.5025128 12.247 134.7313887 3.672)
Error minima by case: (22.6942 3 8.0 1 22.1602 1 61.0 3 29.0 1 45.0 3 10.1972 7 37.4227 2 48.95 1 5.4942 6 13.0 2 8.7763 1 28.0 2 0.0 0 5.6967 2 46.0 3 1.559 2 9.1893 2 10.2531 2 2.8331 8 2.6361 8 32.0 2 73.0 2 6.5705 9 27.0 1)
Average genome size in population (length): 49.062
Average program size in population (points): 50.062
Average percent parens in population: 0.025
Minimum age in population: 14.5859375
Maximum age in population: 19.71875
Average age in population: 17.8854384765625
Median age in population: 17.89404296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.033
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 16893323
--- Timings ---
Current time: 1529614871756 milliseconds
Total Time:          44.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.0 seconds, 40.1%
Fitness Testing:     21.0 seconds, 46.8%
Report:               5.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_cos} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction in2} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_dup_items} {:instruction integer_min} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_mult} {:instruction float_inc} {:instruction float_max} {:instruction integer_pop} {:instruction integer_add} {:instruction float_tan} {:instruction float_div} {:instruction float_div} {:instruction float_div} {:instruction integer_swap} {:instruction integer_sub} {:instruction tagged_199} {:instruction in1} {:instruction integer_swap} {:instruction float_inc} {:instruction tagged_660} {:instruction float_yankdup} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_div} {:instruction integer_dec} {:instruction float_rot} {:instruction print_float} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_div} {:instruction integer_dec} {:instruction float_rot} {:instruction print_float} {:instruction float_dec} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_cos} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_min} {:instruction in1} {:instruction in1} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction float_flush} {:instruction float_add})
Best program: (float_dup_items float_cos float_inc integer_add integer_sub in2 integer_yank integer_swap float_dup_items integer_min float_dup_items integer_yankdup float_mult float_inc float_max integer_pop integer_add float_tan float_div float_div float_div integer_swap integer_sub tagged_199 in1 integer_swap float_inc tagged_660 float_yankdup integer_mult float_stackdepth integer_pop float_div integer_dec float_rot print_float float_dec integer_yankdup integer_mult integer_stackdepth integer_pop float_div integer_dec float_rot print_float float_dec integer_inc float_mod integer_mod float_dec float_yankdup float_cos integer_div integer_stackdepth integer_rot integer_dup_times integer_rot float_min in1 in1 integer_dup_items float_swap integer_inc float_rot in2 float_flush float_add)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3899.867543899997
Median total errors in population: 1246.0
Error averages by case: (177.76366729999995 4.714 118.79640089999994 2.923 135.72134000000008 3.71 168.43200969999995 4.563 136.08226830000007 2.816 153.21874519999992 4.52 193.22657320000005 11.358 164.06290539999995 4.714 178.27749960000003 3.581 150.0009387 12.257 123.70097150000007 3.722 174.3189125 3.68 137.88744070000004 4.384 111.36021040000003 1.972 169.6891889000001 3.749 153.2802907999999 4.56 149.80265260000004 3.748 127.26272069999995 3.732 156.76285549999994 3.586 185.5099550000001 12.23 117.60458870000005 10.431 138.80932039999996 3.58 181.2032934 4.637 127.40163890000001 12.242 134.59315559999996 3.689)
Error minima by case: (22.5616 3 8.0 1 28.0 1 61.0 3 29.0 1 45.0 3 8.4924 7 49.8209 2 28.6487 1 5.4942 9 13.0 2 19.3818 1 28.0 2 0.0 0 17.6269 2 46.0 3 9.6017 2 6.3237 2 27.5496 2 2.8331 9 4.2817 9 32.0 2 50.2826 2 6.6891 10 27.0 1)
Average genome size in population (length): 47.361
Average program size in population (points): 48.361
Average percent parens in population: 0.026
Minimum age in population: 16.18359375
Maximum age in population: 21.28271484375
Average age in population: 19.37536669921875
Median age in population: 19.451416015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.037
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 18077973
--- Timings ---
Current time: 1529614875017 milliseconds
Total Time:          48.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.4 seconds, 40.3%
Fitness Testing:     22.4 seconds, 46.7%
Report:               6.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_cos} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction in2} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_dup_items} {:instruction integer_min} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_max} {:instruction integer_pop} {:instruction integer_add} {:instruction float_tan} {:instruction float_div} {:instruction float_tan} {:instruction float_sin} {:instruction float_div} {:instruction float_div} {:instruction integer_swap} {:instruction integer_sub} {:instruction tagged_199} {:instruction in1} {:instruction integer_swap} {:instruction float_inc} {:instruction tagged_660} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction integer_sub} {:instruction integer_dec} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction float_flush} {:instruction float_mod} {:instruction integer_mod} {:instruction print_float} {:instruction float_dec} {:instruction float_flush} {:instruction float_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup} {:instruction float_min} {:instruction in1} {:instruction in1} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction float_flush} {:instruction float_add} {:instruction float_inc} {:instruction integer_shove} {:instruction float_mult} {:instruction float_tan} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction 56} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_yankdup})
Best program: (float_yank float_cos float_inc integer_add integer_sub in2 integer_yank integer_swap float_dup_items integer_min float_dup_items integer_yankdup integer_stackdepth float_inc float_max integer_pop integer_add float_tan float_div float_tan float_sin float_div float_div integer_swap integer_sub tagged_199 in1 integer_swap float_inc tagged_660 float_yankdup print_integer float_sub integer_yankdup integer_mult float_stackdepth integer_pop integer_sub integer_dec integer_add print_float float_dec float_flush float_mod integer_mod print_float float_dec float_flush float_mod integer_mod float_dec float_yankdup integer_stackdepth integer_div integer_stackdepth integer_rot integer_dec float_dup float_min in1 in1 integer_dup_items float_swap integer_inc float_rot in2 float_flush float_add float_inc integer_shove float_mult float_tan integer_dec float_sub integer_sub integer_sub integer_flush integer_dup_items 56 integer_inc float_swap integer_yankdup float_yankdup)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3854.963430099998
Median total errors in population: 1246.0
Error averages by case: (176.6531886999999 4.558 117.63440269999991 2.715 133.89724420000007 3.537 164.77418919999997 4.419 134.47509690000007 2.621 150.44251069999996 4.406 193.36735430000016 11.351 161.42024579999998 4.54 177.49678770000006 3.43 149.91815799999998 12.262 122.08117030000008 3.551 173.10232560000009 3.517 135.26171250000002 4.261 107.60262410000003 1.794 167.92068720000006 3.579 150.90506659999994 4.42 147.96024990000006 3.58 124.70443349999995 3.551 155.64444409999996 3.441 185.83854100000013 12.234 116.92474960000006 10.42 137.0376365 3.438 178.37210510000006 4.494 126.81450969999997 12.243 132.82399619999998 3.528)
Error minima by case: (68.0133 3 8.0 1 28.0 1 61.0 3 29.0 1 45.0 3 27.6056 7 55.0 2 80.0 1 5.4942 10 13.0 2 70.0 1 28.0 2 0.0 0 64.0 2 46.0 3 41.0 2 14.0 2 27.5496 2 49.117 10 4.0896 9 32.0 2 73.0 2 6.3664 8 27.0 1)
Average genome size in population (length): 45.847
Average program size in population (points): 46.847
Average percent parens in population: 0.027
Minimum age in population: 18.23828125
Maximum age in population: 22.860107421875
Average age in population: 20.8314658203125
Median age in population: 20.86102294921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.032
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 19224598
--- Timings ---
Current time: 1529614878200 milliseconds
Total Time:          51.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.7 seconds, 40.4%
Fitness Testing:     23.8 seconds, 46.6%
Report:               6.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction 10} {:instruction float_cos} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_pop} {:instruction float_div} {:instruction float_sub} {:instruction float_inc} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot integer_div float_dup 10 float_cos float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_pop float_div float_sub float_inc print_float integer_add in2 integer_min)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 4230.062889699997
Median total errors in population: 1246.0
Error averages by case: (190.8506434999999 4.857 132.2600280999999 3.045 148.1461596 3.827 179.4252624999999 4.677 148.75259860000006 2.92 165.6719277 4.662 206.47477790000008 11.331 176.5082302 4.843 191.38836190000006 3.7 164.83498999999992 12.263 136.6622791000001 3.857 187.6472167000001 3.842 150.86324030000006 4.505 123.91560120000004 2.1 182.63979310000008 3.873 166.17435219999996 4.669 163.01846470000004 3.886 140.1059673 3.856 170.61829609999998 3.718 197.46567030000017 12.178 133.2624978000001 10.443 151.9664563000001 3.703 193.85053040000014 4.806 142.95524769999997 12.253 146.97629650000005 3.814)
Error minima by case: (28.8515 3 8.0 1 26.363 1 27.0806 2 29.0 1 42.1031 2 19.6056 7 14.9332 2 28.6487 1 5.4942 9 6.0605 2 25.6717 1 28.0 2 0.0 0 23.9168 2 29.7897 2 2.7139 2 12.6136 2 18.9819 2 2.8331 9 1.0268 8 4.3464 2 23.8513 2 4.9633 10 27.0 1)
Average genome size in population (length): 44.693
Average program size in population (points): 45.693
Average percent parens in population: 0.028
Minimum age in population: 19.5830078125
Maximum age in population: 24.38037109375
Average age in population: 22.32848333740234
Median age in population: 22.34854125976562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.736
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.036
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 20342298
--- Timings ---
Current time: 1529614881231 milliseconds
Total Time:          54.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.1 seconds, 40.5%
Fitness Testing:     25.2 seconds, 46.3%
Report:               7.1 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_cos} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_sub} {:instruction in2} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_dup_items} {:instruction integer_min} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_max} {:instruction integer_pop} {:instruction integer_add} {:instruction float_tan} {:instruction float_div} {:instruction float_div} {:instruction float_div} {:instruction integer_swap} {:instruction integer_sub} {:instruction tagged_199} {:instruction in1} {:instruction integer_swap} {:instruction float_inc} {:instruction tagged_660} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_dec} {:instruction float_flush} {:instruction float_mod})
Best program: (float_dup_items float_cos float_inc integer_mod integer_sub in2 integer_yank integer_swap float_dup_items integer_min integer_add integer_yankdup integer_stackdepth float_inc float_max integer_pop integer_add float_tan float_div float_div float_div integer_swap integer_sub tagged_199 in1 integer_swap float_inc tagged_660 float_yankdup print_integer float_sub integer_yankdup print_float float_dec float_flush float_mod)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 3481.028586799998
Median total errors in population: 1246.0
Error averages by case: (161.53743819999994 4.476 101.93740599999992 2.632 118.32655660000005 3.476 151.88474049999996 4.363 118.63145449999999 2.568 137.0983484999999 4.338 177.0691118 11.331 146.91960989999998 4.461 162.8310275 3.371 134.2987199000001 12.215 107.12283510000005 3.481 157.86512540000004 3.465 121.43100600000004 4.203 93.74070020000003 1.709 152.8638134000001 3.497 136.83550709999992 4.349 132.99235170000006 3.511 109.94124369999996 3.481 141.41568519999996 3.385 169.8145503 12.228 100.85096410000001 10.378 122.35738539999994 3.388 164.92603520000003 4.419 110.763743 12.218 117.1542276 3.476)
Error minima by case: (50.3262 3 8.0 1 28.0 1 27.0806 3 29.0 1 42.1031 3 1.6492 7 14.9332 2 57.4979 1 5.4942 8 6.0605 2 32.611 1 28.0 2 0.0 0 35.2609 2 16.9773 3 2.7139 2 14.0 2 1.7051 2 2.8331 10 5.0947 9 7.1939 2 23.8513 2 2.0101 6 27.0 1)
Average genome size in population (length): 43.326
Average program size in population (points): 44.326
Average percent parens in population: 0.029
Minimum age in population: 21.27767944335938
Maximum age in population: 25.65643310546875
Average age in population: 23.78329217529297
Median age in population: 23.81951904296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.041
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 21425898
--- Timings ---
Current time: 1529614884266 milliseconds
Total Time:          57.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.4 seconds, 40.7%
Fitness Testing:     26.6 seconds, 46.3%
Report:               7.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction float_cos} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction in2} {:instruction integer_min} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_max} {:instruction integer_pop} {:instruction integer_add} {:instruction float_tan} {:instruction float_swap} {:instruction float_div} {:instruction float_div} {:instruction integer_swap} {:instruction integer_yank} {:instruction tagged_349} {:instruction in1} {:instruction integer_swap} {:instruction float_inc} {:instruction tagged_660} {:instruction float_yankdup} {:instruction print_integer} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_rot} {:instruction print_float} {:instruction integer_mod} {:instruction float_tan} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_inc} {:instruction float_flush} {:instruction float_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction in1} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction float_flush} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction float_flush} {:instruction float_add} {:instruction float_div} {:instruction integer_min} {:instruction float_add} {:instruction float_tan} {:instruction float_mult} {:instruction integer_shove})
Best program: (integer_yank float_cos float_inc integer_add integer_sub in2 integer_min float_dup_items integer_yankdup integer_stackdepth float_inc float_max integer_pop integer_add float_tan float_swap float_div float_div integer_swap integer_yank tagged_349 in1 integer_swap float_inc tagged_660 float_yankdup print_integer print_integer float_sub integer_yankdup integer_sub float_stackdepth integer_pop integer_rot integer_dec float_rot print_float integer_mod float_tan float_yankdup integer_add integer_inc float_flush float_mod integer_mod float_dec in1 integer_dup_items float_swap integer_inc float_rot in2 float_flush integer_inc float_rot in2 float_flush float_add float_div integer_min float_add float_tan float_mult integer_shove)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4038.6906247999987
Median total errors in population: 1246.0
Error averages by case: (185.30864970000002 4.66 124.90097329999992 2.841 140.92120980000007 3.658 171.90876119999993 4.526 141.22484420000004 2.741 157.43319359999998 4.499 199.91070000000002 11.393 168.84304 4.642 182.85369939999998 3.531 156.6493476 12.259 129.55493600000008 3.669 179.91458260000002 3.652 142.28064450000005 4.368 117.4015227 1.9 174.62090950000007 3.686 157.67266749999996 4.514 155.10455070000003 3.69 132.61867729999992 3.667 163.6570633 3.565 194.41901080000005 12.238 123.79084800000004 10.438 145.13707620000002 3.555 185.1499066 4.599 133.40928089999997 12.264 139.8035294 3.646)
Error minima by case: (26.6738 3 8.0 1 10.1558 1 36.0 2 22.9788 1 0.6314 2 27.6056 9 16.6877 2 6.7527 1 6.5104 6 13.0 2 27.4941 1 3.3351 2 0.0 0 31.7391 2 16.9773 2 26.9332 2 14.0 2 27.5496 2 3.8331 9 2.6361 9 32.0 2 32.555 2 2.0101 6 8.7593 1)
Average genome size in population (length): 41.414
Average program size in population (points): 42.414
Average percent parens in population: 0.030
Minimum age in population: 22.54519653320312
Maximum age in population: 27.04510498046875
Average age in population: 25.29495863342285
Median age in population: 25.32781982421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.047
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 22461723
--- Timings ---
Current time: 1529614887491 milliseconds
Total Time:          60.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.7 seconds, 40.8%
Fitness Testing:     28.0 seconds, 46.4%
Report:               7.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 53631.0
Test mean error for best: 26.81550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.6738378996
Correct output: -31.2572440177 | Program output: -21.2572440177
Correct output: -46.4593524807 | Program output: -75.4593524807
Correct output: 151.0806466807 | Program output: 89.0806466807 
Correct output: -37.658849841  | Program output: -67.658849841 
Correct output: 134.1031121233 | Program output: 88.1031121233 
Correct output: 29.6055550185  | Program output: -69.3944449815
Correct output: -128.9331639543 | Program output: -71.9331639543
Correct output: 88.7526738391  | Program output: 7.7526738391  
Correct output: -27.9825817496 | Program output: 21.0174182504 
Correct output: -36.0605266238 | Program output: -21.0605266238
Correct output: -98.4940591545 | Program output: -26.4940591545
Correct output: 118.444904963  | Program output: 89.444904963  
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -30.7391381937
Correct output: 123.7897097488 | Program output: 76.7897097488 
Correct output: -88.7139415536 | Program output: -45.7139415536
Correct output: -85.4359203887 | Program output: -69.4359203887
Correct output: 29.5496488004  | Program output: 84.5496488004 
Correct output: 69.5585020781  | Program output: -19.4414979219
Correct output: -9.5473433631  | Program output: 4.4526566369  
Correct output: 73.1938622402  | Program output: 40.1938622402 
Correct output: -173.8513267506 | Program output: -98.8513267506
Correct output: -16.4772789847 | Program output: 8.5227210153  
Correct output: -40.8753187944 | Program output: -68.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction in2} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_dup_items} {:instruction integer_min} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction float_inc} {:instruction print_float} {:instruction integer_add} {:instruction float_yankdup} {:instruction print_integer} {:instruction integer_sub} {:instruction tagged_199} {:instruction in1} {:instruction integer_swap} {:instruction float_inc} {:instruction tagged_660} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_div} {:instruction integer_dec} {:instruction float_rot} {:instruction print_float} {:instruction float_div} {:instruction integer_dec} {:instruction float_rot} {:instruction print_float} {:instruction float_dec} {:instruction float_dec} {:instruction float_flush} {:instruction float_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_min} {:instruction in1} {:instruction in1} {:instruction in1} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction float_flush} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_mult} {:instruction float_tan} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_sub} {:instruction integer_sub})
Best program: (float_cos float_inc integer_add integer_sub in2 integer_yank integer_swap float_dup_items integer_min float_dup_items float_dup_times float_inc print_float integer_add float_yankdup print_integer integer_sub tagged_199 in1 integer_swap float_inc tagged_660 float_yankdup print_integer float_sub integer_yankdup integer_mult float_stackdepth integer_pop float_div integer_dec float_rot print_float float_div integer_dec float_rot print_float float_dec float_dec float_flush float_mod integer_mod float_dec float_yankdup integer_stackdepth integer_div float_yank integer_rot integer_dup_times float_dup float_min in1 in1 in1 integer_dup_items integer_dup_items float_swap integer_inc float_rot in2 float_flush float_add float_inc float_shove float_mult float_tan integer_dec float_sub integer_sub integer_sub)
Errors: [76.0 3 10.0 1 29.0 2 62.0 3 30.0 1 46.0 3 99.0 11 57.0 3 81.0 2 49.0 12 15.0 2 72.0 2 29.0 3 0.0 0 66.0 2 47.0 3 43.0 2 16.0 2 55.0 2 89.0 12 14.0 10 33.0 2 75.0 3 25.0 12 28.0 2]
Total: 1246.0
Mean: 24.92
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4141.333310699998
Median total errors in population: 1246.0
Error averages by case: (187.81877529999994 4.662 128.19862559999996 2.84 146.89297290000002 3.654 177.28862259999994 4.523 147.66348520000005 2.728 162.15106319999998 4.504 205.46114370000004 11.392 172.9540723 4.648 187.22131430000005 3.521 160.3750235 12.272 132.86239780000002 3.669 183.65137410000008 3.646 146.63949920000002 4.364 119.69858790000002 1.88 178.76666790000007 3.692 162.24005729999993 4.516 159.44500880000004 3.698 136.77181259999998 3.668 167.05832239999998 3.548 197.50414400000003 12.245 126.0626195 10.444 149.15320920000005 3.533 189.33555030000002 4.606 135.98997429999997 12.284 145.93898680000007 3.653)
Error minima by case: (26.6738 3 8.0 1 28.0 1 61.0 3 22.6588 1 0.6314 3 25.3944 7 55.0 2 6.7527 1 5.2528 9 13.0 2 27.4941 1 17.7158 2 0.0 0 31.7391 2 16.9773 3 26.9332 2 14.0 2 25.4504 2 14.5585 9 3.3989 9 18.1939 2 46.4747 2 1.4773 9 25.8753 1)
Average genome size in population (length): 40.535
Average program size in population (points): 41.535
Average percent parens in population: 0.030
Minimum age in population: 23.54519653320312
Maximum age in population: 28.58918762207031
Average age in population: 26.76305442810059
Median age in population: 26.78564834594727
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.702
Total error diversity:				 0.038
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 23475673
--- Timings ---
Current time: 1529614890625 milliseconds
Total Time:          63.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.0 seconds, 40.8%
Fitness Testing:     29.4 seconds, 46.2%
Report:               8.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 63066.55339999998
Test mean error for best: 31.53328
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.685602854 
Correct output: -31.2572440177 | Program output: -38.0767851601
Correct output: -46.4593524807 | Program output: -85.5585454711
Correct output: 151.0806466807 | Program output: 162.3345767724
Correct output: -37.658849841  | Program output: -109.1396059411
Correct output: 134.1031121233 | Program output: 110.5239585133
Correct output: 29.6055550185  | Program output: -72.4027014687
Correct output: -128.9331639543 | Program output: -101.565211435
Correct output: 88.7526738391  | Program output: 11.7524525667 
Correct output: -27.9825817496 | Program output: 22.6614967324 
Correct output: -36.0605266238 | Program output: -39.6776825264
Correct output: -98.4940591545 | Program output: -35.2770068087
Correct output: 118.444904963  | Program output: 140.9764577566
Correct output: 90.2245669646  | Program output: 94.5666699187 
Correct output: -96.7391381937 | Program output: -53.4289376992
Correct output: 123.7897097488 | Program output: 126.8214712613
Correct output: -88.7139415536 | Program output: -75.8205234084
Correct output: -85.4359203887 | Program output: -71.6464236328
Correct output: 29.5496488004  | Program output: 88.2709253493 
Correct output: 69.5585020781  | Program output: -19.4460681929
Correct output: -9.5473433631  | Program output: 6.9523615057  
Correct output: 73.1938622402  | Program output: 40.3072453402 
Correct output: -173.8513267506 | Program output: -139.1502975584
Correct output: -16.4772789847 | Program output: 8.9389142716  
Correct output: -40.8753187944 | Program output: -92.3243435552
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_inc} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_inc print_float integer_add in2 integer_min)
Errors: [75.9882 11 6.8195 10 39.0992 10 11.2539 11 71.4808 11 23.5792 9 102.0083 11 27.368 11 77.0002 9 50.6441 11 3.6172 10 63.2171 11 22.5316 10 4.3421 9 43.3102 10 3.0318 11 12.8934 12 13.7895 10 58.7213 12 89.0046 12 16.4997 11 32.8866 9 34.701 9 25.4162 12 51.449 11]
Total: 1223.6527
Mean: 24.473055
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 3924.8280002999986
Median total errors in population: 1246.0
Error averages by case: (178.48130499999994 4.674 119.62228129999993 2.848 137.89954210000002 3.677 167.80290959999994 4.535 137.57834440000005 2.746 153.49578459999998 4.5 196.35749470000005 11.435 162.92877579999998 4.662 180.67138300000005 3.529 151.99413419999996 12.312 124.27958340000005 3.678 174.94883770000004 3.665 138.14399060000005 4.373 112.54057650000004 1.896 169.7612004000001 3.695 153.56940619999995 4.521 149.9224905 3.713 127.06767539999997 3.679 158.0919692 3.557 188.40842970000006 12.296 120.52369030000004 10.482 139.88552829999998 3.548 180.04647240000003 4.607 130.169459 12.306 136.042736 3.66)
Error minima by case: (26.6738 3 6.8195 1 28.0 1 11.2539 2 29.0 1 23.5792 2 27.6056 9 12.4439 2 6.7527 1 6.456 8 3.6172 2 27.4941 1 22.5316 2 0.0 0 31.7391 2 3.0318 2 3.7139 2 13.7895 2 7.5496 2 2.8331 9 1.7332 8 6.1939 2 14.9818 2 2.0101 6 27.0 1)
Average genome size in population (length): 39.232
Average program size in population (points): 40.232
Average percent parens in population: 0.032
Minimum age in population: 24.54519653320312
Maximum age in population: 29.97283935546875
Average age in population: 28.19684145736694
Median age in population: 28.25676345825195
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.037
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 24456873
--- Timings ---
Current time: 1529614893512 milliseconds
Total Time:          66.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.3 seconds, 40.8%
Fitness Testing:     30.8 seconds, 46.1%
Report:               8.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 63066.55339999998
Test mean error for best: 31.53328
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.685602854 
Correct output: -31.2572440177 | Program output: -38.0767851601
Correct output: -46.4593524807 | Program output: -85.5585454711
Correct output: 151.0806466807 | Program output: 162.3345767724
Correct output: -37.658849841  | Program output: -109.1396059411
Correct output: 134.1031121233 | Program output: 110.5239585133
Correct output: 29.6055550185  | Program output: -72.4027014687
Correct output: -128.9331639543 | Program output: -101.565211435
Correct output: 88.7526738391  | Program output: 11.7524525667 
Correct output: -27.9825817496 | Program output: 22.6614967324 
Correct output: -36.0605266238 | Program output: -39.6776825264
Correct output: -98.4940591545 | Program output: -35.2770068087
Correct output: 118.444904963  | Program output: 140.9764577566
Correct output: 90.2245669646  | Program output: 94.5666699187 
Correct output: -96.7391381937 | Program output: -53.4289376992
Correct output: 123.7897097488 | Program output: 126.8214712613
Correct output: -88.7139415536 | Program output: -75.8205234084
Correct output: -85.4359203887 | Program output: -71.6464236328
Correct output: 29.5496488004  | Program output: 88.2709253493 
Correct output: 69.5585020781  | Program output: -19.4460681929
Correct output: -9.5473433631  | Program output: 6.9523615057  
Correct output: 73.1938622402  | Program output: 40.3072453402 
Correct output: -173.8513267506 | Program output: -139.1502975584
Correct output: -16.4772789847 | Program output: 8.9389142716  
Correct output: -40.8753187944 | Program output: -92.3243435552
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_inc} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_inc print_float integer_add in2 integer_min)
Errors: [75.9882 11 6.8195 10 39.0992 10 11.2539 11 71.4808 11 23.5792 9 102.0083 11 27.368 11 77.0002 9 50.6441 11 3.6172 10 63.2171 11 22.5316 10 4.3421 9 43.3102 10 3.0318 11 12.8934 12 13.7895 10 58.7213 12 89.0046 12 16.4997 11 32.8866 9 34.701 9 25.4162 12 51.449 11]
Total: 1223.6527
Mean: 24.473055
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 4093.8107624999984
Median total errors in population: 1246.0
Error averages by case: (185.03069679999996 4.75 126.02609099999988 2.938 145.05545840000002 3.772 175.66870459999993 4.619 144.54937200000006 2.842 161.44258239999996 4.573 202.96910090000003 11.399 169.46775959999997 4.736 186.99450050000002 3.61 157.56010969999997 12.262 131.09541200000007 3.751 181.47878910000009 3.738 145.39592590000004 4.452 119.27264790000001 1.989 176.64333670000008 3.776 160.4727360999999 4.607 156.41436380000002 3.785 134.13201819999992 3.756 163.69684909999998 3.639 195.56877480000009 12.247 126.51578910000005 10.465 147.0972958 3.624 185.86295990000002 4.668 135.2463251 12.276 144.12516310000004 3.754)
Error minima by case: (26.6738 3 6.8195 1 28.0 1 11.2539 3 29.0 1 23.5792 3 4.734 7 21.6929 2 6.7527 1 5.4942 8 3.6172 2 27.4941 1 22.5316 2 0.0 0 31.7391 2 3.0318 3 12.8934 2 12.0823 2 19.5496 2 2.8331 9 3.4527 9 19.8754 2 23.2228 2 6.6891 10 27.0 1)
Average genome size in population (length): 37.59
Average program size in population (points): 38.59
Average percent parens in population: 0.033
Minimum age in population: 27.02220153808594
Maximum age in population: 31.69073867797852
Average age in population: 29.68484923553467
Median age in population: 29.69584369659424
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.043
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 25396873
--- Timings ---
Current time: 1529614896539 milliseconds
Total Time:          69.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.5 seconds, 41.0%
Fitness Testing:     32.1 seconds, 46.1%
Report:               8.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 63066.55339999998
Test mean error for best: 31.53328
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.685602854 
Correct output: -31.2572440177 | Program output: -38.0767851601
Correct output: -46.4593524807 | Program output: -85.5585454711
Correct output: 151.0806466807 | Program output: 162.3345767724
Correct output: -37.658849841  | Program output: -109.1396059411
Correct output: 134.1031121233 | Program output: 110.5239585133
Correct output: 29.6055550185  | Program output: -72.4027014687
Correct output: -128.9331639543 | Program output: -101.565211435
Correct output: 88.7526738391  | Program output: 11.7524525667 
Correct output: -27.9825817496 | Program output: 22.6614967324 
Correct output: -36.0605266238 | Program output: -39.6776825264
Correct output: -98.4940591545 | Program output: -35.2770068087
Correct output: 118.444904963  | Program output: 140.9764577566
Correct output: 90.2245669646  | Program output: 94.5666699187 
Correct output: -96.7391381937 | Program output: -53.4289376992
Correct output: 123.7897097488 | Program output: 126.8214712613
Correct output: -88.7139415536 | Program output: -75.8205234084
Correct output: -85.4359203887 | Program output: -71.6464236328
Correct output: 29.5496488004  | Program output: 88.2709253493 
Correct output: 69.5585020781  | Program output: -19.4460681929
Correct output: -9.5473433631  | Program output: 6.9523615057  
Correct output: 73.1938622402  | Program output: 40.3072453402 
Correct output: -173.8513267506 | Program output: -139.1502975584
Correct output: -16.4772789847 | Program output: 8.9389142716  
Correct output: -40.8753187944 | Program output: -92.3243435552
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_inc} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_inc print_float integer_add in2 integer_min)
Errors: [75.9882 11 6.8195 10 39.0992 10 11.2539 11 71.4808 11 23.5792 9 102.0083 11 27.368 11 77.0002 9 50.6441 11 3.6172 10 63.2171 11 22.5316 10 4.3421 9 43.3102 10 3.0318 11 12.8934 12 13.7895 10 58.7213 12 89.0046 12 16.4997 11 32.8866 9 34.701 9 25.4162 12 51.449 11]
Total: 1223.6527
Mean: 24.473055
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 3740.6345396999977
Median total errors in population: 1246.0
Error averages by case: (171.839921 4.747 112.6621584999999 2.941 131.2373424 3.731 159.1499251 4.614 131.91174500000008 2.88 146.1772927999999 4.539 190.38752059999996 11.291 155.18667679999996 4.734 173.39008090000013 3.604 145.59053920000005 12.194 116.84498229999997 3.751 168.01615400000009 3.761 131.09960980000005 4.436 102.03343099999998 1.998 162.2776629000002 3.774 145.57710489999985 4.61 141.95753340000005 3.836 119.67831829999992 3.747 151.6279938 3.704 182.41695789999997 12.168 110.38488740000001 10.404 133.36688239999995 3.6 171.81252900000007 4.636 120.44472180000005 12.2 129.89656849999992 3.766)
Error minima by case: (48.3262 3 6.8195 1 29.0 1 11.2539 3 4.8219 1 23.5792 3 27.6056 7 21.0668 2 71.0 2 5.4942 10 3.6172 2 51.5059 1 22.5316 2 0.0 0 43.3102 2 3.0318 3 12.8934 2 13.7895 2 26.8284 2 2.8331 9 5.4162 9 32.8866 2 22.8513 2 6.6891 8 16.4263 1)
Average genome size in population (length): 35.14
Average program size in population (points): 36.14
Average percent parens in population: 0.035
Minimum age in population: 28.69481658935547
Maximum age in population: 33.19711208343506
Average age in population: 31.16253888225555
Median age in population: 31.21651077270508
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.674
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.674
Total error diversity:				 0.031
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 26275723
--- Timings ---
Current time: 1529614899460 milliseconds
Total Time:          72.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.8 seconds, 41.0%
Fitness Testing:     33.5 seconds, 46.1%
Report:               9.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 63066.55339999998
Test mean error for best: 31.53328
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -25.685602854 
Correct output: -31.2572440177 | Program output: -38.0767851601
Correct output: -46.4593524807 | Program output: -85.5585454711
Correct output: 151.0806466807 | Program output: 162.3345767724
Correct output: -37.658849841  | Program output: -109.1396059411
Correct output: 134.1031121233 | Program output: 110.5239585133
Correct output: 29.6055550185  | Program output: -72.4027014687
Correct output: -128.9331639543 | Program output: -101.565211435
Correct output: 88.7526738391  | Program output: 11.7524525667 
Correct output: -27.9825817496 | Program output: 22.6614967324 
Correct output: -36.0605266238 | Program output: -39.6776825264
Correct output: -98.4940591545 | Program output: -35.2770068087
Correct output: 118.444904963  | Program output: 140.9764577566
Correct output: 90.2245669646  | Program output: 94.5666699187 
Correct output: -96.7391381937 | Program output: -53.4289376992
Correct output: 123.7897097488 | Program output: 126.8214712613
Correct output: -88.7139415536 | Program output: -75.8205234084
Correct output: -85.4359203887 | Program output: -71.6464236328
Correct output: 29.5496488004  | Program output: 88.2709253493 
Correct output: 69.5585020781  | Program output: -19.4460681929
Correct output: -9.5473433631  | Program output: 6.9523615057  
Correct output: 73.1938622402  | Program output: 40.3072453402 
Correct output: -173.8513267506 | Program output: -139.1502975584
Correct output: -16.4772789847 | Program output: 8.9389142716  
Correct output: -40.8753187944 | Program output: -92.3243435552
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_inc} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_inc print_float integer_add in2 integer_min)
Errors: [75.9882 11 6.8195 10 39.0992 10 11.2539 11 71.4808 11 23.5792 9 102.0083 11 27.368 11 77.0002 9 50.6441 11 3.6172 10 63.2171 11 22.5316 10 4.3421 9 43.3102 10 3.0318 11 12.8934 12 13.7895 10 58.7213 12 89.0046 12 16.4997 11 32.8866 9 34.701 9 25.4162 12 51.449 11]
Total: 1223.6527
Mean: 24.473055
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 3355.9164072999997
Median total errors in population: 1246.0
Error averages by case: (159.24019000000033 5.734 95.9247111999997 4.048 116.36035599999967 4.729 135.9448487999999 5.618 121.33099550000036 4.141 126.3266150999993 5.25 175.77704049999963 11.267 136.66151640000018 5.72 157.4948466999999 4.458 129.83314130000045 12.015 99.04846049999962 4.729 152.14677119999982 4.892 113.51897210000025 5.323 89.72744889999984 3.094 144.28627270000075 4.746 122.99644309999957 5.602 122.84633250000014 5.098 104.3784961999998 4.736 137.60566360000027 4.991 168.38374369999943 12.142 97.17220210000009 10.492 117.88080649999976 4.461 151.77797330000013 5.338 106.94491480000043 12.154 116.63464459999948 4.895)
Error minima by case: (73.9703 3 6.8195 1 28.0 1 11.2539 3 29.0 1 0.6314 3 27.4327 8 16.6877 2 43.1541 1 6.3163 9 3.6172 2 63.2171 1 17.7158 2 0.0 0 43.3102 2 3.0318 3 12.8934 2 13.7527 2 27.5496 2 2.8331 10 5.4107 9 32.0 2 34.701 2 2.0101 6 27.0 1)
Average genome size in population (length): 32.096
Average program size in population (points): 33.096
Average percent parens in population: 0.037
Minimum age in population: 29.95808219909668
Maximum age in population: 34.56059455871582
Average age in population: 32.64779338741302
Median age in population: 32.68789958953857
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 119
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.035
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 27078348
--- Timings ---
Current time: 1529614902311 milliseconds
Total Time:          75.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.1 seconds, 41.2%
Fitness Testing:     34.8 seconds, 46.1%
Report:               9.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 63027.09099999999
Test mean error for best: 31.51355
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -26.685602854 
Correct output: -31.2572440177 | Program output: -39.0767851601
Correct output: -46.4593524807 | Program output: -86.5585454711
Correct output: 151.0806466807 | Program output: 161.3345767724
Correct output: -37.658849841  | Program output: -110.1396059411
Correct output: 134.1031121233 | Program output: 109.5239585133
Correct output: 29.6055550185  | Program output: -73.4027014687
Correct output: -128.9331639543 | Program output: -102.565211435
Correct output: 88.7526738391  | Program output: 10.7524525667 
Correct output: -27.9825817496 | Program output: 21.6614967324 
Correct output: -36.0605266238 | Program output: -40.6776825264
Correct output: -98.4940591545 | Program output: -36.2770068087
Correct output: 118.444904963  | Program output: 139.9764577566
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -54.4289376992
Correct output: 123.7897097488 | Program output: 125.8214712613
Correct output: -88.7139415536 | Program output: -76.8205234084
Correct output: -85.4359203887 | Program output: -72.6464236328
Correct output: 29.5496488004  | Program output: 87.2709253493 
Correct output: 69.5585020781  | Program output: -20.4460681929
Correct output: -9.5473433631  | Program output: 5.9523615057  
Correct output: 73.1938622402  | Program output: 39.3072453402 
Correct output: -173.8513267506 | Program output: -140.1502975584
Correct output: -16.4772789847 | Program output: 7.9389142716  
Correct output: -40.8753187944 | Program output: -93.3243435552
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction in1} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_shove} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod in1 float_pop integer_inc in1 integer_add integer_rot integer_div float_dup in1 float_rot in1 integer_add integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_shove print_float integer_add in2 integer_min)
Errors: [74.9882 11 7.8195 10 40.0992 9 10.2539 10 72.4808 11 24.5792 9 103.0083 11 26.368 11 78.0002 9 49.6441 11 4.6172 11 62.2171 11 21.5316 10 3.3421 9 42.3102 10 2.0318 11 11.8934 12 12.7895 10 57.7213 12 90.0046 13 15.4997 11 33.8866 9 33.701 9 24.4162 12 52.449 11]
Total: 1218.6527
Mean: 24.373055
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 3035.7823283999905
Median total errors in population: 1223.6527
Error averages by case: (147.39040930000112 9.499 81.18975419999937 8.273 107.13986609999867 8.495 101.09188439999983 9.372 127.35856800000109 8.848 104.23672249999849 8.072 163.83583359999903 11.208 110.34081060000082 9.477 144.83649419999958 7.782 117.796171000001 11.481 80.92618239999948 8.497 134.83604829999888 9.153 98.93322390000066 8.622 80.30969459999997 7.328 120.2354309000019 8.536 90.9162893999989 9.353 95.78985950000049 9.789 89.85295529999944 8.523 126.040634900001 9.712 157.5916205999984 12.072 86.53540790000015 10.886 106.35449199999925 7.779 120.51165690000059 8.185 95.27165360000107 12.074 114.29866429999858 9.146)
Error minima by case: (61.9255 3 1.1683 1 3.9285 1 10.2539 3 2.4795 1 0.6314 3 27.6056 7 3.8951 2 14.5406 2 5.4942 9 2.1538 2 4.4509 1 6.6496 2 0.0 0 41.5834 2 1.6608 3 11.8934 2 3.0047 2 27.5496 2 21.264 8 5.4107 8 12.929 2 33.701 2 6.6891 8 1.3595 1)
Average genome size in population (length): 27.396
Average program size in population (points): 28.396
Average percent parens in population: 0.038
Minimum age in population: 32.24890804290771
Maximum age in population: 36.07895278930664
Average age in population: 34.2063117787838
Median age in population: 34.2383873462677
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 363
Genome diversity (% unique Plush genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 363
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.042
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 27763398
--- Timings ---
Current time: 1529614905305 milliseconds
Total Time:          78.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.4 seconds, 41.3%
Fitness Testing:     36.1 seconds, 46.0%
Report:               9.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 63027.09099999999
Test mean error for best: 31.51355
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -26.685602854 
Correct output: -31.2572440177 | Program output: -39.0767851601
Correct output: -46.4593524807 | Program output: -86.5585454711
Correct output: 151.0806466807 | Program output: 161.3345767724
Correct output: -37.658849841  | Program output: -110.1396059411
Correct output: 134.1031121233 | Program output: 109.5239585133
Correct output: 29.6055550185  | Program output: -73.4027014687
Correct output: -128.9331639543 | Program output: -102.565211435
Correct output: 88.7526738391  | Program output: 10.7524525667 
Correct output: -27.9825817496 | Program output: 21.6614967324 
Correct output: -36.0605266238 | Program output: -40.6776825264
Correct output: -98.4940591545 | Program output: -36.2770068087
Correct output: 118.444904963  | Program output: 139.9764577566
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -54.4289376992
Correct output: 123.7897097488 | Program output: 125.8214712613
Correct output: -88.7139415536 | Program output: -76.8205234084
Correct output: -85.4359203887 | Program output: -72.6464236328
Correct output: 29.5496488004  | Program output: 87.2709253493 
Correct output: 69.5585020781  | Program output: -20.4460681929
Correct output: -9.5473433631  | Program output: 5.9523615057  
Correct output: 73.1938622402  | Program output: 39.3072453402 
Correct output: -173.8513267506 | Program output: -140.1502975584
Correct output: -16.4772789847 | Program output: 7.9389142716  
Correct output: -40.8753187944 | Program output: -93.3243435552
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div integer_dup_items print_float integer_add in2 integer_min)
Errors: [74.9882 11 7.8195 10 40.0992 9 10.2539 10 72.4808 11 24.5792 9 103.0083 11 26.368 11 78.0002 9 49.6441 11 4.6172 11 62.2171 11 21.5316 10 3.3421 9 42.3102 10 2.0318 11 11.8934 12 12.7895 10 57.7213 12 90.0046 13 15.4997 11 33.8866 9 33.701 9 24.4162 12 52.449 11]
Total: 1218.6527
Mean: 24.373055
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2397.611434199986
Median total errors in population: 1223.6527
Error averages by case: (128.4644265000031 11.24 53.8095817999996 10.22 83.69127809999834 10.167 62.208893800001356 11.112 111.36358720000126 11.048 71.34832689999973 9.291 142.38189840000027 11.158 77.9802148000009 11.192 119.00090719999831 9.267 93.04448010000084 11.175 51.640499500000466 10.221 107.63926999999865 11.086 70.00753160000072 10.16 55.063558700001096 9.263 88.77817680000165 10.224 53.32219859999924 11.084 62.63483090000073 11.993 63.35351879999933 10.215 103.72660130000078 11.964 140.63017229999954 12.048 60.44599060000023 11.052 83.43351819999914 9.279 83.69981010000075 9.413 69.21703899999987 12.005 93.7331229999986 11.115)
Error minima by case: (48.3026 3 1.1683 1 3.9285 1 9.4223 3 2.4795 1 0.6314 3 27.6056 10 12.897 2 67.2478 2 27.0364 9 2.6172 2 4.4509 2 7.8386 2 0.0 0 6.1147 2 1.3716 3 11.2489 2 3.0047 2 27.5496 2 21.264 8 6.9206 8 0.0226 2 3.4025 3 16.3924 8 1.3595 2)
Average genome size in population (length): 25.099
Average program size in population (points): 26.099
Average percent parens in population: 0.039
Minimum age in population: 33.43059349060059
Maximum age in population: 37.63091397285461
Average age in population: 35.68530983567238
Median age in population: 35.76285368204117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 408
Genome diversity (% unique Plush genomes):	 0.385
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 408
Syntactic diversity (% unique Push programs):	 0.385
Total error diversity:				 0.036
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 28390923
--- Timings ---
Current time: 1529614908320 milliseconds
Total Time:          81.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.7 seconds, 41.4%
Fitness Testing:     37.4 seconds, 45.9%
Report:              10.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 63027.09099999999
Test mean error for best: 31.51355
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -26.685602854 
Correct output: -31.2572440177 | Program output: -39.0767851601
Correct output: -46.4593524807 | Program output: -86.5585454711
Correct output: 151.0806466807 | Program output: 161.3345767724
Correct output: -37.658849841  | Program output: -110.1396059411
Correct output: 134.1031121233 | Program output: 109.5239585133
Correct output: 29.6055550185  | Program output: -73.4027014687
Correct output: -128.9331639543 | Program output: -102.565211435
Correct output: 88.7526738391  | Program output: 10.7524525667 
Correct output: -27.9825817496 | Program output: 21.6614967324 
Correct output: -36.0605266238 | Program output: -40.6776825264
Correct output: -98.4940591545 | Program output: -36.2770068087
Correct output: 118.444904963  | Program output: 139.9764577566
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -54.4289376992
Correct output: 123.7897097488 | Program output: 125.8214712613
Correct output: -88.7139415536 | Program output: -76.8205234084
Correct output: -85.4359203887 | Program output: -72.6464236328
Correct output: 29.5496488004  | Program output: 87.2709253493 
Correct output: 69.5585020781  | Program output: -20.4460681929
Correct output: -9.5473433631  | Program output: 5.9523615057  
Correct output: 73.1938622402  | Program output: 39.3072453402 
Correct output: -173.8513267506 | Program output: -140.1502975584
Correct output: -16.4772789847 | Program output: 7.9389142716  
Correct output: -40.8753187944 | Program output: -93.3243435552
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_stackdepth print_float integer_add in2 integer_min)
Errors: [74.9882 11 7.8195 10 40.0992 9 10.2539 10 72.4808 11 24.5792 9 103.0083 11 26.368 11 78.0002 9 49.6441 11 4.6172 11 62.2171 11 21.5316 10 3.3421 9 42.3102 10 2.0318 11 11.8934 12 12.7895 10 57.7213 12 90.0046 13 15.4997 11 33.8866 9 33.701 9 24.4162 12 52.449 11]
Total: 1218.6527
Mean: 24.373055
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2878.928305199987
Median total errors in population: 1223.6527
Error averages by case: (146.31561390000152 11.321 72.98096759999918 10.301 102.84244009999843 10.119 83.0798446000003 11.019 128.87697630000162 11.065 92.55824969999838 9.458 158.76659559999896 11.239 99.08714440000097 11.276 136.88980319999865 9.391 110.71961080000136 11.244 70.63059339999955 10.43 126.1258016999981 11.141 90.58195120000089 10.239 75.79036260000005 9.381 107.91067910000226 10.324 74.45584599999884 11.126 82.81721680000057 11.966 83.60239129999948 10.33 121.5118651000014 11.975 157.79109059999806 12.201 78.98924900000016 11.058 102.5310618999991 9.39 105.2114103000006 9.589 87.6208459000012 12.0 112.52769409999799 11.13)
Error minima by case: (19.1944 3 1.1683 1 29.0 1 9.4223 3 30.0 1 0.6314 3 27.1802 10 4.8754 2 20.9835 2 6.6218 8 1.7732 2 16.0146 2 7.8386 2 0.0 0 14.2597 2 1.3716 3 3.255 2 2.9564 2 27.1293 2 21.264 8 2.8964 8 0.0226 2 3.4025 3 5.3438 8 28.0 2)
Average genome size in population (length): 25.188
Average program size in population (points): 26.188
Average percent parens in population: 0.039
Minimum age in population: 34.52971076965332
Maximum age in population: 38.91942888498306
Average age in population: 37.16542797845602
Median age in population: 37.24218100309372
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 266
Genome diversity (% unique Plush genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 266
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.041
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 29020623
--- Timings ---
Current time: 1529614911198 milliseconds
Total Time:          84.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.0 seconds, 41.5%
Fitness Testing:     38.7 seconds, 45.9%
Report:              10.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 62927.059199999974
Test mean error for best: 31.46353
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -27.6860439212
Correct output: -31.2572440177 | Program output: -40.8324735611
Correct output: -46.4593524807 | Program output: -87.6906312482
Correct output: 151.0806466807 | Program output: 159.5029079228
Correct output: -37.658849841  | Program output: -111.7437633978
Correct output: 134.1031121233 | Program output: 108.2665527118
Correct output: 29.6055550185  | Program output: -74.4454357567
Correct output: -128.9331639543 | Program output: -103.9715018778
Correct output: 88.7526738391  | Program output: 9.1601273896  
Correct output: -27.9825817496 | Program output: 20.5793643384 
Correct output: -36.0605266238 | Program output: -42.5215951048
Correct output: -98.4940591545 | Program output: -37.5964557342
Correct output: 118.444904963  | Program output: 138.3938176055
Correct output: 90.2245669646  | Program output: 92.5180050375 
Correct output: -96.7391381937 | Program output: -56.1438216184
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -78.4650115602
Correct output: -85.4359203887 | Program output: -73.6778068139
Correct output: 29.5496488004  | Program output: 86.2263856462 
Correct output: 69.5585020781  | Program output: -21.446291771 
Correct output: -9.5473433631  | Program output: 4.2283668744  
Correct output: 73.1938622402  | Program output: 38.3043524612 
Correct output: -173.8513267506 | Program output: -141.5538872965
Correct output: -16.4772789847 | Program output: 6.8835894423  
Correct output: -40.8753187944 | Program output: -94.6599273517
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup in1 float_rot integer_add integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div integer_dup_items print_float integer_add in2 integer_min)
Errors: [73.9878 12 9.5752 11 41.2313 9 8.4223 10 74.0849 13 25.8366 11 104.051 11 24.9617 11 79.5925 9 48.5619 12 6.4611 10 60.8976 9 19.9489 11 2.2934 11 40.5953 10 0.3716 11 10.2489 9 11.7581 11 56.6767 11 91.0048 11 13.7757 11 34.8895 10 32.2974 9 23.3609 10 53.7846 11]
Total: 1212.6697
Mean: 24.253393
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 2833.3521942999873
Median total errors in population: 1218.6527
Error averages by case: (144.6426556000022 11.338 71.77148479999893 10.328 102.2560192999982 9.678 79.78200630000066 10.633 128.75510120000163 11.138 90.29854829999819 9.479 159.06347089999886 11.195 94.84003080000112 11.323 136.4596648999985 9.39 109.45289540000122 11.249 69.3414138000001 10.891 124.09370119999812 11.158 87.63650210000112 10.296 73.18038160000037 9.372 105.62148400000223 10.352 71.12357449999848 11.195 79.45068000000065 12.019 81.17496979999929 10.338 120.06688090000128 12.015 157.76100529999792 12.604 77.59644370000017 11.075 101.39749779999909 9.394 100.41606160000072 9.559 86.22282550000133 12.023 111.71789499999792 11.187)
Error minima by case: (52.3393 3 2.8504 1 29.0 1 8.4223 3 30.0 1 0.3686 3 27.6056 10 5.0527 2 75.2547 2 0.6191 9 2.2544 2 47.6459 2 8.8386 2 0.0 0 38.0177 2 0.3716 3 3.255 2 4.2734 2 27.5496 2 48.8523 9 5.9206 8 0.3468 2 0.6855 3 7.97 8 28.0 2)
Average genome size in population (length): 25.227
Average program size in population (points): 26.227
Average percent parens in population: 0.039
Minimum age in population: 36.26086568832397
Maximum age in population: 40.45226562023163
Average age in population: 38.6867017454505
Median age in population: 38.71247063577175
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 106
Genome diversity (% unique Plush genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.438
Total error diversity:				 0.039
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 29651298
--- Timings ---
Current time: 1529614914138 milliseconds
Total Time:          87.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.3 seconds, 41.6%
Fitness Testing:     40.0 seconds, 45.9%
Report:              10.8 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 62927.059199999974
Test mean error for best: 31.46353
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -27.6860439212
Correct output: -31.2572440177 | Program output: -40.8324735611
Correct output: -46.4593524807 | Program output: -87.6906312482
Correct output: 151.0806466807 | Program output: 159.5029079228
Correct output: -37.658849841  | Program output: -111.7437633978
Correct output: 134.1031121233 | Program output: 108.2665527118
Correct output: 29.6055550185  | Program output: -74.4454357567
Correct output: -128.9331639543 | Program output: -103.9715018778
Correct output: 88.7526738391  | Program output: 9.1601273896  
Correct output: -27.9825817496 | Program output: 20.5793643384 
Correct output: -36.0605266238 | Program output: -42.5215951048
Correct output: -98.4940591545 | Program output: -37.5964557342
Correct output: 118.444904963  | Program output: 138.3938176055
Correct output: 90.2245669646  | Program output: 92.5180050375 
Correct output: -96.7391381937 | Program output: -56.1438216184
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -78.4650115602
Correct output: -85.4359203887 | Program output: -73.6778068139
Correct output: 29.5496488004  | Program output: 86.2263856462 
Correct output: 69.5585020781  | Program output: -21.446291771 
Correct output: -9.5473433631  | Program output: 4.2283668744  
Correct output: 73.1938622402  | Program output: 38.3043524612 
Correct output: -173.8513267506 | Program output: -141.5538872965
Correct output: -16.4772789847 | Program output: 6.8835894423  
Correct output: -40.8753187944 | Program output: -94.6599273517
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup in1 float_rot integer_add integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div integer_dup_items print_float integer_add in2 integer_min)
Errors: [73.9878 12 9.5752 11 41.2313 9 8.4223 10 74.0849 13 25.8366 11 104.051 11 24.9617 11 79.5925 9 48.5619 12 6.4611 10 60.8976 9 19.9489 11 2.2934 11 40.5953 10 0.3716 11 10.2489 9 11.7581 11 56.6767 11 91.0048 11 13.7757 11 34.8895 10 32.2974 9 23.3609 10 53.7846 11]
Total: 1212.6697
Mean: 24.253393
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 2582.8723055999885
Median total errors in population: 1218.6527
Error averages by case: (135.01707210000302 11.272 62.062816299999305 10.262 91.55536409999826 9.333 69.27202710000128 10.301 118.72879860000164 11.068 80.01812409999846 9.392 149.76241089999917 11.16 85.52089320000101 11.255 127.10724019999802 9.323 99.95486900000134 11.19 59.60245680000042 11.104 115.03819629999818 11.107 76.56753500000083 10.223 61.628834800001094 9.258 96.40163090000232 10.269 60.31859439999884 11.139 69.78045120000067 11.981 70.69817109999931 10.263 110.43653580000131 11.984 147.67688579999825 12.872 67.3951549000002 11.03 91.17181029999911 9.321 91.80901620000068 9.489 76.23593900000101 11.997 101.40047749999798 11.118)
Error minima by case: (52.3393 3 2.1683 2 30.0 1 8.4223 3 31.0 2 0.3686 3 28.1802 10 24.9617 2 78.0002 2 27.9067 8 2.3843 2 49.4304 2 8.8386 2 0.9173 2 40.5953 2 0.3716 3 10.2489 2 2.0047 2 28.1293 2 22.264 8 5.9206 9 0.9774 2 2.4025 3 16.4249 9 29.0 2)
Average genome size in population (length): 25.494
Average program size in population (points): 26.494
Average percent parens in population: 0.039
Minimum age in population: 37.47016489505768
Maximum age in population: 42.08991599082947
Average age in population: 40.17469325582683
Median age in population: 40.22520820051432
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 117
Genome diversity (% unique Plush genomes):	 0.413
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.413
Total error diversity:				 0.031
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 30288648
--- Timings ---
Current time: 1529614917124 milliseconds
Total Time:          90.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.6 seconds, 41.6%
Fitness Testing:     41.4 seconds, 45.9%
Report:              11.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 62927.059199999974
Test mean error for best: 31.46353
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -27.6860439212
Correct output: -31.2572440177 | Program output: -40.8324735611
Correct output: -46.4593524807 | Program output: -87.6906312482
Correct output: 151.0806466807 | Program output: 159.5029079228
Correct output: -37.658849841  | Program output: -111.7437633978
Correct output: 134.1031121233 | Program output: 108.2665527118
Correct output: 29.6055550185  | Program output: -74.4454357567
Correct output: -128.9331639543 | Program output: -103.9715018778
Correct output: 88.7526738391  | Program output: 9.1601273896  
Correct output: -27.9825817496 | Program output: 20.5793643384 
Correct output: -36.0605266238 | Program output: -42.5215951048
Correct output: -98.4940591545 | Program output: -37.5964557342
Correct output: 118.444904963  | Program output: 138.3938176055
Correct output: 90.2245669646  | Program output: 92.5180050375 
Correct output: -96.7391381937 | Program output: -56.1438216184
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -78.4650115602
Correct output: -85.4359203887 | Program output: -73.6778068139
Correct output: 29.5496488004  | Program output: 86.2263856462 
Correct output: 69.5585020781  | Program output: -21.446291771 
Correct output: -9.5473433631  | Program output: 4.2283668744  
Correct output: 73.1938622402  | Program output: 38.3043524612 
Correct output: -173.8513267506 | Program output: -141.5538872965
Correct output: -16.4772789847 | Program output: 6.8835894423  
Correct output: -40.8753187944 | Program output: -94.6599273517
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction integer_dup_items} {:instruction print_float})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup in1 float_rot integer_add integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div integer_dup_items print_float)
Errors: [73.9878 12 9.5752 11 41.2313 9 8.4223 10 74.0849 13 25.8366 11 104.051 11 24.9617 11 79.5925 9 48.5619 12 6.4611 10 60.8976 9 19.9489 11 2.2934 11 40.5953 10 0.3716 11 10.2489 9 11.7581 11 56.6767 11 91.0048 11 13.7757 11 34.8895 10 32.2974 9 23.3609 10 53.7846 11]
Total: 1212.6697
Mean: 24.253393
Genome size: 27
Size: 28
Percent parens: 0.036
--- Population Statistics ---
Average total errors in population: 2831.9459210999885
Median total errors in population: 1218.6527
Error averages by case: (140.97968290000247 11.297 72.652349499999 10.288 102.85368159999808 9.365 80.25237200000065 10.305 129.6822090000018 11.125 91.40353449999877 9.47 159.130013499999 11.191 94.49838750000119 11.267 137.5111364999985 9.326 109.86616240000122 11.258 70.16925049999992 11.074 124.25332889999807 11.073 87.86847360000107 10.263 72.62994060000041 9.345 106.20456670000213 10.284 71.54985179999856 11.162 79.53727120000066 11.897 80.5030648999993 10.308 119.18558650000121 11.948 154.01315009999806 12.869 78.14434780000012 11.073 100.31440169999897 9.363 101.34966160000069 9.497 86.68770190000089 11.993 112.53879389999796 11.126)
Error minima by case: (52.3393 3 0.727 2 29.5121 1 0.0608 3 30.1023 2 0.3686 3 15.3734 9 3.8754 2 67.0192 2 0.6191 9 1.7637 2 47.6459 2 8.8386 2 0.6942 2 39.2528 2 0.3716 3 8.6199 2 2.0047 2 15.2929 2 48.8523 9 5.9206 8 0.9774 2 0.6855 3 8.7437 9 28.2754 2)
Average genome size in population (length): 25.526
Average program size in population (points): 26.526
Average percent parens in population: 0.039
Minimum age in population: 38.47016489505768
Maximum age in population: 43.72051005065441
Average age in population: 41.69997742626816
Median age in population: 41.75758193060756
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 88
Genome diversity (% unique Plush genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.038
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 30926798
--- Timings ---
Current time: 1529614919973 milliseconds
Total Time:          93.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.9 seconds, 41.7%
Fitness Testing:     42.7 seconds, 45.9%
Report:              11.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 62901.98959999993
Test mean error for best: 31.45099
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -28.6864849884
Correct output: -31.2572440177 | Program output: -42.5881619621
Correct output: -46.4593524807 | Program output: -88.8227170253
Correct output: 151.0806466807 | Program output: 157.6712390733
Correct output: -37.658849841  | Program output: -113.3479208545
Correct output: 134.1031121233 | Program output: 107.0091469103
Correct output: 29.6055550185  | Program output: -75.4881700447
Correct output: -128.9331639543 | Program output: -105.3777923206
Correct output: 88.7526738391  | Program output: 7.5678022125  
Correct output: -27.9825817496 | Program output: 19.4972319445 
Correct output: -36.0605266238 | Program output: -44.3655076831
Correct output: -98.4940591545 | Program output: -38.9159046597
Correct output: 118.444904963  | Program output: 136.8111774543
Correct output: 90.2245669646  | Program output: 91.4693401562 
Correct output: -96.7391381937 | Program output: -57.8587055377
Correct output: 123.7897097488 | Program output: 122.5011927781
Correct output: -88.7139415536 | Program output: -80.109499712 
Correct output: -85.4359203887 | Program output: -74.709189995 
Correct output: 29.5496488004  | Program output: 85.1818459432 
Correct output: 69.5585020781  | Program output: -22.4465153491
Correct output: -9.5473433631  | Program output: 2.5043722431  
Correct output: 73.1938622402  | Program output: 37.3014595822 
Correct output: -173.8513267506 | Program output: -142.9574770346
Correct output: -16.4772789847 | Program output: 5.828264613   
Correct output: -40.8753187944 | Program output: -95.9955111481
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_add} {:instruction 60} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc float_pop integer_inc in1 integer_add integer_rot float_dec float_dup in1 float_rot integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div integer_dup_items print_float integer_add 60 integer_min)
Errors: [72.9874 11 11.3309 12 42.3634 12 6.5906 11 75.6891 11 27.094 9 105.0937 12 23.5554 12 81.1849 10 47.4798 10 8.305 8 59.5782 9 18.3663 10 1.2448 10 38.8804 11 1.2885 9 8.6044 8 10.7267 11 55.6322 11 92.005 11 12.0517 8 35.8924 10 30.8938 10 22.3055 12 55.1202 10]
Total: 1202.2643000000003
Mean: 24.045286
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 2202.7321966999875
Median total errors in population: 1218.6527
Error averages by case: (117.20615840000227 11.228 46.5953965999997 10.217 78.02510429999894 9.199 53.953639900000645 10.146 105.45235420000108 11.208 66.71989130000001 9.507 136.92670230000073 11.177 69.77235980000053 11.082 112.86207999999866 9.156 84.81854250000035 11.299 44.110276700000355 10.811 99.05629559999902 10.679 61.14045950000053 10.227 47.14287420000067 9.431 81.1513526000008 10.104 44.93357439999975 10.981 53.420474900000414 11.421 54.533461199999536 10.23 95.75429700000049 11.699 131.63642849999985 12.642 52.43850030000005 11.007 75.65051969999949 9.341 75.51064040000054 9.303 60.74891749999975 11.723 88.39989489999904 10.954)
Error minima by case: (22.8556 3 0.3107 2 12.873 1 6.5906 3 5.1417 2 0.3686 3 6.6985 8 2.1607 2 33.314 2 4.1218 8 0.8578 2 19.6758 1 7.9723 2 1.0 2 3.3998 2 0.3716 3 2.255 2 0.759 2 6.8172 2 34.7346 9 5.0745 8 0.6532 2 0.6855 2 14.8318 8 1.2516 1)
Average genome size in population (length): 26.242
Average program size in population (points): 27.242
Average percent parens in population: 0.038
Minimum age in population: 39.47016489505768
Maximum age in population: 45.17245339602232
Average age in population: 43.13160943424329
Median age in population: 43.16733995079994
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 66
Genome diversity (% unique Plush genomes):	 0.525
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.525
Total error diversity:				 0.048
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 31582898
--- Timings ---
Current time: 1529614922882 milliseconds
Total Time:          96.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.1 seconds, 41.7%
Fitness Testing:     44.1 seconds, 45.9%
Report:              11.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 57549.536299999985
Test mean error for best: 28.77477
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -26.6738378996
Correct output: -31.2572440177 | Program output: -22.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 159.5029079228
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 108.2665527118
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -72.9331639543
Correct output: 88.7526738391  | Program output: 9.1601273896  
Correct output: -27.9825817496 | Program output: 20.5793643384 
Correct output: -36.0605266238 | Program output: -22.0605266238
Correct output: -98.4940591545 | Program output: -27.4940591545
Correct output: 118.444904963  | Program output: 138.3938176055
Correct output: 90.2245669646  | Program output: 92.5180050375 
Correct output: -96.7391381937 | Program output: -31.7391381937
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -46.7139415536
Correct output: -85.4359203887 | Program output: -70.4359203887
Correct output: 29.5496488004  | Program output: 86.2263856462 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: 4.2283668744  
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -99.8513267506
Correct output: -16.4772789847 | Program output: 7.5227210153  
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup in1 float_rot integer_add integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [75.0 3 9.0 2 30.0 1 8.4223 10 31.0 2 25.8366 11 100.0 12 56.0 2 79.5925 9 48.5619 12 14.0 2 71.0 2 19.9489 11 2.2934 11 65.0 2 0.3716 11 42.0 2 15.0 2 56.6767 11 90.0 13 13.7757 11 34.0 2 74.0 3 24.0 12 29.0 2]
Total: 1175.4796000000001
Mean: 23.509592
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 2501.4555851999958
Median total errors in population: 1212.6697
Error averages by case: (126.20887620000204 11.7 60.51477429999945 10.739 90.29409079999922 9.438 67.97315510000001 10.273 118.82395680000127 12.052 78.9304375999999 10.351 148.08851740000176 11.213 80.61503160000028 11.219 124.56686549999876 9.267 95.98327800000048 11.682 58.51638190000037 10.493 109.94635299999833 10.022 74.1258112000011 10.689 59.35390230000084 10.343 92.9308965000009 10.237 57.87550509999912 11.023 66.29241129999976 10.353 65.85107929999936 10.755 106.54505200000014 11.395 141.40667299999862 11.84 62.771734999999495 10.975 86.99802219999972 9.851 87.20312050000038 9.489 71.83461309999993 11.018 100.33904549999914 11.049)
Error minima by case: (4.7384 3 2.189 2 5.6006 1 6.5906 3 0.9526 2 0.3686 3 26.5973 10 2.55 2 15.3625 2 4.5468 8 0.8578 2 0.006 2 0.3893 2 0.1299 2 0.459 2 0.3716 3 2.255 2 0.8202 2 27.5923 2 4.1583 8 3.5563 8 0.6532 2 0.6855 3 5.3286 8 0.2203 2)
Average genome size in population (length): 28.221
Average program size in population (points): 29.221
Average percent parens in population: 0.035
Minimum age in population: 40.47016489505768
Maximum age in population: 46.54586319252849
Average age in population: 44.60288479050994
Median age in population: 44.64435819722712
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 153
Genome diversity (% unique Plush genomes):	 0.476
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 153
Syntactic diversity (% unique Push programs):	 0.476
Total error diversity:				 0.055
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 32288423
--- Timings ---
Current time: 1529614925869 milliseconds
Total Time:          99.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.4 seconds, 41.8%
Fitness Testing:     45.4 seconds, 45.9%
Report:              12.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 57549.536299999985
Test mean error for best: 28.77477
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -26.6738378996
Correct output: -31.2572440177 | Program output: -22.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 159.5029079228
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 108.2665527118
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -72.9331639543
Correct output: 88.7526738391  | Program output: 9.1601273896  
Correct output: -27.9825817496 | Program output: 20.5793643384 
Correct output: -36.0605266238 | Program output: -22.0605266238
Correct output: -98.4940591545 | Program output: -27.4940591545
Correct output: 118.444904963  | Program output: 138.3938176055
Correct output: 90.2245669646  | Program output: 92.5180050375 
Correct output: -96.7391381937 | Program output: -31.7391381937
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -46.7139415536
Correct output: -85.4359203887 | Program output: -70.4359203887
Correct output: 29.5496488004  | Program output: 86.2263856462 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: 4.2283668744  
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -99.8513267506
Correct output: -16.4772789847 | Program output: 7.5227210153  
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup in1 float_rot integer_add integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [75.0 3 9.0 2 30.0 1 8.4223 10 31.0 2 25.8366 11 100.0 12 56.0 2 79.5925 9 48.5619 12 14.0 2 71.0 2 19.9489 11 2.2934 11 65.0 2 0.3716 11 42.0 2 15.0 2 56.6767 11 90.0 13 13.7757 11 34.0 2 74.0 3 24.0 12 29.0 2]
Total: 1175.4796000000001
Mean: 23.509592
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 2283.260917399994
Median total errors in population: 1212.6697
Error averages by case: (121.0128389000012 11.746 51.04583449999973 10.962 81.68911809999982 9.624 56.7982851999995 10.338 108.97530690000112 12.276 70.53330910000008 10.685 141.17336530000196 11.333 72.8875477999998 11.183 116.96849319999897 9.299 87.05911630000041 11.77 49.040861300000316 9.928 100.3613170999987 9.37 63.66631630000087 10.867 51.55752900000036 10.787 82.46737150000047 10.223 48.67358869999954 10.797 56.184289199999355 9.347 57.24113979999936 10.892 99.11251329999972 11.098 138.3263875999989 11.314 53.15472529999937 10.679 78.82539330000012 10.069 77.01907910000011 9.472 62.756447099999896 10.665 91.18774349999961 10.819)
Error minima by case: (11.6779 3 1.0011 2 24.5461 1 4.7589 3 31.0 2 0.3686 3 22.413 9 2.4285 2 9.3168 2 5.8431 8 0.8578 2 15.737 1 4.1261 2 0.1299 2 0.459 2 0.3716 3 2.6296 2 0.8202 2 22.559 2 19.6607 8 0.0027 8 2.8199 2 0.6855 2 5.9567 7 29.0 1)
Average genome size in population (length): 30.108
Average program size in population (points): 31.108
Average percent parens in population: 0.033
Minimum age in population: 43.44501471146941
Maximum age in population: 48.03610921930522
Average age in population: 46.09202984555904
Median age in population: 46.17769795609638
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 179
Genome diversity (% unique Plush genomes):	 0.455
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.065
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 33041123
--- Timings ---
Current time: 1529614928843 milliseconds
Total Time:         102.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.7 seconds, 41.9%
Fitness Testing:     46.8 seconds, 45.9%
Report:              12.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 56992.631900000015
Test mean error for best: 28.49632
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -26.6738378996
Correct output: -31.2572440177 | Program output: -22.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -72.9331639543
Correct output: 88.7526738391  | Program output: 6.7526738391  
Correct output: -27.9825817496 | Program output: 20.0174182504 
Correct output: -36.0605266238 | Program output: -22.0605266238
Correct output: -98.4940591545 | Program output: -27.4940591545
Correct output: 118.444904963  | Program output: 135.2285373032
Correct output: 90.2245669646  | Program output: 90.420675275  
Correct output: -96.7391381937 | Program output: -31.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -46.7139415536
Correct output: -85.4359203887 | Program output: -70.4359203887
Correct output: 29.5496488004  | Program output: 84.1373062401 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: 3.4526566369  
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -99.8513267506
Correct output: -16.4772789847 | Program output: 7.5227210153  
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup float_dec float_rot integer_add integer_rot integer_div float_dec float_dup in1 float_rot integer_add integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [75.0 3 9.0 2 30.0 1 4.7589 11 31.0 2 28.3514 11 100.0 12 56.0 2 82.0 2 48.0 12 14.0 2 71.0 2 16.7836 11 0.1961 8 65.0 2 2.9487 10 42.0 2 15.0 2 54.5877 11 90.0 13 13.0 10 34.0 2 74.0 3 24.0 12 29.0 2]
Total: 1159.6264
Mean: 23.192528
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2556.8317390999864
Median total errors in population: 1212.6697
Error averages by case: (131.84851660000032 11.176 63.0119226000001 10.972 93.6849157000002 10.174 66.36191890000012 10.738 118.03074270000133 11.217 80.27067499999929 10.241 153.12643440000045 11.787 83.60439789999953 11.137 128.45811139999833 9.67 97.96578180000057 11.277 61.15466830000026 9.027 111.61883270000007 9.108 73.95213530000062 10.67 61.125728200000474 10.567 93.67924339999993 10.223 58.94660029999991 10.335 68.90961099999927 8.708 68.24668219999951 10.589 110.39111579999899 11.187 149.98584959999994 11.5 64.28266300000017 9.892 90.32769239999962 9.821 89.9152237000004 9.52 74.00970190000021 11.356 102.85157430000002 10.179)
Error minima by case: (33.2854 3 0.1432 2 30.0 1 0.5291 3 31.0 2 1.9039 3 28.389 8 2.55 2 64.8315 2 2.3383 8 0.7155 2 8.2988 1 5.8406 2 0.1299 2 0.459 2 0.3716 2 0.7478 2 0.1086 2 28.3159 2 43.3709 9 5.0745 8 0.6532 2 0.6855 2 6.8399 7 29.0 1)
Average genome size in population (length): 30.985
Average program size in population (points): 31.985
Average percent parens in population: 0.032
Minimum age in population: 44.44501471146941
Maximum age in population: 49.28379888692871
Average age in population: 47.46719970897818
Median age in population: 47.54912783461623
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 135
Genome diversity (% unique Plush genomes):	 0.482
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 135
Syntactic diversity (% unique Push programs):	 0.482
Total error diversity:				 0.073
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 33815748
--- Timings ---
Current time: 1529614931882 milliseconds
Total Time:         105.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.0 seconds, 41.9%
Fitness Testing:     48.2 seconds, 45.9%
Report:              12.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 57360.354900000006
Test mean error for best: 28.68018
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -27.6738378996
Correct output: -31.2572440177 | Program output: -23.2572440177
Correct output: -46.4593524807 | Program output: -77.4593524807
Correct output: 151.0806466807 | Program output: 157.6712390733
Correct output: -37.658849841  | Program output: -69.658849841 
Correct output: 134.1031121233 | Program output: 107.0091469103
Correct output: 29.6055550185  | Program output: -71.3944449815
Correct output: -128.9331639543 | Program output: -73.9331639543
Correct output: 88.7526738391  | Program output: 7.5678022125  
Correct output: -27.9825817496 | Program output: 19.4972319445 
Correct output: -36.0605266238 | Program output: -23.0605266238
Correct output: -98.4940591545 | Program output: -28.4940591545
Correct output: 118.444904963  | Program output: 136.8111774543
Correct output: 90.2245669646  | Program output: 91.4693401562 
Correct output: -96.7391381937 | Program output: -32.7391381937
Correct output: 123.7897097488 | Program output: 122.5011927781
Correct output: -88.7139415536 | Program output: -47.7139415536
Correct output: -85.4359203887 | Program output: -71.4359203887
Correct output: 29.5496488004  | Program output: 85.1818459432 
Correct output: 69.5585020781  | Program output: -21.4414979219
Correct output: -9.5473433631  | Program output: 2.5043722431  
Correct output: 73.1938622402  | Program output: 38.1938622402 
Correct output: -173.8513267506 | Program output: -100.8513267506
Correct output: -16.4772789847 | Program output: 6.5227210153  
Correct output: -40.8753187944 | Program output: -70.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec in1 integer_add integer_rot float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [74.0 3 8.0 2 31.0 2 6.5906 11 32.0 2 27.094 9 101.0 12 55.0 3 81.1849 10 47.4798 10 13.0 2 70.0 1 18.3663 10 1.2448 10 64.0 2 1.2885 9 41.0 2 14.0 2 55.6322 11 91.0 13 12.0517 8 35.0 2 73.0 2 23.0 11 30.0 1]
Total: 1155.9328
Mean: 23.118656
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 2290.208259900009
Median total errors in population: 1202.2643000000003
Error averages by case: (116.98999719999986 8.801 54.29968800000032 8.65 80.80580770000036 8.143 56.62442000000049 10.695 99.45514350000096 8.232 71.4594558999995 9.994 141.79331919999933 12.022 81.58928119999942 8.836 117.39838979999816 9.56 87.14064040000056 11.116 54.09036230000016 6.784 104.78422050000087 7.161 65.16761530000106 10.492 50.51229100000036 10.299 90.83469759999954 8.094 50.37171800000008 10.109 68.92763079999911 6.676 58.19924719999963 8.174 99.04736399999898 11.07 134.6916275000007 11.908 52.41544840000041 9.636 79.19980259999922 8.16 92.07077710000058 7.805 62.41775610000043 11.762 88.10755860000025 7.635)
Error minima by case: (21.4145 3 0.991 2 5.6006 1 0.5291 3 0.9526 2 0.3686 3 28.5628 8 0.5146 2 26.8973 2 26.9372 8 0.7155 2 0.006 1 1.3544 2 0.1961 2 16.4798 2 0.3716 2 6.4614 1 0.8202 2 28.4662 2 22.264 8 5.0745 8 4.1824 2 0.6855 2 15.4409 9 0.2203 1)
Average genome size in population (length): 31.173
Average program size in population (points): 32.173
Average percent parens in population: 0.031
Minimum age in population: 46.73291483335197
Maximum age in population: 51.08541320171207
Average age in population: 48.90496088194381
Median age in population: 48.90345727431122
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 170
Genome diversity (% unique Plush genomes):	 0.453
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.453
Total error diversity:				 0.085
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 34595073
--- Timings ---
Current time: 1529614934824 milliseconds
Total Time:         108.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.3 seconds, 41.9%
Fitness Testing:     49.6 seconds, 45.9%
Report:              13.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 57360.354900000006
Test mean error for best: 28.68018
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -27.6738378996
Correct output: -31.2572440177 | Program output: -23.2572440177
Correct output: -46.4593524807 | Program output: -77.4593524807
Correct output: 151.0806466807 | Program output: 157.6712390733
Correct output: -37.658849841  | Program output: -69.658849841 
Correct output: 134.1031121233 | Program output: 107.0091469103
Correct output: 29.6055550185  | Program output: -71.3944449815
Correct output: -128.9331639543 | Program output: -73.9331639543
Correct output: 88.7526738391  | Program output: 7.5678022125  
Correct output: -27.9825817496 | Program output: 19.4972319445 
Correct output: -36.0605266238 | Program output: -23.0605266238
Correct output: -98.4940591545 | Program output: -28.4940591545
Correct output: 118.444904963  | Program output: 136.8111774543
Correct output: 90.2245669646  | Program output: 91.4693401562 
Correct output: -96.7391381937 | Program output: -32.7391381937
Correct output: 123.7897097488 | Program output: 122.5011927781
Correct output: -88.7139415536 | Program output: -47.7139415536
Correct output: -85.4359203887 | Program output: -71.4359203887
Correct output: 29.5496488004  | Program output: 85.1818459432 
Correct output: 69.5585020781  | Program output: -21.4414979219
Correct output: -9.5473433631  | Program output: 2.5043722431  
Correct output: 73.1938622402  | Program output: 38.1938622402 
Correct output: -173.8513267506 | Program output: -100.8513267506
Correct output: -16.4772789847 | Program output: 6.5227210153  
Correct output: -40.8753187944 | Program output: -70.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup float_dec float_rot integer_add integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [74.0 3 8.0 2 31.0 2 6.5906 11 32.0 2 27.094 9 101.0 12 55.0 3 81.1849 10 47.4798 10 13.0 2 70.0 1 18.3663 10 1.2448 10 64.0 2 1.2885 9 41.0 2 14.0 2 55.6322 11 91.0 13 12.0517 8 35.0 2 73.0 2 23.0 11 30.0 1]
Total: 1155.9328
Mean: 23.118656
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 2338.2920632999976
Median total errors in population: 1175.4796000000001
Error averages by case: (118.76188370000021 4.867 55.74010890000002 3.821 76.88389569999997 2.927 58.5467022999995 10.168 80.45784640000007 3.668 73.01741810000014 10.574 140.7592790999999 12.049 100.12937539999994 4.207 120.33922929999905 8.958 91.40599430000046 11.891 59.80617000000004 3.637 113.97350230000008 3.56 65.7465296000011 10.75 53.4908879000006 10.567 106.2856583000001 3.807 51.810397999999395 10.74 85.32094139999994 3.617 63.25907739999993 3.688 100.88833139999953 10.943 140.37188919999997 12.878 57.06617339999936 10.812 82.03482839999987 4.814 115.37101490000009 4.275 67.0721328 11.899 77.15679509999998 3.479)
Error minima by case: (45.922 3 0.9347 2 14.2674 1 4.7589 2 5.4669 2 0.3686 2 22.5158 8 6.0527 2 26.8973 2 4.2094 8 0.8578 2 47.6076 1 7.6496 2 0.1299 2 37.1655 2 0.3716 2 2.255 1 0.8202 2 28.5051 2 30.6807 9 2.1277 8 0.6532 2 2.4025 2 4.7316 9 8.6834 1)
Average genome size in population (length): 30.746
Average program size in population (points): 31.746
Average percent parens in population: 0.032
Minimum age in population: 48.29618644341826
Maximum age in population: 52.37137753691059
Average age in population: 50.31781120353972
Median age in population: 50.35118377325125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 373
Genome diversity (% unique Plush genomes):	 0.43
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 373
Syntactic diversity (% unique Push programs):	 0.43
Total error diversity:				 0.078
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 35363723
--- Timings ---
Current time: 1529614937864 milliseconds
Total Time:         111.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.6 seconds, 42.0%
Fitness Testing:     50.9 seconds, 45.9%
Report:              13.4 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 57235.31250000008
Test mean error for best: 28.61766
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -26.6738378996
Correct output: -31.2572440177 | Program output: -22.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 151.6097867048
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 116.5146333004
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -72.9331639543
Correct output: 88.7526738391  | Program output: 6.9592254261  
Correct output: -27.9825817496 | Program output: 20.0174182504 
Correct output: -36.0605266238 | Program output: -22.0605266238
Correct output: -98.4940591545 | Program output: -27.4940591545
Correct output: 118.444904963  | Program output: 125.7401059827
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -31.7391381937
Correct output: 123.7897097488 | Program output: 113.2626069112
Correct output: -88.7139415536 | Program output: -46.7139415536
Correct output: -85.4359203887 | Program output: -70.4359203887
Correct output: 29.5496488004  | Program output: 89.5155459562 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: 3.4526566369  
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -99.8513267506
Correct output: -16.4772789847 | Program output: 7.5227210153  
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (in1 float_dec float_dup in1 float_rot integer_add integer_rot float_dec float_dup integer_add integer_rot float_dec integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [75.0 3 9.0 2 30.0 1 0.5291 8 31.0 2 17.5885 12 100.0 12 56.0 2 81.7934 10 48.0 12 14.0 2 71.0 2 7.2952 9 1.0 2 65.0 2 10.5271 10 42.0 2 15.0 2 59.9659 9 90.0 13 13.0 10 34.0 2 74.0 3 24.0 12 29.0 2]
Total: 1144.6992
Mean: 22.893984
Genome size: 23
Size: 24
Percent parens: 0.042
--- Population Statistics ---
Average total errors in population: 2411.1884001999915
Median total errors in population: 1175.4796000000001
Error averages by case: (121.10155890000011 4.232 58.9665791 3.203 79.35028759999999 2.367 61.49158249999966 10.301 80.27531860000003 3.083 76.19318899999966 10.363 142.52094360000007 12.053 105.51248770000001 3.584 124.16466839999873 8.665 95.10973210000044 11.817 63.43000500000001 3.182 118.11161089999993 3.132 70.84515090000096 10.606 54.655367100000326 10.329 111.3177948000001 3.21 54.88115369999951 10.389 90.89893469999997 3.205 66.27386909999998 3.157 103.7249846999994 10.799 142.64523729999996 12.95 60.26735809999944 10.552 84.85883839999988 4.058 121.25722610000001 3.814 70.37431990000002 11.928 78.99720199999999 2.984)
Error minima by case: (55.9185 3 2.2484 2 21.9625 1 0.5291 3 5.7651 2 0.3686 3 28.5628 8 10.9155 2 4.5738 2 27.0838 8 4.6172 2 47.6459 1 5.8406 2 0.1961 2 38.8804 2 0.3716 2 8.6044 1 6.5612 2 27.4606 2 0.6087 9 6.4036 8 2.5041 2 0.6855 2 15.6797 9 12.1916 1)
Average genome size in population (length): 31.315
Average program size in population (points): 32.315
Average percent parens in population: 0.031
Minimum age in population: 49.55160628608428
Maximum age in population: 53.92417071969248
Average age in population: 51.74106899501779
Median age in population: 51.75842898627161
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 270
Genome diversity (% unique Plush genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 270
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.081
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 36146598
--- Timings ---
Current time: 1529614940935 milliseconds
Total Time:         114.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.0 seconds, 42.0%
Fitness Testing:     52.3 seconds, 45.8%
Report:              13.7 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 56494.06199999999
Test mean error for best: 28.24703
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -26.6738378996
Correct output: -31.2572440177 | Program output: -22.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -72.9331639543
Correct output: 88.7526738391  | Program output: 6.7526738391  
Correct output: -27.9825817496 | Program output: 20.0174182504 
Correct output: -36.0605266238 | Program output: -22.0605266238
Correct output: -98.4940591545 | Program output: -27.4940591545
Correct output: 118.444904963  | Program output: 132.063257001 
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -31.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -46.7139415536
Correct output: -85.4359203887 | Program output: -70.4359203887
Correct output: 29.5496488004  | Program output: 83.5496488004 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: 3.4526566369  
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -99.8513267506
Correct output: -16.4772789847 | Program output: 7.5227210153  
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup float_dec float_rot integer_add integer_rot integer_div float_dec float_dup in1 float_rot integer_add float_dec float_dup float_dec float_dup float_dec float_rot integer_add integer_rot integer_div float_dec float_dup in1 float_rot integer_add integer_rot integer_div float_dup in1 float_rot float_frominteger float_pop integer_shove float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [75.0 3 9.0 2 30.0 1 1.0956 10 31.0 2 30.8662 11 100.0 12 56.0 2 82.0 2 48.0 12 14.0 2 71.0 2 13.6184 11 1.0 2 65.0 2 6.2689 11 42.0 2 15.0 2 54.0 2 90.0 13 13.0 10 34.0 2 74.0 3 24.0 12 29.0 2]
Total: 1143.8491
Mean: 22.876982
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2517.151363699998
Median total errors in population: 1159.6264
Error averages by case: (125.76068050000012 4.349 62.81357769999999 3.201 84.69033449999999 2.684 65.83466200000076 10.793 85.3177344 3.131 81.58276169999912 9.943 148.72224529999997 12.077 108.58347309999999 3.768 128.84873499999813 8.033 98.50391070000039 11.261 67.45624080000003 3.161 121.43275389999997 2.884 73.21835450000022 10.302 59.564074100000404 9.611 115.42957560000002 3.173 60.883862400000424 9.747 96.09871719999998 3.128 71.19969879999998 3.193 109.77585059999853 10.829 143.3870574999999 12.936 64.18988980000057 9.598 89.39779169999986 4.479 125.6197161 3.613 74.48608040000012 11.723 83.92758539999997 2.809)
Error minima by case: (25.1069 2 1.0011 2 30.0 1 0.5291 2 31.0 2 1.9039 2 28.5771 9 9.3193 2 28.4896 2 24.7362 9 4.6045 1 20.9364 1 0.1969 2 0.1961 2 31.2834 2 0.3716 2 6.96 1 0.4962 2 28.541 2 5.4227 9 4.2767 8 1.9875 2 8.308 1 13.3113 9 29.0 1)
Average genome size in population (length): 32.486
Average program size in population (points): 33.486
Average percent parens in population: 0.030
Minimum age in population: 51.02483274391852
Maximum age in population: 54.95988734962884
Average age in population: 53.23240388311059
Median age in population: 53.26173684241076
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 94
Genome diversity (% unique Plush genomes):	 0.467
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.467
Total error diversity:				 0.097
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 36958748
--- Timings ---
Current time: 1529614943935 milliseconds
Total Time:         117.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.2 seconds, 42.1%
Fitness Testing:     53.7 seconds, 45.9%
Report:              14.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 56970.675599999995
Test mean error for best: 28.48534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -30.6738378996
Correct output: -31.2572440177 | Program output: -26.2572440177
Correct output: -46.4593524807 | Program output: -80.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -72.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: -74.3944449815
Correct output: -128.9331639543 | Program output: -76.9331639543
Correct output: 88.7526738391  | Program output: 2.7908266812  
Correct output: -27.9825817496 | Program output: 16.2508347625 
Correct output: -36.0605266238 | Program output: -26.0605266238
Correct output: -98.4940591545 | Program output: -31.4940591545
Correct output: 118.444904963  | Program output: 132.063257001 
Correct output: 90.2245669646  | Program output: 88.3233455125 
Correct output: -96.7391381937 | Program output: -35.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -50.7139415536
Correct output: -85.4359203887 | Program output: -74.4359203887
Correct output: 29.5496488004  | Program output: 82.048226834  
Correct output: 69.5585020781  | Program output: -24.4414979219
Correct output: -9.5473433631  | Program output: -0.5473433631 
Correct output: 73.1938622402  | Program output: 35.1938622402 
Correct output: -173.8513267506 | Program output: -103.8513267506
Correct output: -16.4772789847 | Program output: 3.5227210153  
Correct output: -40.8753187944 | Program output: -73.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup float_dec float_rot integer_add integer_rot integer_div float_dec float_dup in1 float_rot integer_add integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [71.0 2 5.0 2 34.0 2 1.0956 10 35.0 2 30.8662 11 104.0 12 52.0 3 85.9618 10 44.2334 11 10.0 1 67.0 2 13.6184 11 1.9012 11 61.0 2 6.2689 11 38.0 2 11.0 2 52.4986 9 94.0 13 9.0 1 38.0 2 70.0 1 20.0 12 33.0 2]
Total: 1135.4441
Mean: 22.708881
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2570.9952545999904
Median total errors in population: 1155.9328
Error averages by case: (126.28404170000003 4.465 64.29705890000001 3.332 87.24124439999999 3.051 68.11617630000096 10.79 88.44257929999999 3.277 83.11067789999915 9.76 150.55272849999992 12.077 110.08619099999999 4.134 131.49032759999778 8.544 100.70143430000054 10.849 68.7304989 3.281 123.2485126999999 2.805 77.78655040000022 10.198 62.298970900000214 9.435 116.75818059999999 3.298 64.69010300000059 9.506 97.88502619999997 3.317 71.8161509 3.362 111.2062884999983 10.424 148.72771529999983 12.879 65.8590885000011 9.081 91.87428670000003 3.983 127.48421500000005 3.524 76.25944570000003 11.426 86.59076140000002 2.659)
Error minima by case: (19.6293 2 0.991 1 9.9292 1 0.5291 2 14.1042 1 0.3686 2 0.5759 9 8.2175 2 51.9067 2 27.8927 8 4.6045 1 16.2971 1 1.3544 2 0.1961 2 14.6946 2 0.3537 2 5.9957 1 3.3914 2 28.5051 2 23.2746 9 6.4958 1 7.6272 2 18.8555 1 16.4155 9 2.2213 1)
Average genome size in population (length): 31.96
Average program size in population (points): 32.96
Average percent parens in population: 0.031
Minimum age in population: 52.32045587734319
Maximum age in population: 56.77384905377403
Average age in population: 54.63666649048166
Median age in population: 54.67371133241977
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 168
Genome diversity (% unique Plush genomes):	 0.453
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.453
Total error diversity:				 0.095
Error (vector) diversity:			 0.095
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 37757748
--- Timings ---
Current time: 1529614946921 milliseconds
Total Time:         120.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.5 seconds, 42.0%
Fitness Testing:     55.1 seconds, 45.9%
Report:              14.4 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 56970.675599999995
Test mean error for best: 28.48534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -30.6738378996
Correct output: -31.2572440177 | Program output: -26.2572440177
Correct output: -46.4593524807 | Program output: -80.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -72.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: -74.3944449815
Correct output: -128.9331639543 | Program output: -76.9331639543
Correct output: 88.7526738391  | Program output: 2.7908266812  
Correct output: -27.9825817496 | Program output: 16.2508347625 
Correct output: -36.0605266238 | Program output: -26.0605266238
Correct output: -98.4940591545 | Program output: -31.4940591545
Correct output: 118.444904963  | Program output: 132.063257001 
Correct output: 90.2245669646  | Program output: 88.3233455125 
Correct output: -96.7391381937 | Program output: -35.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -50.7139415536
Correct output: -85.4359203887 | Program output: -74.4359203887
Correct output: 29.5496488004  | Program output: 82.048226834  
Correct output: 69.5585020781  | Program output: -24.4414979219
Correct output: -9.5473433631  | Program output: -0.5473433631 
Correct output: 73.1938622402  | Program output: 35.1938622402 
Correct output: -173.8513267506 | Program output: -103.8513267506
Correct output: -16.4772789847 | Program output: 3.5227210153  
Correct output: -40.8753187944 | Program output: -73.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup float_dec float_rot integer_add integer_rot integer_div float_dec float_dup in1 float_rot integer_add integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [71.0 2 5.0 2 34.0 2 1.0956 10 35.0 2 30.8662 11 104.0 12 52.0 3 85.9618 10 44.2334 11 10.0 1 67.0 2 13.6184 11 1.9012 11 61.0 2 6.2689 11 38.0 2 11.0 2 52.4986 9 94.0 13 9.0 1 38.0 2 70.0 1 20.0 12 33.0 2]
Total: 1135.4441
Mean: 22.708881
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2635.510505999987
Median total errors in population: 1155.9328
Error averages by case: (130.8382232 4.592 67.10002490000001 3.507 90.1288657 2.919 70.70956140000058 10.453 91.16311739999998 3.438 85.0262273999996 10.366 152.4538773 12.131 113.64954629999998 3.925 133.11636049999873 6.717 102.3322469000003 11.491 71.5732014 3.432 126.14689079999998 3.189 74.8193081000002 10.32 65.98401179999996 7.523 120.9687391 3.492 70.6169128000003 9.706 99.47091859999998 3.444 76.47083909999998 3.499 115.48370239999868 9.354 146.5046745 12.958 68.0931736000005 9.702 94.22776440000004 4.099 132.1599324 4.001 78.52990350000002 11.81 88.73148250000003 3.143)
Error minima by case: (28.1612 2 1.0011 2 3.8542 1 0.0971 2 31.0 2 0.0842 2 18.6401 9 9.3193 2 35.4186 2 26.9004 8 2.3826 1 18.2279 1 0.0242 2 0.1961 2 30.1162 1 0.3716 2 5.3155 1 3.2977 1 15.105 1 22.264 8 6.971 1 0.5567 2 0.6855 1 15.422 9 2.1991 1)
Average genome size in population (length): 34.17
Average program size in population (points): 35.17
Average percent parens in population: 0.030
Minimum age in population: 53.37373584730085
Maximum age in population: 58.09357466465735
Average age in population: 56.02549292496133
Median age in population: 56.04844428133583
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 86
Genome diversity (% unique Plush genomes):	 0.488
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.488
Total error diversity:				 0.13
Error (vector) diversity:			 0.131
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 38611998
--- Timings ---
Current time: 1529614949974 milliseconds
Total Time:         123.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.8 seconds, 42.1%
Fitness Testing:     56.5 seconds, 45.8%
Report:              14.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 56970.675599999995
Test mean error for best: 28.48534
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -30.6738378996
Correct output: -31.2572440177 | Program output: -26.2572440177
Correct output: -46.4593524807 | Program output: -80.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -72.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: -74.3944449815
Correct output: -128.9331639543 | Program output: -76.9331639543
Correct output: 88.7526738391  | Program output: 2.7908266812  
Correct output: -27.9825817496 | Program output: 16.2508347625 
Correct output: -36.0605266238 | Program output: -26.0605266238
Correct output: -98.4940591545 | Program output: -31.4940591545
Correct output: 118.444904963  | Program output: 132.063257001 
Correct output: 90.2245669646  | Program output: 88.3233455125 
Correct output: -96.7391381937 | Program output: -35.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -50.7139415536
Correct output: -85.4359203887 | Program output: -74.4359203887
Correct output: 29.5496488004  | Program output: 82.048226834  
Correct output: 69.5585020781  | Program output: -24.4414979219
Correct output: -9.5473433631  | Program output: -0.5473433631 
Correct output: 73.1938622402  | Program output: 35.1938622402 
Correct output: -173.8513267506 | Program output: -103.8513267506
Correct output: -16.4772789847 | Program output: 3.5227210153  
Correct output: -40.8753187944 | Program output: -73.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup float_dec float_rot integer_add integer_rot integer_div float_dec float_dup in1 float_rot integer_add integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [71.0 2 5.0 2 34.0 2 1.0956 10 35.0 2 30.8662 11 104.0 12 52.0 3 85.9618 10 44.2334 11 10.0 1 67.0 2 13.6184 11 1.9012 11 61.0 2 6.2689 11 38.0 2 11.0 2 52.4986 9 94.0 13 9.0 1 38.0 2 70.0 1 20.0 12 33.0 2]
Total: 1135.4441
Mean: 22.708881
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2868.4721540000037
Median total errors in population: 1144.6992
Error averages by case: (139.9001121999999 4.613 77.734772 3.347 99.57426629999999 2.53 78.68877419999987 9.684 100.56641919999997 3.305 92.10870059999942 11.009 161.37256199999996 12.153 122.8993013 3.58 142.50554769999928 6.597 112.12796010000001 11.906 82.36391799999998 3.273 135.70587929999994 3.348 81.95135349999983 10.1 74.09774499999996 5.069 130.259592 3.357 83.16039600000052 10.076 110.12112989999999 3.35 86.4813738 3.357 126.49674469999947 8.664 154.56699269999996 13.0 77.99949039999996 9.826 104.0253199 4.022 141.71783960000002 4.064 88.30873300000003 12.059 98.16223060000004 3.286)
Error minima by case: (45.8937 2 0.2576 2 30.0 1 0.5291 2 31.0 2 0.0842 2 27.6923 9 9.3193 2 5.3961 2 28.0381 9 4.6172 1 35.1576 1 0.9033 2 0.1961 2 4.1066 1 0.3716 2 3.671 1 6.5612 1 28.5923 1 7.0927 9 6.8797 1 3.2738 1 0.6855 1 16.6583 9 29.0 1)
Average genome size in population (length): 33.28
Average program size in population (points): 34.28
Average percent parens in population: 0.032
Minimum age in population: 54.74380287728854
Maximum age in population: 59.35378153844067
Average age in population: 57.40835048720867
Median age in population: 57.43849325546398
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 243
Genome diversity (% unique Plush genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 243
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.132
Error (vector) diversity:			 0.135
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 39443998
--- Timings ---
Current time: 1529614953056 milliseconds
Total Time:         126.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.2 seconds, 42.1%
Fitness Testing:     57.8 seconds, 45.8%
Report:              15.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 56812.74339999999
Test mean error for best: 28.40637
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -32.6738378996
Correct output: -31.2572440177 | Program output: -28.2572440177
Correct output: -46.4593524807 | Program output: -82.4593524807
Correct output: 151.0806466807 | Program output: 148.5128948256
Correct output: -37.658849841  | Program output: -74.658849841 
Correct output: 134.1031121233 | Program output: 100.7221179027
Correct output: 29.6055550185  | Program output: -76.3944449815
Correct output: -128.9331639543 | Program output: -78.9331639543
Correct output: 88.7526738391  | Program output: 0.7526738391  
Correct output: -27.9825817496 | Program output: 14.0865699746 
Correct output: -36.0605266238 | Program output: -28.0605266238
Correct output: -98.4940591545 | Program output: -33.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 86.2260157501 
Correct output: -96.7391381937 | Program output: -37.7391381937
Correct output: 123.7897097488 | Program output: 114.2004965703
Correct output: -88.7139415536 | Program output: -52.7139415536
Correct output: -85.4359203887 | Program output: -76.4359203887
Correct output: 29.5496488004  | Program output: 79.9591474278 
Correct output: 69.5585020781  | Program output: -26.4414979219
Correct output: -9.5473433631  | Program output: -2.5473433631 
Correct output: 73.1938622402  | Program output: 33.1938622402 
Correct output: -173.8513267506 | Program output: -105.8513267506
Correct output: -16.4772789847 | Program output: 1.5227210153  
Correct output: -40.8753187944 | Program output: -75.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup float_dec float_rot integer_add integer_rot integer_div float_dec float_dup in1 float_rot integer_rot integer_div float_dec float_dup in1 float_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [69.0 3 3.0 2 36.0 2 2.5678 12 37.0 2 33.381 10 106.0 12 50.0 2 88.0 2 42.0692 9 8.0 2 65.0 2 10.4531 9 3.9986 10 59.0 2 9.5892 12 36.0 2 9.0 2 50.4095 9 96.0 13 7.0 1 40.0 1 68.0 2 18.0 11 35.0 2]
Total: 1118.4684
Mean: 22.369368
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3104.589009500004
Median total errors in population: 1143.8491
Error averages by case: (147.96816249999952 5.687 87.03255360000001 3.648 109.18388829999999 2.927 88.9604789 10.132 110.11157359999994 3.558 105.94872819999986 10.961 169.6578909 12.151 131.91756099999998 4.074 153.31068639999987 6.302 121.31998010000005 11.535 91.56057900000002 3.473 144.0426408999999 3.7 93.3668528000003 10.618 84.27299229999983 6.861 138.3432655 3.515 91.58835960000027 10.45 118.03937159999994 3.655 94.64354289999997 3.55 133.25886570000068 7.933 163.4755857999999 12.964 88.62976879999971 8.564 112.13393950000003 4.232 149.61024170000002 3.896 98.3093588999999 11.893 108.11714100000006 3.506)
Error minima by case: (47.5932 2 2.2484 2 30.0 1 0.5291 2 17.0169 2 0.0842 2 15.1267 10 3.5583 2 20.4435 2 25.9685 9 3.2854 1 42.3218 1 0.5507 2 0.1961 2 33.427 1 0.3716 2 1.8898 1 1.8818 1 24.327 1 20.4616 8 6.8797 1 0.6532 1 8.3111 1 14.4487 9 23.6893 1)
Average genome size in population (length): 38.283
Average program size in population (points): 39.283
Average percent parens in population: 0.027
Minimum age in population: 55.74380287728854
Maximum age in population: 60.89244480279194
Average age in population: 58.84116465061517
Median age in population: 58.90643414244096
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 107
Genome diversity (% unique Plush genomes):	 0.489
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.489
Total error diversity:				 0.142
Error (vector) diversity:			 0.142
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 40401073
--- Timings ---
Current time: 1529614956133 milliseconds
Total Time:         129.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.4 seconds, 42.1%
Fitness Testing:     59.2 seconds, 45.8%
Report:              15.5 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 56812.74339999999
Test mean error for best: 28.40637
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -32.6738378996
Correct output: -31.2572440177 | Program output: -28.2572440177
Correct output: -46.4593524807 | Program output: -82.4593524807
Correct output: 151.0806466807 | Program output: 148.5128948256
Correct output: -37.658849841  | Program output: -74.658849841 
Correct output: 134.1031121233 | Program output: 100.7221179027
Correct output: 29.6055550185  | Program output: -76.3944449815
Correct output: -128.9331639543 | Program output: -78.9331639543
Correct output: 88.7526738391  | Program output: 0.7526738391  
Correct output: -27.9825817496 | Program output: 14.0865699746 
Correct output: -36.0605266238 | Program output: -28.0605266238
Correct output: -98.4940591545 | Program output: -33.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 86.2260157501 
Correct output: -96.7391381937 | Program output: -37.7391381937
Correct output: 123.7897097488 | Program output: 114.2004965703
Correct output: -88.7139415536 | Program output: -52.7139415536
Correct output: -85.4359203887 | Program output: -76.4359203887
Correct output: 29.5496488004  | Program output: 79.9591474278 
Correct output: 69.5585020781  | Program output: -26.4414979219
Correct output: -9.5473433631  | Program output: -2.5473433631 
Correct output: 73.1938622402  | Program output: 33.1938622402 
Correct output: -173.8513267506 | Program output: -105.8513267506
Correct output: -16.4772789847 | Program output: 1.5227210153  
Correct output: -40.8753187944 | Program output: -75.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup float_dec float_rot integer_add integer_rot integer_div float_dec float_dup in1 float_rot integer_rot integer_div float_dec float_dup in1 float_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [69.0 3 3.0 2 36.0 2 2.5678 12 37.0 2 33.381 10 106.0 12 50.0 2 88.0 2 42.0692 9 8.0 2 65.0 2 10.4531 9 3.9986 10 59.0 2 9.5892 12 36.0 2 9.0 2 50.4095 9 96.0 13 7.0 1 40.0 1 68.0 2 18.0 11 35.0 2]
Total: 1118.4684
Mean: 22.369368
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2399.9387817000056
Median total errors in population: 1137.9771
Error averages by case: (119.10124899999958 5.344 56.12149909999999 3.384 81.47172330000001 2.879 60.45119880000048 10.225 81.93141389999998 3.187 79.36010869999994 10.635 143.21636840000008 12.074 104.01163019999997 4.142 129.00665640000057 7.492 93.06540149999941 11.051 60.68053550000002 2.806 115.1947752 3.338 64.64218149999999 10.683 56.19926370000017 9.682 109.10782009999997 3.156 62.28101240000053 10.318 88.63067409999998 3.308 63.74269400000001 3.163 103.94643830000115 9.412 143.84044099999997 12.904 59.4574211 5.63 87.06092589999999 4.071 120.84983760000003 2.781 69.61973729999985 11.746 80.41777470000001 3.119)
Error minima by case: (52.3055 2 0.8088 2 1.4376 1 0.5291 2 10.411 2 0.0842 2 3.2258 9 6.0527 2 11.9939 2 24.3747 8 0.3227 1 47.6076 1 0.9033 2 0.1961 2 33.7358 1 0.3716 2 2.255 1 6.3089 1 28.5496 1 6.2743 9 4.5953 1 0.9774 1 10.9551 1 12.8025 9 0.8535 1)
Average genome size in population (length): 38.995
Average program size in population (points): 39.995
Average percent parens in population: 0.026
Minimum age in population: 57.18993689764466
Maximum age in population: 62.39247805231025
Average age in population: 60.28376331170453
Median age in population: 60.31105356140688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 208
Genome diversity (% unique Plush genomes):	 0.515
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 208
Syntactic diversity (% unique Push programs):	 0.515
Total error diversity:				 0.141
Error (vector) diversity:			 0.142
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 41375948
--- Timings ---
Current time: 1529614959281 milliseconds
Total Time:         132.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.8 seconds, 42.1%
Fitness Testing:     60.7 seconds, 45.8%
Report:              15.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 56670.14929999999
Test mean error for best: 28.33507
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -34.6738378996
Correct output: -31.2572440177 | Program output: -30.2572440177
Correct output: -46.4593524807 | Program output: -84.4593524807
Correct output: 151.0806466807 | Program output: 144.8495571265
Correct output: -37.658849841  | Program output: -76.658849841 
Correct output: 134.1031121233 | Program output: 98.2073062997 
Correct output: 29.6055550185  | Program output: -78.3944449815
Correct output: -128.9331639543 | Program output: -80.9331639543
Correct output: 88.7526738391  | Program output: -1.2473261609 
Correct output: -27.9825817496 | Program output: 12.0174182504 
Correct output: -36.0605266238 | Program output: -30.0605266238
Correct output: -98.4940591545 | Program output: -35.4940591545
Correct output: 118.444904963  | Program output: 125.7326963965
Correct output: 90.2245669646  | Program output: 84.1286859876 
Correct output: -96.7391381937 | Program output: -39.7391381937
Correct output: 123.7897097488 | Program output: 110.8802180871
Correct output: -88.7139415536 | Program output: -54.7139415536
Correct output: -85.4359203887 | Program output: -78.4359203887
Correct output: 29.5496488004  | Program output: 77.8700680217 
Correct output: 69.5585020781  | Program output: -28.4414979219
Correct output: -9.5473433631  | Program output: -4.5473433631 
Correct output: 73.1938622402  | Program output: 31.1938622402 
Correct output: -173.8513267506 | Program output: -107.8513267506
Correct output: -16.4772789847 | Program output: -0.4772789847 
Correct output: -40.8753187944 | Program output: -77.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup float_dec float_rot integer_add integer_rot integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger float_rot integer_rot integer_div float_dec float_dup in1 float_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [67.0 3 1.0 1 38.0 2 6.2311 12 39.0 2 35.8958 11 108.0 12 48.0 3 90.0 10 40.0 11 6.0 1 63.0 2 7.2878 9 6.0959 9 57.0 2 12.9095 11 34.0 2 7.0 2 48.3204 11 98.0 13 5.0 1 42.0 2 66.0 2 16.0 2 37.0 2]
Total: 1116.7404999999999
Mean: 22.33481
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2116.3348663999955
Median total errors in population: 1135.4441
Error averages by case: (107.36738530000002 3.338 44.39172309999998 3.087 71.34372900000001 2.812 47.22068080000028 10.206 72.23596710000001 2.892 68.90130359999921 10.927 135.74988000000002 12.094 91.89820699999999 3.919 120.23827550000065 8.21 81.27810169999914 11.24 49.10254470000001 2.452 104.05622120000004 3.032 54.424449499999824 10.598 45.63608940000004 10.442 97.7537245 2.811 49.24427490000028 10.729 77.02746290000002 3.014 51.24937860000001 2.832 91.29585910000037 9.446 134.67636219999991 12.867 47.21187369999999 3.471 76.4949538 3.466 108.48630280000003 2.355 57.70861279999996 11.915 70.31150320000002 2.875)
Error minima by case: (43.3262 2 1.0 1 2.8147 1 0.7361 2 1.39 2 0.0842 2 0.4739 9 12.5089 2 32.3044 2 15.662 9 4.6045 1 38.5059 1 0.5507 2 0.1961 2 28.2609 1 0.3716 2 2.0265 1 0.4962 1 0.5819 1 26.2746 9 5.0 1 0.1939 1 6.5018 1 12.7215 2 2.7693 1)
Average genome size in population (length): 41.958
Average program size in population (points): 42.958
Average percent parens in population: 0.024
Minimum age in population: 58.18993689764466
Maximum age in population: 63.67808756581917
Average age in population: 61.67430680239396
Median age in population: 61.71221121270582
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 214
Genome diversity (% unique Plush genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 214
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.125
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 42424898
--- Timings ---
Current time: 1529614962558 milliseconds
Total Time:         135.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.1 seconds, 42.1%
Fitness Testing:     62.2 seconds, 45.9%
Report:              16.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 54499.75129999995
Test mean error for best: 27.24988
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -32.6738378996
Correct output: -31.2572440177 | Program output: -28.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 159.5029079228
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 108.2665527118
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -78.9331639543
Correct output: 88.7526738391  | Program output: 9.1601273896  
Correct output: -27.9825817496 | Program output: 15.1687023686 
Correct output: -36.0605266238 | Program output: -28.0605266238
Correct output: -98.4940591545 | Program output: -33.4940591545
Correct output: 118.444904963  | Program output: 138.3938176055
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -37.7391381937
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -52.7139415536
Correct output: -85.4359203887 | Program output: -76.4359203887
Correct output: 29.5496488004  | Program output: 81.0036871309 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -2.5473433631 
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -105.8513267506
Correct output: -16.4772789847 | Program output: 1.6069652956  
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup float_dec float_rot integer_add integer_rot integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [69.0 3 3.0 2 30.0 1 8.4223 10 31.0 2 25.8366 11 100.0 12 50.0 2 79.5925 9 43.1513 12 8.0 2 65.0 2 19.9489 11 3.3421 9 59.0 2 0.3716 11 36.0 2 9.0 2 51.454 10 90.0 13 7.0 1 34.0 2 68.0 2 18.0842 12 29.0 2]
Total: 1085.2034999999998
Mean: 21.70407
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2404.484676399994
Median total errors in population: 1130.3365000000001
Error averages by case: (118.57897800000005 3.815 56.34874019999999 3.343 83.87694109999997 3.146 60.347533200000136 10.457 84.50651359999998 3.167 82.3469239000002 10.938 145.8592048 12.089 103.88425639999998 4.041 129.7387372000003 5.711 90.7983346999992 11.313 60.932343799999984 3.092 115.31058009999995 3.344 65.88967109999992 10.048 58.77525719999985 9.751 109.03147570000003 2.935 62.982874500000705 10.929 88.72973089999999 3.258 63.93614089999996 2.939 100.96477039999976 9.617 143.65876989999987 12.596 56.57653820000001 3.684 88.62033370000007 3.55 120.78030269999998 3.052 67.17009270000003 11.729 83.08363150000002 3.212)
Error minima by case: (42.3262 2 1.0 1 7.5406 1 0.2821 2 3.39 2 0.0842 2 13.6277 9 12.5089 2 7.1205 2 22.8844 9 6.0 1 37.5059 1 0.5507 2 0.1961 2 27.2609 1 0.3716 2 0.382 1 5.5698 1 13.5718 1 11.9267 9 3.2393 1 0.8061 1 23.8759 1 11.5259 2 13.1247 1)
Average genome size in population (length): 45.37
Average program size in population (points): 46.37
Average percent parens in population: 0.022
Minimum age in population: 60.71229330683764
Maximum age in population: 65.42736460951596
Average age in population: 63.085533622605
Median age in population: 63.10765123647434
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.149
Error (vector) diversity:			 0.151
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 43559148
--- Timings ---
Current time: 1529614965730 milliseconds
Total Time:         138.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.4 seconds, 42.1%
Fitness Testing:     63.6 seconds, 45.8%
Report:              16.7 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 54499.75129999995
Test mean error for best: 27.24988
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -32.6738378996
Correct output: -31.2572440177 | Program output: -28.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 159.5029079228
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 108.2665527118
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -78.9331639543
Correct output: 88.7526738391  | Program output: 9.1601273896  
Correct output: -27.9825817496 | Program output: 15.1687023686 
Correct output: -36.0605266238 | Program output: -28.0605266238
Correct output: -98.4940591545 | Program output: -33.4940591545
Correct output: 118.444904963  | Program output: 138.3938176055
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -37.7391381937
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -52.7139415536
Correct output: -85.4359203887 | Program output: -76.4359203887
Correct output: 29.5496488004  | Program output: 81.0036871309 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -2.5473433631 
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -105.8513267506
Correct output: -16.4772789847 | Program output: 1.6069652956  
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup float_dec float_rot integer_add integer_rot integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [69.0 3 3.0 2 30.0 1 8.4223 10 31.0 2 25.8366 11 100.0 12 50.0 2 79.5925 9 43.1513 12 8.0 2 65.0 2 19.9489 11 3.3421 9 59.0 2 0.3716 11 36.0 2 9.0 2 51.454 10 90.0 13 7.0 1 34.0 2 68.0 2 18.0842 12 29.0 2]
Total: 1085.2034999999998
Mean: 21.70407
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2697.431373200012
Median total errors in population: 1122.3797
Error averages by case: (128.8047087 4.145 67.8593395 3.435 95.94331199999998 3.226 72.05463599999972 10.988 96.38775120000003 3.162 94.27541119999964 10.66 158.0031949000001 12.206 115.17869420000001 3.963 141.5338146999999 4.781 101.51433899999924 10.842 72.4071404 3.355 126.29436399999996 3.453 77.62823879999952 9.762 71.8745337000001 9.803 119.56517579999993 3.079 75.06022210000046 11.26 100.17768210000004 3.393 74.77285239999999 3.082 110.97044629999895 9.582 160.9821972999999 12.769 67.93844499999997 3.559 102.79393449999999 3.282 130.59100170000005 3.273 78.15474579999996 11.266 95.08119190000004 3.258)
Error minima by case: (36.3262 2 0.0 0 15.0939 1 0.7361 2 15.3743 1 0.0842 2 28.3985 9 13.7113 2 49.6168 2 5.6981 9 4.0 1 31.5059 1 0.5507 2 0.0721 1 21.2609 1 0.3716 2 2.0265 1 3.507 1 24.5496 1 18.3392 8 0.0162 1 0.8061 1 21.0687 1 5.8072 1 18.5908 1)
Average genome size in population (length): 49.571
Average program size in population (points): 50.571
Average percent parens in population: 0.020
Minimum age in population: 62.20446540913281
Maximum age in population: 66.3846748566641
Average age in population: 64.45914177610537
Median age in population: 64.50049127513392
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 82
Genome diversity (% unique Plush genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.148
Error (vector) diversity:			 0.152
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 44798423
--- Timings ---
Current time: 1529614969081 milliseconds
Total Time:         142.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.7 seconds, 42.0%
Fitness Testing:     65.2 seconds, 45.9%
Report:              17.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 53407.223099999945
Test mean error for best: 26.70361
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -34.6738378996
Correct output: -31.2572440177 | Program output: -30.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 159.5029079228
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 108.2665527118
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -80.9331639543
Correct output: 88.7526738391  | Program output: 9.1601273896  
Correct output: -27.9825817496 | Program output: 13.0044375806 
Correct output: -36.0605266238 | Program output: -30.0605266238
Correct output: -98.4940591545 | Program output: -35.4940591545
Correct output: 118.444904963  | Program output: 138.3938176055
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -39.7391381937
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -54.7139415536
Correct output: -85.4359203887 | Program output: -78.4359203887
Correct output: 29.5496488004  | Program output: 78.9146077248 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -4.5473433631 
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -107.8513267506
Correct output: -16.4772789847 | Program output: -0.4772789847 
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod float_pop float_pop float_inc in1 integer_add integer_rot float_dec float_dup float_dec integer_rot float_dec float_dup float_dec integer_add integer_rot integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float)
Errors: [67.0 3 1.0 1 30.0 1 8.4223 10 31.0 2 25.8366 11 100.0 12 48.0 3 79.5925 9 40.987 12 6.0 1 63.0 2 19.9489 11 3.3421 9 57.0 2 0.3716 11 34.0 2 7.0 2 49.365 11 90.0 13 5.0 1 34.0 2 66.0 2 16.0 2 29.0 2]
Total: 1048.866
Mean: 20.97732
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2405.5095948000103
Median total errors in population: 1118.4684
Error averages by case: (117.18446040000003 4.164 55.319813499999974 3.208 84.19149429999999 3.023 61.78255439999946 11.312 84.85794960000003 2.976 83.55682639999974 10.488 147.43329640000002 12.166 103.18742780000002 3.782 130.34732819999985 5.726 90.06216029999955 10.491 59.93145879999997 3.121 114.48115650000003 3.295 65.24905979999961 9.7 63.15820929999986 9.899 107.91463539999995 3.088 63.73573470000052 11.316 88.0449461 3.181 62.23148169999999 2.99 99.92247919999929 9.608 148.31597549999992 12.919 55.63110090000001 3.425 90.48190739999998 3.288 119.22353029999998 3.089 66.21323219999996 10.343 83.29437570000002 3.159)
Error minima by case: (41.3126 2 0.0 0 30.0 1 0.7361 2 30.7832 1 0.0842 3 23.8051 9 15.5239 2 54.7715 2 22.3747 8 4.0 1 26.4452 1 0.5507 2 0.1961 2 0.7115 1 0.3294 3 0.382 1 4.5698 1 23.7492 2 38.5496 9 2.4317 1 1.7043 1 22.8759 1 10.8025 1 29.0 1)
Average genome size in population (length): 51.165
Average program size in population (points): 52.165
Average percent parens in population: 0.019
Minimum age in population: 63.47559254318548
Maximum age in population: 67.64306879058626
Average age in population: 65.8776248306636
Median age in population: 65.91271265158002
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 75
Genome diversity (% unique Plush genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.166
Error (vector) diversity:			 0.166
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 46077548
--- Timings ---
Current time: 1529614972445 milliseconds
Total Time:         145.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.1 seconds, 42.0%
Fitness Testing:     66.8 seconds, 45.9%
Report:              17.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 53425.57549999999
Test mean error for best: 26.71279
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -34.6738378996
Correct output: -31.2572440177 | Program output: -30.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 157.6712390733
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 107.0091469103
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -80.9331639543
Correct output: 88.7526738391  | Program output: 7.5678022125  
Correct output: -27.9825817496 | Program output: 13.0044375806 
Correct output: -36.0605266238 | Program output: -30.0605266238
Correct output: -98.4940591545 | Program output: -35.4940591545
Correct output: 118.444904963  | Program output: 136.8111774543
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -39.7391381937
Correct output: 123.7897097488 | Program output: 122.5011927781
Correct output: -88.7139415536 | Program output: -54.7139415536
Correct output: -85.4359203887 | Program output: -78.4359203887
Correct output: 29.5496488004  | Program output: 78.9146077248 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -4.5473433631 
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -107.8513267506
Correct output: -16.4772789847 | Program output: -0.4772789847 
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec integer_rot float_dec float_dup float_dec float_rot integer_add integer_rot integer_div float_dec float_dup integer_add integer_rot float_dec float_dup in1 float_rot integer_rot integer_div float_dec float_dup float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [67.0 3 1.0 1 30.0 1 6.5906 11 31.0 2 27.094 9 100.0 12 48.0 3 81.1849 10 40.987 12 6.0 1 63.0 2 18.3663 10 3.3421 9 57.0 2 1.2885 9 34.0 2 7.0 2 49.365 11 90.0 13 5.0 1 34.0 2 66.0 2 16.0 2 29.0 2]
Total: 1046.2184000000002
Mean: 20.924368
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2488.1161301000043
Median total errors in population: 1116.7404999999999
Error averages by case: (121.59814450000005 4.089 59.34106440000002 2.979 86.2258766 2.716 65.74502089999936 10.85 86.8856008 2.999 84.4904296999998 10.72 149.39166090000003 12.06 106.92441799999997 3.93 132.7067091999996 7.967 95.66821229999933 11.032 63.96317329999999 2.956 118.38120109999998 3.221 68.87386100000002 10.154 64.31472840000036 9.536 112.2302406 2.973 64.73979940000012 11.049 92.09725550000003 3.247 66.98123019999996 3.062 105.22030869999969 9.96 149.42587529999994 12.879 60.24825319999999 3.115 92.94897609999998 3.439 123.6647033 3.161 70.63650060000006 9.192 85.05688610000001 3.07)
Error minima by case: (26.6738 2 0.0 0 3.6946 1 0.7361 2 5.1059 1 0.0842 2 23.6056 8 16.5239 2 6.7527 2 7.4201 8 0.8578 1 27.4941 1 0.5507 2 0.0464 2 24.2609 1 0.3716 3 0.382 1 0.8202 1 18.8612 1 17.5129 9 2.0 1 0.6873 1 23.8759 1 4.0852 1 1.8894 1)
Average genome size in population (length): 52.204
Average program size in population (points): 53.204
Average percent parens in population: 0.019
Minimum age in population: 65.15453166098473
Maximum age in population: 69.21675146384311
Average age in population: 67.33006164735056
Median age in population: 67.39699743462903
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 104
Genome diversity (% unique Plush genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.18
Error (vector) diversity:			 0.181
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 47382648
--- Timings ---
Current time: 1529614975672 milliseconds
Total Time:         148.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.4 seconds, 41.9%
Fitness Testing:     68.4 seconds, 46.0%
Report:              17.9 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 52322.312199999935
Test mean error for best: 26.16116
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -36.6738378996
Correct output: -31.2572440177 | Program output: -32.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 159.5029079228
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 108.2665527118
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -82.9331639543
Correct output: 88.7526738391  | Program output: 9.1601273896  
Correct output: -27.9825817496 | Program output: 10.8401727927 
Correct output: -36.0605266238 | Program output: -32.0605266238
Correct output: -98.4940591545 | Program output: -37.4940591545
Correct output: 118.444904963  | Program output: 138.3938176055
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -41.7391381937
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -56.7139415536
Correct output: -85.4359203887 | Program output: -80.4359203887
Correct output: 29.5496488004  | Program output: 76.8255283186 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -6.5473433631 
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -109.8513267506
Correct output: -16.4772789847 | Program output: -2.4772789847 
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_dup float_dec float_rot integer_add integer_rot integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add float_dup float_dec float_rot integer_add integer_rot integer_rot integer_div float_dec float_dup in1 float_rot integer_rot integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [65.0 3 1.0 1 30.0 1 8.4223 10 31.0 2 25.8366 11 100.0 12 46.0 2 79.5925 9 38.8228 11 4.0 1 61.0 2 19.9489 11 3.3421 9 55.0 2 0.3716 11 32.0 2 5.0 1 47.2759 11 90.0 13 3.0 1 34.0 2 64.0 2 14.0 2 29.0 2]
Total: 1021.6126999999999
Mean: 20.432255
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2180.5345574000057
Median total errors in population: 1094.3856
Error averages by case: (111.50015340000016 4.323 48.46637809999999 3.119 71.96738939999999 2.286 55.746214699999484 10.289 72.6988788 3.005 71.06967100000021 10.76 135.15997120000017 12.052 96.6834262 3.926 117.9671025999992 8.636 82.25337539999924 11.379 53.145075199999994 3.059 107.73047009999993 3.292 61.830126100000875 10.647 49.66549770000079 9.083 101.98647880000003 2.918 49.944819999999666 10.702 81.53021170000001 3.239 57.135247999999955 3.201 93.16142780000006 9.789 130.3350296999999 12.876 47.835252999999966 3.174 76.2398864 3.712 115.25847490000002 3.299 58.06754740000001 10.487 70.83744979999999 3.066)
Error minima by case: (15.9904 2 0.0 0 16.8953 1 0.7361 2 25.6958 1 0.0842 2 25.5546 9 15.1176 2 6.7527 2 4.4726 9 3.0 1 11.8045 1 0.5507 2 0.1961 2 4.257 1 0.3716 2 1.2625 1 4.0 1 28.5496 1 20.4415 9 1.7077 1 1.0166 1 22.4723 1 7.0327 1 22.4794 1)
Average genome size in population (length): 50.503
Average program size in population (points): 51.503
Average percent parens in population: 0.020
Minimum age in population: 66.15453166098473
Maximum age in population: 70.69805664779034
Average age in population: 68.85253240184296
Median age in population: 68.93043312522612
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 114
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.233
Error (vector) diversity:			 0.234
Behavioral diversity:				 0.235
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 48645223
--- Timings ---
Current time: 1529614979083 milliseconds
Total Time:         152.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.7 seconds, 41.9%
Fitness Testing:     70.0 seconds, 46.0%
Report:              18.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 52021.05659999998
Test mean error for best: 26.01053
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -37.6738378996
Correct output: -31.2572440177 | Program output: -33.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -83.9331639543
Correct output: 88.7526738391  | Program output: 6.7526738391  
Correct output: -27.9825817496 | Program output: 9.7580403987  
Correct output: -36.0605266238 | Program output: -33.0605266238
Correct output: -98.4940591545 | Program output: -38.4940591545
Correct output: 118.444904963  | Program output: 133.6458971521
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -42.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -57.7139415536
Correct output: -85.4359203887 | Program output: -81.4359203887
Correct output: 29.5496488004  | Program output: 75.7809886156 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -7.5473433631 
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -110.8513267506
Correct output: -16.4772789847 | Program output: -3.4772789847 
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec integer_rot integer_div float_dec float_dup integer_add integer_rot float_dec float_dup in1 float_rot integer_rot integer_div float_dec float_dup float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger in2 float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float)
Errors: [64.0 3 2.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 100.0 12 45.0 3 82.0 2 37.7406 12 3.0 1 60.0 1 15.201 10 3.3421 9 54.0 2 4.6088 9 31.0 2 4.0 1 46.2313 11 90.0 13 2.0 1 34.0 2 63.0 2 13.0 2 29.0 2]
Total: 1000.6599
Mean: 20.013199
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2014.6204090999945
Median total errors in population: 1078.8742
Error averages by case: (105.31986230000014 4.467 41.69336289999998 3.017 66.04363340000002 2.245 47.85387049999981 10.269 65.78946850000001 3.007 62.51891950000027 10.348 128.21028670000013 12.085 90.9433227 3.993 110.14190559999909 8.166 74.9945777999996 11.291 46.34609929999998 2.956 102.19670519999995 3.3 55.300292700000746 10.517 45.17351320000077 9.075 96.01625439999995 3.212 41.42220479999983 10.313 76.3586428 3.289 51.12120859999998 3.351 87.18446409999987 9.974 127.04742489999994 12.88 39.43626009999999 3.272 70.45088549999996 3.697 108.40968880000004 3.226 49.75498919999975 8.788 65.14756560000002 3.007)
Error minima by case: (1.0142 2 0.0 0 30.0 1 0.5291 3 19.4707 1 0.0842 3 18.5549 10 0.3248 2 9.3443 2 21.9826 9 1.0 1 2.1656 1 0.0224 2 0.1961 1 3.9205 1 0.3716 2 0.382 1 0.9128 1 18.6108 1 16.8806 9 0.0 0 2.6025 1 22.4723 1 10.4773 1 29.0 1)
Average genome size in population (length): 53.251
Average program size in population (points): 54.251
Average percent parens in population: 0.019
Minimum age in population: 68.0526085005423
Maximum age in population: 72.02583252658992
Average age in population: 70.37664961008534
Median age in population: 70.37586918479957
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.269
Error (vector) diversity:			 0.27
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 49976498
--- Timings ---
Current time: 1529614982440 milliseconds
Total Time:         155.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.0 seconds, 41.8%
Fitness Testing:     71.6 seconds, 46.1%
Report:              18.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 51309.88469999996
Test mean error for best: 25.65494
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -38.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 159.5029079228
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 108.2665527118
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -84.9331639543
Correct output: 88.7526738391  | Program output: 9.1601273896  
Correct output: -27.9825817496 | Program output: 8.6759080048  
Correct output: -36.0605266238 | Program output: -34.0605266238
Correct output: -98.4940591545 | Program output: -39.4940591545
Correct output: 118.444904963  | Program output: 138.3938176055
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -43.7391381937
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -58.7139415536
Correct output: -85.4359203887 | Program output: -82.4359203887
Correct output: 29.5496488004  | Program output: 74.7364489125 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -8.5473433631 
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -111.8513267506
Correct output: -16.4772789847 | Program output: -4.4772789847 
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop float_inc in1 integer_add integer_rot float_dec float_dup float_dec integer_rot float_dec float_dup float_dec integer_add integer_rot integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [63.0 3 3.0 1 30.0 1 8.4223 10 31.0 2 25.8366 11 100.0 12 44.0 3 79.5925 9 36.6585 11 2.0 1 59.0 2 19.9489 11 3.3421 9 53.0 2 0.3716 11 30.0 1 3.0 1 45.1868 10 90.0 13 1.0 1 34.0 2 62.0 2 12.0 2 29.0 2]
Total: 998.3592999999998
Mean: 19.967186
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2256.9426083000003
Median total errors in population: 1048.866
Error averages by case: (114.59280080000016 4.811 51.797767799999995 2.929 75.2411075 2.436 58.21801620000024 10.314 75.98844410000002 3.158 72.7134863999997 10.076 137.58326840000012 12.093 100.36524210000002 4.379 122.14757779999864 8.112 85.16082759999935 11.601 56.15413639999995 2.887 111.01242179999993 3.57 64.222114900001 10.323 54.989115400001 9.022 105.09549520000003 3.504 52.34885580000011 10.052 84.67826700000003 3.52 60.98563739999995 3.75 96.03013800000012 10.293 134.32270559999986 12.868 50.64581619999999 3.62 78.93721889999996 3.822 118.63950850000005 3.536 60.856425199999855 5.891 74.48021330000002 3.169)
Error minima by case: (28.31 2 0.0 0 22.8458 1 0.5291 2 6.3885 1 1.9039 2 25.0053 8 13.7113 2 1.2777 2 4.9193 8 1.0 1 11.5285 1 0.5507 2 0.1961 1 16.5778 1 0.3716 2 0.382 1 2.0 1 26.5496 2 13.0056 8 0.0 0 2.8199 1 21.0687 1 8.4487 1 12.9403 1)
Average genome size in population (length): 56.331
Average program size in population (points): 57.331
Average percent parens in population: 0.018
Minimum age in population: 69.0526085005423
Maximum age in population: 73.48117242013574
Average age in population: 71.8313755261258
Median age in population: 71.89786465804512
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.291
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 51384773
--- Timings ---
Current time: 1529614985883 milliseconds
Total Time:         158.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.3 seconds, 41.7%
Fitness Testing:     73.3 seconds, 46.1%
Report:              19.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 50291.29240000003
Test mean error for best: 25.14565
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -40.6738378996
Correct output: -31.2572440177 | Program output: -36.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 157.6712390733
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 107.0091469103
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -86.9331639543
Correct output: 88.7526738391  | Program output: 7.5678022125  
Correct output: -27.9825817496 | Program output: 6.5116432168  
Correct output: -36.0605266238 | Program output: -36.0605266238
Correct output: -98.4940591545 | Program output: -41.4940591545
Correct output: 118.444904963  | Program output: 136.8111774543
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -45.7391381937
Correct output: 123.7897097488 | Program output: 122.5011927781
Correct output: -88.7139415536 | Program output: -60.7139415536
Correct output: -85.4359203887 | Program output: -84.4359203887
Correct output: 29.5496488004  | Program output: 72.6473695064 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -10.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -113.8513267506
Correct output: -16.4772789847 | Program output: -6.4772789847 
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop in1 integer_add integer_rot float_dec integer_add integer_rot float_dec float_dup float_dec float_rot integer_add integer_rot integer_div float_dec float_dup integer_add integer_rot float_dec float_dup integer_add float_dup_times float_dec float_dup in1 float_rot float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dup in1 float_rot float_dec integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_dup_items integer_rot integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [61.0 2 5.0 1 30.0 1 6.5906 11 31.0 2 27.094 9 100.0 12 42.0 3 81.1849 10 34.4942 12 0.0 0 57.0 2 18.3663 10 3.3421 9 51.0 2 1.2885 9 28.0 2 1.0 1 43.0977 9 90.0 13 1.0 2 34.0 2 60.0 1 10.0 1 29.0 2]
Total: 973.4583
Mean: 19.469166
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2381.332467000003
Median total errors in population: 1042.5367
Error averages by case: (118.08213480000013 4.614 56.179998999999995 2.509 82.17759410000001 2.243 63.9251259000003 10.408 82.78449430000003 2.945 79.88433819999959 10.219 145.3311873 12.099 103.91404979999997 4.103 125.54088169999896 7.156 88.40607909999973 11.517 59.88327359999997 2.614 114.95590729999994 3.425 72.39639850000037 10.359 60.68438100000081 9.116 108.92014180000001 3.319 59.93953790000029 10.081 89.2573279 3.325 64.09405569999996 3.287 100.90629559999972 10.445 142.35288009999985 12.902 52.691321900000005 3.21 87.37807289999994 3.76 121.78427340000005 3.287 63.716851899999966 4.842 81.38286330000003 2.978)
Error minima by case: (34.3262 2 0.0 0 24.6124 1 0.7361 2 7.6352 1 0.4508 2 26.031 9 13.7113 2 41.7591 2 14.9955 8 0.0 0 29.5059 1 0.5507 2 0.1961 1 19.2609 1 0.3716 2 2.907 1 1.0 1 28.5923 2 20.4616 9 0.0 0 1.0166 1 21.0687 1 3.4902 1 14.4378 1)
Average genome size in population (length): 60.308
Average program size in population (points): 61.308
Average percent parens in population: 0.017
Minimum age in population: 70.0526085005423
Maximum age in population: 75.16825773567388
Average age in population: 73.24733107040731
Median age in population: 73.28013572781849
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.706
Total error diversity:				 0.278
Error (vector) diversity:			 0.279
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 52892473
--- Timings ---
Current time: 1529614989435 milliseconds
Total Time:         162.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.6 seconds, 41.6%
Fitness Testing:     75.0 seconds, 46.2%
Report:              19.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 49546.79509999998
Test mean error for best: 24.77340
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -42.6738378996
Correct output: -31.2572440177 | Program output: -38.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -88.9331639543
Correct output: 88.7526738391  | Program output: 6.7526738391  
Correct output: -27.9825817496 | Program output: 4.3473784289  
Correct output: -36.0605266238 | Program output: -38.0605266238
Correct output: -98.4940591545 | Program output: -43.4940591545
Correct output: 118.444904963  | Program output: 133.6458971521
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -47.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -62.7139415536
Correct output: -85.4359203887 | Program output: -86.4359203887
Correct output: 29.5496488004  | Program output: 70.5582901002 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -12.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -115.8513267506
Correct output: -16.4772789847 | Program output: -8.4772789847 
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot integer_rot float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2)
Errors: [59.0 3 7.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 100.0 12 40.0 2 82.0 2 32.33 12 2.0 1 55.0 2 15.201 10 3.3421 9 49.0 2 4.6088 9 26.0 2 1.0 1 41.0086 9 90.0 13 3.0 2 34.0 2 58.0 2 8.0 2 29.0 2]
Total: 956.0265999999999
Mean: 19.120531
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2836.349969800003
Median total errors in population: 1021.6126999999999
Error averages by case: (136.10349550000012 4.89 77.89330419999997 2.97 98.95593229999999 2.528 80.57557260000027 10.355 99.63090900000005 3.272 97.1860148999997 10.386 160.17171900000014 12.112 123.24437439999998 4.354 143.10129849999907 7.056 105.77710610000004 11.557 80.4988326 2.949 133.02029249999984 3.748 88.77978430000053 10.423 80.88233899999986 9.225 126.91911320000003 3.655 76.56161739999993 10.125 107.69505460000002 3.623 84.00848929999992 3.309 119.00380099999904 10.402 160.94048769999984 12.893 71.74096799999994 3.495 104.75361650000002 3.97 140.0741307 3.698 81.2618133 4.733 98.5739032 3.268)
Error minima by case: (25.6738 2 0.0 0 30.0 1 0.5291 2 28.2732 1 0.0842 2 25.5444 8 12.305 2 64.8315 2 18.9025 9 0.0 0 4.8132 1 0.5507 2 0.1961 1 14.7283 1 0.3716 2 2.907 1 0.0 0 1.3088 1 25.02 8 0.0 0 0.7397 1 19.6651 1 3.8153 1 29.0 1)
Average genome size in population (length): 63.39
Average program size in population (points): 64.39
Average percent parens in population: 0.016
Minimum age in population: 72.29028723197177
Maximum age in population: 76.5606559445163
Average age in population: 74.78149207367161
Median age in population: 74.83631229955434
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.294
Error (vector) diversity:			 0.295
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 54477223
--- Timings ---
Current time: 1529614992920 milliseconds
Total Time:         166.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.9 seconds, 41.5%
Fitness Testing:     76.8 seconds, 46.3%
Report:              20.2 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 48263.51419999999
Test mean error for best: 24.13176
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -45.6738378996
Correct output: -31.2572440177 | Program output: -41.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -91.9331639543
Correct output: 88.7526738391  | Program output: 6.7526738391  
Correct output: -27.9825817496 | Program output: 1.100981247   
Correct output: -36.0605266238 | Program output: -41.0605266238
Correct output: -98.4940591545 | Program output: -46.4940591545
Correct output: 118.444904963  | Program output: 133.6458971521
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -50.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -65.7139415536
Correct output: -85.4359203887 | Program output: -89.4359203887
Correct output: 29.5496488004  | Program output: 67.424670991  
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -15.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -118.8513267506
Correct output: -16.4772789847 | Program output: -11.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_rot} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec integer_rot integer_div float_dec float_dup integer_add integer_rot float_dec float_dup integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_rot in2 integer_min)
Errors: [56.0 3 10.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 100.0 12 37.0 3 82.0 2 29.0836 10 5.0 2 52.0 2 15.201 10 3.3421 9 46.0 2 4.6088 9 23.0 2 4.0 1 37.875 10 90.0 13 6.0 2 34.0 2 55.0 2 5.0 1 29.0 2]
Total: 940.6465999999999
Mean: 18.812931
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2252.5370230000067
Median total errors in population: 1008.8383
Error averages by case: (111.51382800000009 4.562 53.554723799999984 2.629 77.65097720000001 2.284 58.015365600000095 10.191 78.57890470000001 3.057 75.65396700000014 10.291 141.29639060000005 12.156 97.42449819999997 4.18 124.92475089999927 6.25 84.11904070000038 11.546 54.31795739999997 2.543 108.25172529999992 3.437 64.97633060000052 10.269 55.44412400000085 9.072 101.76614960000002 3.336 54.87167770000029 10.005 81.96783270000005 3.238 57.722506299999964 2.855 94.0101745999998 10.187 138.8822553999999 12.98 50.830050600000014 3.232 82.1333908 3.764 114.77004169999998 3.364 60.45072099999998 4.365 76.60563860000002 3.011)
Error minima by case: (24.6738 2 0.0 0 30.0 1 0.342 2 31.0 1 0.2815 2 17.3285 8 5.6799 2 6.7527 2 16.3286 8 0.0 0 25.4941 1 0.1776 2 0.1961 1 15.2609 1 0.3716 2 4.5515 1 0.0 0 13.2587 1 5.4018 8 0.0 0 0.6532 1 13.0508 1 5.0 1 29.0 1)
Average genome size in population (length): 66.428
Average program size in population (points): 67.428
Average percent parens in population: 0.015
Minimum age in population: 73.29028723197177
Maximum age in population: 78.35530984246596
Average age in population: 76.29192551364243
Median age in population: 76.32613338316399
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.309
Error (vector) diversity:			 0.312
Behavioral diversity:				 0.312
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 56137923
--- Timings ---
Current time: 1529614996499 milliseconds
Total Time:         169.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.2 seconds, 41.4%
Fitness Testing:     78.5 seconds, 46.3%
Report:              20.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 46443.91870000001
Test mean error for best: 23.22196
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -50.6738378996
Correct output: -31.2572440177 | Program output: -46.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 148.5128948256
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 100.7221179027
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -96.9331639543
Correct output: 88.7526738391  | Program output: 6.7526738391  
Correct output: -27.9825817496 | Program output: -3.9825817496 
Correct output: -36.0605266238 | Program output: -46.0605266238
Correct output: -98.4940591545 | Program output: -51.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -55.7391381937
Correct output: 123.7897097488 | Program output: 114.2004965703
Correct output: -88.7139415536 | Program output: -70.7139415536
Correct output: -85.4359203887 | Program output: -94.4359203887
Correct output: 29.5496488004  | Program output: 62.2019724757 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -20.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -123.8513267506
Correct output: -16.4772789847 | Program output: -16.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction float_mult} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_rot} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add float_mult float_dec float_shove float_dec float_rot float_dec integer_rot float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec integer_rot integer_div float_dec float_dup integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_rot in2 integer_min)
Errors: [51.0 2 15.0 2 30.0 1 2.5678 12 31.0 2 33.381 10 100.0 12 32.0 3 82.0 2 24.0 2 10.0 1 47.0 2 10.4531 9 3.3421 9 41.0 2 9.5892 12 18.0 2 9.0 2 32.6523 12 90.0 13 11.0 2 34.0 2 50.0 1 0.0 0 29.0 2]
Total: 914.9854999999999
Mean: 18.29971
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2263.468996600001
Median total errors in population: 987.5332999999999
Error averages by case: (110.72354670000003 4.413 55.936452799999984 2.782 77.24523759999998 2.219 58.38389840000033 10.181 78.69794780000002 2.971 77.23533210000019 10.389 141.38211740000006 12.118 98.73615460000005 4.328 123.88984689999953 5.55 81.64894270000053 11.52 55.16118539999999 2.555 108.18841769999995 3.605 65.48304120000049 10.344 57.63454900000101 9.149 100.94753839999998 3.25 56.10186170000049 10.053 82.18544760000002 3.319 57.92255179999997 2.783 92.7410297999998 9.819 144.93480079999986 12.955 51.08726490000004 3.438 85.2971533 3.711 114.15185530000001 3.29 59.53312240000002 4.304 76.23370030000001 2.94)
Error minima by case: (26.3262 2 0.0 0 12.3853 1 0.0727 2 4.1889 1 0.3686 2 19.2982 8 6.6799 2 18.7381 2 15.3286 2 0.0 0 4.8132 1 0.1776 2 0.1593 2 11.2609 1 0.3716 2 2.907 1 0.0 0 0.7601 1 20.7348 9 0.0 0 0.8635 1 7.7972 1 0.0 0 10.0824 1)
Average genome size in population (length): 71.3
Average program size in population (points): 72.3
Average percent parens in population: 0.014
Minimum age in population: 75.0644163733976
Maximum age in population: 80.02749722786896
Average age in population: 77.74362392158308
Median age in population: 77.78351632425613
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.308
Error (vector) diversity:			 0.309
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 57920423
--- Timings ---
Current time: 1529615000403 milliseconds
Total Time:         173.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.5 seconds, 41.3%
Fitness Testing:     80.4 seconds, 46.4%
Report:              21.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 46443.91870000001
Test mean error for best: 23.22196
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -50.6738378996
Correct output: -31.2572440177 | Program output: -46.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 148.5128948256
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 100.7221179027
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -96.9331639543
Correct output: 88.7526738391  | Program output: 6.7526738391  
Correct output: -27.9825817496 | Program output: -3.9825817496 
Correct output: -36.0605266238 | Program output: -46.0605266238
Correct output: -98.4940591545 | Program output: -51.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -55.7391381937
Correct output: 123.7897097488 | Program output: 114.2004965703
Correct output: -88.7139415536 | Program output: -70.7139415536
Correct output: -85.4359203887 | Program output: -94.4359203887
Correct output: 29.5496488004  | Program output: 62.2019724757 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -20.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -123.8513267506
Correct output: -16.4772789847 | Program output: -16.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction float_mult} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_rot} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add float_mult float_dec float_shove float_dec float_rot float_dec integer_rot float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec integer_rot integer_div float_dec float_dup integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_rot in2 integer_min)
Errors: [51.0 2 15.0 2 30.0 1 2.5678 12 31.0 2 33.381 10 100.0 12 32.0 3 82.0 2 24.0 2 10.0 1 47.0 2 10.4531 9 3.3421 9 41.0 2 9.5892 12 18.0 2 9.0 2 32.6523 12 90.0 13 11.0 2 34.0 2 50.0 1 0.0 0 29.0 2]
Total: 914.9854999999999
Mean: 18.29971
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2439.2584813000035
Median total errors in population: 969.2979
Error averages by case: (118.36193590000006 4.54 64.422091 2.997 86.3160781 2.516 66.81363290000074 10.242 86.75531760000003 3.139 85.7410495000004 10.414 147.62700950000007 12.255 103.6239383 4.4 130.97618499999967 5.016 86.7461078000005 11.665 62.04630470000001 2.711 113.78315469999981 3.846 72.53972120000047 10.258 65.16889460000102 9.223 108.17678750000006 3.501 65.13791600000079 9.939 88.2933879 3.601 67.02227449999997 2.97 100.32236579999957 9.789 145.72868549999995 13.062 57.411720800000026 3.884 90.13498699999997 3.769 123.0197423 3.426 63.809955299999984 4.211 84.70623790000003 3.199)
Error minima by case: (28.3262 2 0.0 0 30.0 1 0.342 2 20.0131 1 0.5325 2 27.5201 8 3.3894 2 61.2182 2 13.8844 2 0.0 0 23.5059 1 0.5507 2 0.0464 1 13.2609 1 0.3716 2 11.1294 1 0.0 0 18.0597 1 13.6641 7 0.0 0 0.8635 1 14.0508 1 0.0 0 26.1839 1)
Average genome size in population (length): 75.495
Average program size in population (points): 76.495
Average percent parens in population: 0.013
Minimum age in population: 76.46105189210178
Maximum age in population: 81.20139423038059
Average age in population: 79.18640116949909
Median age in population: 79.25197983294078
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.325
Error (vector) diversity:			 0.331
Behavioral diversity:				 0.331
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 59807798
--- Timings ---
Current time: 1529615004272 milliseconds
Total Time:         177.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.9 seconds, 41.1%
Fitness Testing:     82.3 seconds, 46.5%
Report:              21.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 44921.761799999986
Test mean error for best: 22.46088
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -54.6738378996
Correct output: -31.2572440177 | Program output: -50.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -100.9331639543
Correct output: 88.7526738391  | Program output: 6.7526738391  
Correct output: -27.9825817496 | Program output: -7.9825817496 
Correct output: -36.0605266238 | Program output: -50.0605266238
Correct output: -98.4940591545 | Program output: -55.4940591545
Correct output: 118.444904963  | Program output: 133.6458971521
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -59.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -74.7139415536
Correct output: -85.4359203887 | Program output: -98.4359203887
Correct output: 29.5496488004  | Program output: 58.0238136634 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -24.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -127.8513267506
Correct output: -16.4772789847 | Program output: -20.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec integer_rot integer_div float_dec float_dup integer_add integer_rot float_dec float_dup in1 float_rot integer_rot integer_dup_items float_dec integer_swap float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [47.0 3 19.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 100.0 12 28.0 2 82.0 2 20.0 1 14.0 2 43.0 2 15.201 10 3.3421 9 37.0 2 4.6088 9 14.0 2 13.0 2 28.4742 11 90.0 13 15.0 2 34.0 2 46.0 2 4.0 2 29.0 2]
Total: 897.1622
Mean: 17.943245
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2359.450936399998
Median total errors in population: 959.5297999999999
Error averages by case: (114.3517903000001 4.607 64.5055985 3.222 82.6764999 2.637 63.27647680000047 10.198 82.69063230000003 3.144 81.2313553000005 10.275 143.63648870000006 12.114 102.37825800000003 4.401 125.8537632999998 5.008 81.65399570000008 10.852 61.67338059999998 3.149 111.38239459999994 3.819 69.95518210000044 10.224 61.21766150000094 9.09 104.85361290000002 3.472 62.12063950000069 9.933 86.87123519999999 3.644 65.02008829999995 3.03 93.99214159999958 9.797 143.80526609999987 12.932 55.65512460000003 4.0 86.68374570000005 3.976 119.79629369999999 3.592 59.006428899999996 4.033 80.86888230000001 3.145)
Error minima by case: (29.3262 2 0.0 0 24.6644 1 0.7361 2 13.5965 1 3.0449 2 1.8674 9 0.3516 2 5.1945 2 11.0165 1 0.0 0 21.0323 1 0.2922 2 0.1961 1 9.7274 1 0.3716 2 11.8934 1 0.0 0 0.8115 1 10.5453 9 0.0 0 0.9774 1 7.0328 1 0.0 0 20.8416 1)
Average genome size in population (length): 79.923
Average program size in population (points): 80.923
Average percent parens in population: 0.012
Minimum age in population: 77.88253282155308
Maximum age in population: 82.69372779734543
Average age in population: 80.56751245594778
Median age in population: 80.60694792895839
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.338
Error (vector) diversity:			 0.34
Behavioral diversity:				 0.34
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 61805873
--- Timings ---
Current time: 1529615008373 milliseconds
Total Time:         181.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.2 seconds, 40.9%
Fitness Testing:     84.5 seconds, 46.6%
Report:              22.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 44957.216900000014
Test mean error for best: 22.47861
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -53.6738378996
Correct output: -31.2572440177 | Program output: -49.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 159.5029079228
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 108.2665527118
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -99.9331639543
Correct output: 88.7526738391  | Program output: 9.1601273896  
Correct output: -27.9825817496 | Program output: -6.9825817496 
Correct output: -36.0605266238 | Program output: -49.0605266238
Correct output: -98.4940591545 | Program output: -54.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -58.7391381937
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -73.7139415536
Correct output: -85.4359203887 | Program output: -97.4359203887
Correct output: 29.5496488004  | Program output: 59.0683533665 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -23.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -126.8513267506
Correct output: -16.4772789847 | Program output: -19.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop float_inc in1 integer_add integer_rot float_dec float_dup float_dec integer_rot float_dec float_dup float_dec integer_rot float_dec float_dup float_dec integer_add float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec integer_rot float_dec integer_rot integer_div float_dec float_dup integer_add integer_rot float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec float_dec float_dup float_dec integer_add integer_rot float_dup in1 float_rot float_dec integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_dup_items integer_rot integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [48.0 3 18.0 2 30.0 1 8.4223 10 31.0 2 25.8366 11 100.0 12 29.0 3 79.5925 9 21.0 2 13.0 2 44.0 2 0.9572 9 3.3421 9 38.0 2 0.3716 11 15.0 2 12.0 2 29.5187 11 90.0 13 14.0 2 34.0 2 47.0 2 3.0 1 29.0 2]
Total: 891.0409999999999
Mean: 17.82082
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2593.143504999999
Median total errors in population: 951.27
Error averages by case: (124.53005690000012 4.935 78.07861059999993 3.605 90.95435479999998 2.897 72.58568340000024 10.279 92.01233750000004 3.247 90.24788380000048 10.365 151.91705310000012 12.125 110.54778369999998 4.488 133.93576889999983 5.162 88.71612249999988 9.093 75.58137529999999 3.615 120.4784156999998 3.918 78.04312760000045 10.144 73.38650340000024 9.192 114.58056830000005 3.702 71.00214100000048 10.066 95.60230790000006 3.701 79.4813587999999 3.51 105.01676679999963 10.382 148.05482929999988 12.948 64.73170099999999 4.053 93.84230960000005 4.099 128.26300980000005 3.716 65.0143305 3.831 90.1521048 3.314)
Error minima by case: (3.7321 2 0.0 0 26.9884 1 0.7361 2 18.096 1 0.3686 2 28.5345 9 3.8673 2 2.4284 2 9.8771 1 0.0 0 4.8132 1 0.2922 2 0.4185 1 0.2609 1 0.3716 2 11.8934 1 0.0 0 0.5606 2 3.2668 9 0.0 0 0.3686 1 11.2436 1 0.0 0 21.687 1)
Average genome size in population (length): 85.89
Average program size in population (points): 86.89
Average percent parens in population: 0.012
Minimum age in population: 79.0743940005966
Maximum age in population: 84.11118093660625
Average age in population: 81.86896600884836
Median age in population: 81.92979730342243
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.371
Error (vector) diversity:			 0.373
Behavioral diversity:				 0.374
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 63953123
--- Timings ---
Current time: 1529615012521 milliseconds
Total Time:         185.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.6 seconds, 40.8%
Fitness Testing:     86.6 seconds, 46.7%
Report:              23.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 44957.216900000014
Test mean error for best: 22.47861
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -53.6738378996
Correct output: -31.2572440177 | Program output: -49.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 159.5029079228
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 108.2665527118
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -99.9331639543
Correct output: 88.7526738391  | Program output: 9.1601273896  
Correct output: -27.9825817496 | Program output: -6.9825817496 
Correct output: -36.0605266238 | Program output: -49.0605266238
Correct output: -98.4940591545 | Program output: -54.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -58.7391381937
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -73.7139415536
Correct output: -85.4359203887 | Program output: -97.4359203887
Correct output: 29.5496488004  | Program output: 59.0683533665 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -23.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -126.8513267506
Correct output: -16.4772789847 | Program output: -19.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop float_inc in1 integer_add integer_rot float_dec float_dup float_dec integer_rot float_dec float_dup float_dec integer_rot float_dec float_dup float_dec integer_add float_dec float_dec float_dup float_dup integer_rot float_dec integer_yankdup integer_add integer_rot float_dec integer_rot float_dec integer_rot integer_div float_dec float_dup integer_add integer_rot float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec float_dec float_dup float_dec integer_add integer_rot float_dup in1 float_rot float_dec integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_dup_items integer_rot integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [48.0 3 18.0 2 30.0 1 8.4223 10 31.0 2 25.8366 11 100.0 12 29.0 3 79.5925 9 21.0 2 13.0 2 44.0 2 0.9572 9 3.3421 9 38.0 2 0.3716 11 15.0 2 12.0 2 29.5187 11 90.0 13 14.0 2 34.0 2 47.0 2 3.0 1 29.0 2]
Total: 891.0409999999999
Mean: 17.82082
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2755.440861199998
Median total errors in population: 940.5199
Error averages by case: (126.93088360000012 5.009 84.40813190000003 3.994 99.49687559999997 2.91 82.45204670000011 10.396 100.4184733 3.433 101.1090553000003 10.494 159.67946200000011 12.137 114.87022409999993 4.698 140.08445019999982 5.046 91.38744269999991 6.603 81.50988599999998 3.975 123.27442389999989 4.006 87.4081470000003 10.211 79.26800870000011 9.24 117.65868140000002 3.955 81.2451908000005 10.227 98.42508950000001 3.829 86.0229811 3.905 107.65531339999981 10.698 155.9467572999999 12.964 73.81366050000001 4.147 103.17832930000002 4.007 133.13549829999997 3.941 70.42424630000001 3.839 98.50360230000004 3.47)
Error minima by case: (3.9428 2 0.0 0 20.379 1 0.7361 2 10.6592 1 2.5534 2 16.4086 9 2.0547 2 9.5925 2 1.2432 1 0.0 0 0.763 1 0.2922 2 0.8526 1 0.9919 1 0.3716 2 9.0171 1 0.0 0 4.1654 1 36.976 9 0.0 0 0.8635 1 5.5995 1 0.0 0 14.5032 1)
Average genome size in population (length): 92.515
Average program size in population (points): 93.515
Average percent parens in population: 0.011
Minimum age in population: 80.90203972930024
Maximum age in population: 85.32424086906018
Average age in population: 83.27838201757427
Median age in population: 83.2950608374516
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.371
Error (vector) diversity:			 0.375
Behavioral diversity:				 0.375
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 66265998
--- Timings ---
Current time: 1529615016573 milliseconds
Total Time:         189.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.9 seconds, 40.6%
Fitness Testing:     88.7 seconds, 46.8%
Report:              23.7 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 42746.72470000001
Test mean error for best: 21.37336
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -61.6738378996
Correct output: -31.2572440177 | Program output: -57.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -107.9331639543
Correct output: 88.7526738391  | Program output: 6.7526738391  
Correct output: -27.9825817496 | Program output: -14.9825817496
Correct output: -36.0605266238 | Program output: -57.0605266238
Correct output: -98.4940591545 | Program output: -62.4940591545
Correct output: 118.444904963  | Program output: 133.6458971521
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -66.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -81.7139415536
Correct output: -85.4359203887 | Program output: -105.4359203887
Correct output: 29.5496488004  | Program output: 50.712035742  
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -31.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -134.8513267506
Correct output: -16.4772789847 | Program output: -27.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_shove float_dec float_frominteger integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot integer_rot float_dec float_dec float_dec float_dec float_dup float_dup integer_rot integer_rot float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [40.0 2 26.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 100.0 12 21.0 2 82.0 2 13.0 2 21.0 2 36.0 2 15.201 10 3.3421 9 30.0 1 4.6088 9 7.0 1 20.0 2 21.1624 12 90.0 13 22.0 2 34.0 2 39.0 2 11.0 2 29.0 2]
Total: 874.8504000000001
Mean: 17.497007
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2773.745644199998
Median total errors in population: 917.8816
Error averages by case: (125.76550220000009 4.971 89.05835049999999 4.186 100.52322239999994 2.919 80.40695080000015 10.365 101.16372149999998 3.311 100.6590545000005 10.424 161.3252916000001 12.182 113.66638519999997 4.619 142.3178129999998 4.702 92.3288507000001 5.017 86.10941929999991 4.039 122.89322839999983 4.161 86.46071820000024 10.173 80.23948239999983 9.26 116.20647640000014 3.939 79.94409960000057 10.136 98.68595530000006 3.926 89.31730599999989 4.106 106.44567860000002 10.899 158.8576186999999 13.022 78.82420009999997 4.238 105.1630833 3.916 130.2320229 3.799 72.25682189999996 3.875 99.29139070000002 3.418)
Error minima by case: (6.3262 2 1.0 1 15.1531 1 0.0304 2 13.6099 1 2.0963 2 27.3042 8 3.1641 2 1.367 2 1.9025 1 0.0 0 1.5059 1 0.6254 2 0.1961 1 0.5619 1 0.2005 2 5.0 1 0.0 0 9.1653 1 44.8005 9 0.0 0 3.509 2 1.3887 1 0.0 0 12.5086 1)
Average genome size in population (length): 99.574
Average program size in population (points): 100.574
Average percent parens in population: 0.010
Minimum age in population: 82.54125140092027
Maximum age in population: 87.0858199868015
Average age in population: 84.85645613265746
Median age in population: 84.8887254009352
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.397
Error (vector) diversity:			 0.4
Behavioral diversity:				 0.401
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 68755348
--- Timings ---
Current time: 1529615020908 milliseconds
Total Time:         193.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.2 seconds, 40.4%
Fitness Testing:     91.1 seconds, 47.0%
Report:              24.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 40988.283799999976
Test mean error for best: 20.49414
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -69.6738378996
Correct output: -31.2572440177 | Program output: -65.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 159.5029079228
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 108.2665527118
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -115.9331639543
Correct output: 88.7526738391  | Program output: 9.1601273896  
Correct output: -27.9825817496 | Program output: -22.9825817496
Correct output: -36.0605266238 | Program output: -65.0605266238
Correct output: -98.4940591545 | Program output: -70.4940591545
Correct output: 118.444904963  | Program output: 138.3938176055
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -74.7391381937
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -89.7139415536
Correct output: -85.4359203887 | Program output: -113.4359203887
Correct output: 29.5496488004  | Program output: 42.3557181174 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -39.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -142.8513267506
Correct output: -16.4772789847 | Program output: -35.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_swap} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop float_inc in1 integer_add integer_rot float_dec float_dup float_dec integer_rot float_dec float_dup float_dec float_dec float_dup float_dec integer_rot integer_div float_dec float_dec float_dup float_dup float_dec integer_rot float_dec float_dup float_dec integer_add integer_rot integer_div float_dec integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_div float_dec float_dec float_dup float_swap integer_rot float_dec float_dec float_dup integer_div float_dec integer_div float_dec integer_add integer_rot float_dec integer_rot integer_div float_dec float_dup integer_add integer_rot float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [32.0 3 34.0 2 30.0 1 8.4223 10 31.0 2 25.8366 11 100.0 12 13.0 2 79.5925 9 5.0 1 29.0 2 28.0 2 19.9489 11 3.3421 9 22.0 2 0.3716 11 1.0 1 28.0 3 12.8061 10 90.0 13 30.0 1 34.0 2 31.0 2 19.0 2 29.0 2]
Total: 862.3200999999999
Mean: 17.246403
Genome size: 141
Size: 142
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2805.420116199996
Median total errors in population: 905.487
Error averages by case: (125.0527999000001 4.911 92.55191639999991 4.061 101.69196509999998 2.961 81.82862880000015 10.286 102.62242650000003 3.388 101.16107000000065 10.315 161.70023940000007 12.213 113.38786809999999 4.378 144.28073989999987 4.638 92.99541160000005 4.576 89.3060878 4.004 122.50506719999986 4.068 86.75083270000017 10.17 81.88764519999981 9.088 115.98450060000013 3.938 81.18123580000064 9.957 97.92889140000004 3.851 92.91002789999986 4.197 105.8239550000001 10.678 162.12480089999985 12.998 83.77776170000001 4.205 106.2160184 3.944 129.99913200000006 3.831 76.51097639999998 4.055 101.02211750000002 3.507)
Error minima by case: (2.6738 2 1.0 1 7.6169 1 0.7361 2 0.6282 1 2.7113 2 3.6056 9 13.0 1 25.6988 2 0.3113 1 1.0 1 0.4941 1 0.5507 2 0.1961 1 0.7391 1 0.3716 2 1.0 1 0.9672 1 3.761 1 20.4616 8 0.0 0 1.6206 1 5.5995 1 0.0 0 1.9598 1)
Average genome size in population (length): 106.356
Average program size in population (points): 107.356
Average percent parens in population: 0.009
Minimum age in population: 84.19754490220296
Maximum age in population: 88.25403539862648
Average age in population: 86.29486806460227
Median age in population: 86.36987191272031
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.407
Error (vector) diversity:			 0.413
Behavioral diversity:				 0.414
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 71414248
--- Timings ---
Current time: 1529615025398 milliseconds
Total Time:         198.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.6 seconds, 40.1%
Fitness Testing:     93.5 seconds, 47.2%
Report:              25.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 41534.46780000001
Test mean error for best: 20.76723
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -67.6738378996
Correct output: -31.2572440177 | Program output: -63.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -113.9331639543
Correct output: 88.7526738391  | Program output: 6.7526738391  
Correct output: -27.9825817496 | Program output: -20.9825817496
Correct output: -36.0605266238 | Program output: -63.0605266238
Correct output: -98.4940591545 | Program output: -68.4940591545
Correct output: 118.444904963  | Program output: 133.6458971521
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -72.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -87.7139415536
Correct output: -85.4359203887 | Program output: -111.4359203887
Correct output: 29.5496488004  | Program output: 44.4447975236 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -37.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -140.8513267506
Correct output: -16.4772789847 | Program output: -33.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction tagged_381} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_swap} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop float_inc in1 integer_add integer_rot float_dec float_dup float_dec integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec tagged_381 float_dec float_frominteger integer_add integer_rot integer_div integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec float_dup float_dup float_dec integer_rot float_dec float_dup float_dec integer_add integer_rot integer_div float_dec integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_div float_dec float_dec float_dup float_swap integer_rot float_dec float_dec float_dup integer_div float_dec integer_div float_dec integer_add integer_rot float_dec integer_rot integer_div float_dec float_dup integer_add integer_rot float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [34.0 3 32.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 100.0 12 15.0 2 82.0 2 7.0 1 27.0 2 30.0 1 15.201 10 3.3421 9 24.0 2 4.6088 9 1.0 1 26.0 3 14.8951 11 90.0 13 28.0 2 34.0 2 33.0 2 17.0 2 29.0 2]
Total: 856.5831000000001
Mean: 17.131662
Genome size: 156
Size: 157
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 2944.3329132999984
Median total errors in population: 898.8299
Error averages by case: (129.54295120000006 5.154 100.34280079999992 4.213 105.40722769999995 3.078 87.9329904999999 10.268 106.89655940000002 3.482 106.19675000000048 10.358 165.72635880000013 12.23 119.71880659999994 4.48 149.40902219999992 4.626 94.48993190000009 4.871 97.63528069999997 4.231 127.28046479999985 4.254 92.57883440000028 10.162 88.72282399999939 9.23 120.7229139 4.148 86.8248592000005 9.937 103.03258320000005 4.017 101.44924639999994 4.557 111.03054030000038 10.404 166.1581337999999 13.023 91.24980999999997 4.441 111.91492869999996 3.992 135.45610320000003 4.083 82.61984370000005 4.536 104.5361479 3.682)
Error minima by case: (2.6738 2 0.0 0 3.0936 1 0.7361 1 0.7632 1 0.3686 2 6.0251 9 10.1956 1 5.7527 2 0.3023 1 0.0 0 1.5059 1 0.0879 2 0.5067 1 2.2768 1 0.3716 2 0.0 0 0.0 0 6.5698 1 20.4616 9 0.169 1 0.6946 1 2.7923 1 0.0 0 10.1569 1)
Average genome size in population (length): 113.611
Average program size in population (points): 114.611
Average percent parens in population: 0.009
Minimum age in population: 85.45138248923574
Maximum age in population: 90.00950412553497
Average age in population: 87.7166105406807
Median age in population: 87.73896996765606
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.427
Error (vector) diversity:			 0.429
Behavioral diversity:				 0.429
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 74254548
--- Timings ---
Current time: 1529615029892 milliseconds
Total Time:         202.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.9 seconds, 39.9%
Fitness Testing:     96.0 seconds, 47.3%
Report:              25.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 41445.66300000003
Test mean error for best: 20.72283
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -68.6738378996
Correct output: -31.2572440177 | Program output: -64.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -114.9331639543
Correct output: 88.7526738391  | Program output: 6.7526738391  
Correct output: -27.9825817496 | Program output: -21.9825817496
Correct output: -36.0605266238 | Program output: -64.0605266238
Correct output: -98.4940591545 | Program output: -69.4940591545
Correct output: 118.444904963  | Program output: 133.6458971521
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -73.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -88.7139415536
Correct output: -85.4359203887 | Program output: -112.4359203887
Correct output: 29.5496488004  | Program output: 43.4002578205 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -38.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -141.8513267506
Correct output: -16.4772789847 | Program output: -34.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop in1 integer_add float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec float_dec float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot integer_rot float_dec float_dec float_dec float_dec float_dup float_dup_items float_dec float_dec float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dup float_dup float_dup_items integer_rot float_dec integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dup float_dec float_dup integer_div float_dec integer_div float_dup_items integer_rot float_dec float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [33.0 3 33.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 100.0 12 14.0 2 82.0 2 6.0 1 28.0 2 29.0 2 15.201 10 3.3421 9 23.0 2 4.6088 9 0.0 0 27.0 3 13.8506 10 90.0 13 29.0 2 34.0 2 32.0 2 18.0 2 29.0 2]
Total: 852.5386000000001
Mean: 17.050772
Genome size: 135
Size: 136
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3060.3159950999984
Median total errors in population: 889.3723499999999
Error averages by case: (132.3020216000001 5.188 107.83732429999989 4.354 112.03090459999994 3.092 91.97193879999995 10.372 113.31953890000003 3.446 111.6642838000005 10.47 172.36501640000014 12.298 121.45697089999996 4.551 152.4411727999999 4.598 96.21786400000015 4.766 105.01389229999998 4.276 130.19940289999988 4.358 97.94939260000034 10.309 93.4271544999994 9.232 123.6800673000001 4.275 91.29179260000048 10.012 105.64869390000008 3.96 109.41326019999985 4.922 113.06873600000057 10.576 169.8207432999999 13.109 96.45328239999994 4.339 115.66384800000004 3.938 138.55096939999999 4.134 87.72338380000006 4.453 112.05333980000003 3.723)
Error minima by case: (2.3262 2 0.0 0 7.6169 1 0.2482 1 0.6282 1 0.3686 2 5.6663 9 8.7893 1 10.6652 2 0.6195 1 0.951 1 2.4941 1 0.3513 2 0.5067 1 0.5619 1 0.3716 2 0.0 0 0.906 1 1.6104 1 20.4616 10 0.4552 1 0.8071 1 1.3887 1 0.0 0 1.9598 1)
Average genome size in population (length): 121.091
Average program size in population (points): 122.091
Average percent parens in population: 0.008
Minimum age in population: 86.68303302439617
Maximum age in population: 91.08587045622573
Average age in population: 89.0699290359654
Median age in population: 89.10285970820632
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.418
Error (vector) diversity:			 0.425
Behavioral diversity:				 0.426
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 77281823
--- Timings ---
Current time: 1529615034562 milliseconds
Total Time:         207.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.2 seconds, 39.6%
Fitness Testing:     98.6 seconds, 47.6%
Report:              26.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 41222.313500000004
Test mean error for best: 20.61116
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -68.6738378996
Correct output: -31.2572440177 | Program output: -64.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 159.5029079228
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 108.2665527118
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -114.9331639543
Correct output: 88.7526738391  | Program output: 9.1601273896  
Correct output: -27.9825817496 | Program output: -21.9825817496
Correct output: -36.0605266238 | Program output: -64.0605266238
Correct output: -98.4940591545 | Program output: -69.4940591545
Correct output: 118.444904963  | Program output: 117.8194956409
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -73.7391381937
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -88.7139415536
Correct output: -85.4359203887 | Program output: -112.4359203887
Correct output: 29.5496488004  | Program output: 43.4002578205 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -38.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -141.8513267506
Correct output: -16.4772789847 | Program output: -34.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop float_pop float_inc in1 integer_add integer_rot float_dec float_dup float_dec integer_rot float_dec float_dup float_dec float_dec float_dup float_dec integer_rot integer_div float_dec float_dec float_dup float_dup float_dec integer_rot float_dec float_dup float_dec integer_add integer_rot integer_fromfloat float_dec integer_div float_dec float_dec float_dup float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot integer_rot float_dec float_dec float_dec float_dec float_dup float_dup integer_rot integer_rot float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_mod integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_dup float_dec float_dup integer_div float_dec integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [33.0 3 33.0 2 30.0 1 8.4223 10 31.0 2 25.8366 11 100.0 12 14.0 2 79.5925 9 6.0 1 28.0 2 29.0 2 0.6254 9 3.3421 9 23.0 2 0.3716 11 0.0 0 27.0 3 13.8506 10 90.0 13 29.0 2 34.0 2 32.0 2 18.0 2 29.0 2]
Total: 842.0410999999999
Mean: 16.840822
Genome size: 135
Size: 136
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2509.1634827999997
Median total errors in population: 883.9395
Error averages by case: (112.91148380000013 5.092 91.50503989999987 4.269 87.18712389999995 2.82 66.1642436000007 10.3 87.48987960000001 3.342 86.58132260000069 10.333 146.6783281000001 12.253 101.27318080000002 4.407 131.3741874999999 4.354 71.76235690000004 4.636 88.54951609999999 4.208 109.83521029999986 4.313 73.03201580000035 10.168 74.22384710000044 9.174 103.76145910000011 4.211 66.29795860000087 9.834 85.48676560000008 3.803 93.04244789999991 4.945 92.99406900000028 10.646 143.60354449999986 13.029 75.34725740000003 4.388 90.08052740000001 3.702 119.93178249999997 4.063 66.94032209999995 4.582 86.67661270000004 3.561)
Error minima by case: (1.2549 2 0.0925 1 13.0536 1 0.2482 2 2.8875 1 3.8969 2 2.5486 9 5.0668 1 6.7527 2 0.0 0 0.5387 1 1.9248 1 0.5507 2 0.2579 2 3.6798 1 0.3716 2 0.0 0 2.0 1 2.2571 1 9.5071 9 0.0 0 5.8718 1 15.4246 1 0.0 0 7.2046 1)
Average genome size in population (length): 127.735
Average program size in population (points): 128.735
Average percent parens in population: 0.008
Minimum age in population: 88.11074255032527
Maximum age in population: 92.69451498966075
Average age in population: 90.54509465121637
Median age in population: 90.56986035007974
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.955
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.955
Total error diversity:				 0.438
Error (vector) diversity:			 0.446
Behavioral diversity:				 0.446
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 80475198
--- Timings ---
Current time: 1529615039418 milliseconds
Total Time:         212.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.6 seconds, 39.4%
Fitness Testing:    101.4 seconds, 47.8%
Report:              27.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 41376.51540000002
Test mean error for best: 20.68826
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -69.6738378996
Correct output: -31.2572440177 | Program output: -65.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -115.9331639543
Correct output: 88.7526738391  | Program output: 6.7526738391  
Correct output: -27.9825817496 | Program output: -22.9825817496
Correct output: -36.0605266238 | Program output: -65.0605266238
Correct output: -98.4940591545 | Program output: -70.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -74.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -89.7139415536
Correct output: -85.4359203887 | Program output: -113.4359203887
Correct output: 29.5496488004  | Program output: 42.3557181174 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -39.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -142.8513267506
Correct output: -16.4772789847 | Program output: -35.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop in1 integer_add float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec float_dec float_dup integer_rot integer_div float_dec float_dec float_dup float_dec integer_add integer_rot integer_div float_dec integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add float_stackdepth float_dec integer_rot integer_div float_dec float_dup integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dup float_dup_items float_dup float_dup integer_div float_dec integer_div float_dec integer_add integer_rot float_dec integer_rot integer_div float_dec float_dup integer_add integer_rot float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [32.0 3 34.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 100.0 12 13.0 2 82.0 2 5.0 1 29.0 2 28.0 2 0.9572 9 3.3421 9 22.0 2 4.6088 9 1.0 1 28.0 3 12.8061 10 90.0 13 30.0 1 34.0 2 31.0 2 19.0 2 29.0 2]
Total: 836.2503
Mean: 16.725006
Genome size: 152
Size: 153
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3178.426124099998
Median total errors in population: 874.8504000000001
Error averages by case: (134.8933970000001 5.532 119.57873309999985 4.572 115.07446730000001 3.228 95.26570389999998 10.321 115.53845350000002 3.764 113.0103517000006 10.359 170.4402720000001 12.334 124.99693339999996 4.691 156.62079469999983 4.658 95.36259990000008 4.734 115.36523410000001 4.564 134.39674949999994 4.65 102.1679198000003 10.22 102.87319929999927 9.251 128.3252172000001 4.521 93.63083930000053 9.828 109.86356180000003 4.059 119.30030929999984 5.251 115.70126400000072 10.521 175.09884429999985 13.068 105.96060319999997 4.682 119.0950551 4.096 143.56459570000007 4.481 96.13321169999999 4.782 114.08681330000005 3.914)
Error minima by case: (3.3262 2 0.0 0 1.1759 1 0.2482 2 9.5585 1 1.1303 2 11.2449 7 5.0 1 36.4002 2 0.0 0 0.0 0 0.5059 1 0.6254 2 0.4185 1 1.2609 1 0.3716 2 0.0 0 0.0 0 4.1573 1 8.2292 9 0.3144 1 2.6974 1 21.039 1 0.0 0 11.9689 1)
Average genome size in population (length): 133.829
Average program size in population (points): 134.829
Average percent parens in population: 0.007
Minimum age in population: 90.06124028067538
Maximum age in population: 94.16039873813237
Average age in population: 91.99399552890775
Median age in population: 92.02773827059605
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.948
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.948
Total error diversity:				 0.472
Error (vector) diversity:			 0.483
Behavioral diversity:				 0.484
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 83820948
--- Timings ---
Current time: 1529615044270 milliseconds
Total Time:         217.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.0 seconds, 39.1%
Fitness Testing:    104.2 seconds, 48.0%
Report:              27.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 41376.51540000002
Test mean error for best: 20.68826
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -69.6738378996
Correct output: -31.2572440177 | Program output: -65.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -115.9331639543
Correct output: 88.7526738391  | Program output: 6.7526738391  
Correct output: -27.9825817496 | Program output: -22.9825817496
Correct output: -36.0605266238 | Program output: -65.0605266238
Correct output: -98.4940591545 | Program output: -70.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -74.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -89.7139415536
Correct output: -85.4359203887 | Program output: -113.4359203887
Correct output: 29.5496488004  | Program output: 42.3557181174 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -39.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -142.8513267506
Correct output: -16.4772789847 | Program output: -35.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop in1 integer_add float_dec float_shove float_dec float_rot integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec float_dec float_dup integer_rot integer_div float_dec float_dec float_dup float_dec integer_add integer_rot integer_div float_dec integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add float_stackdepth float_dec integer_rot integer_div float_dec float_dup integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dup float_dup_items float_dup float_dup integer_div float_dec integer_div float_dec integer_add integer_rot float_dec integer_rot integer_div float_dec float_dup integer_add integer_rot float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [32.0 3 34.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 100.0 12 13.0 2 82.0 2 5.0 1 29.0 2 28.0 2 0.9572 9 3.3421 9 22.0 2 4.6088 9 1.0 1 28.0 3 12.8061 10 90.0 13 30.0 1 34.0 2 31.0 2 19.0 2 29.0 2]
Total: 836.2503
Mean: 16.725006
Genome size: 151
Size: 152
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3395.3999048999995
Median total errors in population: 867.4090999999999
Error averages by case: (140.83656870000013 5.631 126.60379309999983 4.758 123.75903079999996 3.368 105.73340089999967 10.308 125.28541380000003 3.806 124.41746660000075 10.432 183.32373650000008 12.445 131.4293738 4.971 164.94861689999993 4.795 103.06915840000009 4.822 123.4872955 4.715 139.03023999999982 4.751 110.76771520000038 10.16 109.34829999999882 9.296 133.22224120000013 4.691 104.76471330000048 9.886 117.22435520000012 4.279 130.08076219999995 5.48 122.68232950000068 10.464 184.5366926999999 13.15 116.78694659999994 4.816 127.32904419999998 4.163 149.77800340000005 4.656 108.7600084000001 5.088 123.23569800000004 4.028)
Error minima by case: (0.3499 2 0.0 0 12.3334 1 0.7361 2 4.6018 1 0.3686 2 28.6056 10 1.0 1 25.6988 2 0.0 0 0.0 0 3.5296 1 0.129 2 0.2806 1 5.2846 1 0.3716 2 0.0 0 0.0 0 0.2716 1 20.4616 8 0.4527 1 0.8071 1 19.0 1 0.0 0 6.6749 1)
Average genome size in population (length): 140.381
Average program size in population (points): 141.381
Average percent parens in population: 0.007
Minimum age in population: 91.52808955765818
Maximum age in population: 95.51627151491118
Average age in population: 93.40384121763796
Median age in population: 93.45165295707625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.963
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.963
Total error diversity:				 0.51
Error (vector) diversity:			 0.516
Behavioral diversity:				 0.516
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 87330498
--- Timings ---
Current time: 1529615049443 milliseconds
Total Time:         222.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.3 seconds, 38.9%
Fitness Testing:    107.2 seconds, 48.2%
Report:              28.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 41135.62070000001
Test mean error for best: 20.56781
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -71.6738378996
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 6.7526738391  
Correct output: -27.9825817496 | Program output: -24.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 40.2666387113 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction in2} {:instruction integer_shove} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop in1 integer_add float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup integer_div float_dec integer_rot float_dec float_dup float_dec integer_rot float_dec float_dup float_dec float_dup_items integer_dup float_dec float_dup float_dup float_dec float_dec float_dup integer_rot float_dec float_dup integer_rot integer_rot float_dec float_dec integer_rot integer_div float_dec float_dec float_dec float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_add integer_rot float_dec float_dup integer_rot integer_rot float_dec float_dec float_dec float_dec integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec integer_rot float_dec float_dup float_dup_items float_yankdup float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec float_dec float_dec integer_add integer_add integer_rot float_dec float_dec integer_rot float_dec in2 integer_shove float_dup_items integer_rot integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [30.0 2 36.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 100.0 12 11.0 2 82.0 2 3.0 1 31.0 2 26.0 2 0.9572 9 3.3421 9 20.0 1 4.6088 9 3.0 2 30.0 2 10.717 10 90.0 13 32.0 2 34.0 2 29.0 2 21.0 2 29.0 2]
Total: 833.1612
Mean: 16.663223
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2952.1922761000005
Median total errors in population: 859.9226
Error averages by case: (121.23546530000004 5.291 111.62506119999983 4.494 106.73977019999995 3.135 88.23606420000019 10.261 107.80130840000005 3.587 106.88509540000072 10.359 165.69971020000003 12.293 112.35447880000004 4.63 150.8743668999999 4.65 84.49659540000007 4.238 108.67742260000003 4.416 118.87888829999993 4.445 93.3098507000003 10.128 91.28907739999983 9.347 113.5499504000001 4.432 87.1540652000008 9.775 98.15102090000003 4.118 113.39109619999986 5.191 101.37192800000025 10.356 167.11162439999995 12.989 102.90738330000005 4.501 111.56316219999997 4.253 129.76878660000003 4.462 93.91211259999996 4.684 105.36499130000001 3.808)
Error minima by case: (4.8222 2 0.0 0 3.3994 1 0.7361 2 3.9715 1 1.9039 2 23.6056 9 0.0 0 43.0582 2 0.0 0 0.2889 1 2.4359 1 0.0879 2 0.0464 1 9.0 1 0.3716 2 0.0 0 0.0 0 0.0 1 39.1749 8 0.4527 1 6.3491 1 18.0 1 0.0 0 9.929 1)
Average genome size in population (length): 145.214
Average program size in population (points): 146.214
Average percent parens in population: 0.007
Minimum age in population: 92.64186194134584
Maximum age in population: 97.103145551914
Average age in population: 94.73810958760441
Median age in population: 94.80097306872602
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.959
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.959
Total error diversity:				 0.505
Error (vector) diversity:			 0.507
Behavioral diversity:				 0.507
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 90960848
--- Timings ---
Current time: 1529615054575 milliseconds
Total Time:         227.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.7 seconds, 38.6%
Fitness Testing:    110.2 seconds, 48.5%
Report:              29.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 41334.982400000015
Test mean error for best: 20.66749
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -70.6738378996
Correct output: -31.2572440177 | Program output: -66.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -116.9331639543
Correct output: 88.7526738391  | Program output: 6.7526738391  
Correct output: -27.9825817496 | Program output: -23.9825817496
Correct output: -36.0605266238 | Program output: -66.0605266238
Correct output: -98.4940591545 | Program output: -71.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -75.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -90.7139415536
Correct output: -85.4359203887 | Program output: -114.4359203887
Correct output: 29.5496488004  | Program output: 41.3111784144 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -40.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -143.8513267506
Correct output: -16.4772789847 | Program output: -36.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction tag_float_848} {:instruction float_frominteger} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction in2} {:instruction integer_shove} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop in1 integer_add float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec float_dec float_dup float_dup integer_rot integer_rot float_dec integer_sub tag_float_848 float_frominteger integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup integer_stackdepth float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add integer_rot float_dec float_dec float_dec integer_add integer_add integer_rot float_dec float_dec integer_rot float_dec in2 integer_shove float_dup_items integer_rot integer_div float_dec integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot float_dec float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [31.0 2 35.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 100.0 12 12.0 2 82.0 2 4.0 1 30.0 1 27.0 2 0.9572 9 3.3421 9 21.0 2 4.6088 9 2.0 2 29.0 3 11.7615 10 90.0 13 31.0 2 34.0 2 30.0 1 20.0 1 29.0 2]
Total: 833.2057
Mean: 16.664114
Genome size: 152
Size: 153
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2922.7307376999997
Median total errors in population: 854.7356000000001
Error averages by case: (117.90052740000003 5.33 109.82209569999988 4.527 106.97845290000001 3.129 88.6546647000002 10.248 108.33762420000004 3.599 108.14598290000073 10.26 167.02402950000007 12.344 107.47025260000002 4.549 148.78830229999994 4.455 85.20519780000004 4.3 106.72113570000006 4.396 114.66565889999994 4.474 94.09412950000007 10.01 88.81145619999994 9.27 109.02592570000012 4.406 87.88245230000062 9.64 95.84041800000001 4.216 111.68353349999985 5.295 99.1200773000002 10.373 164.98665609999995 13.085 104.63081099999998 4.565 109.61045890000001 3.938 125.93727599999995 4.416 95.68467910000004 4.743 106.29993950000001 3.841)
Error minima by case: (3.092 2 0.0 0 10.9127 1 0.7361 2 1.4699 1 0.3686 2 14.2023 8 0.0 0 41.7591 2 0.0 0 0.0 0 0.0877 1 0.6254 2 0.9659 1 0.997 1 0.3716 2 0.0 0 0.8914 1 0.2716 1 20.4616 6 0.4526 1 3.7196 2 13.0 1 0.4773 1 1.0611 2)
Average genome size in population (length): 148.065
Average program size in population (points): 149.065
Average percent parens in population: 0.007
Minimum age in population: 93.99305695236416
Maximum age in population: 98.0799926219577
Average age in population: 96.07480898119232
Median age in population: 96.11213306614356
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.969
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.969
Total error diversity:				 0.572
Error (vector) diversity:			 0.575
Behavioral diversity:				 0.575
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 94662473
--- Timings ---
Current time: 1529615059765 milliseconds
Total Time:         232.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        89.1 seconds, 38.3%
Fitness Testing:    113.2 seconds, 48.7%
Report:              30.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 40794.722600000016
Test mean error for best: 20.39736
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: -70.3944449815
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 6.7526738391  
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: -20.4414979219
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction float_pop} {:instruction float_pop} {:instruction integer_inc} {:instruction in1} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod integer_mod float_pop integer_mod float_pop float_pop integer_inc in1 integer_add integer_rot float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_div float_dec float_dec float_dup float_dup float_dec float_dec float_dup float_dup integer_rot float_dec integer_add float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec integer_rot integer_div float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup integer_div float_dec float_dec float_dec float_dup float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dec float_dup integer_div float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add float_dup float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_rot float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [27.0 3 39.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 100.0 12 8.0 1 82.0 2 0.0 0 34.0 2 23.0 2 0.9572 9 3.3421 9 17.0 2 4.6088 9 6.0 2 33.0 3 7.5834 11 90.0 13 35.0 2 34.0 2 26.0 2 24.0 2 29.0 2]
Total: 832.0276
Mean: 16.640553
Genome size: 169
Size: 170
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3368.1128227
Median total errors in population: 857.26165
Error averages by case: (137.23964340000012 5.373 129.77104719999983 4.609 124.78382640000001 3.485 105.5787799999996 10.245 124.70693080000008 3.956 123.9058229000007 10.322 179.8741694000001 12.368 130.76816649999998 4.68 158.7537420999999 4.677 100.61786230000008 4.462 126.93569649999996 4.531 136.18352369999994 4.581 109.6929215000001 9.848 108.696071299999 9.22 130.09169400000007 4.478 104.33249200000058 9.727 117.23568540000007 4.35 131.11913259999983 5.272 117.63513380000029 10.176 183.7873758999999 13.063 120.33102269999993 4.716 124.21373019999997 4.307 145.30409320000004 4.541 110.86375000000002 4.84 123.6655089 4.198)
Error minima by case: (0.6738 2 0.0 0 3.4477 1 0.7361 2 5.354 1 2.4694 2 8.7509 9 0.0 0 6.745 2 0.0 0 0.5683 1 1.4941 1 0.5507 2 0.1961 1 4.0 1 0.3716 2 0.0 0 0.0 0 0.2716 1 20.4415 6 0.073 1 3.3046 2 3.7585 1 0.0 0 9.8753 1)
Average genome size in population (length): 149.278
Average program size in population (points): 150.278
Average percent parens in population: 0.007
Minimum age in population: 95.22334448567192
Maximum age in population: 99.26982578638615
Average age in population: 97.4266145123248
Median age in population: 97.50823928136737
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.648
Error (vector) diversity:			 0.654
Behavioral diversity:				 0.654
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 98394448
--- Timings ---
Current time: 1529615065143 milliseconds
Total Time:         237.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.5 seconds, 38.0%
Fitness Testing:    116.5 seconds, 49.0%
Report:              30.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 39738.42859999997
Test mean error for best: 19.86921
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -71.6738378996
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: 0.4878870605  
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: 0.8977380762  
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 0.2872836433  
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 4.3831518583  
Correct output: -27.9825817496 | Program output: -24.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 122.5674160943
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 40.2666387113 
Correct output: 69.5585020781  | Program output: -0.0211440978 
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 35.2956738243 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: 0.724642798   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop in1 integer_add float_dec float_shove float_dec float_rot integer_dup_times integer_rot integer_div float_dec float_dec float_dup float_dup float_dup integer_div float_dec float_dec float_dup float_dec integer_min integer_add integer_rot float_dec integer_rot integer_div float_dec float_dup float_dup integer_fromfloat float_dec integer_min float_dec float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec integer_rot integer_div float_dec float_dup integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_rot float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot float_dec float_dec float_dec integer_add integer_rot float_dec float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_pop integer_shove integer_yank integer_dup_times float_cos float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [30.0 2 36.0 2 46.9472 11 2.9273 10 38.5566 12 29.6088 10 29.3183 12 11.0 2 84.3695 11 3.0 1 31.0 2 26.0 2 4.1225 9 1.0 2 20.0 1 4.6088 9 3.0 2 30.0 2 10.717 10 69.5796 10 32.0 2 37.8982 10 29.0 2 21.0 2 41.6 10]
Total: 821.2538000000001
Mean: 16.425076
Genome size: 161
Size: 162
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 2897.7457052999994
Median total errors in population: 852.5386000000001
Error averages by case: (117.86765830000017 5.42 109.68985929999982 4.551 106.83299539999992 3.251 88.04059179999985 10.354 107.31418770000003 3.825 107.92743820000074 10.283 164.4306817000001 12.278 108.62449869999999 4.637 146.0851741999999 4.499 81.7568170000001 4.353 106.43747169999999 4.49 115.31217599999984 4.596 90.27091980000007 9.816 90.76643379999916 9.18 109.9924576000002 4.52 87.15804810000044 9.747 96.49751490000013 4.432 113.4579953999998 5.246 98.98082600000032 10.329 159.93918509999983 12.988 98.84476829999998 4.627 107.2990454 4.059 127.14165719999998 4.507 90.38126730000005 4.78 106.00703639999998 3.921)
Error minima by case: (1.6738 2 0.4329 1 11.6495 1 0.7361 2 1.1552 2 0.3686 2 6.2934 8 0.0 0 11.1817 2 0.0 0 0.0 0 1.5059 1 0.6254 2 0.1693 1 6.0 1 0.3716 2 0.0 0 0.8733 1 0.2716 1 8.0124 6 0.0 0 0.7821 1 15.0 1 0.0 0 5.4388 1)
Average genome size in population (length): 150.964
Average program size in population (points): 151.964
Average percent parens in population: 0.007
Minimum age in population: 96.38203621313038
Maximum age in population: 100.8087882206248
Average age in population: 98.83411243630015
Median age in population: 98.90703296735695
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.962
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.962
Total error diversity:				 0.659
Error (vector) diversity:			 0.662
Behavioral diversity:				 0.663
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 102168648
--- Timings ---
Current time: 1529615070384 milliseconds
Total Time:         243.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.8 seconds, 37.8%
Fitness Testing:    119.6 seconds, 49.2%
Report:              31.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 39738.42859999997
Test mean error for best: 19.86921
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -71.6738378996
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: 0.4878870605  
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: 0.8977380762  
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 0.2872836433  
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 4.3831518583  
Correct output: -27.9825817496 | Program output: -24.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 122.5674160943
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 40.2666387113 
Correct output: 69.5585020781  | Program output: -0.0211440978 
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 35.2956738243 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: 0.724642798   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop in1 integer_add float_dec float_shove float_dec float_rot integer_dup_times integer_rot integer_div float_dec float_dec float_dup float_dup float_dup integer_div float_dec float_dec float_dup float_dec integer_min integer_add integer_rot float_dec integer_rot integer_div float_dec float_dup float_dup integer_fromfloat float_dec integer_min float_dec float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec integer_rot integer_div float_dec float_dup integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_rot float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot float_dec float_dec float_dec integer_add integer_rot float_dec float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_pop integer_shove integer_yank integer_dup_times float_cos float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [30.0 2 36.0 2 46.9472 11 2.9273 10 38.5566 12 29.6088 10 29.3183 12 11.0 2 84.3695 11 3.0 1 31.0 2 26.0 2 4.1225 9 1.0 2 20.0 1 4.6088 9 3.0 2 30.0 2 10.717 10 69.5796 10 32.0 2 37.8982 10 29.0 2 21.0 2 41.6 10]
Total: 821.2538000000001
Mean: 16.425076
Genome size: 161
Size: 162
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3104.3885789999995
Median total errors in population: 854.5350000000001
Error averages by case: (127.32303070000017 5.287 120.0004321999999 4.473 113.38561629999995 3.479 93.97821429999986 10.287 114.21438070000002 3.868 113.26307570000074 10.302 168.51145640000007 12.322 117.09389839999997 4.531 154.6215948 4.637 92.47736770000012 4.283 116.18142919999994 4.41 124.6539828999998 4.522 95.34967810000002 9.792 98.39444009999919 9.106 120.0362811000002 4.453 93.3304194000005 9.77 105.43537280000008 4.312 121.84060949999986 5.179 107.29455360000033 10.29 168.58674469999977 13.004 112.0221516 4.576 115.39564369999998 4.286 133.67668700000007 4.479 104.44911310000003 4.664 112.45240500000004 4.108)
Error minima by case: (2.3262 2 0.0 0 6.0125 1 0.7361 2 5.402 2 0.3686 2 17.3944 9 0.0 0 28.0 2 0.0 0 0.4085 1 0.0012 1 0.6254 1 0.1961 1 4.0 1 0.3716 2 0.0 0 1.0 1 0.7729 1 9.2609 8 0.0 0 2.6974 1 13.0 1 0.5796 1 0.7757 1)
Average genome size in population (length): 151.669
Average program size in population (points): 152.669
Average percent parens in population: 0.007
Minimum age in population: 97.77895835903313
Maximum age in population: 102.2274453324103
Average age in population: 100.2265925293858
Median age in population: 100.2708513975012
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.963
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.963
Total error diversity:				 0.65
Error (vector) diversity:			 0.656
Behavioral diversity:				 0.657
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 105960448
--- Timings ---
Current time: 1529615075892 milliseconds
Total Time:         248.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.2 seconds, 37.5%
Fitness Testing:    122.8 seconds, 49.4%
Report:              32.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 39672.26089999996
Test mean error for best: 19.83613
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -71.6738378996
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: 0.4878870605  
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: 0.8977380762  
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 0.2872836433  
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 5.9754770354  
Correct output: -27.9825817496 | Program output: -24.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 40.2666387113 
Correct output: 69.5585020781  | Program output: -0.0211440978 
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 33.2898880663 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: 0.724642798   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction in1} {:instruction -10} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_inc} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction tag_float_848} {:instruction float_frominteger} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction in2} {:instruction integer_shove} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop in1 -10 float_dec float_shove float_dec float_inc integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec float_dec float_dup float_dup integer_rot integer_rot float_dec integer_sub tag_float_848 float_frominteger integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup integer_stackdepth float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add integer_rot float_dec float_dec float_dec integer_add integer_add integer_rot float_dec float_dec integer_rot float_dec in2 integer_shove float_dup_items integer_rot integer_div float_dec integer_div float_dec integer_div float_dec float_dup float_dup_items integer_sub float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot float_dec float_dec float_dup_times integer_rot float_dec float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_pop integer_shove integer_yank integer_dup_times float_cos float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [30.0 2 36.0 2 46.9472 11 4.7589 11 38.5566 12 28.3514 11 29.3183 12 11.0 2 82.7772 9 3.0 1 31.0 2 26.0 2 0.9572 9 1.0 2 20.0 1 2.9487 10 3.0 2 30.0 2 10.717 10 69.5796 10 32.0 2 39.904 10 29.0 2 21.0 2 41.6 10]
Total: 818.4161
Mean: 16.368322
Genome size: 169
Size: 170
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3762.7672099
Median total errors in population: 856.5503000000001
Error averages by case: (154.23084689999985 5.903 145.3763560999999 5.023 140.26084239999983 4.052 120.75221839999915 10.494 139.36718449999998 4.515 138.67502330000022 10.409 191.02240740000022 12.399 145.14858240000007 5.123 173.9993837 5.074 118.31853930000021 4.896 142.7250456 4.992 151.75405970000003 5.078 122.9246820000003 9.897 123.67601229999832 9.06 146.3464166000002 4.991 119.61789540000038 9.905 133.97545980000012 4.922 148.23342639999987 5.689 134.2428356000003 10.413 192.61521069999975 13.016 136.22675899999987 5.119 139.2766079 4.885 162.98341370000003 5.044 128.6933846 5.353 141.37461620000008 4.698)
Error minima by case: (7.0174 2 0.0 0 2.2143 1 0.7361 2 5.1299 1 1.8445 2 21.6989 9 0.0 0 8.0 2 0.0 0 0.0 0 1.5224 1 0.6254 2 0.0471 1 7.0 1 0.3716 2 0.0 0 0.5427 1 0.2716 1 11.1827 8 0.0 0 0.9774 1 5.6115 1 0.3936 1 1.2344 1)
Average genome size in population (length): 151.943
Average program size in population (points): 152.943
Average percent parens in population: 0.007
Minimum age in population: 99.36094629995566
Maximum age in population: 103.5242426049928
Average age in population: 101.6229634960727
Median age in population: 101.6409243484428
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.972
Total error diversity:				 0.656
Error (vector) diversity:			 0.666
Behavioral diversity:				 0.667
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 109759123
--- Timings ---
Current time: 1529615081270 milliseconds
Total Time:         253.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        94.6 seconds, 37.3%
Fitness Testing:    126.0 seconds, 49.6%
Report:              33.2 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 39672.26089999996
Test mean error for best: 19.83613
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -71.6738378996
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: 0.4878870605  
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: 0.8977380762  
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 0.2872836433  
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 5.9754770354  
Correct output: -27.9825817496 | Program output: -24.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 40.2666387113 
Correct output: 69.5585020781  | Program output: -0.0211440978 
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 33.2898880663 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: 0.724642798   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction in1} {:instruction -10} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_inc} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction tag_float_848} {:instruction float_frominteger} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction in2} {:instruction integer_shove} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop in1 -10 float_dec float_shove float_dec float_inc integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec float_dec float_dup float_dup integer_rot integer_rot float_dec integer_sub tag_float_848 float_frominteger integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec float_dup integer_stackdepth float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add integer_rot float_dec float_dec float_dec integer_add integer_add integer_rot float_dec float_dec integer_rot float_dec in2 integer_shove float_dup_items integer_rot integer_div float_dec integer_div float_dec integer_div float_dec float_dup float_dup_items integer_sub float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot float_dec float_dec float_dup_times integer_rot float_dec float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_pop integer_shove integer_yank integer_dup_times float_cos float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [30.0 2 36.0 2 46.9472 11 4.7589 11 38.5566 12 28.3514 11 29.3183 12 11.0 2 82.7772 9 3.0 1 31.0 2 26.0 2 0.9572 9 1.0 2 20.0 1 2.9487 10 3.0 2 30.0 2 10.717 10 69.5796 10 32.0 2 39.904 10 29.0 2 21.0 2 41.6 10]
Total: 818.4161
Mean: 16.368322
Genome size: 169
Size: 170
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3743.501284099999
Median total errors in population: 855.5605
Error averages by case: (152.0152278000001 5.657 145.69163829999988 4.963 139.0411674999998 4.256 118.91173069999914 10.308 139.35906549999996 4.734 137.22958940000044 10.273 188.53728810000027 12.426 144.76449870000013 5.03 177.4916958999999 5.13 114.86884000000013 4.687 142.88268359999992 4.897 150.81383999999997 4.995 120.78748110000028 9.817 125.76244889999847 8.894 144.41622630000012 4.849 118.53163620000065 9.796 133.3879525 4.842 148.21061439999988 5.59 133.26777820000038 10.191 195.63130649999965 12.936 136.1265977 4.94 142.26305259999984 4.903 160.8137551000001 4.968 126.22087500000008 5.12 137.45329410000016 4.819)
Error minima by case: (4.6738 2 0.3501 1 13.6025 1 0.7361 1 4.0492 1 1.3957 2 17.2607 9 0.0 0 7.7034 2 0.0 0 0.3088 1 4.1613 1 0.6254 2 0.9083 1 4.7216 1 0.3716 1 0.0 0 0.8914 1 0.2716 1 20.4616 9 0.4527 1 0.8886 2 14.0 1 0.0 0 3.479 1)
Average genome size in population (length): 152.995
Average program size in population (points): 153.995
Average percent parens in population: 0.007
Minimum age in population: 100.6733620381484
Maximum age in population: 105.1942424961346
Average age in population: 102.9872531776598
Median age in population: 103.0322204034344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.971
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.647
Error (vector) diversity:			 0.652
Behavioral diversity:				 0.653
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 113584098
--- Timings ---
Current time: 1529615086757 milliseconds
Total Time:         259.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.1 seconds, 37.0%
Fitness Testing:    129.1 seconds, 49.8%
Report:              34.1 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 40039.33960000004
Test mean error for best: 20.01967
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -72.6738378996
Correct output: -31.2572440177 | Program output: -68.2572440177
Correct output: -46.4593524807 | Program output: 0.8833252923  
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: 0.6233802024  
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 0.9590170876  
Correct output: -128.9331639543 | Program output: -118.9331639543
Correct output: 88.7526738391  | Program output: 4.3831518583  
Correct output: -27.9825817496 | Program output: -25.9825817496
Correct output: -36.0605266238 | Program output: -68.0605266238
Correct output: -98.4940591545 | Program output: -73.4940591545
Correct output: 118.444904963  | Program output: 117.8194956409
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -77.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -92.7139415536
Correct output: -85.4359203887 | Program output: -116.4359203887
Correct output: 29.5496488004  | Program output: 39.2220990082 
Correct output: 69.5585020781  | Program output: 0.9997764719  
Correct output: -9.5473433631  | Program output: -42.5473433631
Correct output: 73.1938622402  | Program output: 35.2956738243 
Correct output: -173.8513267506 | Program output: -145.8513267506
Correct output: -16.4772789847 | Program output: -38.4772789847
Correct output: -40.8753187944 | Program output: 0.7487362475  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_rot} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction tagged_136} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction integer_max} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction tag_float_331} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_max} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_rot in1 integer_add float_dec tagged_136 float_dec float_rot integer_add integer_yankdup float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add float_dec float_dec float_dup float_dec integer_rot float_dec integer_yank float_dec float_dup float_dec integer_add integer_rot integer_div float_dec float_dup float_dup_items integer_rot integer_div float_dec float_dec float_dup float_dec integer_rot integer_div float_dec float_dup integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot float_dec float_dup float_dup float_dup_items float_dec integer_add float_dec float_dup integer_div integer_dup float_dec float_dec float_dec float_dec float_dup integer_div float_dec float_dec integer_rot float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup float_dec integer_rot integer_sub float_dec integer_div float_dec float_dup float_dec float_dup integer_div float_dec integer_div integer_max float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec tag_float_331 integer_add integer_rot float_dec float_dup_times integer_rot float_dec float_dec float_dec integer_div float_dec float_dup float_rot float_dec integer_div integer_max float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec integer_dup_items integer_rot float_dec float_dec integer_add integer_swap float_dec float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [29.0 3 37.0 2 47.3427 11 2.9273 10 38.2822 11 29.6088 10 28.6465 11 10.0 1 84.3695 11 2.0 1 32.0 2 25.0 2 0.6254 9 1.0 2 19.0 2 4.6088 9 4.0 2 31.0 3 9.6725 10 68.5587 11 33.0 2 37.8982 10 28.0 2 22.0 2 41.6241 11]
Total: 817.1647
Mean: 16.343294
Genome size: 183
Size: 184
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3659.8826871999995
Median total errors in population: 851.4941000000001
Error averages by case: (148.50213719999994 5.469 142.9178024 4.661 137.79970239999975 4.907 117.24329459999933 10.416 138.4697325 5.396 137.1198573000005 10.302 181.87047180000056 12.35 138.91659019999997 4.712 178.20227320000004 5.659 112.73691560000006 4.451 139.9512644 4.618 146.59003480000007 4.693 118.27747340000039 9.832 117.0128674999991 8.236 140.2617901000001 4.624 117.57861040000063 9.851 128.6917363000001 4.55 144.64484559999994 5.403 127.88091770000037 10.293 186.60093429999955 12.698 132.12486429999998 4.764 139.90541769999996 5.44 157.87776449999998 4.733 123.60176810000006 4.986 136.75662090000026 5.303)
Error minima by case: (0.3262 2 0.0 0 3.4702 1 0.7361 1 3.7012 1 3.982 2 9.9712 9 0.0 0 28.3164 2 0.0 0 0.0605 1 1.5224 1 0.5507 2 1.0 1 5.1911 1 0.3716 2 0.0 0 1.0 1 0.2716 1 1.7342 8 0.5473 1 2.6974 1 16.0 1 1.0 1 0.5023 1)
Average genome size in population (length): 155.271
Average program size in population (points): 156.271
Average percent parens in population: 0.006
Minimum age in population: 101.9874445766175
Maximum age in population: 106.5005191276539
Average age in population: 104.3342485543279
Median age in population: 104.3829493480111
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.967
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.967
Total error diversity:				 0.64
Error (vector) diversity:			 0.651
Behavioral diversity:				 0.652
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 117465948
--- Timings ---
Current time: 1529615092230 milliseconds
Total Time:         264.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        97.5 seconds, 36.8%
Fitness Testing:    132.3 seconds, 50.0%
Report:              34.9 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 40035.959700000036
Test mean error for best: 20.01798
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: 0.8833252923  
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: 0.6233802024  
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 0.9590170876  
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 4.3831518583  
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 0.9997764719  
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 35.2956738243 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: 0.7487362475  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_pop} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_rot} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction integer_max} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction tag_float_331} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_max} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod float_pop in1 integer_add float_dec float_rot in1 integer_add float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec float_dec float_dec integer_sub integer_add integer_dup_times float_dec float_dup integer_rot integer_rot float_dec float_dec float_dec float_dec float_dup float_dup_items float_dec float_dec float_dec integer_add float_dec float_dec integer_add integer_dup_items float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec integer_pop integer_rot integer_rot float_dec float_dec float_dec float_dec float_dup float_dup integer_rot integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items integer_rot float_dec integer_div float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec integer_rot integer_sub float_dec integer_div float_dec float_dup float_dec float_dup integer_div float_dec integer_div integer_max float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec tag_float_331 integer_add integer_rot float_dec float_dup_times integer_rot float_dec float_dec float_dec integer_div float_dec float_dup float_rot float_dec integer_div integer_max float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec integer_dup_items integer_rot float_dec float_dec integer_add integer_swap float_dec float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [27.0 3 39.0 2 47.3427 11 2.9273 10 38.2822 11 29.6088 10 28.6465 11 8.0 1 84.3695 11 0.0 0 34.0 2 23.0 2 0.9572 9 1.0 2 17.0 2 4.6088 9 6.0 2 33.0 3 7.5834 11 68.5587 11 35.0 2 37.8982 10 26.0 2 24.0 2 41.6241 11]
Total: 815.4073999999999
Mean: 16.308147
Genome size: 188
Size: 189
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3390.5766769999996
Median total errors in population: 856.9443
Error averages by case: (139.8938145 5.747 132.3111708999998 4.906 129.7959895999993 6.577 104.19825109999918 10.316 127.65423199999982 6.99 123.42789980000082 10.228 156.8661805000005 12.2 132.10731559999996 4.899 163.27651899999992 7.056 101.83397290000005 4.851 129.56488170000006 4.827 137.2116413999999 4.897 107.41078380000057 9.716 105.88519539999916 7.25 131.9060113000002 4.805 103.90993920000061 9.772 120.9255800000001 4.759 135.73931999999994 5.692 119.0726073000004 10.167 169.28868909999912 12.191 123.2785802999999 4.929 126.54853089999969 6.754 150.94389640000003 4.958 114.09903639999997 5.367 126.89363790000068 6.679)
Error minima by case: (2.3262 2 0.2572 1 10.8272 1 0.7361 2 0.2141 1 0.3686 2 11.3702 9 0.0 0 15.9795 2 0.0 0 0.0605 1 1.1165 1 0.6254 2 0.2806 1 5.5271 1 0.3716 2 0.0 0 0.0 0 0.0 0 3.2147 8 0.0 0 0.4207 1 15.0 1 0.0 0 0.5278 2)
Average genome size in population (length): 158.964
Average program size in population (points): 159.964
Average percent parens in population: 0.006
Minimum age in population: 102.9874445766175
Maximum age in population: 107.5970165471115
Average age in population: 105.7130622723421
Median age in population: 105.769395035295
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.701
Error (vector) diversity:			 0.706
Behavioral diversity:				 0.707
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 121440148
--- Timings ---
Current time: 1529615097903 milliseconds
Total Time:         270.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        98.9 seconds, 36.6%
Fitness Testing:    135.7 seconds, 50.2%
Report:              35.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 35898.02639999999
Test mean error for best: 17.94901
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -73.6738378996
Correct output: -31.2572440177 | Program output: -69.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 88.0806466807 
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 21.5713274455 
Correct output: -128.9331639543 | Program output: -119.9331639543
Correct output: 88.7526738391  | Program output: 32.9408634485 
Correct output: -27.9825817496 | Program output: -26.9825817496
Correct output: -36.0605266238 | Program output: -69.0605266238
Correct output: -98.4940591545 | Program output: -74.4940591545
Correct output: 118.444904963  | Program output: 125.7326963965
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -78.7391381937
Correct output: 123.7897097488 | Program output: 75.7897097488 
Correct output: -88.7139415536 | Program output: -93.7139415536
Correct output: -85.4359203887 | Program output: -117.4359203887
Correct output: 29.5496488004  | Program output: 38.1775593052 
Correct output: 69.5585020781  | Program output: 20.6918968421 
Correct output: -9.5473433631  | Program output: -43.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -146.8513267506
Correct output: -16.4772789847 | Program output: -39.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_stackdepth float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec float_dec float_dec float_dup float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup integer_add integer_rot integer_div float_dec integer_rot integer_div float_dec float_dup integer_add integer_dup_times float_dec float_dup float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dup_items integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_div float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [28.0 3 38.0 2 30.0 1 63.0 3 31.0 2 29.6088 10 8.0342 10 9.0 2 55.8118 11 1.0 1 33.0 2 24.0 2 7.2878 9 3.3421 9 18.0 2 48.0 3 5.0 2 32.0 3 8.6279 11 48.8666 11 34.0 2 34.0 2 27.0 2 23.0 2 29.0 2]
Total: 777.5792
Mean: 15.551584
Genome size: 166
Size: 167
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4132.30737
Median total errors in population: 857.4276
Error averages by case: (171.44689159999996 6.237 163.52150350000005 5.173 162.45384219999903 8.507 133.8847134999993 10.483 157.34199690000045 8.864 152.4294392999995 10.475 169.48761070000168 12.205 163.98905719999996 5.29 189.99498860000023 8.65 126.70055650000016 5.195 160.78894680000008 5.157 167.85634800000017 5.249 141.6545505000005 10.038 136.01798879999947 6.094 163.81550130000016 5.237 133.48144210000027 9.968 152.8999631000001 5.165 168.95204290000012 6.028 149.81346209999992 10.171 195.56667339999882 11.76 145.8712066999999 5.272 158.37488039999963 8.254 181.64461910000017 5.326 136.54199830000002 5.664 159.00814650000086 8.307)
Error minima by case: (2.6738 2 1.1117 1 1.7793 1 0.7361 2 0.7632 2 0.3686 2 8.0342 7 0.0 0 45.0315 2 0.0 0 0.2342 1 0.203 1 0.5507 2 0.0113 1 6.0 1 0.3716 2 0.0 0 2.0 1 0.0 0 40.8951 8 0.0 0 0.9774 1 15.0 1 0.0 0 0.3747 2)
Average genome size in population (length): 162.61
Average program size in population (points): 163.61
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 109.5533500062584
Average age in population: 107.009671529879
Median age in population: 107.1747069655069
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.745
Error (vector) diversity:			 0.751
Behavioral diversity:				 0.752
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 125505498
--- Timings ---
Current time: 1529615103451 milliseconds
Total Time:         276.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.3 seconds, 36.3%
Fitness Testing:    139.1 seconds, 50.4%
Report:              36.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 35898.02639999999
Test mean error for best: 17.94901
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -73.6738378996
Correct output: -31.2572440177 | Program output: -69.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 88.0806466807 
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 21.5713274455 
Correct output: -128.9331639543 | Program output: -119.9331639543
Correct output: 88.7526738391  | Program output: 32.9408634485 
Correct output: -27.9825817496 | Program output: -26.9825817496
Correct output: -36.0605266238 | Program output: -69.0605266238
Correct output: -98.4940591545 | Program output: -74.4940591545
Correct output: 118.444904963  | Program output: 125.7326963965
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -78.7391381937
Correct output: 123.7897097488 | Program output: 75.7897097488 
Correct output: -88.7139415536 | Program output: -93.7139415536
Correct output: -85.4359203887 | Program output: -117.4359203887
Correct output: 29.5496488004  | Program output: 38.1775593052 
Correct output: 69.5585020781  | Program output: 20.6918968421 
Correct output: -9.5473433631  | Program output: -43.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -146.8513267506
Correct output: -16.4772789847 | Program output: -39.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_stackdepth float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec float_dec float_dec float_dup float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup integer_add integer_rot integer_div float_dec integer_rot integer_div float_dec float_dup integer_add integer_dup_times float_dec float_dup float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dup_items integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_div float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [28.0 3 38.0 2 30.0 1 63.0 3 31.0 2 29.6088 10 8.0342 10 9.0 2 55.8118 11 1.0 1 33.0 2 24.0 2 7.2878 9 3.3421 9 18.0 2 48.0 3 5.0 2 32.0 3 8.6279 11 48.8666 11 34.0 2 34.0 2 27.0 2 23.0 2 29.0 2]
Total: 777.5792
Mean: 15.551584
Genome size: 166
Size: 167
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3815.8557121000013
Median total errors in population: 872.25935
Error averages by case: (160.3880346 6.348 149.19265300000004 5.245 147.65847979999876 9.669 120.56406289999902 10.507 143.38430289999994 10.141 139.74753210000011 10.504 147.80155560000082 12.105 153.90991050000002 5.39 176.94811860000016 9.832 119.68885790000002 5.543 146.92133340000004 5.254 158.14393840000005 5.334 124.5620559000003 10.12 118.84877769999973 5.049 152.69745710000018 5.258 119.5671916000004 9.977 141.8223219 5.204 154.29335 6.074 138.09233430000012 10.097 180.44302549999847 11.344 137.98227509999992 5.499 145.01280289999937 9.386 172.1907700000002 5.421 128.60156199999997 5.934 142.92500840000136 9.233)
Error minima by case: (4.6738 2 0.0 0 8.5406 1 0.7361 2 0.8403 1 1.7186 2 8.0342 8 0.0 0 11.8753 2 0.0 0 0.0 0 4.1613 1 0.5507 2 0.5634 1 8.0 1 0.3716 2 0.0 0 0.0 0 0.2716 1 18.8658 8 0.5473 1 0.8635 1 17.0 1 0.2715 1 5.6531 1)
Average genome size in population (length): 163.804
Average program size in population (points): 164.804
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 110.6444184992769
Average age in population: 107.7352855783484
Median age in population: 108.5435246547523
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.778
Error (vector) diversity:			 0.783
Behavioral diversity:				 0.787
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 129600873
--- Timings ---
Current time: 1529615109257 milliseconds
Total Time:         281.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.8 seconds, 36.1%
Fitness Testing:    142.6 seconds, 50.6%
Report:              37.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 35898.02639999999
Test mean error for best: 17.94901
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -73.6738378996
Correct output: -31.2572440177 | Program output: -69.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 88.0806466807 
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 21.5713274455 
Correct output: -128.9331639543 | Program output: -119.9331639543
Correct output: 88.7526738391  | Program output: 32.9408634485 
Correct output: -27.9825817496 | Program output: -26.9825817496
Correct output: -36.0605266238 | Program output: -69.0605266238
Correct output: -98.4940591545 | Program output: -74.4940591545
Correct output: 118.444904963  | Program output: 125.7326963965
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -78.7391381937
Correct output: 123.7897097488 | Program output: 75.7897097488 
Correct output: -88.7139415536 | Program output: -93.7139415536
Correct output: -85.4359203887 | Program output: -117.4359203887
Correct output: 29.5496488004  | Program output: 38.1775593052 
Correct output: 69.5585020781  | Program output: 20.6918968421 
Correct output: -9.5473433631  | Program output: -43.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -146.8513267506
Correct output: -16.4772789847 | Program output: -39.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec integer_mult float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_stackdepth float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec float_dec float_dec float_dup float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup integer_add integer_rot integer_div float_dec integer_rot integer_div float_dec float_dup integer_add integer_dup_times float_dec float_dup float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dup_items integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_div float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [28.0 3 38.0 2 30.0 1 63.0 3 31.0 2 29.6088 10 8.0342 10 9.0 2 55.8118 11 1.0 1 33.0 2 24.0 2 7.2878 9 3.3421 9 18.0 2 48.0 3 5.0 2 32.0 3 8.6279 11 48.8666 11 34.0 2 34.0 2 27.0 2 23.0 2 29.0 2]
Total: 777.5792
Mean: 15.551584
Genome size: 166
Size: 167
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3362.6487707
Median total errors in population: 858.87095
Error averages by case: (141.5520838000001 6.02 130.67511979999995 5.009 129.77608729999855 10.237 104.39748459999964 10.49 124.15827119999945 10.652 122.5015687000005 10.392 123.41257959999969 11.999 136.11285270000002 5.186 162.14043500000002 10.252 103.09483680000001 5.426 128.78134430000014 5.052 140.3369516999999 5.159 103.69043290000015 10.033 100.71432969999987 4.393 134.56067400000018 5.033 102.94381370000039 9.9 123.6037061000001 4.946 134.89052429999984 5.746 118.99839710000018 9.852 165.65577059999845 11.049 118.41224209999994 5.368 129.61848059999943 9.845 153.82244450000002 5.173 110.35995560000006 5.778 125.75538400000173 9.693)
Error minima by case: (1.6738 2 0.0 0 9.2055 1 0.7361 2 0.405 1 3.4393 2 8.0342 9 0.0 0 1.7695 2 0.0 0 0.0824 1 5.0748 1 0.6254 2 0.1961 1 2.5722 1 0.3716 2 0.0 0 0.0 0 0.0 0 28.7451 6 0.0 0 2.6974 1 14.0 1 0.0 0 3.6215 2)
Average genome size in population (length): 165.3
Average program size in population (points): 166.3
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 111.8189875808337
Average age in population: 109.7763808561092
Median age in population: 109.9076797389442
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.973
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.973
Total error diversity:				 0.787
Error (vector) diversity:			 0.789
Behavioral diversity:				 0.79
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 133733448
--- Timings ---
Current time: 1529615115087 milliseconds
Total Time:         287.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.2 seconds, 35.9%
Fitness Testing:    146.1 seconds, 50.8%
Report:              38.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 35876.13689999999
Test mean error for best: 17.93807
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -76.6738378996
Correct output: -31.2572440177 | Program output: -72.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 88.0806466807 
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 87.1031121233 
Correct output: 29.6055550185  | Program output: 21.5713274455 
Correct output: -128.9331639543 | Program output: -122.9331639543
Correct output: 88.7526738391  | Program output: 32.9408634485 
Correct output: -27.9825817496 | Program output: -29.9825817496
Correct output: -36.0605266238 | Program output: -72.0605266238
Correct output: -98.4940591545 | Program output: -77.4940591545
Correct output: 118.444904963  | Program output: 116.2368554898
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -81.7391381937
Correct output: 123.7897097488 | Program output: 75.7897097488 
Correct output: -88.7139415536 | Program output: -96.7139415536
Correct output: -85.4359203887 | Program output: -120.4359203887
Correct output: 29.5496488004  | Program output: 35.043940196  
Correct output: 69.5585020781  | Program output: 20.6918968421 
Correct output: -9.5473433631  | Program output: -46.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -149.8513267506
Correct output: -16.4772789847 | Program output: -42.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_swap} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_add} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction in2} {:instruction integer_shove} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove float_dec float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot float_dec integer_min integer_add float_dec float_dec float_dup_items integer_add integer_rot integer_div float_dec float_dec float_dup float_dup_items float_dec float_dec integer_rot integer_div float_dec float_dup integer_add float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_dup_times float_dec float_dec float_dup float_swap integer_rot float_dec float_dec float_dec float_dec float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_rot float_dec float_dec float_dec integer_max integer_add integer_add integer_rot float_dec float_dec integer_rot float_dec in2 integer_shove float_dup_items integer_rot integer_div float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_rot float_dec float_dec integer_add integer_rot integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [25.0 3 41.0 2 30.0 1 63.0 3 31.0 2 47.0 3 8.0342 10 6.0 1 55.8118 11 2.0 1 36.0 2 21.0 2 2.208 10 3.3421 9 15.0 2 48.0 3 8.0 2 35.0 3 5.4943 10 48.8666 11 37.0 2 34.0 2 24.0 2 26.0 2 29.0 2]
Total: 782.757
Mean: 15.65514
Genome size: 165
Size: 166
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3402.8930438
Median total errors in population: 852.2125000000001
Error averages by case: (147.19102170000008 5.936 138.11770669999993 4.798 129.7263495999989 10.226 105.48596649999938 10.419 123.60748909999938 10.684 124.13129320000046 10.292 122.16242779999968 11.918 139.05360959999993 4.912 158.1531783999998 10.295 101.55491120000008 5.002 135.46431689999991 4.849 144.72118070000008 4.911 106.69398470000036 9.916 96.31629729999996 4.249 137.80219910000014 4.808 104.85433200000031 9.802 127.66423750000004 4.772 140.0257290999999 5.633 122.59591470000042 9.842 160.22467159999874 10.958 125.86006880000001 5.066 128.25942709999947 9.804 156.036468 4.909 113.23661150000007 5.478 124.79265100000144 9.682)
Error minima by case: (1.7194 2 0.5669 1 4.2286 1 0.4236 2 23.6588 1 0.3686 2 0.6817 8 1.0 1 2.7772 2 0.0 0 0.6664 1 0.203 1 0.6254 2 0.0464 1 5.0 1 0.3716 2 0.0 0 0.9672 1 0.0 0 26.897 9 0.0 1 0.5967 1 7.238 1 0.1437 1 23.8753 1)
Average genome size in population (length): 165.2
Average program size in population (points): 166.2
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 113.1518000345958
Average age in population: 111.121030979029
Median age in population: 111.253141273391
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.973
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.973
Total error diversity:				 0.801
Error (vector) diversity:			 0.804
Behavioral diversity:				 0.805
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 137863498
--- Timings ---
Current time: 1529615120809 milliseconds
Total Time:         293.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.6 seconds, 35.6%
Fitness Testing:    149.6 seconds, 51.0%
Report:              39.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 36298.20569999996
Test mean error for best: 18.14910
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -71.6738378996
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 88.0806466807 
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 100.7221179027
Correct output: 29.6055550185  | Program output: 21.5713274455 
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 32.9408634485 
Correct output: -27.9825817496 | Program output: -24.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 122.5674160943
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 40.2666387113 
Correct output: 69.5585020781  | Program output: 20.6918968421 
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_min} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction tagged_689} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction tag_integer_733} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_39} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_swap} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove float_dec float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot integer_dup_times integer_min integer_add float_dec float_dec float_dup_items integer_add integer_rot integer_div float_dec float_dec float_dup float_dup_items float_dec float_dec integer_rot integer_div float_dec float_dup integer_add integer_dup_times float_dec float_dup float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth float_dup float_stackdepth integer_mult float_dec float_dup integer_rot tagged_689 integer_rot float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec tag_integer_733 integer_dec float_dup_items integer_rot integer_flush integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dup float_shove integer_rot float_dec float_dup float_dec float_dup float_dec float_dup tagged_39 float_dec integer_div float_dec float_dup float_dup_items float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup float_swap float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_yankdup float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [30.0 2 36.0 2 30.0 1 63.0 3 31.0 2 33.381 10 8.0342 10 11.0 2 55.8118 11 3.0 1 31.0 2 26.0 2 4.1225 9 3.3421 9 20.0 1 6.2689 11 3.0 2 30.0 2 10.717 10 48.8666 11 32.0 2 34.0 2 29.0 2 21.0 2 29.0 2]
Total: 742.5441
Mean: 14.850882
Genome size: 174
Size: 175
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3470.1970351
Median total errors in population: 893.7083
Error averages by case: (148.56588890000017 6.435 134.6693213999999 5.397 132.96276219999933 10.002 108.38065329999971 10.301 126.42831919999969 10.407 124.6741906000002 10.079 125.85531539999965 11.889 144.14993170000008 5.601 163.6539569999997 10.189 105.82059620000008 5.739 133.64848820000006 5.412 147.28784839999997 5.484 108.75680710000019 9.9 105.02938699999989 4.699 140.37679620000011 5.423 106.04672070000007 9.655 130.36100350000004 5.357 139.78486499999994 6.134 125.66371890000016 9.688 162.14324299999873 11.053 123.67087649999984 5.633 129.4877826999996 9.6 161.970702 5.524 114.23454370000005 6.121 131.33431630000132 9.517)
Error minima by case: (0.5371 2 0.0555 1 24.2045 1 0.0956 2 4.0996 1 2.7113 2 7.9593 8 0.0 0 6.6861 2 0.0 0 0.6601 1 0.203 1 0.6254 2 0.0464 1 3.5863 1 0.3716 2 0.0 0 0.0 0 0.2716 1 32.8111 9 0.7139 1 0.8635 1 18.0 1 0.5227 1 20.1507 2)
Average genome size in population (length): 166.048
Average program size in population (points): 167.048
Average percent parens in population: 0.006
Minimum age in population: 110.3018740523623
Maximum age in population: 114.3675317558183
Average age in population: 112.5447694819639
Median age in population: 112.5922785412766
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.845
Error (vector) diversity:			 0.849
Behavioral diversity:				 0.85
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 142014723
--- Timings ---
Current time: 1529615126706 milliseconds
Total Time:         299.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       106.1 seconds, 35.5%
Fitness Testing:    153.1 seconds, 51.2%
Report:              39.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 35767.64929999999
Test mean error for best: 17.88382
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -70.7050098098
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 21.5713274455 
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 32.9408634485 
Correct output: -27.9825817496 | Program output: -24.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 125.7326963965
Correct output: 90.2245669646  | Program output: 98.1200807973 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 41.3111784144 
Correct output: 69.5585020781  | Program output: 20.6918968421 
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_shove} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_stackdepth float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec float_dec float_dec float_dup float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup integer_add integer_rot integer_div float_dec float_dup integer_div float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot integer_sub float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_div float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max float_rot float_frominteger in2 integer_shove float_yank integer_shove in1 float_rot float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2)
Errors: [30.9688 10 36.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 8.0342 10 11.0 2 55.8118 11 3.0 1 31.0 2 26.0 2 7.2878 9 7.8955 10 20.0 1 4.6088 9 3.0 2 30.0 2 11.7615 10 48.8666 11 32.0 2 34.0 2 29.0 2 21.0 2 29.0 2]
Total: 700.7710999999999
Mean: 14.015422
Genome size: 176
Size: 177
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3180.552331200001
Median total errors in population: 872.3532500000001
Error averages by case: (137.17180860000013 6.088 125.03527799999989 5.123 121.86102159999929 9.094 102.04980279999981 9.796 116.8331814999999 9.531 114.65893730000013 9.62 114.89602549999962 11.656 133.06032399999987 5.237 149.21160469999933 10.077 90.54852730000005 5.359 122.93127960000007 5.102 136.96296259999983 5.132 97.02963780000003 9.726 93.65412969999976 5.132 129.27494110000012 5.073 97.76171160000001 9.312 119.34931100000009 4.953 130.1889684999999 5.776 113.46387530000014 9.287 154.28080849999859 11.088 108.6915119999999 5.274 117.91183789999971 8.764 150.94063370000006 5.213 97.78350929999998 5.821 118.97370130000098 8.793)
Error minima by case: (1.7909 2 0.4331 1 2.6116 1 0.7361 2 9.4904 1 0.3686 2 0.3944 9 0.0 0 13.0558 2 0.0 0 0.0222 1 1.1165 1 0.5507 1 0.0 0 6.7256 1 0.3716 2 0.0 0 0.5427 1 0.0 0 5.6072 8 0.4152 1 4.3306 2 15.7641 1 0.5227 1 9.1956 2)
Average genome size in population (length): 165.191
Average program size in population (points): 166.191
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 115.6666110636594
Average age in population: 113.5940364359143
Median age in population: 114.0149504876263
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.977
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.977
Total error diversity:				 0.84
Error (vector) diversity:			 0.844
Behavioral diversity:				 0.845
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 146144623
--- Timings ---
Current time: 1529615132457 milliseconds
Total Time:         305.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.5 seconds, 35.2%
Fitness Testing:    156.5 seconds, 51.3%
Report:              40.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 35757.97039999999
Test mean error for best: 17.87899
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -70.7050098098
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 21.5713274455 
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 32.9408634485 
Correct output: -27.9825817496 | Program output: -24.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 125.7326963965
Correct output: 90.2245669646  | Program output: 98.1200807973 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 41.3111784144 
Correct output: 69.5585020781  | Program output: 20.6918968421 
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction print_integer} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_shove} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_stackdepth float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec float_dec float_dec float_dup float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup integer_add integer_rot integer_div float_dec float_dup integer_div float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot integer_sub float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_div float_dec float_dup float_dup_items integer_flush float_dec print_integer integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max float_rot float_frominteger in2 integer_shove float_yank integer_shove in1 float_rot float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2)
Errors: [30.9688 10 36.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 8.0342 10 11.0 2 55.8118 11 3.0 1 31.0 2 26.0 2 7.2878 9 7.8955 10 20.0 1 4.6088 9 3.0 2 30.0 2 11.7615 10 48.8666 11 32.0 2 34.0 2 29.0 2 21.0 2 29.0 2]
Total: 700.7710999999999
Mean: 14.015422
Genome size: 176
Size: 177
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3034.7652442999993
Median total errors in population: 861.1997000000001
Error averages by case: (130.96685010000022 6.016 117.72240629999989 5.004 112.42552649999968 7.479 107.3924559 8.719 108.6007702000002 7.864 114.18881390000001 8.586 106.44732639999964 11.423 124.85031749999999 5.18 140.16556519999946 9.942 89.64828320000011 5.118 115.53283930000003 5.015 128.92188999999993 5.105 93.0189189000001 9.575 92.35834359999996 6.44 122.57863850000008 4.983 100.98758910000011 8.503 111.12270070000004 4.893 124.26375879999996 5.739 108.33925160000022 9.442 138.43502919999887 11.376 106.97741949999995 5.258 112.7615296999999 7.43 143.53305790000005 5.102 97.1580232000001 5.58 109.18993910000037 7.406)
Error minima by case: (6.3262 2 0.0 0 2.6666 1 0.7361 2 1.6814 2 0.3686 2 1.9081 8 0.0 0 21.875 2 0.0 0 0.0032 1 1.5059 1 0.1776 2 1.0 1 7.0 1 0.3716 2 0.0 0 2.0047 1 0.0 0 27.5491 8 0.4047 1 0.9774 1 16.0 1 0.4079 1 2.3488 1)
Average genome size in population (length): 164.509
Average program size in population (points): 165.509
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 117.5108678560791
Average age in population: 114.9806718566347
Median age in population: 115.3933837142604
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.859
Error (vector) diversity:			 0.866
Behavioral diversity:				 0.868
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 150257398
--- Timings ---
Current time: 1529615138229 milliseconds
Total Time:         310.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.9 seconds, 35.0%
Fitness Testing:    160.0 seconds, 51.5%
Report:              41.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 35757.97039999999
Test mean error for best: 17.87899
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -70.7050098098
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 21.5713274455 
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 32.9408634485 
Correct output: -27.9825817496 | Program output: -24.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 125.7326963965
Correct output: 90.2245669646  | Program output: 98.1200807973 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 41.3111784144 
Correct output: 69.5585020781  | Program output: 20.6918968421 
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction print_integer} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_shove} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_stackdepth float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec float_dec float_dec float_dup float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup integer_add integer_rot integer_div float_dec float_dup integer_div float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot integer_sub float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_div float_dec float_dup float_dup_items integer_flush float_dec print_integer integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max float_rot float_frominteger in2 integer_shove float_yank integer_shove in1 float_rot float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2)
Errors: [30.9688 10 36.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 8.0342 10 11.0 2 55.8118 11 3.0 1 31.0 2 26.0 2 7.2878 9 7.8955 10 20.0 1 4.6088 9 3.0 2 30.0 2 11.7615 10 48.8666 11 32.0 2 34.0 2 29.0 2 21.0 2 29.0 2]
Total: 700.7710999999999
Mean: 14.015422
Genome size: 176
Size: 177
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3018.678441299999
Median total errors in population: 836.8481999999999
Error averages by case: (126.16589320000017 5.662 116.34640869999994 4.73 114.79604889999962 5.411 121.88516309999993 7.054 114.07055589999996 5.843 121.06528679999974 7.454 102.54059169999933 11.021 119.53370139999996 4.805 136.99554119999934 10.303 88.52754160000005 4.68 113.64704099999999 4.691 124.67533309999979 4.767 98.02429280000007 9.461 93.13389579999956 7.93 117.73919490000011 4.626 111.28177069999978 7.558 106.16367569999998 4.522 119.82320259999989 5.431 102.98219680000011 9.732 139.60545269999835 11.604 107.08986359999996 4.893 111.72612049999994 5.655 136.81681970000002 4.732 97.72869370000011 5.164 112.91215520000023 5.673)
Error minima by case: (4.3262 2 0.0 0 0.0438 1 0.7361 2 2.2223 1 0.3686 2 2.1832 8 0.0 0 6.7527 2 0.0 0 0.0041 1 0.4941 1 0.2531 1 0.4316 1 3.0 1 0.3716 2 0.0 0 0.5427 1 0.2716 1 20.4415 6 0.4527 1 0.6532 1 12.0 1 0.0 0 1.1247 1)
Average genome size in population (length): 163.105
Average program size in population (points): 164.105
Average percent parens in population: 0.006
Minimum age in population: 113.3999694503889
Maximum age in population: 118.8216176218729
Average age in population: 116.8375274861163
Median age in population: 116.8382632675011
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.973
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.973
Total error diversity:				 0.82
Error (vector) diversity:			 0.821
Behavioral diversity:				 0.821
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 154335173
--- Timings ---
Current time: 1529615143893 milliseconds
Total Time:         316.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.3 seconds, 34.8%
Fitness Testing:    163.4 seconds, 51.6%
Report:              42.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 37861.208200000015
Test mean error for best: 18.93060
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -69.6738378996
Correct output: -31.2572440177 | Program output: -65.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 133.158196889 
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 101.9795237042
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -115.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -22.9825817496
Correct output: -36.0605266238 | Program output: -65.0605266238
Correct output: -98.4940591545 | Program output: -70.4940591545
Correct output: 118.444904963  | Program output: 130.4806168499
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -74.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -89.7139415536
Correct output: -85.4359203887 | Program output: -113.4359203887
Correct output: 29.5496488004  | Program output: 42.3557181174 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -39.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -142.8513267506
Correct output: -16.4772789847 | Program output: -35.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup integer_add integer_rot integer_div float_dec float_dup integer_div float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot integer_sub float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [32.0 3 34.0 2 30.0 1 17.9224 10 31.0 2 32.1236 12 46.1989 10 13.0 2 27.0058 10 5.0 1 29.0 2 28.0 2 12.0357 10 3.3421 9 22.0 2 6.2689 11 1.0 1 28.0 3 12.8061 10 3.1555 12 30.0 1 34.0 2 31.0 2 19.0 2 29.0 2]
Total: 680.859
Mean: 13.61718
Genome size: 166
Size: 167
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3265.7115642999997
Median total errors in population: 803.8252
Error averages by case: (134.7858132000001 6.219 125.04854189999975 4.911 120.96047079999992 4.241 137.7661985000001 6.864 123.52761710000011 4.603 130.32895219999972 7.631 111.22183929999886 10.775 129.56638379999998 5.018 144.14101279999926 10.599 98.29728120000001 4.847 122.47524990000008 4.868 132.92415799999984 4.949 107.39598710000001 9.372 107.86446869999905 9.076 126.95230400000014 4.86 122.9617444999998 7.966 116.22096200000003 4.81 130.58424679999982 5.569 115.68907830000032 10.033 147.59202609999855 11.661 115.02634489999998 5.017 125.72043479999995 4.832 146.78704769999993 4.932 106.76317859999993 5.288 121.47522210000001 4.694)
Error minima by case: (3.6738 2 0.2272 1 1.1957 1 0.7361 2 0.8403 1 0.3686 1 4.9496 9 0.0 0 27.0058 2 0.0 0 0.0605 1 2.4359 1 0.6254 2 1.0 2 0.7391 1 0.3716 2 0.0 0 2.5641 1 0.0 0 3.1555 7 0.7654 1 0.9774 1 12.0 1 0.0 0 4.4125 1)
Average genome size in population (length): 164.228
Average program size in population (points): 165.228
Average percent parens in population: 0.006
Minimum age in population: 115.6361680772686
Maximum age in population: 120.4515324586464
Average age in population: 118.2875513113213
Median age in population: 118.3432568970273
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.972
Total error diversity:				 0.804
Error (vector) diversity:			 0.812
Behavioral diversity:				 0.813
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 158441148
--- Timings ---
Current time: 1529615149583 milliseconds
Total Time:         322.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       111.7 seconds, 34.7%
Fitness Testing:    166.8 seconds, 51.8%
Report:              43.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 37780.777500000026
Test mean error for best: 18.89039
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -70.6738378996
Correct output: -31.2572440177 | Program output: -66.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 133.158196889 
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 101.9795237042
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -116.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -23.9825817496
Correct output: -36.0605266238 | Program output: -66.0605266238
Correct output: -98.4940591545 | Program output: -71.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -75.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -90.7139415536
Correct output: -85.4359203887 | Program output: -114.4359203887
Correct output: 29.5496488004  | Program output: 41.3111784144 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -40.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -143.8513267506
Correct output: -16.4772789847 | Program output: -36.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot integer_add integer_rot integer_div float_dec float_dec float_dup integer_yank float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup integer_add integer_rot integer_div float_dec float_dup integer_div float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot integer_sub float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [31.0 2 35.0 2 30.0 1 17.9224 10 31.0 2 32.1236 12 46.1989 10 12.0 2 27.0058 10 4.0 1 30.0 1 27.0 2 10.4531 9 3.3421 9 21.0 2 4.6088 9 2.0 2 29.0 3 11.7615 10 3.1555 12 31.0 2 34.0 2 30.0 1 20.0 1 29.0 2]
Total: 671.5717000000001
Mean: 13.431434
Genome size: 168
Size: 169
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3780.6319129000008
Median total errors in population: 802.9521500000001
Error averages by case: (161.5660042 7.353 152.30718389999987 4.869 144.07064729999996 4.55 141.54410689999986 8.332 144.85156390000012 4.765 143.51677499999968 8.91 125.39701199999848 10.9 153.30748499999999 4.961 156.93394159999926 10.72 117.2170604000001 5.094 149.63909860000007 4.838 159.12760809999995 4.86 127.69554820000039 9.667 131.49419369999865 9.202 153.55852530000018 4.8 132.5382004999996 9.372 142.71250080000004 4.728 155.80003549999998 5.585 141.25330650000024 9.953 158.74444629999934 11.77 135.68000300000006 5.038 141.5330784999999 5.188 171.21396160000006 4.98 125.63870859999994 5.468 142.47691749999996 4.911)
Error minima by case: (6.6738 2 0.1673 1 14.448 1 0.7361 2 3.4699 1 0.3686 2 4.9496 7 0.0 0 1.9228 2 0.0 0 0.0 0 2.8419 1 0.1301 2 0.5864 1 4.5828 1 0.3716 2 0.0 0 0.5427 1 0.2716 1 3.1555 9 0.0 0 0.9774 2 2.8221 1 0.0 0 4.5345 1)
Average genome size in population (length): 168.286
Average program size in population (points): 169.286
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 121.6603527289131
Average age in population: 119.2926967946259
Median age in population: 119.7128193973087
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.853
Error (vector) diversity:			 0.865
Behavioral diversity:				 0.866
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 162648798
--- Timings ---
Current time: 1529615155459 milliseconds
Total Time:         328.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.1 seconds, 34.5%
Fitness Testing:    170.4 seconds, 51.9%
Report:              44.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 37205.39960000003
Test mean error for best: 18.60270
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -75.6738378996
Correct output: -31.2572440177 | Program output: -71.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 133.158196889 
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 101.9795237042
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -121.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -28.9825817496
Correct output: -36.0605266238 | Program output: -71.0605266238
Correct output: -98.4940591545 | Program output: -76.4940591545
Correct output: 118.444904963  | Program output: 122.5674160943
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -80.7391381937
Correct output: 123.7897097488 | Program output: 115.8606358119
Correct output: -88.7139415536 | Program output: -95.7139415536
Correct output: -85.4359203887 | Program output: -119.4359203887
Correct output: 29.5496488004  | Program output: 36.088479899  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -45.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -148.8513267506
Correct output: -16.4772789847 | Program output: -41.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec float_dup float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items float_dec float_dup integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dup integer_add integer_dup_times float_dec float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [26.0 3 40.0 1 30.0 1 17.9224 10 31.0 2 32.1236 12 46.1989 10 7.0 1 27.0058 10 1.0 1 35.0 2 22.0 2 4.1225 9 3.3421 9 16.0 2 7.9291 11 7.0 2 34.0 3 6.5388 11 3.1555 12 36.0 2 34.0 2 25.0 2 25.0 2 29.0 2]
Total: 670.3387
Mean: 13.406774
Genome size: 173
Size: 174
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3387.2893148
Median total errors in population: 844.2662499999999
Error averages by case: (142.58942189999996 9.056 130.27617349999986 5.003 132.37110480000004 5.055 122.82460899999981 9.308 134.43398360000023 5.277 133.16517820000018 9.458 115.905919299999 10.769 134.73045599999992 5.119 143.46109669999942 10.577 101.19533010000005 5.331 127.80350519999999 4.972 139.16365969999987 5.001 116.24420540000006 9.616 113.52198539999927 9.67 133.05853040000008 4.877 118.97225710000002 9.623 121.48178060000002 4.761 135.11313679999992 5.705 120.53757290000013 10.265 151.02591419999914 11.648 117.78904789999996 5.063 129.29920199999995 5.156 153.45676999999995 5.076 109.6468609 5.69 131.8386132 5.307)
Error minima by case: (0.9745 2 0.0 0 14.3365 1 0.0763 2 4.2263 1 0.3565 2 0.3624 8 0.0 0 2.7442 2 0.0 0 0.0582 1 1.2983 1 0.2689 2 0.2875 1 3.0533 1 0.3394 1 0.0 0 1.9768 1 0.2716 1 3.1392 6 0.4527 1 0.2858 1 15.0 1 0.0 0 3.0613 1)
Average genome size in population (length): 172.221
Average program size in population (points): 173.221
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 123.0015785491862
Average age in population: 120.407971370352
Median age in population: 121.0271114042229
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.871
Error (vector) diversity:			 0.875
Behavioral diversity:				 0.878
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 166954723
--- Timings ---
Current time: 1529615161387 milliseconds
Total Time:         334.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.5 seconds, 34.3%
Fitness Testing:    174.0 seconds, 52.1%
Report:              45.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 37373.99050000003
Test mean error for best: 18.68700
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 133.158196889 
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 101.9795237042
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 125.7326963965
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec float_dup float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dec float_dec integer_rot float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items float_dec float_dup integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dup integer_add integer_dup_times float_dec float_dup_items integer_flush integer_pop float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [27.0 3 39.0 2 30.0 1 17.9224 10 31.0 2 32.1236 12 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 7.2878 9 3.3421 9 17.0 2 6.2689 11 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 34.0 2 26.0 2 24.0 2 29.0 2]
Total: 670.8884
Mean: 13.417768
Genome size: 173
Size: 174
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3389.5228254999993
Median total errors in population: 857.3271
Error averages by case: (143.1778306999999 9.893 132.52657129999983 5.142 131.51556430000008 5.333 117.86789849999957 9.943 132.67055060000013 5.269 129.78125130000018 9.979 114.2131682999991 10.709 137.33977720000001 5.251 140.6153228999992 10.684 101.88970899999997 5.33 129.73339420000005 5.147 140.64018509999997 5.181 114.69000950000004 9.78 117.92248199999914 9.967 134.0548375000001 5.033 113.03071179999986 9.819 123.90253149999998 4.973 138.28437990000003 5.783 122.90109440000047 10.457 144.90688579999886 11.593 122.16732760000002 5.098 124.58235999999991 5.326 155.39765830000005 5.177 112.44444250000001 5.746 131.18788130000002 5.466)
Error minima by case: (0.6738 2 0.5847 1 12.3127 1 0.7361 2 5.5456 1 0.0842 2 2.952 7 0.0 0 3.8152 2 0.0 0 0.9421 1 2.1938 1 0.6254 2 0.5634 1 1.1836 1 0.3694 2 0.0 0 0.5427 1 0.2716 1 0.1548 8 0.2673 1 0.2858 1 15.0 1 0.1437 1 6.6624 1)
Average genome size in population (length): 173.01
Average program size in population (points): 174.01
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 124.2510685612333
Average age in population: 121.3205667764955
Median age in population: 122.422053210796
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.85
Error (vector) diversity:			 0.854
Behavioral diversity:				 0.856
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 171280198
--- Timings ---
Current time: 1529615167310 milliseconds
Total Time:         339.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.0 seconds, 34.1%
Fitness Testing:    177.6 seconds, 52.3%
Report:              46.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 38965.45260000001
Test mean error for best: 19.48273
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -67.6738378996
Correct output: -31.2572440177 | Program output: -63.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -113.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -20.9825817496
Correct output: -36.0605266238 | Program output: -63.0605266238
Correct output: -98.4940591545 | Program output: -68.4940591545
Correct output: 118.444904963  | Program output: 132.063257001 
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -72.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -87.7139415536
Correct output: -85.4359203887 | Program output: -111.4359203887
Correct output: 29.5496488004  | Program output: 44.4447975236 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -37.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -140.8513267506
Correct output: -16.4772789847 | Program output: -33.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction tagged_193} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot integer_add integer_rot integer_div float_dec tagged_193 float_dup float_dup float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup integer_add integer_rot integer_div float_dec float_dup integer_div float_dec float_dec float_dup integer_rot integer_shove float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot integer_fromfloat float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup integer_pop float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_div in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [34.0 3 32.0 2 30.0 1 1.0956 10 31.0 2 29.6088 10 46.1989 10 15.0 2 27.0058 10 7.0 1 27.0 2 30.0 1 13.6184 11 3.3421 9 24.0 2 4.6088 9 1.0 1 26.0 3 14.8951 11 3.1555 12 28.0 2 34.0 2 33.0 2 17.0 2 29.0 2]
Total: 663.529
Mean: 13.27058
Genome size: 166
Size: 167
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3457.6085995000003
Median total errors in population: 832.5307500000001
Error averages by case: (148.99091110000012 9.595 138.00836269999982 5.168 133.80804099999997 4.989 114.21747159999968 10.082 135.7001583 5.215 126.49447830000031 10.242 118.09388079999934 10.85 143.90454270000006 5.305 140.4735511999994 10.715 104.2889023000001 5.389 135.3737568000001 5.14 147.45234610000003 5.184 112.9933671 9.906 125.13960439999913 10.161 142.02236040000003 5.115 108.41354279999969 10.026 129.56796390000008 4.962 141.792938 5.839 125.76631790000039 10.534 144.35002269999896 11.838 124.15938899999995 5.324 128.25170659999998 5.167 160.83443699999995 5.21 113.74502870000006 5.786 130.66151809999997 5.362)
Error minima by case: (0.9508 2 0.2572 1 5.4344 1 0.0763 2 2.904 1 0.3686 2 0.4585 8 0.0 0 3.8152 2 0.0 0 0.3088 1 1.1165 1 0.3165 2 0.7169 1 5.8855 1 0.3716 2 0.0 0 1.0 1 0.7729 1 0.1548 8 0.1402 1 0.2858 1 2.4025 1 0.0677 1 1.4553 1)
Average genome size in population (length): 173.628
Average program size in population (points): 174.628
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 125.5856330498441
Average age in population: 122.970774008784
Median age in population: 123.8856893639574
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.853
Error (vector) diversity:			 0.86
Behavioral diversity:				 0.861
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 175620998
--- Timings ---
Current time: 1529615173114 milliseconds
Total Time:         345.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.5 seconds, 34.0%
Fitness Testing:    181.2 seconds, 52.4%
Report:              47.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 38858.43820000002
Test mean error for best: 19.42922
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -68.6738378996
Correct output: -31.2572440177 | Program output: -64.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 150.3445636751
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -114.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -21.9825817496
Correct output: -36.0605266238 | Program output: -64.0605266238
Correct output: -98.4940591545 | Program output: -69.4940591545
Correct output: 118.444904963  | Program output: 130.4806168499
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -73.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -88.7139415536
Correct output: -85.4359203887 | Program output: -112.4359203887
Correct output: 29.5496488004  | Program output: 43.4002578205 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -38.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -141.8513267506
Correct output: -16.4772789847 | Program output: -34.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.243087206930163} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction tagged_193} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.243087206930163 in1 integer_add float_dec integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot integer_add integer_rot integer_div float_dec tagged_193 float_dup float_dup float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup integer_add integer_rot integer_div float_dec float_dup integer_div float_dec float_dec float_dup integer_rot integer_shove float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot integer_fromfloat float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup integer_pop float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_div in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [33.0 3 33.0 2 30.0 1 0.7361 10 31.0 2 30.8662 11 46.1989 10 14.0 2 27.0058 10 6.0 1 28.0 2 29.0 2 12.0357 10 3.3421 9 23.0 2 6.2689 11 0.0 0 27.0 3 13.8506 10 3.1555 12 29.0 2 34.0 2 32.0 2 18.0 2 29.0 2]
Total: 662.4598000000001
Mean: 13.249196
Genome size: 168
Size: 169
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3498.4305575999997
Median total errors in population: 807.7245499999999
Error averages by case: (146.7785872 8.738 135.66408699999994 5.228 135.49808100000007 4.946 123.47077109999906 10.033 137.57188139999997 5.091 134.9301335000003 10.289 131.48275369999945 10.832 139.71233110000009 5.455 144.32713769999964 10.606 110.52364700000012 5.348 132.8519475999999 5.196 143.88087339999987 5.235 115.79901950000011 9.987 119.35848799999884 10.098 138.82631140000018 5.132 116.89974069999928 10.002 126.68614580000009 5.039 139.65739799999992 5.949 126.76172520000057 10.596 138.73006549999837 11.888 128.12566700000002 5.306 133.94841779999996 5.264 160.40255430000005 5.334 118.6787955 5.779 135.19199719999995 5.301)
Error minima by case: (0.3262 2 0.7155 1 6.8364 1 0.7361 2 2.3327 1 0.4508 2 1.332 7 0.0 0 0.3784 2 0.0 0 0.0 0 0.5059 1 0.0879 2 0.2806 2 1.8357 1 0.3716 2 0.0 0 1.0 1 0.2716 1 0.1548 8 0.2346 1 0.2858 1 14.0 1 0.8354 1 4.4161 1)
Average genome size in population (length): 173.748
Average program size in population (points): 174.748
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 127.1478824595349
Average age in population: 124.5508500278836
Median age in population: 125.3362584830083
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.851
Error (vector) diversity:			 0.861
Behavioral diversity:				 0.862
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 179964687
--- Timings ---
Current time: 1529615178915 milliseconds
Total Time:         351.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.9 seconds, 33.8%
Fitness Testing:    184.7 seconds, 52.5%
Report:              47.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 40213.76360000001
Test mean error for best: 20.10688
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 143.017888277 
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 96.9499004982 
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 130.4806168499
Correct output: 90.2245669646  | Program output: 98.1200807973 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 120.6883810073
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_shove} {:instruction in1} {:instruction float_rot} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove float_dec float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dup float_dup integer_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot integer_sub float_dup integer_rot float_dec integer_rot integer_sub float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dec float_dec float_dup_items integer_rot float_dec float_dec integer_add integer_dup_items float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec integer_stackdepth integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max float_rot float_frominteger in2 integer_shove float_yank integer_shove in1 float_rot float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2)
Errors: [27.0 3 39.0 2 30.0 1 8.0628 10 31.0 2 37.1532 13 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 12.0357 10 7.8955 10 17.0 2 3.1013 10 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 0.2858 8 26.0 2 24.0 2 29.0 2]
Total: 646.4779
Mean: 12.929558
Genome size: 199
Size: 200
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3396.7086424000004
Median total errors in population: 761.4927
Error averages by case: (145.81911589999996 7.427 131.78255139999985 5.172 132.5566259 4.664 118.40950189999941 9.793 134.88139420000002 4.999 131.47942160000028 10.151 130.77994860000064 10.776 139.0251008000001 5.369 131.1231211999994 10.444 107.70867130000008 5.036 129.30897919999992 5.132 142.11341409999986 5.138 114.10659339999992 9.878 114.02761009999895 9.842 138.18863640000015 5.069 112.26834989999938 9.846 124.87943350000006 4.885 138.51920529999998 5.772 123.49889130000035 10.59 119.26801879999827 12.087 123.48489719999998 5.196 128.54780459999998 4.946 160.52510880000008 5.25 115.12660400000001 5.451 131.2296429999999 5.137)
Error minima by case: (2.6738 2 0.2936 1 1.1283 1 0.0763 1 1.3426 1 0.4434 2 4.9496 7 2.0 1 4.4702 2 0.0 0 0.0605 1 1.738 1 0.5507 2 0.4054 1 0.0169 1 0.3716 1 0.0 0 0.5427 1 0.0 0 0.1392 8 1.5474 1 0.2858 1 15.0 1 0.0 0 0.0529 1)
Average genome size in population (length): 171.586
Average program size in population (points): 172.586
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 129.0416102229408
Average age in population: 124.790902232271
Median age in population: 126.7266049669019
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.966
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.966
Total error diversity:				 0.836
Error (vector) diversity:			 0.841
Behavioral diversity:				 0.844
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 184254462
--- Timings ---
Current time: 1529615184787 milliseconds
Total Time:         357.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.4 seconds, 33.7%
Fitness Testing:    188.2 seconds, 52.7%
Report:              48.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 37364.9983
Test mean error for best: 18.68250
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -71.6738378996
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 157.6712390733
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -24.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 124.1500562454
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 122.5011927781
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 40.2666387113 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction integer_yank} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction in2} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_swap} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add integer_yank float_shove 72.69774605952773 float_rot integer_add integer_pop float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot integer_add integer_rot integer_div in2 float_dec float_dup float_dup float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec float_dup float_shove float_dec float_dup integer_div float_dup_items integer_add integer_rot integer_div float_dec integer_rot integer_div float_dup_times float_dup integer_add integer_dup_times float_stackdepth float_dec integer_rot integer_div float_dec float_dup integer_add integer_rot float_dec float_dup integer_div float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dup integer_add integer_dup_times float_dec float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec integer_mod integer_add integer_rot float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_swap integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec integer_yankdup float_dec integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [30.0 2 36.0 2 30.0 1 6.5906 11 31.0 2 28.3514 11 46.1989 10 11.0 2 27.0058 10 3.0 1 31.0 2 26.0 2 5.7052 12 3.3421 9 20.0 1 1.2885 9 3.0 2 30.0 2 10.717 10 3.1555 12 32.0 2 34.0 2 29.0 2 21.0 2 29.0 2]
Total: 651.355
Mean: 13.0271
Genome size: 188
Size: 189
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3696.1714294999997
Median total errors in population: 723.76205
Error averages by case: (155.74429819999995 6.69 143.12499979999987 5.499 146.79358089999997 4.291 134.10893619999928 10.004 146.7186229 4.843 143.89880770000042 10.147 151.9747913000002 10.904 151.30290280000003 5.73 141.98335329999983 10.386 119.58421190000008 5.184 140.85719869999994 5.48 153.83488160000002 5.492 127.0334597999999 9.87 121.73030299999857 9.588 149.16720790000014 5.475 124.17898999999903 9.935 135.50200500000003 5.254 148.31346660000005 6.084 132.74894890000047 10.625 129.2557590999981 12.295 135.21255199999993 5.464 142.34334449999994 4.804 169.61913050000013 5.66 126.83785359999999 5.63 144.06582329999995 4.902)
Error minima by case: (0.2153 2 0.0385 1 0.3778 1 0.1423 1 10.4941 1 1.1303 2 3.0922 8 0.0 0 1.0867 2 0.0 0 0.0 0 2.4359 1 0.5507 2 0.5634 1 4.7194 1 0.3716 2 0.0 0 0.6873 1 0.0 0 0.0361 6 0.1677 1 0.2858 1 18.0 1 0.0143 1 2.561 1)
Average genome size in population (length): 170.162
Average program size in population (points): 171.162
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 130.0416102229408
Average age in population: 125.6512331810952
Median age in population: 128.0887719193303
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.813
Error (vector) diversity:			 0.822
Behavioral diversity:				 0.824
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 188508587
--- Timings ---
Current time: 1529615190425 milliseconds
Total Time:         363.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.8 seconds, 33.5%
Fitness Testing:    191.6 seconds, 52.8%
Report:              49.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 38196.33630000001
Test mean error for best: 19.09817
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 124.1500562454
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_yankdup float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup integer_swap integer_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup float_dec float_dup float_dup integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup integer_add integer_rot integer_div float_dec float_dup integer_div float_dec float_dec float_dup integer_rot integer_shove float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot integer_fromfloat float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup integer_add integer_dup_times float_dec float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec integer_dec float_dec integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec integer_mod integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [27.0 3 39.0 2 30.0 1 1.0956 10 31.0 2 30.8662 11 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 5.7052 12 3.3421 9 17.0 2 4.6088 9 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 34.0 2 26.0 2 24.0 2 29.0 2]
Total: 649.5615
Mean: 12.99123
Genome size: 185
Size: 186
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3273.7779334999996
Median total errors in population: 705.3765
Error averages by case: (142.79043920000012 6.121 128.20360149999985 5.213 125.97642319999993 3.977 114.44800159999954 10.049 128.77578639999996 4.569 127.56995600000022 10.412 133.78790130000118 10.737 134.45282219999999 5.407 121.50723009999939 10.34 103.81231290000007 4.901 125.66497449999996 5.157 139.28668319999974 5.212 106.5110837 9.914 106.01222489999915 9.431 134.87152560000013 5.182 106.77719029999949 10.059 120.3757906 4.991 134.7219565999999 5.852 116.76799480000021 10.559 109.94940409999874 12.238 122.44777369999994 5.162 120.9848746999999 4.614 154.91794659999996 5.39 112.8176787 5.43 124.7623570999999 4.667)
Error minima by case: (5.6738 2 0.2489 1 13.8567 1 0.7361 1 4.8298 1 1.3957 2 1.0922 7 0.0 0 1.0867 2 0.0 0 0.9395 1 0.203 1 0.6254 2 0.5634 1 9.0 1 0.0407 2 0.0 0 0.0 0 0.2716 1 0.1548 8 0.4527 1 0.0749 1 18.0 1 0.1646 1 8.0633 2)
Average genome size in population (length): 171.048
Average program size in population (points): 172.048
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 131.7141738236976
Average age in population: 128.0716692674788
Median age in population: 129.434266819855
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.826
Error (vector) diversity:			 0.832
Behavioral diversity:				 0.834
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 192784887
--- Timings ---
Current time: 1529615196212 milliseconds
Total Time:         368.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.2 seconds, 33.4%
Fitness Testing:    195.1 seconds, 52.9%
Report:              50.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 37784.50120000001
Test mean error for best: 18.89225
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 133.158196889 
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 133.6458971521
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_sin} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_shove} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction 91} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction tagged_393} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_sin float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dec float_dup integer_shove float_dup float_dup integer_rot integer_add integer_rot integer_div float_dec float_dec float_dup integer_yank float_dec float_dup integer_rot float_dec integer_min integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup integer_add integer_rot float_dup integer_rot float_dec integer_rot integer_sub float_dup float_dup 91 integer_rot float_dec float_dup integer_rot float_dec integer_rot integer_sub float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items float_dup float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_div float_dec integer_add float_dup_items integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec tagged_393 integer_rot float_dec float_dec float_dec integer_div float_dec float_dup integer_rot float_dec float_dup integer_rot float_dec integer_shove integer_add integer_rot float_dec float_dup float_dup float_dec float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dec integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_div in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [27.0 3 39.0 2 30.0 1 17.9224 10 31.0 2 29.6088 10 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 15.201 10 3.3421 9 17.0 2 4.6088 9 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 0.2858 8 26.0 2 24.0 2 29.0 2]
Total: 643.9125
Mean: 12.87825
Genome size: 174
Size: 175
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3414.098088699999
Median total errors in population: 700.2172499999999
Error averages by case: (146.35265250000006 5.98 136.13888119999973 5.146 132.25319739999998 4.082 119.36872199999966 10.043 134.06868819999997 4.705 132.4968443000003 10.385 139.75957630000102 10.729 139.97244290000003 5.324 128.06736689999937 10.325 107.79942710000012 4.788 134.7123482 5.111 144.44459809999972 5.166 114.39077370000001 9.901 114.12131929999897 9.407 139.29953470000018 5.113 111.2510115999994 10.01 126.542044 4.947 140.34364569999977 5.785 123.61245500000031 10.588 113.5472944999986 12.197 125.96002719999991 5.197 127.27205509999986 4.874 158.6416630000001 5.272 116.92940190000004 5.39 131.5301178999999 4.757)
Error minima by case: (2.6738 2 0.2572 1 16.9792 1 0.7361 1 7.7572 1 0.5588 2 0.8209 8 0.0 0 1.0867 2 0.0 0 0.0 0 6.4941 1 0.5507 2 0.5634 2 4.5798 1 0.3716 2 0.0 0 1.0 1 0.2716 1 0.0356 8 0.0 0 0.2858 1 16.0 1 0.1062 1 11.1568 1)
Average genome size in population (length): 172.094
Average program size in population (points): 173.094
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 132.8646571251529
Average age in population: 129.7048239127894
Median age in population: 130.7630363586571
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.979
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.816
Error (vector) diversity:			 0.82
Behavioral diversity:				 0.822
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 197087287
--- Timings ---
Current time: 1529615202096 milliseconds
Total Time:         374.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.6 seconds, 33.3%
Fitness Testing:    198.7 seconds, 53.0%
Report:              51.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 37784.50120000001
Test mean error for best: 18.89225
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 133.158196889 
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 133.6458971521
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_sin} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_shove} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction 91} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction tagged_393} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_sin float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dec float_dup integer_shove float_dup float_dup integer_rot integer_add integer_rot integer_div float_dec float_dec float_dup integer_yank float_dec float_dup integer_rot float_dec integer_min integer_rot float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup integer_add integer_rot float_dup integer_rot float_dec integer_rot integer_sub float_dup float_dup 91 integer_rot float_dec float_dup integer_rot float_dec integer_rot integer_sub float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items float_dup float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_div float_dec integer_add float_dup_items integer_div float_dec float_dup float_dup_items integer_rot float_dec float_dup integer_add integer_rot float_dec tagged_393 integer_rot float_dec float_dec float_dec integer_div float_dec float_dup integer_rot float_dec float_dup integer_rot float_dec integer_shove integer_add integer_rot float_dec float_dup float_dup float_dec float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dec integer_add integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_div in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [27.0 3 39.0 2 30.0 1 17.9224 10 31.0 2 29.6088 10 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 15.201 10 3.3421 9 17.0 2 4.6088 9 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 0.2858 8 26.0 2 24.0 2 29.0 2]
Total: 643.9125
Mean: 12.87825
Genome size: 174
Size: 175
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3271.3691991999995
Median total errors in population: 710.1611500000001
Error averages by case: (137.84737449999994 6.121 127.65207499999987 5.277 127.98105839999992 4.062 116.85130649999937 10.078 131.28574939999993 4.707 129.8556734000004 10.215 137.35566480000108 10.811 132.4875885 5.411 123.71981299999936 10.313 101.78520770000003 4.903 125.22735220000001 5.239 135.79960679999988 5.315 109.09658549999996 9.828 106.84626769999886 9.573 131.05935350000007 5.245 109.60169979999917 9.9 119.01921679999997 5.072 133.2828189 5.88 116.71791910000042 10.67 107.63142219999864 12.238 118.77343539999994 5.2 124.64803759999994 5.065 152.99929440000003 5.393 110.20391410000005 5.393 127.02576399999991 4.706)
Error minima by case: (0.3262 2 0.0 0 8.4746 1 0.7361 2 6.6588 1 1.3957 2 1.0922 8 0.0 0 2.2473 2 0.0 0 0.0605 1 2.8419 1 0.6254 2 0.1961 1 0.2609 1 0.3716 2 0.0 0 0.0 0 0.2716 1 0.1548 8 0.3188 1 0.0749 1 11.2138 1 0.0 0 6.5612 1)
Average genome size in population (length): 172.323
Average program size in population (points): 173.323
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 133.8653762243305
Average age in population: 130.741447509796
Median age in population: 132.0835169815238
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.979
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.854
Error (vector) diversity:			 0.855
Behavioral diversity:				 0.856
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 201395437
--- Timings ---
Current time: 1529615208013 milliseconds
Total Time:         380.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.1 seconds, 33.1%
Fitness Testing:    202.2 seconds, 53.1%
Report:              52.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 38824.36510000002
Test mean error for best: 19.41218
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -68.6738378996
Correct output: -31.2572440177 | Program output: -64.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 141.1862194274
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 107.0091469103
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -114.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -21.9825817496
Correct output: -36.0605266238 | Program output: -64.0605266238
Correct output: -98.4940591545 | Program output: -69.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -73.7391381937
Correct output: 123.7897097488 | Program output: 122.5011927781
Correct output: -88.7139415536 | Program output: -88.7139415536
Correct output: -85.4359203887 | Program output: -112.4359203887
Correct output: 29.5496488004  | Program output: 43.4002578205 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -38.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -141.8513267506
Correct output: -16.4772789847 | Program output: -34.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction tag_float_687} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_add} {:instruction float_pop} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_yankdup float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dec integer_min integer_add integer_rot integer_div float_dec float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dup float_dup_times float_dec integer_swap float_stackdepth integer_rot float_dec integer_swap integer_rot integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items float_dec float_dup integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dup integer_add tag_float_687 float_dec float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup integer_fromfloat integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec integer_mod integer_add float_pop float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_sub float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add integer_rot float_dec float_dup integer_rot integer_dup_items float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [33.0 3 33.0 2 30.0 1 9.8944 9 31.0 2 27.094 9 46.1989 10 14.0 2 27.0058 10 6.0 1 28.0 2 29.0 2 0.9572 9 3.3421 9 23.0 2 1.2885 9 0.0 0 27.0 3 13.8506 10 3.1555 12 29.0 2 34.0 2 32.0 2 18.0 2 29.0 2]
Total: 645.787
Mean: 12.91574
Genome size: 168
Size: 169
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3711.915415499999
Median total errors in population: 723.73695
Error averages by case: (157.04483199999987 6.281 146.69338669999993 5.572 143.23139300000008 4.492 130.94192109999932 10.089 146.7921969999999 5.116 146.30245340000027 10.245 151.94601799999984 10.971 153.4683286 5.744 137.31797500000008 10.39 115.04285170000003 5.201 144.41909280000007 5.501 155.10715340000007 5.522 126.53796870000001 9.792 127.18020719999836 9.446 150.14283269999999 5.486 126.49394359999896 9.958 139.77887149999987 5.377 151.37392650000012 6.104 136.60832040000025 10.545 127.02470159999822 12.39 137.944785 5.574 137.47566419999987 5.169 174.4105862000001 5.726 126.19869049999997 5.665 141.04131470000004 5.04)
Error minima by case: (1.3262 2 0.0 0 0.5406 1 0.7361 2 2.402 2 0.3686 2 1.9078 8 0.0 0 4.7132 2 0.0 0 0.0612 1 0.1165 1 0.6254 2 0.7503 1 7.5569 1 0.3716 2 0.0 0 0.0 0 0.7729 1 0.1548 8 0.0 0 0.2858 2 17.0 1 0.1646 1 3.9176 1)
Average genome size in population (length): 172.726
Average program size in population (points): 173.726
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 135.3200442809505
Average age in population: 132.1872771742794
Median age in population: 133.4071117205712
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.977
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.977
Total error diversity:				 0.843
Error (vector) diversity:			 0.853
Behavioral diversity:				 0.854
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 205713562
--- Timings ---
Current time: 1529615213898 milliseconds
Total Time:         386.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.5 seconds, 33.0%
Fitness Testing:    205.8 seconds, 53.3%
Report:              53.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 40117.53300000002
Test mean error for best: 20.05877
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_pop} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove float_dec float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_add integer_rot float_dec integer_sub float_dup float_dup_items float_dup integer_rot integer_div float_yankdup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec float_dup float_dup_items integer_shove integer_add integer_dup_times float_dec float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items float_dec float_dup integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dup integer_add integer_dup_times float_dec integer_add integer_mult float_dec integer_rot float_dec float_dup integer_rot float_dec integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dup integer_add integer_dup_times float_dec float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec integer_mod integer_add integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_pop float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup float_dup integer_swap float_dup_times float_dup integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [27.0 3 39.0 2 30.0 1 1.0956 10 31.0 2 30.8662 11 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 0.9572 9 3.3421 9 17.0 2 6.2689 11 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 34.0 2 26.0 2 24.0 2 29.0 2]
Total: 645.4736
Mean: 12.909472
Genome size: 194
Size: 195
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3334.0712983
Median total errors in population: 712.544
Error averages by case: (143.39307640000007 6.047 132.53446089999989 5.267 130.3629992999999 4.268 114.26252539999969 9.973 133.0212250999999 4.854 129.35865760000033 10.287 141.61156940000058 10.777 138.30758050000006 5.448 121.39186549999943 10.235 103.13031540000006 5.016 129.9431598999999 5.233 142.02284819999983 5.291 108.69325719999996 9.814 108.52067779999894 9.499 135.53177880000018 5.195 108.27140429999949 10.038 124.75112129999998 5.135 138.11445150000003 5.807 118.77062370000041 10.485 114.12680939999855 12.241 121.08544659999998 5.333 123.96490229999974 5.28 155.83879270000008 5.296 111.65341580000009 5.537 128.2643332999999 4.788)
Error minima by case: (2.3262 2 0.0 0 5.8011 1 0.2516 2 0.0503 2 2.5303 2 1.4546 8 0.0 0 1.0316 2 0.0 0 0.0605 1 2.4941 1 0.6254 2 0.1961 1 9.0 1 0.3716 2 0.0 0 0.8914 1 0.2716 1 0.1548 6 0.642 1 0.2858 2 18.0 1 0.0 0 0.0768 1)
Average genome size in population (length): 172.84
Average program size in population (points): 173.84
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 136.6859803224122
Average age in population: 133.0487483412782
Median age in population: 134.672007631588
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.832
Error (vector) diversity:			 0.836
Behavioral diversity:				 0.838
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 210034487
--- Timings ---
Current time: 1529615219914 milliseconds
Total Time:         392.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.9 seconds, 32.9%
Fitness Testing:    209.4 seconds, 53.4%
Report:              54.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 40117.53300000002
Test mean error for best: 20.05877
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_pop} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove float_dec float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_add integer_rot float_dec integer_sub float_dup float_dup_items float_dup integer_rot integer_div float_yankdup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec float_dup float_dup_items integer_shove integer_add integer_dup_times float_dec float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup float_dup_items float_dec float_dup integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dup integer_add integer_dup_times float_dec integer_add integer_mult float_dec integer_rot float_dec float_dup integer_rot float_dec integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dup integer_add integer_dup_times float_dec float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec integer_mod integer_add integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_pop float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup float_dup integer_swap float_dup_times float_dup integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [27.0 3 39.0 2 30.0 1 1.0956 10 31.0 2 30.8662 11 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 0.9572 9 3.3421 9 17.0 2 6.2689 11 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 34.0 2 26.0 2 24.0 2 29.0 2]
Total: 645.4736
Mean: 12.909472
Genome size: 194
Size: 195
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3458.3491830000003
Median total errors in population: 719.7048500000001
Error averages by case: (146.7460216000001 6.337 133.6448533999997 5.469 138.49497289999994 4.46 120.69140699999949 10.057 139.73226980000007 5.088 135.9547432000003 10.36 144.88123640000032 10.891 139.4154579 5.633 131.30800079999943 10.371 110.92415410000007 4.994 131.26052700000002 5.448 142.7305200999998 5.489 118.59774019999995 9.843 109.71012599999867 9.459 137.58342000000016 5.461 115.14217519999917 10.038 125.82869710000004 5.338 140.6828651 6.108 122.97138580000035 10.682 121.25518839999806 12.303 127.08919979999993 5.396 129.0857298999998 5.263 159.65746650000003 5.593 119.38070579999997 5.563 134.925319 5.011)
Error minima by case: (0.1528 2 0.0555 1 0.6278 1 0.0763 1 1.1552 1 0.3686 2 4.5788 8 0.0 0 7.2347 2 0.0 0 0.2583 1 0.4941 1 0.6254 2 0.5634 1 4.7819 1 0.3716 2 0.0 0 3.9566 1 0.4263 1 0.1548 6 0.0115 1 0.2858 1 14.0 1 0.4761 1 2.0768 1)
Average genome size in population (length): 172.773
Average program size in population (points): 173.773
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 138.4237893780051
Average age in population: 134.3729345725547
Median age in population: 136.0525293179924
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.825
Error (vector) diversity:			 0.83
Behavioral diversity:				 0.834
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 214353962
--- Timings ---
Current time: 1529615225848 milliseconds
Total Time:         398.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.3 seconds, 32.7%
Fitness Testing:    212.9 seconds, 53.5%
Report:              54.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 37286.28110000002
Test mean error for best: 18.64314
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -75.6738378996
Correct output: -31.2572440177 | Program output: -71.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -121.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -28.9825817496
Correct output: -36.0605266238 | Program output: -71.0605266238
Correct output: -98.4940591545 | Program output: -76.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -80.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -95.7139415536
Correct output: -85.4359203887 | Program output: -119.4359203887
Correct output: 29.5496488004  | Program output: 36.088479899  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -45.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -148.8513267506
Correct output: -16.4772789847 | Program output: -41.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_max} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_pop} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_frominteger float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot integer_add float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec float_dup float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dec float_dec float_dup float_stackdepth float_dup integer_div float_dec float_dec float_dup float_dup_items float_dec float_dup integer_rot float_dec integer_dup_times integer_add integer_mult float_dec float_dup float_dec float_dup integer_add integer_dup_times float_dec integer_add integer_mult float_dec integer_rot float_dec float_dup integer_rot float_dec integer_rot integer_sub float_dup float_dup float_dup_items integer_max integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_inc float_dec float_dup float_dup_items float_shove float_dec float_dec integer_add integer_mult float_dec float_dup float_dup float_dec float_dup float_rot float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_pop float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dup integer_div float_dup_times integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 float_yank float_yank float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [26.0 3 40.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 7.0 1 27.0058 10 1.0 1 35.0 2 22.0 2 2.5399 9 3.3421 9 16.0 2 4.6088 9 7.0 2 34.0 3 6.5388 11 3.1555 12 36.0 2 34.0 2 25.0 2 25.0 2 29.0 2]
Total: 643.9259
Mean: 12.878518
Genome size: 193
Size: 194
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3562.6817091999997
Median total errors in population: 721.08485
Error averages by case: (150.33903689999997 6.242 138.8280990999998 5.372 138.7998273000001 4.5 123.1629205999994 10.014 143.3768826 5.25 141.59689570000037 10.466 147.9898259000005 11.002 146.04675570000003 5.512 134.21861999999962 10.38 111.5922184 4.97 136.80891589999993 5.345 148.07143209999992 5.393 122.33895810000004 9.821 119.43276749999887 9.533 142.30893330000004 5.303 121.87538659999933 10.096 131.9638755 5.212 144.77391590000008 5.953 127.7000204000004 10.664 124.17418339999858 12.324 128.48868969999992 5.365 134.5154593999999 5.38 165.73643230000002 5.504 120.00095130000011 5.565 138.3287056 5.046)
Error minima by case: (6.6738 2 0.0 0 1.9884 1 0.7361 2 0.6588 1 4.9746 1 0.7242 8 0.0 0 6.7527 2 0.0 0 0.0605 1 0.203 1 0.6254 2 0.4201 1 6.5178 1 0.3716 2 0.0 0 0.0 0 0.2716 1 0.1548 8 0.4527 1 0.0428 1 19.0 1 0.1482 1 0.1247 1)
Average genome size in population (length): 174.214
Average program size in population (points): 175.214
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 139.5532264384725
Average age in population: 135.9288257516853
Median age in population: 137.2947163016594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.84
Error (vector) diversity:			 0.85
Behavioral diversity:				 0.851
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 218709362
--- Timings ---
Current time: 1529615231759 milliseconds
Total Time:         404.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.8 seconds, 32.6%
Fitness Testing:    216.5 seconds, 53.5%
Report:              55.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 37256.65610000003
Test mean error for best: 18.62833
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 143.017888277 
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 107.0091469103
Correct output: 29.6055550185  | Program output: 75.7578941748 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.6873842588
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 117.8194956409
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.6693586754 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.65311503115514} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.65311503115514 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot float_dup integer_rot float_dec integer_min integer_add integer_rot integer_flush integer_sub float_dup float_dup_items float_dup float_dec float_dec float_dup float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dec float_dec float_dup float_stackdepth float_dup integer_div float_dec float_dec float_dup float_dup_items float_dec float_dup integer_rot integer_add integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup print_integer float_dec float_dup integer_pop float_dec integer_dec float_dec float_dup integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_dec integer_yankdup float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dup integer_div float_dup_times integer_div float_dec float_dup float_dup_items integer_rot float_inc integer_swap integer_add float_dup float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [27.0 3 39.0 2 30.0 1 8.0628 10 31.0 2 27.094 9 46.1523 11 8.0 1 26.9347 11 0.0 0 34.0 2 23.0 2 0.6254 9 3.3421 9 17.0 2 0.3716 11 6.0 2 33.0 3 7.5834 11 3.1109 11 35.0 2 34.0 2 26.0 2 24.0 2 29.0 2]
Total: 641.2772
Mean: 12.825544
Genome size: 182
Size: 183
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3286.2646409
Median total errors in population: 719.1242
Error averages by case: (141.47794689999992 6.181 129.95521279999974 5.439 123.80226259999998 4.297 114.73595509999966 9.959 127.56843589999997 4.838 128.59595750000034 10.341 133.64666370000091 10.766 138.56446010000002 5.588 119.46660399999936 10.202 103.27688670000003 5.095 127.8531022 5.397 139.50930639999982 5.469 105.34206189999985 9.707 108.39191289999872 9.449 134.90438640000002 5.351 107.37789879999931 9.911 124.34353089999996 5.419 137.57777719999987 5.984 119.56857040000014 10.512 107.87904239999878 12.183 120.64603520000004 5.444 121.65359119999985 5.372 157.16280840000013 5.504 111.32705559999997 5.627 122.71617569999998 4.886)
Error minima by case: (2.6738 2 0.0 0 0.0438 1 0.7361 1 0.3277 1 0.3686 2 1.6056 8 0.0 0 3.1091 2 0.0 0 0.0041 1 0.4941 1 0.5015 2 0.1593 1 7.2288 1 0.3716 2 0.0 0 0.8914 1 0.0 0 0.1548 8 0.0156 1 0.0749 2 18.0 1 0.159 1 4.886 1)
Average genome size in population (length): 174.819
Average program size in population (points): 175.819
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 140.5360212675876
Average age in population: 137.419980041273
Median age in population: 138.7291142104151
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.811
Error (vector) diversity:			 0.812
Behavioral diversity:				 0.814
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 223079962
--- Timings ---
Current time: 1529615237786 milliseconds
Total Time:         410.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.2 seconds, 32.5%
Fitness Testing:    220.2 seconds, 53.7%
Report:              56.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 37256.65610000003
Test mean error for best: 18.62833
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 143.017888277 
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 107.0091469103
Correct output: 29.6055550185  | Program output: 75.7578941748 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.6873842588
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 117.8194956409
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.6693586754 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.65311503115514} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.65311503115514 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_rot float_dup integer_rot float_dec integer_min integer_add integer_rot integer_flush integer_sub float_dup float_dup_items float_dup float_dec float_dec float_dup float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dec float_dec float_dup float_stackdepth float_dup integer_div float_dec float_dec float_dup float_dup_items float_dec float_dup integer_rot integer_add integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup print_integer float_dec float_dup integer_pop float_dec integer_dec float_dec float_dup integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_dec integer_yankdup float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dup integer_div float_dup_times integer_div float_dec float_dup float_dup_items integer_rot float_inc integer_swap integer_add float_dup float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [27.0 3 39.0 2 30.0 1 8.0628 10 31.0 2 27.094 9 46.1523 11 8.0 1 26.9347 11 0.0 0 34.0 2 23.0 2 0.6254 9 3.3421 9 17.0 2 0.3716 11 6.0 2 33.0 3 7.5834 11 3.1109 11 35.0 2 34.0 2 26.0 2 24.0 2 29.0 2]
Total: 641.2772
Mean: 12.825544
Genome size: 183
Size: 184
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3699.3473014999995
Median total errors in population: 712.4862499999999
Error averages by case: (159.27172959999993 6.291 148.4595024999999 5.476 142.12854529999993 4.575 127.12474009999951 10.118 146.17557799999994 5.229 142.53893020000038 10.476 149.3471385 10.902 153.5326361000001 5.621 136.72940189999977 10.41 117.59000039999997 5.09 146.30807090000002 5.462 155.9248498999999 5.543 123.51474660000001 9.649 124.5570650999984 9.609 152.18994319999996 5.474 121.53768319999912 10.205 141.01814289999993 5.421 156.0448405 6.072 136.13060070000034 10.695 124.34108859999807 12.276 136.2490114 5.508 133.6275624999997 5.741 174.00871370000004 5.668 128.30685149999994 5.726 140.42292819999997 5.03)
Error minima by case: (1.6738 2 0.3914 1 5.8023 1 0.7361 2 2.9982 2 5.3769 1 0.9524 8 0.0 0 7.2347 2 0.0 0 0.006 1 0.203 1 0.1785 2 0.9083 1 7.0 1 0.3716 2 0.0 0 2.3127 2 0.0 0 0.1548 8 0.2707 1 0.0749 1 16.0 1 0.2353 1 0.2183 1)
Average genome size in population (length): 174.057
Average program size in population (points): 175.057
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 141.9079201212452
Average age in population: 138.549308110085
Median age in population: 139.9806765938849
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.796
Error (vector) diversity:			 0.799
Behavioral diversity:				 0.8
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 227431387
--- Timings ---
Current time: 1529615243704 milliseconds
Total Time:         416.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.7 seconds, 32.4%
Fitness Testing:    223.7 seconds, 53.7%
Report:              57.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 37343.96370000001
Test mean error for best: 18.67198
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot integer_add float_dup integer_rot float_dec integer_min integer_add integer_rot integer_flush integer_sub float_dup float_dup_items float_dup float_dec float_dec float_dup float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot float_dec float_dup float_dup float_dup_items float_dec integer_add float_yank float_dec float_dec float_dec float_dup float_stackdepth float_dup integer_div float_dec float_dec float_dup float_dup_items float_dec float_dup integer_rot float_dec integer_dup_times integer_add integer_mult float_dec float_dup float_dec float_dup integer_add integer_dup_times float_dec integer_pop integer_pop float_dec integer_dec float_dec float_dup integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup float_dec integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dup float_dec float_dup integer_div float_dec float_dup integer_div float_dup_times integer_div float_dec float_dup float_dup_items integer_rot float_inc integer_swap integer_add float_dup float_dec float_dup float_dec float_dup integer_swap float_dup_times integer_dup_items in1 float_rot float_frominteger in2 integer_shove float_yank in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_yankdup in2 integer_min)
Errors: [27.0 3 39.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 2.5399 9 3.3421 9 17.0 2 4.6088 9 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 34.0 2 26.0 2 24.0 2 29.0 2]
Total: 642.9705
Mean: 12.85941
Genome size: 187
Size: 188
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3781.7101775
Median total errors in population: 706.1975
Error averages by case: (163.0628389 6.123 155.5673002999999 5.303 147.59297130000004 4.194 130.52475539999944 10.199 151.38381309999988 4.967 147.00829000000044 10.569 153.3857096000006 10.915 154.9863952 5.414 136.08246629999968 10.457 121.07948500000002 4.776 152.15932950000007 5.296 159.72001519999995 5.336 122.7773641999999 9.927 127.00893749999835 9.542 156.59193780000004 5.348 125.83468019999921 10.252 144.2503338999999 5.216 159.28293409999992 5.983 136.93710400000037 10.675 126.05558769999836 12.307 141.98578480000003 5.27 132.47814449999984 5.847 176.2925389000001 5.48 133.1009022000001 5.44 146.90455790000001 4.82)
Error minima by case: (0.3936 2 0.0987 1 0.6666 1 0.7361 2 1.7776 1 0.3686 2 1.9078 8 0.0 0 1.8753 2 0.0 0 0.5404 1 0.1165 1 0.3746 2 0.729 2 1.097 1 0.3716 2 0.0 0 2.0 1 0.2716 1 0.1548 8 0.5473 1 0.2858 1 17.0 1 0.0511 1 2.7567 1)
Average genome size in population (length): 174.144
Average program size in population (points): 175.144
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 143.4190873955477
Average age in population: 139.0615478719288
Median age in population: 141.1660217108477
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.972
Total error diversity:				 0.798
Error (vector) diversity:			 0.804
Behavioral diversity:				 0.807
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 231785112
--- Timings ---
Current time: 1529615249901 milliseconds
Total Time:         422.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.1 seconds, 32.2%
Fitness Testing:    227.5 seconds, 53.9%
Report:              58.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 37343.96370000001
Test mean error for best: 18.67198
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dup_times} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec float_dec float_dup float_dup integer_rot integer_add float_dup integer_rot float_dec integer_min integer_add integer_rot integer_flush integer_sub float_dup float_dup_items float_dup float_dec float_dec float_dup float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec integer_rot float_dec float_dup float_dup float_dup_items float_dec integer_add float_yank float_dec float_dec float_dec float_dup float_stackdepth float_dup integer_div float_dec float_dec float_dup float_dup_items float_dec float_dup integer_rot float_dec integer_dup_times integer_add integer_mult float_dec float_dup float_dec float_dup integer_add integer_dup_times float_dec integer_pop integer_pop float_dec integer_dec float_dec float_dup integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup float_dec integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dup float_dec float_dup integer_div float_dec float_dup integer_div float_dup_times integer_div float_dec float_dup float_dup_items integer_rot float_inc integer_swap integer_add float_dup float_dec float_dup float_dec float_dup integer_swap float_dup_times integer_dup_items in1 float_rot float_frominteger in2 integer_shove float_yank in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_yankdup in2 integer_min)
Errors: [27.0 3 39.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 2.5399 9 3.3421 9 17.0 2 4.6088 9 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 34.0 2 26.0 2 24.0 2 29.0 2]
Total: 642.9705
Mean: 12.85941
Genome size: 187
Size: 188
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3787.8652787999995
Median total errors in population: 730.6923499999999
Error averages by case: (161.1986567 6.313 151.1818939 5.492 149.14301609999998 4.543 133.96680459999945 10.022 153.6547591 5.222 147.55879060000052 10.453 154.5897622000002 10.885 154.93347700000007 5.659 138.59905499999994 10.261 123.64537130000002 5.139 148.63823820000002 5.503 157.2448890999999 5.518 128.26357860000007 9.679 127.64007919999833 9.563 153.7963757000002 5.438 125.94861919999902 10.113 142.97464689999995 5.414 157.1578782 6.12 137.2602203000002 10.73 129.1185779999981 12.273 140.4720348999999 5.512 135.7806295999997 5.842 174.1576850000001 5.628 131.5611422000001 5.791 147.2560971999999 5.01)
Error minima by case: (0.6738 2 0.1055 1 1.4228 1 0.7361 2 4.7841 2 0.3686 2 0.0922 7 0.0 0 3.2484 2 0.0 0 0.0632 1 0.203 1 0.6254 2 0.5634 1 3.2901 1 0.1987 2 0.0 0 0.8914 1 0.1481 2 0.1548 7 0.0015 1 0.2858 1 16.0 1 0.0 0 0.4683 1)
Average genome size in population (length): 171.652
Average program size in population (points): 172.652
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 144.739785165938
Average age in population: 139.2885898492429
Median age in population: 142.4067307953266
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.971
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.761
Error (vector) diversity:			 0.767
Behavioral diversity:				 0.768
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 236076537
--- Timings ---
Current time: 1529615255833 milliseconds
Total Time:         428.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.5 seconds, 32.1%
Fitness Testing:    231.0 seconds, 53.9%
Report:              59.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 42403.64940000003
Test mean error for best: 21.20182
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_dec} {:instruction tag_integer_853} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec integer_div float_dec float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_add integer_rot float_dec integer_sub float_dup float_dup_items float_dup integer_rot integer_div float_yankdup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec integer_rot float_dec float_dup integer_rot float_dec float_dup float_dup_items integer_shove integer_add integer_dup_times float_dec float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup integer_shove float_dec float_dup integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dup integer_add integer_dup_times float_dec integer_add integer_mult float_dec integer_rot float_dec float_dup integer_rot float_dec float_frominteger float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dup integer_add integer_dup_times float_dec float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup integer_div integer_dec integer_rot float_dec float_dup float_yankdup float_dup float_dec integer_dec tag_integer_853 float_dup float_dup_items float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_div in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [27.0 3 39.0 2 30.0 1 1.0956 10 31.0 2 30.8662 11 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 10.4531 9 3.3421 9 17.0 2 6.2689 11 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 0.2858 8 26.0 2 24.0 2 29.0 2]
Total: 627.2552999999999
Mean: 12.545106
Genome size: 179
Size: 180
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3752.2145302000004
Median total errors in population: 712.5213999999999
Error averages by case: (163.15201779999995 6.214 152.4861162999998 5.424 143.23891019999996 4.607 130.67036989999934 10.202 148.72197369999998 5.337 144.92954100000065 10.657 150.38452250000034 10.785 157.3156224000001 5.587 136.89436069999977 10.421 117.00091660000024 4.944 149.9393913000002 5.413 159.49957979999982 5.465 124.72602060000004 9.731 128.41498699999804 9.546 156.03995640000022 5.446 123.2177988999988 10.197 144.203872 5.395 159.69780129999995 6.099 139.29843300000033 10.7 123.26497619999776 12.21 139.59380810000005 5.376 130.51306679999965 6.15 177.01885070000012 5.611 128.84583740000005 5.551 141.04379959999997 5.034)
Error minima by case: (0.3262 2 0.2572 1 8.4594 1 0.7361 2 0.3412 2 0.2516 2 8.0342 8 0.0 0 3.4484 2 0.0 0 0.0374 1 1.5224 1 0.6254 2 0.2246 2 8.0 1 0.3716 1 0.0 0 2.0 1 0.0 0 0.1548 8 0.0 0 0.2858 1 17.0 1 0.4064 1 2.8753 1)
Average genome size in population (length): 171.027
Average program size in population (points): 172.027
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 146.295626109835
Average age in population: 140.0619850020845
Median age in population: 143.7892165303465
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.734
Error (vector) diversity:			 0.738
Behavioral diversity:				 0.743
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 240352362
--- Timings ---
Current time: 1529615261592 milliseconds
Total Time:         434.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       139.0 seconds, 32.0%
Fitness Testing:    234.5 seconds, 54.0%
Report:              60.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 42403.64940000003
Test mean error for best: 21.20182
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_708} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_dec} {:instruction tag_integer_853} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec integer_div float_dec float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_add integer_rot float_dec integer_sub float_dup float_dup_items float_dup integer_rot integer_div float_yankdup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec integer_rot float_dec float_dup integer_rot float_dec float_dup float_dup_items integer_shove integer_add integer_dup_times float_dec float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup integer_shove float_dec float_dup tagged_708 float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dup integer_add integer_dup_times float_dec integer_add integer_mult float_dec float_dup_times float_dec float_dup integer_rot float_dec float_frominteger float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dup integer_add integer_dup_times float_dec float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup integer_div integer_dec integer_rot float_dec float_dup float_yankdup float_dup float_dec integer_dec tag_integer_853 float_dup float_dup_items float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_div in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2)
Errors: [27.0 3 39.0 2 30.0 1 1.0956 10 31.0 2 30.8662 11 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 10.4531 9 3.3421 9 17.0 2 6.2689 11 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 0.2858 8 26.0 2 24.0 2 29.0 2]
Total: 627.2552999999999
Mean: 12.545106
Genome size: 178
Size: 179
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3705.7517849999995
Median total errors in population: 732.70605
Error averages by case: (157.84947520000006 6.105 150.14881539999988 5.326 146.74684539999993 4.779 127.67382129999952 10.155 150.82641329999987 5.359 142.5989398000005 10.529 149.33421390000044 10.953 152.2925908 5.453 135.7603917999996 10.479 117.42259330000013 4.939 147.6430937 5.271 156.74985379999998 5.358 123.06572359999983 9.609 124.50198939999869 9.503 150.57988620000003 5.27 120.40902579999909 10.171 140.7683495 5.226 154.51731890000008 5.957 135.1076763000003 10.703 124.59098449999814 12.401 141.04124909999996 5.337 129.56608819999954 6.133 171.42134940000014 5.456 128.88547730000002 5.548 145.08661909999978 5.143)
Error minima by case: (0.6738 2 0.7033 1 3.7551 1 0.7361 2 1.1472 1 0.4152 1 7.0462 8 0.0 0 1.0867 2 0.0 0 0.0605 1 0.1165 1 0.5507 2 0.0721 1 1.7391 1 0.3716 2 0.0 0 0.8914 1 0.2716 1 0.1548 8 0.0 0 0.0749 1 13.0 1 0.4088 1 2.0693 2)
Average genome size in population (length): 172.941
Average program size in population (points): 173.941
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 147.3238526435916
Average age in population: 143.1543168946775
Median age in population: 145.0143419574601
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.988
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.988
Total error diversity:				 0.768
Error (vector) diversity:			 0.779
Behavioral diversity:				 0.781
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 244675837
--- Timings ---
Current time: 1529615267412 milliseconds
Total Time:         440.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.5 seconds, 31.9%
Fitness Testing:    238.0 seconds, 54.1%
Report:              61.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 42692.5487
Test mean error for best: 21.34627
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -71.6738378996
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -24.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 40.2666387113 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec integer_div float_dec float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_add integer_rot float_dec integer_sub float_dup float_dup_items float_dup integer_rot integer_div float_yankdup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dup integer_rot float_dec float_dup float_dup_items integer_shove integer_add integer_dup_times float_dec float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup integer_shove float_dec float_dup integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dup integer_add integer_dup_times float_dec integer_add integer_mult float_dec integer_rot float_dec float_dup integer_rot float_dec integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_dec float_dec float_dup float_dup_items integer_flush integer_div float_dec integer_div float_dec float_dup integer_yank integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add integer_mod integer_min)
Errors: [30.0 2 36.0 2 30.0 1 1.0956 10 31.0 2 30.8662 11 46.1989 10 11.0 2 27.0058 10 3.0 1 31.0 2 26.0 2 10.4531 9 3.3421 9 20.0 1 6.2689 11 3.0 2 30.0 2 10.717 10 3.1555 12 32.0 2 0.2858 8 29.0 2 21.0 2 29.0 2]
Total: 628.3889
Mean: 12.567778
Genome size: 159
Size: 160
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3338.6779193999996
Median total errors in population: 720.1975
Error averages by case: (145.16908959999998 6.053 134.44397949999976 5.307 127.01888729999996 4.473 113.24882829999954 9.988 131.22213410000003 5.153 127.70120720000052 10.31 139.24206700000101 10.777 139.89554409999997 5.44 123.03409039999954 10.236 103.45013140000005 4.809 132.19794310000006 5.28 143.86530029999992 5.33 106.90314660000014 9.504 108.21688909999864 9.452 136.7335306000001 5.156 106.2095923999991 10.053 126.72701469999996 5.227 139.2828499 5.866 118.45404390000033 10.51 114.64262729999805 12.247 122.6762281 5.307 120.39904449999966 5.888 158.29585540000008 5.366 114.95226029999994 5.41 126.54863429999996 5.005)
Error minima by case: (1.6738 2 0.7155 1 5.0116 1 0.7361 2 0.3412 1 0.3686 2 2.8096 8 0.0 0 4.6647 2 0.0 0 0.0605 1 1.5224 1 0.5507 2 0.4828 1 8.0 1 0.3716 2 0.0 0 0.8914 1 0.1481 1 0.1548 6 0.0 0 0.0749 1 16.0785 1 0.1332 1 1.0231 1)
Average genome size in population (length): 173.416
Average program size in population (points): 174.416
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 148.4757165344736
Average age in population: 143.8738509779641
Median age in population: 146.422832753134
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.786
Error (vector) diversity:			 0.79
Behavioral diversity:				 0.794
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 249011262
--- Timings ---
Current time: 1529615273318 milliseconds
Total Time:         445.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.9 seconds, 31.8%
Fitness Testing:    241.6 seconds, 54.2%
Report:              62.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 42918.88060000002
Test mean error for best: 21.45944
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -69.6738378996
Correct output: -31.2572440177 | Program output: -65.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -115.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -22.9825817496
Correct output: -36.0605266238 | Program output: -65.0605266238
Correct output: -98.4940591545 | Program output: -70.4940591545
Correct output: 118.444904963  | Program output: 127.3153365476
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -74.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -89.7139415536
Correct output: -85.4359203887 | Program output: -113.4359203887
Correct output: 29.5496488004  | Program output: 42.3557181174 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -39.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -142.8513267506
Correct output: -16.4772789847 | Program output: -35.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction print_integer} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tag_integer_241} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_add} {:instruction float_dup} {:instruction print_integer} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_max} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_min} {:instruction integer_rot} {:instruction print_integer} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction -79} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_add} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec integer_div float_dec float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_dec float_dup float_dec integer_min integer_add integer_rot integer_div print_integer float_dec integer_sub float_dup float_dup_items float_dup tag_integer_241 integer_sub float_dup float_dup_items float_dup float_dup float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_rot float_dec float_dup integer_div float_dec float_dec float_dec float_dup_items integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dec float_dup integer_add float_dec float_dec float_dup float_dup_items integer_rot integer_add float_dup print_integer float_dec print_integer float_dec integer_add integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dup integer_rot integer_max float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_sub float_dec integer_min integer_rot print_integer float_dup float_yankdup float_dup float_dec float_dup float_dup_times integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup -79 float_dup integer_div float_dec integer_div float_dec float_dup float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec integer_add float_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_div in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [32.0 3 34.0 2 30.0 1 1.0956 10 31.0 2 30.8662 11 46.1989 10 13.0 2 27.0058 10 5.0 1 29.0 2 28.0 2 8.8704 11 3.3421 9 22.0 2 6.2689 11 1.0 1 28.0 3 12.8061 10 3.1555 12 30.0 1 0.2858 8 31.0 2 19.0 2 29.0 2]
Total: 631.8953
Mean: 12.637906
Genome size: 179
Size: 180
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3485.3640682
Median total errors in population: 714.74825
Error averages by case: (152.07311769999993 6.075 139.89103259999985 5.288 133.75142759999991 4.238 118.63907599999946 10.127 136.34378820000003 4.876 134.54089820000064 10.448 141.5331210000008 10.835 146.7875424 5.422 127.81283959999945 10.298 111.08797940000008 4.899 137.87214739999996 5.228 148.5762366 5.319 111.5612075999998 9.678 115.02649999999868 9.396 143.76714700000005 5.257 112.46668499999913 10.167 132.43472489999994 5.18 146.25277599999993 5.921 125.57072030000027 10.509 115.39166549999833 12.317 131.71690970000012 5.284 124.84632239999982 5.512 165.48081970000013 5.438 122.40046430000002 5.447 131.61791910000002 4.762)
Error minima by case: (2.6738 2 0.1735 1 1.0324 1 0.7361 2 3.2723 1 1.3888 2 4.9078 8 1.0 1 1.0867 2 0.0 0 0.0 0 1.0599 1 0.6254 2 0.9083 1 0.695 1 0.3716 2 0.0 0 1.0 1 0.0 0 0.1548 8 0.4369 1 0.2858 1 9.8094 1 0.3128 1 4.5516 1)
Average genome size in population (length): 174.443
Average program size in population (points): 175.443
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 149.7869155219603
Average age in population: 145.6911354021597
Median age in population: 147.6417998418044
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.817
Error (vector) diversity:			 0.824
Behavioral diversity:				 0.827
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 253372262
--- Timings ---
Current time: 1529615279272 milliseconds
Total Time:         451.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.4 seconds, 31.7%
Fitness Testing:    245.1 seconds, 54.2%
Report:              63.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 40886.41430000002
Test mean error for best: 20.44321
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 127.3153365476
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction tag_integer_853} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec integer_div float_dec float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dup float_dup_items float_dec integer_rot float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dup_items integer_rot float_dec float_dup integer_rot float_dec integer_rot integer_div float_dup integer_add integer_dup_times float_dec integer_add integer_mult float_dec integer_rot float_dec float_dup integer_rot float_dec integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dup integer_add integer_dup_times float_dec float_dup_items integer_flush float_dec float_dup integer_rot float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup tag_integer_853 float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup float_dec float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div integer_sub float_dup float_dup_items integer_rot float_dec integer_div float_dec integer_add float_dec float_dup_times float_dec float_dup float_dup integer_swap float_dup_times float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_dup_times in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add)
Errors: [27.0 3 39.0 2 30.0 1 1.0956 10 31.0 2 30.8662 11 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 8.8704 11 3.3421 9 17.0 2 6.2689 11 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 0.2858 8 26.0 2 24.0 2 29.0 2]
Total: 627.6726
Mean: 12.553452
Genome size: 178
Size: 179
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3354.3969374000003
Median total errors in population: 709.6908999999999
Error averages by case: (142.34391580000008 6.082 131.59335459999983 5.359 130.61042929999994 4.434 118.07819869999966 10.161 134.29177099999995 5.087 133.71527500000045 10.368 138.10833770000067 10.831 137.21146919999998 5.453 126.57394659999946 10.309 106.65980000000003 4.974 129.45887959999996 5.296 140.38966969999987 5.374 111.29421619999982 9.481 108.21424499999893 9.412 135.19072980000013 5.258 111.85313189999931 10.205 125.7783811 5.26 137.56571590000001 5.918 118.1316226000003 10.514 116.0544835999984 12.285 121.39501709999999 5.382 122.2291747999998 5.558 156.56136710000015 5.462 112.41627240000001 5.488 129.8175327 4.909)
Error minima by case: (6.3262 2 0.0555 1 0.1923 1 0.7361 2 0.8581 1 0.3686 2 0.9078 8 0.0 0 7.2347 2 0.0 0 0.0 0 0.203 1 0.6254 2 0.0954 1 6.0 1 0.033 2 0.0 0 0.8914 1 0.2716 1 0.1548 8 0.0 0 0.0749 1 15.0 1 0.0 0 4.4964 1)
Average genome size in population (length): 174.361
Average program size in population (points): 175.361
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 151.1810943158988
Average age in population: 146.3691137061804
Median age in population: 148.8957968694715
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.827
Error (vector) diversity:			 0.834
Behavioral diversity:				 0.837
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 257731337
--- Timings ---
Current time: 1529615285348 milliseconds
Total Time:         457.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.9 seconds, 31.6%
Fitness Testing:    248.7 seconds, 54.3%
Report:              64.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 42776.096400000024
Test mean error for best: 21.38805
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -70.6738378996
Correct output: -31.2572440177 | Program output: -66.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -116.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -23.9825817496
Correct output: -36.0605266238 | Program output: -66.0605266238
Correct output: -98.4940591545 | Program output: -71.4940591545
Correct output: 118.444904963  | Program output: 132.063257001 
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -75.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -90.7139415536
Correct output: -85.4359203887 | Program output: -114.4359203887
Correct output: 29.5496488004  | Program output: 41.3111784144 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -40.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -143.8513267506
Correct output: -16.4772789847 | Program output: -36.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_add} {:instruction print_integer} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_max} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_min} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction -79} {:instruction float_dup} {:instruction integer_div} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction float_yank} {:instruction integer_max} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction tag_float_63})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec integer_div float_dec float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_add integer_rot float_dec integer_sub float_dup float_dup_items float_dup integer_rot integer_div float_yankdup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dup float_dup_items integer_shove float_dec float_dup float_dup_items integer_shove integer_add print_integer float_dec float_dec float_dec float_dup float_dup_items float_dup integer_div float_dec float_dec float_dup float_dec integer_rot integer_sub float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dup float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup float_dup float_dec integer_rot float_dec float_dec integer_add integer_mult integer_max float_dup integer_rot float_dec float_dup integer_pop float_dec integer_dec float_dec float_dup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_sub float_dec integer_min integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup float_dup_times integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup -79 float_dup integer_div integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 float_yank integer_max float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 tag_float_63)
Errors: [31.0 2 35.0 2 30.0 1 1.0956 10 31.0 2 30.8662 11 46.1989 10 12.0 2 27.0058 10 4.0 1 30.0 1 27.0 2 13.6184 11 3.3421 9 21.0 2 6.2689 11 2.0 2 29.0 3 11.7615 10 3.1555 12 31.0 2 0.2858 8 30.0 1 20.0 1 29.0 2]
Total: 633.5987000000001
Mean: 12.671974
Genome size: 178
Size: 179
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3349.9158897000007
Median total errors in population: 712.65645
Error averages by case: (145.13268219999998 6.073 134.23508279999993 5.308 132.36422779999998 4.264 114.33027179999958 10.047 135.9639256 4.897 127.75736980000023 10.269 136.252739500001 10.83 140.76554390000007 5.405 122.99226159999937 10.228 103.93929650000008 4.865 131.98813189999993 5.298 143.5161442999998 5.356 109.59608279999993 9.552 105.84281719999873 9.409 137.52800809999997 5.218 109.56784629999922 10.124 127.28583779999998 5.2 139.13197549999998 5.842 115.9576929000005 10.598 108.34411669999825 12.292 122.7135534 5.347 123.18492849999964 5.36 159.58823960000007 5.416 112.87524969999996 5.437 131.48086349999997 4.946)
Error minima by case: (0.7402 2 0.174 1 1.4626 1 0.7361 1 2.6238 1 0.3686 2 1.3613 7 0.0 0 6.7527 2 0.0 0 0.0249 1 0.4941 1 0.6254 2 0.5634 2 5.6749 1 0.3716 2 0.0 0 0.0 0 0.2716 1 0.1548 6 0.4967 1 0.2858 2 17.0 1 0.0 0 0.5975 1)
Average genome size in population (length): 175.144
Average program size in population (points): 176.144
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 152.6337067978184
Average age in population: 148.4027534356436
Median age in population: 150.2217289569341
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.847
Error (vector) diversity:			 0.85
Behavioral diversity:				 0.852
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 262109987
--- Timings ---
Current time: 1529615291415 milliseconds
Total Time:         464.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.3 seconds, 31.5%
Fitness Testing:    252.3 seconds, 54.4%
Report:              65.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 38519.4271
Test mean error for best: 19.25971
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -71.6738378996
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 144.8495571265
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 100.7221179027
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -24.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 125.7326963965
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 124.1613320197
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 40.2666387113 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction print_integer} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_sub} {:instruction float_shove} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction print_integer} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_div} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot float_dup integer_rot float_dec integer_min integer_add integer_rot float_dec float_dec integer_min integer_yankdup integer_rot float_dec float_dec float_dec float_dup float_dec integer_min integer_add integer_rot integer_div print_integer float_dec integer_sub float_dup float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_rot float_dec float_dup float_dup float_dup_items float_dec float_dec integer_rot float_dec float_dec float_dup integer_rot float_dec integer_rot integer_fromfloat float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_stackdepth float_dec float_dec float_dup float_dup_items integer_rot float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup integer_pop float_dec integer_dec float_dec float_dup integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_div float_dup float_dec float_dup integer_div integer_sub float_shove float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add float_dup print_integer float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_yank float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_shove float_yank integer_div in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [30.0 2 36.0 2 30.0 1 6.2311 12 31.0 2 33.381 10 46.1989 10 11.0 2 27.0058 10 3.0 1 31.0 2 26.0 2 7.2878 9 3.3421 9 20.0 1 0.3716 11 3.0 2 30.0 2 10.717 10 3.1555 12 32.0 2 0.2858 8 29.0 2 21.0 2 29.0 2]
Total: 627.9766000000001
Mean: 12.559532
Genome size: 172
Size: 173
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3813.1398534000004
Median total errors in population: 728.5877
Error averages by case: (163.0247503999999 6.231 152.60933339999994 5.422 149.69055799999998 4.59 132.6365879999995 10.067 151.59263059999995 5.075 148.1029625000004 10.451 155.5840181999998 10.848 157.3950599000001 5.558 141.95920410000016 10.341 123.55777940000003 5.129 150.50915860000003 5.366 162.05096720000006 5.457 125.89484750000005 9.644 125.42869509999866 9.375 156.12171850000013 5.374 127.27276199999925 10.207 145.61636830000003 5.273 157.1268210000001 6.031 138.3487631 10.614 128.30685559999822 12.359 141.72352139999984 5.453 137.14439119999994 5.458 178.61997260000012 5.578 132.47604420000008 5.622 149.7320826 5.091)
Error minima by case: (0.1288 2 0.0 0 1.1759 1 0.7361 2 2.4012 2 1.9039 2 0.9078 8 0.0 0 1.0867 2 0.0 0 0.0 0 0.203 1 0.6254 2 0.4408 1 4.4613 1 0.3716 2 0.0 0 0.0 0 0.4263 1 0.1548 8 0.5074 1 0.2858 1 18.0 1 0.1482 1 4.8797 2)
Average genome size in population (length): 174.62
Average program size in population (points): 175.62
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 153.6772319473724
Average age in population: 150.0645230157811
Median age in population: 151.6207103177784
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.832
Error (vector) diversity:			 0.838
Behavioral diversity:				 0.839
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 266475612
--- Timings ---
Current time: 1529615297213 milliseconds
Total Time:         469.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.8 seconds, 31.5%
Fitness Testing:    255.8 seconds, 54.4%
Report:              66.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 41590.77320000005
Test mean error for best: 20.79539
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -70.6738378996
Correct output: -31.2572440177 | Program output: -66.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -116.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -23.9825817496
Correct output: -36.0605266238 | Program output: -66.0605266238
Correct output: -98.4940591545 | Program output: -71.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -75.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -90.7139415536
Correct output: -85.4359203887 | Program output: -114.4359203887
Correct output: 29.5496488004  | Program output: 41.3111784144 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -40.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -143.8513267506
Correct output: -16.4772789847 | Program output: -36.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_add} {:instruction float_dup} {:instruction print_integer} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_min} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction -79} {:instruction float_dup} {:instruction integer_div} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction float_yank} {:instruction integer_max} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction tag_float_63})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dec float_dup integer_add float_dec float_dec float_dup float_dup_items integer_rot integer_add float_dup print_integer float_dec print_integer float_dec integer_add integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_dec float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot integer_dup_times float_dup_times float_dec float_dup integer_min integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup float_dup_times integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup -79 float_dup integer_div integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 float_yank integer_max float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 tag_float_63)
Errors: [31.0 2 35.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 12.0 2 27.0058 10 4.0 1 30.0 1 27.0 2 10.4531 9 3.3421 9 21.0 2 4.6088 9 2.0 2 29.0 3 11.7615 10 3.1555 12 31.0 2 0.2858 8 30.0 1 20.0 1 29.0 2]
Total: 624.3476
Mean: 12.486952
Genome size: 176
Size: 177
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4145.924449
Median total errors in population: 742.116
Error averages by case: (177.9266573999999 6.418 164.30243419999988 5.66 166.64411750000002 4.777 144.95884439999972 10.163 169.84512009999995 5.34 160.7701336000003 10.426 168.93129749999935 10.993 171.29581470000005 5.799 152.69087690000103 10.345 136.25709700000016 5.212 161.9964935999999 5.584 174.2426466 5.65 141.68902639999993 9.674 136.72844679999875 9.491 168.77784340000017 5.574 141.14963029999922 10.308 158.19133299999984 5.503 170.90064099999995 6.185 147.87683380000007 10.681 143.24738299999794 12.417 152.23042179999993 5.576 151.80160910000012 5.507 189.97973040000014 5.751 144.4472596000001 5.747 164.9937569 5.268)
Error minima by case: (0.3262 2 0.2937 1 1.8807 1 0.7361 2 2.736 2 0.3686 2 0.3186 8 0.0 0 3.2484 2 0.0 0 0.2889 1 1.4941 1 0.6254 1 0.4828 1 2.8535 1 0.3716 2 0.0 0 1.599 1 0.2716 1 0.1392 7 0.0 0 0.2858 1 9.5049 1 0.159 1 1.8131 2)
Average genome size in population (length): 174.638
Average program size in population (points): 175.638
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 154.8224952803904
Average age in population: 150.8906498758353
Median age in population: 152.885529919697
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.836
Error (vector) diversity:			 0.848
Behavioral diversity:				 0.851
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 270841662
--- Timings ---
Current time: 1529615302996 milliseconds
Total Time:         475.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       149.2 seconds, 31.4%
Fitness Testing:    259.4 seconds, 54.5%
Report:              66.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 41590.77320000005
Test mean error for best: 20.79539
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -70.6738378996
Correct output: -31.2572440177 | Program output: -66.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -116.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -23.9825817496
Correct output: -36.0605266238 | Program output: -66.0605266238
Correct output: -98.4940591545 | Program output: -71.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 93.5666699187 
Correct output: -96.7391381937 | Program output: -75.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -90.7139415536
Correct output: -85.4359203887 | Program output: -114.4359203887
Correct output: 29.5496488004  | Program output: 41.3111784144 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -40.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -143.8513267506
Correct output: -16.4772789847 | Program output: -36.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_add} {:instruction float_dup} {:instruction print_integer} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_min} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction -79} {:instruction float_dup} {:instruction integer_div} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction float_yank} {:instruction integer_max} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction tag_float_63})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dec float_dup integer_add float_dec float_dec float_dup float_dup_items integer_rot integer_add float_dup print_integer float_dec print_integer float_dec integer_add integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dup float_rot float_dec integer_dec float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup integer_add integer_rot integer_dup_times float_dup_times float_dec float_dup integer_min integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup float_dup_times integer_rot float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup -79 float_dup integer_div integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 float_yank integer_max float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 tag_float_63)
Errors: [31.0 2 35.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 12.0 2 27.0058 10 4.0 1 30.0 1 27.0 2 10.4531 9 3.3421 9 21.0 2 4.6088 9 2.0 2 29.0 3 11.7615 10 3.1555 12 31.0 2 0.2858 8 30.0 1 20.0 1 29.0 2]
Total: 624.3476
Mean: 12.486952
Genome size: 176
Size: 177
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3780.7030758000005
Median total errors in population: 725.6487
Error averages by case: (160.59239249999996 6.174 149.5245190999999 5.395 150.3533413 4.344 131.02699609999948 10.174 154.28062900000015 4.998 144.64072760000047 10.19 156.46827459999972 10.844 156.31227070000014 5.513 140.0216694 10.295 123.89758889999999 5.039 146.99600850000002 5.325 157.77978979999997 5.41 125.57328000000001 9.609 120.8607129999984 9.227 154.03540120000014 5.324 125.87331049999898 10.057 141.68347980000004 5.251 156.76115410000014 6.002 136.6718323000004 10.589 131.63792969999795 12.308 140.86235219999998 5.381 138.56767189999988 5.231 174.88570159999998 5.531 133.77223230000007 5.585 148.93680969999997 4.891)
Error minima by case: (4.3144 2 0.0 0 1.251 1 0.7361 2 0.3412 1 0.3686 2 2.3053 8 1.0 1 4.279 2 0.0 0 0.002 1 1.5224 1 0.6254 2 0.1693 1 3.6404 1 0.3716 2 0.0 0 0.2944 1 0.0 0 0.1548 8 0.0 0 0.0749 1 2.4025 1 0.0 0 0.8753 2)
Average genome size in population (length): 175.943
Average program size in population (points): 176.943
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 156.4883108579935
Average age in population: 152.7425928781679
Median age in population: 154.3375328329176
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.852
Error (vector) diversity:			 0.857
Behavioral diversity:				 0.86
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 275240312
--- Timings ---
Current time: 1529615308978 milliseconds
Total Time:         481.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.7 seconds, 31.3%
Fitness Testing:    263.0 seconds, 54.6%
Report:              67.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 42271.57850000005
Test mean error for best: 21.13579
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -71.6738378996
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -23.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 41.3111784144 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_max} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction tagged_921} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec integer_div float_dec float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_add integer_rot float_dec integer_sub float_dup float_dup_items float_dup integer_rot integer_div float_yankdup float_dec integer_sub float_dup float_dup_items float_yankdup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_dec float_dec float_dup integer_rot float_dec float_dup float_dup_items integer_shove integer_add integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dec float_dup float_stackdepth integer_min float_dec float_dup integer_dup_times integer_rot float_dec float_dec integer_add integer_mult integer_max float_dup integer_rot float_dec float_dup integer_pop float_dec integer_dec integer_dec float_dec integer_flush float_dec float_dup integer_rot float_dec float_dup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_dup_times float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec tagged_921 integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [30.0 2 36.0 2 30.0 1 1.0956 10 31.0 2 30.8662 11 46.1989 10 11.0 2 27.0058 10 4.0 1 31.0 2 26.0 2 10.4531 9 1.0 2 20.0 1 6.2689 11 3.0 2 30.0 2 11.7615 10 3.1555 12 32.0 2 0.2858 8 29.0 2 21.0 2 29.0 2]
Total: 621.0913
Mean: 12.421826
Genome size: 168
Size: 169
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3748.8933230000007
Median total errors in population: 734.9600499999999
Error averages by case: (160.5095006 6.142 151.82934769999997 5.391 144.89241039999996 4.289 128.16114529999965 10.181 149.36259499999994 4.916 142.97335500000028 10.279 152.50719080000007 10.894 154.8040444999999 5.501 140.28283900000022 10.343 122.67148580000004 5.082 149.37559890000006 5.354 158.4005632999999 5.441 120.94930279999996 9.601 124.46087099999855 9.245 154.41482950000014 5.334 123.17488069999932 10.086 142.64006769999995 5.297 156.4685282 5.99 136.54703970000008 10.714 125.0579796999981 12.39 142.15512289999987 5.42 137.2429802999999 5.249 173.41410840000003 5.45 132.76062190000005 5.637 144.74591389999995 4.865)
Error minima by case: (1.259 2 0.0555 1 19.5232 1 0.7361 2 2.3674 1 1.9039 2 8.0342 8 1.0 1 1.0867 2 0.0 0 0.0605 1 0.203 1 0.6254 2 0.0721 1 2.0 1 0.3716 2 0.0 0 0.3767 1 0.2716 1 0.1548 8 1.4526 1 0.2858 1 11.0 1 0.11 1 14.0854 2)
Average genome size in population (length): 176.068
Average program size in population (points): 177.068
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 157.6746698574152
Average age in population: 153.1963208146726
Median age in population: 155.5547337698218
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.862
Error (vector) diversity:			 0.867
Behavioral diversity:				 0.871
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 279642087
--- Timings ---
Current time: 1529615314953 milliseconds
Total Time:         487.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.2 seconds, 31.2%
Fitness Testing:    266.6 seconds, 54.7%
Report:              68.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 42271.57850000005
Test mean error for best: 21.13579
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -71.6738378996
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -23.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 41.3111784144 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_max} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction tagged_921} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec integer_inc float_dec float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_add integer_rot float_dec integer_sub float_dup float_dup_items float_dup integer_rot integer_div float_yankdup float_dec integer_sub float_dup float_dup_items float_yankdup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_dec float_dec float_dup integer_rot float_dec float_dup float_dup_items integer_shove integer_add integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dec float_dup float_stackdepth integer_min float_dec float_dup integer_dup_times integer_rot float_dec float_dec integer_add integer_mult integer_max float_dup integer_rot float_dec float_dup integer_pop float_dec integer_dec integer_dec float_dec integer_flush float_dec float_dup integer_rot float_dec float_dup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_dup_times float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec tagged_921 integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [30.0 2 36.0 2 30.0 1 1.0956 10 31.0 2 30.8662 11 46.1989 10 11.0 2 27.0058 10 4.0 1 31.0 2 26.0 2 10.4531 9 1.0 2 20.0 1 6.2689 11 3.0 2 30.0 2 11.7615 10 3.1555 12 32.0 2 0.2858 8 29.0 2 21.0 2 29.0 2]
Total: 621.0913
Mean: 12.421826
Genome size: 168
Size: 169
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3923.0466899000007
Median total errors in population: 738.06025
Error averages by case: (171.47864699999997 6.286 159.98199390000005 5.521 150.7617745000001 4.59 134.55802249999968 10.044 154.37378519999993 5.325 147.24721990000046 10.173 153.78188980000004 10.864 167.40123190000023 5.686 141.68808380000004 10.293 125.0020723000002 5.087 157.84455590000007 5.485 168.9881984 5.537 129.66339510000003 9.634 132.27725049999853 8.854 163.86231449999997 5.429 130.20099939999915 9.983 154.5200526999998 5.421 167.3338231 6.096 143.6139996000001 10.608 131.27869269999778 12.298 145.09256850000003 5.51 141.3988539999999 5.383 186.82985980000012 5.656 134.64203030000002 5.668 148.63637459999993 5.158)
Error minima by case: (2.6738 2 0.0 0 7.2024 1 0.7361 2 0.7632 2 0.3686 2 0.2526 8 0.0 0 1.0867 2 0.0 0 0.053 1 2.3306 1 0.6254 2 1.0 1 0.5757 1 0.3716 2 0.0 0 0.8914 1 0.2716 1 0.1548 8 0.4156 1 0.2858 1 13.0 1 0.1646 1 10.1569 1)
Average genome size in population (length): 175.54
Average program size in population (points): 176.54
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 159.065858281204
Average age in population: 154.3340324198875
Median age in population: 156.8382321923417
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.838
Error (vector) diversity:			 0.845
Behavioral diversity:				 0.847
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 284030737
--- Timings ---
Current time: 1529615321096 milliseconds
Total Time:         493.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.6 seconds, 31.1%
Fitness Testing:    270.4 seconds, 54.8%
Report:              69.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 42271.57850000005
Test mean error for best: 21.13579
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -71.6738378996
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -23.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 41.3111784144 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_max} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction tagged_921} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec integer_inc float_dec float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_add integer_rot float_dec integer_sub float_dup float_dup_items float_dup integer_rot integer_div float_yankdup float_dec integer_sub float_dup float_dup_items float_yankdup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_dec float_dec float_dup integer_rot float_dec float_dup float_dup_items integer_shove integer_add integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec integer_add integer_dup_times float_dec float_dup integer_shove float_dec float_dec float_dec float_dec float_dec float_dup float_stackdepth integer_min float_dec float_dup integer_dup_times integer_rot float_dec float_dec integer_add integer_mult integer_max float_dup integer_rot float_dec float_dup integer_pop float_dec integer_dec integer_dec float_dec integer_flush float_dec float_dup integer_rot float_dec float_dup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_dup_times float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec tagged_921 integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [30.0 2 36.0 2 30.0 1 1.0956 10 31.0 2 30.8662 11 46.1989 10 11.0 2 27.0058 10 4.0 1 31.0 2 26.0 2 10.4531 9 1.0 2 20.0 1 6.2689 11 3.0 2 30.0 2 11.7615 10 3.1555 12 32.0 2 0.2858 8 29.0 2 21.0 2 29.0 2]
Total: 621.0913
Mean: 12.421826
Genome size: 168
Size: 169
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3853.3502924000004
Median total errors in population: 710.8919999999999
Error averages by case: (165.5629892 6.253 157.4132025999999 5.407 152.94977910000006 4.492 129.38673189999943 10.299 156.22657779999994 5.119 143.05037680000044 10.345 153.15491340000005 10.809 161.13493410000004 5.551 140.51044630000018 10.347 121.9379041 5.109 155.04441679999994 5.44 163.69612790000002 5.466 130.76715090000008 9.673 130.33235829999853 8.815 159.26329680000012 5.412 123.69643589999934 10.063 149.25005609999988 5.339 162.37548329999998 6.053 142.82561000000013 10.698 127.15199379999817 12.294 141.90864679999996 5.454 143.86178959999984 5.472 179.36660809999998 5.575 132.02928730000008 5.642 150.36717549999995 4.959)
Error minima by case: (1.6738 2 0.0555 1 8.0925 1 0.7361 2 4.6588 1 0.1757 2 3.9078 8 1.0 1 6.7527 2 0.0 0 0.8177 1 1.1039 1 0.4343 2 1.0 2 0.651 1 0.3716 2 0.0 0 0.2793 1 0.1481 2 0.1548 8 0.3787 1 0.2858 2 16.0 1 0.0321 1 17.7294 2)
Average genome size in population (length): 175.816
Average program size in population (points): 176.816
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 160.3483418656758
Average age in population: 155.9343358939615
Median age in population: 158.1504676358339
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.844
Error (vector) diversity:			 0.849
Behavioral diversity:				 0.85
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 288426487
--- Timings ---
Current time: 1529615327120 milliseconds
Total Time:         499.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.0 seconds, 31.0%
Fitness Testing:    274.2 seconds, 54.9%
Report:              70.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 42271.57850000005
Test mean error for best: 21.13579
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -71.6738378996
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -23.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 41.3111784144 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_max} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction tagged_921} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec integer_inc float_dec float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_add integer_rot float_dec integer_sub float_dup float_dup_items float_dup integer_rot integer_div float_yankdup float_dec integer_sub float_dup float_dup_items float_yankdup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_dec float_dec float_dup integer_rot float_dec float_dup float_dup_items integer_shove integer_add integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec integer_add integer_dup_times float_dec float_dup integer_shove float_dec float_dec float_dec float_dec float_dec float_dup float_stackdepth integer_min float_dec float_dup integer_dup_times integer_rot float_dec float_dec integer_add integer_mult integer_max float_dup integer_rot float_dec float_dup integer_pop float_dec integer_dec integer_dec float_dec integer_flush float_dec float_dup integer_rot float_dec float_dup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_dup_times float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec tagged_921 integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [30.0 2 36.0 2 30.0 1 1.0956 10 31.0 2 30.8662 11 46.1989 10 11.0 2 27.0058 10 4.0 1 31.0 2 26.0 2 10.4531 9 1.0 2 20.0 1 6.2689 11 3.0 2 30.0 2 11.7615 10 3.1555 12 32.0 2 0.2858 8 29.0 2 21.0 2 29.0 2]
Total: 621.0913
Mean: 12.421826
Genome size: 168
Size: 169
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3390.7716747999993
Median total errors in population: 788.7172
Error averages by case: (147.34763629999995 6.351 134.16199829999982 5.575 131.7684122999999 4.627 116.48042289999964 9.945 135.46790079999997 5.233 129.3811252000003 10.16 138.4371207000012 10.766 143.56417 5.772 124.74947359999935 10.182 104.00733990000003 5.214 131.94567789999996 5.57 144.69231939999992 5.601 111.2197705999999 9.32 110.2003467999989 8.208 139.98557680000005 5.529 109.96069659999944 9.876 128.31232480000003 5.542 140.2203296999999 6.127 122.26992020000029 10.461 113.47868899999814 12.234 124.70382120000001 5.528 121.55967859999976 5.282 162.7006743 5.684 114.70850509999998 5.649 129.92374379999995 5.088)
Error minima by case: (0.6816 2 0.0555 1 4.8253 1 0.7361 1 0.3412 2 0.3207 2 4.0922 8 0.0 0 0.1043 2 0.0 0 0.0605 1 2.8419 1 0.6254 2 0.0292 1 5.6163 1 0.3716 2 0.0 0 0.1283 1 0.0 1 0.1548 6 0.0 0 0.2858 2 16.0 1 0.0 0 2.8753 2)
Average genome size in population (length): 175.711
Average program size in population (points): 176.711
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 161.5590654849276
Average age in population: 156.68031990165
Median age in population: 159.5374842717108
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.868
Error (vector) diversity:			 0.875
Behavioral diversity:				 0.879
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 292819537
--- Timings ---
Current time: 1529615333095 milliseconds
Total Time:         505.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.5 seconds, 30.9%
Fitness Testing:    277.8 seconds, 54.9%
Report:              71.3 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 42353.40140000002
Test mean error for best: 21.17670
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -70.6738378996
Correct output: -31.2572440177 | Program output: -66.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 152.1762325247
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 103.2369295057
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -116.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -22.9825817496
Correct output: -36.0605266238 | Program output: -66.0605266238
Correct output: -98.4940591545 | Program output: -71.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -75.7391381937
Correct output: 123.7897097488 | Program output: 117.5207750534
Correct output: -88.7139415536 | Program output: -90.7139415536
Correct output: -85.4359203887 | Program output: -114.4359203887
Correct output: 29.5496488004  | Program output: 42.3557181174 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -40.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -143.8513267506
Correct output: -16.4772789847 | Program output: -36.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_max} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction tagged_921} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction integer_max} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction tag_float_63})
Best program: (integer_mod 20.687271621547836 in1 integer_add float_dec integer_inc float_dec float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_add integer_rot float_dec integer_sub float_dup float_dup_items float_dup integer_rot integer_div float_yankdup float_dec integer_sub float_dup float_dup_items float_yankdup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_dec float_dec float_dup integer_rot float_dec float_dup float_dup_items integer_shove integer_add integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec integer_add integer_dup_times float_dec float_dup integer_shove float_dec float_dec float_dec float_dec float_dec float_dup float_stackdepth integer_min float_dec float_dup integer_dup_times integer_rot float_dec float_dec integer_add integer_mult integer_max float_dup integer_rot float_dec float_dup integer_pop integer_dec integer_dec float_dec integer_flush float_dec float_dup integer_rot float_dec float_dup float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_dup_times integer_rot float_dec float_dup_times integer_dup_times float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec tagged_921 integer_add integer_rot float_dec float_dup float_dec float_dup float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap integer_max float_yank integer_dup_times in1 float_rot float_frominteger float_pop integer_shove float_yank integer_dup_times float_cos float_cos float_div float_max print_float integer_add in2 tag_float_63)
Errors: [31.0 2 35.0 2 30.0 1 1.0956 10 31.0 2 30.8662 11 46.1989 10 12.0 2 27.0058 10 5.0 1 30.0 1 27.0 2 10.4531 9 1.0 2 21.0 2 6.2689 11 2.0 2 29.0 3 12.8061 10 3.1555 12 31.0 2 0.2858 8 30.0 1 20.0 1 29.0 2]
Total: 621.1359000000001
Mean: 12.422718
Genome size: 174
Size: 175
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3676.1928310999992
Median total errors in population: 710.8393
Error averages by case: (156.3011264 6.136 148.4815643999999 5.3 142.63662930000007 4.388 126.47404999999932 10.167 145.9083578 4.986 140.7230006000003 10.241 149.35114499999972 10.753 151.66910599999994 5.467 137.5553306000002 10.257 119.58884620000002 4.947 145.32774030000007 5.316 156.32766380000007 5.387 124.11947020000018 9.428 123.67240849999905 7.682 149.6576942000001 5.263 122.2959394999992 9.924 139.4266968 5.257 151.23833029999997 5.859 134.85505960000035 10.655 123.42237259999814 12.215 135.62554109999994 5.311 136.68012689999992 5.374 170.40617329999992 5.374 126.3950675000001 5.496 141.9883902 4.882)
Error minima by case: (0.1749 2 0.0 0 0.0438 1 0.2516 2 1.8555 1 0.4508 1 1.0922 8 0.0 0 3.2687 2 0.0 0 0.0273 1 0.7139 1 0.6254 2 0.5634 1 2.4688 1 0.3525 2 0.0 0 0.2638 1 0.2716 1 0.1548 7 0.0 0 0.2858 2 17.0 1 1.0 1 0.2246 2)
Average genome size in population (length): 175.992
Average program size in population (points): 176.992
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 162.8994110741687
Average age in population: 158.4303968794665
Median age in population: 160.8774536712713
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.86
Error (vector) diversity:			 0.866
Behavioral diversity:				 0.869
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 297219637
--- Timings ---
Current time: 1529615339061 milliseconds
Total Time:         511.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.0 seconds, 30.9%
Fitness Testing:    281.4 seconds, 55.0%
Report:              72.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 41016.45770000002
Test mean error for best: 20.50823
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -71.6738378996
Correct output: -31.2572440177 | Program output: -67.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -117.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -24.9825817496
Correct output: -36.0605266238 | Program output: -67.0605266238
Correct output: -98.4940591545 | Program output: -72.4940591545
Correct output: 118.444904963  | Program output: 127.3153365476
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -76.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -91.7139415536
Correct output: -85.4359203887 | Program output: -115.4359203887
Correct output: 29.5496488004  | Program output: 40.2666387113 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -41.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -144.8513267506
Correct output: -16.4772789847 | Program output: -37.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tag_float_671} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction float_rot} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec tag_float_671 integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup float_rot integer_add print_integer float_dup float_dec float_dup integer_add integer_rot integer_div float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dec float_dup integer_div float_dec float_rot float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add float_dup integer_rot float_dec float_dup float_dec integer_add integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_yank integer_rot float_dec float_dup float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [30.0 2 36.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 11.0 2 27.0058 10 3.0 1 31.0 2 26.0 2 8.8704 11 1.0 2 20.0 1 4.6088 9 3.0 2 30.0 2 10.717 10 3.1555 12 32.0 2 0.2858 8 29.0 2 21.0 2 29.0 2]
Total: 615.3783
Mean: 12.307566
Genome size: 184
Size: 185
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3578.358915999999
Median total errors in population: 714.6443499999999
Error averages by case: (153.6685802000001 6.213 143.45521209999987 5.395 139.12227420000005 4.456 120.83069979999935 9.99 143.5563044 5.101 135.59125260000016 10.124 145.5671690000006 10.776 150.86974460000008 5.55 134.13412179999952 10.288 113.96475030000005 4.97 141.04092850000006 5.388 151.9068307999999 5.419 118.01626349999992 9.293 115.25358629999894 7.067 147.01006000000012 5.393 116.22609229999917 9.746 136.76449839999995 5.285 150.92725660000005 5.972 130.31034260000047 10.617 119.65621909999803 12.252 132.2175708 5.35 133.31639019999974 5.181 169.06289150000018 5.453 122.70245229999998 5.484 137.47242409999984 4.952)
Error minima by case: (1.6738 2 0.0555 1 2.7389 1 0.7361 2 0.8409 2 0.4508 2 3.0922 8 0.0 0 1.0867 2 0.0 0 0.0605 1 4.423 1 0.6254 2 1.0 1 4.4811 1 0.3716 2 0.0 0 0.0 0 0.2716 1 0.1548 8 0.2997 1 0.0749 1 16.0 1 0.0511 1 1.8718 2)
Average genome size in population (length): 176.677
Average program size in population (points): 177.677
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 164.3001290612051
Average age in population: 160.1418167467706
Median age in population: 162.1030377300341
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.992
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.992
Total error diversity:				 0.871
Error (vector) diversity:			 0.878
Behavioral diversity:				 0.879
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 301636912
--- Timings ---
Current time: 1529615344911 milliseconds
Total Time:         517.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.4 seconds, 30.8%
Fitness Testing:    284.9 seconds, 55.1%
Report:              73.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 40539.90960000002
Test mean error for best: 20.26995
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -76.6738378996
Correct output: -31.2572440177 | Program output: -72.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -122.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -29.9825817496
Correct output: -36.0605266238 | Program output: -72.0605266238
Correct output: -98.4940591545 | Program output: -77.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -81.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -96.7139415536
Correct output: -85.4359203887 | Program output: -120.4359203887
Correct output: 29.5496488004  | Program output: 35.043940196  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -46.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -149.8513267506
Correct output: -16.4772789847 | Program output: -42.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_stackdepth integer_rot float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_rot integer_rot float_dec float_dec integer_add float_dec float_dup integer_add float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add float_dup integer_rot float_dec float_dup float_dec integer_add integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [25.0 3 41.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 6.0 1 27.0058 10 2.0 1 36.0 2 21.0 2 10.4531 9 1.0 2 15.0 2 4.6088 9 8.0 2 35.0 3 5.4943 10 3.1555 12 37.0 2 0.2858 8 24.0 2 26.0 2 29.0 2]
Total: 615.7383000000001
Mean: 12.314766
Genome size: 182
Size: 183
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3304.597779200001
Median total errors in population: 710.8032499999999
Error averages by case: (143.89686070000002 6.085 134.9276158999998 5.304 127.85807620000001 4.326 108.76297159999972 10.012 130.2491588999999 4.839 125.90769710000022 10.078 132.5155312000013 10.782 140.04088660000002 5.371 121.90195309999928 10.19 100.91081950000013 4.997 132.46706559999998 5.293 142.5224960999998 5.37 106.86893959999993 9.348 107.4494658999994 6.725 137.1150565000001 5.282 106.67004039999968 9.824 126.76483379999995 5.216 138.94240809999982 5.889 122.07518900000039 10.506 105.0634655999988 12.251 123.19145490000002 5.396 118.0347116999998 5.093 157.83108520000005 5.398 112.25024130000007 5.521 126.42675469999993 4.857)
Error minima by case: (2.6738 2 0.0 0 7.0833 1 0.7361 1 0.0097 1 1.9039 2 2.0922 8 0.0 0 4.6647 2 0.0 0 0.9292 1 1.7042 1 0.6254 1 0.5634 1 0.0508 1 0.3716 2 0.0 0 0.0 0 0.2716 1 0.1548 8 0.5844 1 0.2858 1 15.0 1 0.159 1 3.5727 1)
Average genome size in population (length): 178.07
Average program size in population (points): 179.07
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 165.4851389542289
Average age in population: 161.2782274260324
Median age in population: 163.4240964400161
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.987
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.987
Total error diversity:				 0.873
Error (vector) diversity:			 0.878
Behavioral diversity:				 0.88
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 306089137
--- Timings ---
Current time: 1529615350795 milliseconds
Total Time:         523.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.9 seconds, 30.7%
Fitness Testing:    288.5 seconds, 55.1%
Report:              73.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 41944.64530000004
Test mean error for best: 20.97232
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -75.6738378996
Correct output: -31.2572440177 | Program output: -71.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -121.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -71.0605266238
Correct output: -98.4940591545 | Program output: -76.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -80.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -95.7139415536
Correct output: -85.4359203887 | Program output: -119.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -45.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -148.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 21.111275461635646} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod 21.111275461635646 in1 integer_add float_dec integer_div integer_dup_times float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_add integer_rot float_dec integer_sub float_dup float_dup_items float_dup integer_rot integer_div float_yankdup float_dec integer_sub float_dup float_dup_items float_yankdup float_dec float_dec integer_fromfloat float_shove float_dec float_dec integer_rot integer_rot float_dec float_dup float_stackdepth integer_dec float_dec float_dup integer_rot float_dec float_dup float_dup_items integer_shove integer_add integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dup float_dup float_dup_items float_dec integer_add integer_min float_dec float_dup integer_flush float_dec float_dec float_dec integer_add integer_min float_dec float_dup integer_flush float_dec float_dec float_dec float_dup_items integer_rot integer_yankdup integer_dup_times float_dec float_dup integer_div integer_dup_times float_dec float_dup float_dup integer_div integer_inc float_dec float_dec float_dec integer_div float_dec float_dec integer_add print_integer float_dup float_dec float_dup integer_dup integer_rot float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_rot integer_dup float_dec integer_add float_dup integer_rot float_dec float_dec integer_add float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [26.0 3 40.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 7.0 1 27.0058 10 0.0 0 35.0 2 22.0 2 10.4531 9 1.0 2 16.0 2 4.6088 9 7.0 2 34.0 3 7.5834 11 3.1555 12 36.0 2 0.2858 8 25.0 2 24.0 2 29.0 2]
Total: 612.8274
Mean: 12.256548
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3527.2662692999997
Median total errors in population: 700.2243
Error averages by case: (149.10643319999994 6.037 142.64812909999975 5.249 135.70302209999997 4.204 119.3351605999998 10.089 140.0619989 4.877 135.5512760000004 9.973 146.55490590000034 10.756 145.84935549999997 5.315 132.43021509999934 10.194 111.84769600000004 4.786 138.9028162 5.241 147.9008603999997 5.288 117.91522359999993 9.304 119.26184079999952 5.982 142.9732685000001 5.185 116.73758249999965 9.758 132.50526779999993 5.082 146.25115339999994 5.819 131.54858390000044 10.545 117.74349899999832 12.314 130.943907 5.229 133.46155109999975 5.088 162.96114819999997 5.271 122.44482770000003 5.332 134.93854679999998 4.77)
Error minima by case: (1.3262 2 0.0555 1 7.9896 1 0.7361 2 0.8109 1 2.5534 2 0.0922 7 0.0 0 6.7527 2 0.0 0 0.0474 1 1.5224 1 0.6254 2 0.1593 1 5.0 1 0.3716 2 0.0 0 0.8914 1 0.1481 1 0.1548 8 0.0211 1 0.2858 1 14.0 1 0.1646 1 1.1339 2)
Average genome size in population (length): 177.47
Average program size in population (points): 178.47
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 166.6795032304011
Average age in population: 162.2002697727117
Median age in population: 164.6786423829417
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.865
Error (vector) diversity:			 0.873
Behavioral diversity:				 0.875
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 310526487
--- Timings ---
Current time: 1529615356766 milliseconds
Total Time:         529.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.3 seconds, 30.7%
Fitness Testing:    292.2 seconds, 55.2%
Report:              74.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 41703.4409
Test mean error for best: 20.85172
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -77.6738378996
Correct output: -31.2572440177 | Program output: -73.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -123.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -30.9825817496
Correct output: -36.0605266238 | Program output: -73.0605266238
Correct output: -98.4940591545 | Program output: -78.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -82.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -97.7139415536
Correct output: -85.4359203887 | Program output: -121.4359203887
Correct output: 29.5496488004  | Program output: 33.9994004929 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -47.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -150.8513267506
Correct output: -16.4772789847 | Program output: -43.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction print_integer} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_dup} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction print_integer} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot print_integer float_shove float_dec float_rot integer_add integer_rot integer_div float_dec integer_add integer_rot integer_dup float_yankdup float_dup float_dec integer_sub float_dup float_swap float_dup integer_mult float_dec integer_fromfloat float_shove float_dec float_dec integer_min integer_yankdup integer_rot float_dec float_dec float_dec float_dup float_dec integer_min integer_add integer_rot integer_div print_integer float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec integer_add integer_dup_times integer_dup_times float_dec float_dup integer_div float_dec integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dup float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup float_dec integer_rot float_dec float_dup_times float_dec float_dup float_dup float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [24.0 3 42.0 2 30.0 1 4.7589 11 31.0 2 28.3514 11 46.1989 10 5.0 1 27.0058 10 3.0 2 37.0 2 20.0 1 2.5399 9 1.0 2 14.0 2 2.9487 10 9.0 2 36.0 3 4.4498 10 3.1555 12 38.0 2 0.2858 8 23.0 2 27.0 2 29.0 2]
Total: 610.6946999999999
Mean: 12.213894
Genome size: 177
Size: 178
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3555.0833023999994
Median total errors in population: 704.11925
Error averages by case: (153.68942890000008 5.986 142.67273239999972 5.208 136.995765 4.253 119.43550369999946 10.135 140.19540189999995 4.847 136.1474151000002 10.11 144.8285194000007 10.802 148.9981004 5.322 131.3354126999995 10.161 115.24904420000006 5.028 140.51523289999997 5.16 151.97029219999988 5.219 116.31505430000006 9.472 118.00516329999965 5.842 146.71172210000015 5.165 116.32199269999963 9.928 135.6700327 5.058 148.17690879999998 5.753 129.13053500000044 10.546 122.02287519999825 12.31 131.18710839999997 5.362 130.68887249999975 5.085 167.29203610000005 5.284 122.4716151000001 5.517 136.60253739999993 4.901)
Error minima by case: (0.6738 2 0.0555 1 3.9735 1 0.032 2 2.1669 1 0.3686 2 2.0922 8 1.0 1 1.0867 2 0.0 0 0.1329 1 2.8419 1 0.6254 2 0.1961 1 7.0 1 0.3716 2 0.0 0 3.0 1 0.2716 2 0.1548 8 0.4527 1 0.2858 1 16.0 1 0.4114 1 1.6106 1)
Average genome size in population (length): 177.161
Average program size in population (points): 178.161
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 167.9772054773287
Average age in population: 162.7538564587277
Median age in population: 165.919284717118
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.847
Error (vector) diversity:			 0.852
Behavioral diversity:				 0.854
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 314956087
--- Timings ---
Current time: 1529615362846 milliseconds
Total Time:         535.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.7 seconds, 30.6%
Fitness Testing:    295.9 seconds, 55.3%
Report:              75.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 41703.4409
Test mean error for best: 20.85172
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -77.6738378996
Correct output: -31.2572440177 | Program output: -73.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -123.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -30.9825817496
Correct output: -36.0605266238 | Program output: -73.0605266238
Correct output: -98.4940591545 | Program output: -78.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -82.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -97.7139415536
Correct output: -85.4359203887 | Program output: -121.4359203887
Correct output: 29.5496488004  | Program output: 33.9994004929 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -47.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -150.8513267506
Correct output: -16.4772789847 | Program output: -43.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction print_integer} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_dup} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction print_integer} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot print_integer float_shove float_dec float_rot integer_add integer_rot integer_div float_dec integer_add integer_rot integer_dup float_yankdup float_dup float_dec integer_sub float_dup float_swap float_dup integer_mult float_dec integer_fromfloat float_shove float_dec float_dec integer_min integer_yankdup integer_rot float_dec float_dec float_dec float_dup float_dec integer_min integer_add integer_rot integer_div print_integer float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec integer_add integer_dup_times integer_dup_times float_dec float_dup integer_div float_dec integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dup float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup float_dec integer_rot float_dec float_dup_times float_dec float_dup float_dup float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [24.0 3 42.0 2 30.0 1 4.7589 11 31.0 2 28.3514 11 46.1989 10 5.0 1 27.0058 10 3.0 2 37.0 2 20.0 1 2.5399 9 1.0 2 14.0 2 2.9487 10 9.0 2 36.0 3 4.4498 10 3.1555 12 38.0 2 0.2858 8 23.0 2 27.0 2 29.0 2]
Total: 610.6946999999999
Mean: 12.213894
Genome size: 177
Size: 178
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3837.2975156999996
Median total errors in population: 728.2799
Error averages by case: (163.76051930000006 6.336 153.45528219999974 5.522 151.3618528 4.529 131.90384449999914 10.371 154.6184937999999 5.075 149.8224541000003 10.476 155.0180853999998 10.913 159.59240070000018 5.649 141.47685270000053 10.35 120.58053950000011 5.244 150.99918480000002 5.472 162.43734309999996 5.542 132.68435139999974 9.721 132.6251643999994 5.68 158.02815660000013 5.452 131.43454299999902 10.128 146.07412639999993 5.354 159.68650580000002 6.097 142.4402330000003 10.733 128.2099883999974 12.338 135.2516829 5.452 142.40187709999992 5.533 179.2668990000001 5.593 126.75070300000007 5.685 149.12443180000002 5.047)
Error minima by case: (0.3262 2 0.2489 1 1.2937 1 0.4359 2 0.6603 2 0.4508 2 1.0922 8 0.0 0 1.0867 2 0.0 0 0.0605 1 0.4941 1 0.6254 2 0.1961 1 6.0 1 0.3716 2 0.0 0 1.0466 1 0.2716 1 0.1548 8 0.1673 1 0.2109 1 8.1487 1 0.0 0 1.1634 1)
Average genome size in population (length): 177.948
Average program size in population (points): 178.948
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 169.1149736747829
Average age in population: 164.4946115200131
Median age in population: 167.1754569426816
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.841
Error (vector) diversity:			 0.85
Behavioral diversity:				 0.854
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 319405262
--- Timings ---
Current time: 1529615368745 milliseconds
Total Time:         541.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.2 seconds, 30.5%
Fitness Testing:    299.6 seconds, 55.3%
Report:              76.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 41761.14090000003
Test mean error for best: 20.88057
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -76.6738378996
Correct output: -31.2572440177 | Program output: -72.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -122.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -29.9825817496
Correct output: -36.0605266238 | Program output: -72.0605266238
Correct output: -98.4940591545 | Program output: -77.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -81.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -96.7139415536
Correct output: -85.4359203887 | Program output: -120.4359203887
Correct output: 29.5496488004  | Program output: 35.043940196  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -46.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -149.8513267506
Correct output: -16.4772789847 | Program output: -42.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction print_integer} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_dup} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction print_integer} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot print_integer float_shove float_dec float_rot integer_add integer_rot integer_div float_dec integer_add integer_rot integer_dup float_yankdup float_dup float_dec integer_sub float_dup float_swap float_dup integer_mult float_dec integer_fromfloat float_shove float_dec float_dec integer_min integer_yankdup integer_rot float_dec float_dec float_dec float_dup float_dec integer_min integer_add integer_rot integer_div print_integer float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec integer_stackdepth integer_add integer_dup_times integer_dup_times float_dec float_dup integer_div float_dec integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dup float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup float_dec integer_rot float_dec float_dup_times float_dec float_dup float_dup float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [25.0 3 41.0 2 30.0 1 4.7589 11 31.0 2 28.3514 11 46.1989 10 6.0 1 27.0058 10 2.0 1 36.0 2 21.0 2 2.5399 9 1.0 2 15.0 2 2.9487 10 8.0 2 35.0 3 5.4943 10 3.1555 12 37.0 2 0.2858 8 24.0 2 26.0 2 29.0 2]
Total: 609.7392
Mean: 12.194784
Genome size: 177
Size: 178
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3357.2680197
Median total errors in population: 689.2983999999999
Error averages by case: (143.41877960000005 6.062 133.98886379999982 5.236 135.06982870000002 4.209 112.21076179999928 10.253 137.70930069999991 4.82 128.28510050000008 10.081 139.19899550000056 10.745 138.03210739999997 5.394 124.2142986999993 10.265 105.78945680000007 4.976 131.41866509999997 5.238 141.6011632999999 5.308 113.08605469999986 9.485 106.7216274999997 4.897 136.55583640000015 5.203 109.26042619999959 9.773 125.45297830000003 5.157 138.4998635 5.835 121.01400120000046 10.625 110.114667599998 12.24 123.84971499999996 5.258 123.89733499999976 5.07 156.87489100000013 5.343 115.007886 5.476 134.20841539999998 4.838)
Error minima by case: (0.3262 2 0.2572 1 0.196 1 0.7361 2 2.6588 2 1.3957 1 1.0922 8 1.0 1 1.0867 2 0.0 0 0.0605 1 1.0618 1 0.6254 2 0.1961 1 0.6932 1 0.3716 2 0.0 0 0.0 0 0.2716 1 0.1548 8 0.511 1 0.2858 2 13.0 1 0.1646 1 5.8753 2)
Average genome size in population (length): 178.228
Average program size in population (points): 179.228
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 170.51206378868
Average age in population: 165.8736976423829
Median age in population: 168.4248583287425
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.841
Error (vector) diversity:			 0.848
Behavioral diversity:				 0.85
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 323861537
--- Timings ---
Current time: 1529615374751 milliseconds
Total Time:         547.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.7 seconds, 30.5%
Fitness Testing:    303.2 seconds, 55.4%
Report:              77.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 41703.4409
Test mean error for best: 20.85172
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -77.6738378996
Correct output: -31.2572440177 | Program output: -73.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -123.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -30.9825817496
Correct output: -36.0605266238 | Program output: -73.0605266238
Correct output: -98.4940591545 | Program output: -78.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -82.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -97.7139415536
Correct output: -85.4359203887 | Program output: -121.4359203887
Correct output: 29.5496488004  | Program output: 33.9994004929 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -47.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -150.8513267506
Correct output: -16.4772789847 | Program output: -43.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_dup} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_min} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_div} {:instruction print_integer} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot float_shove float_shove float_dec float_rot integer_add integer_rot integer_div float_dec integer_add integer_rot integer_dup float_yankdup float_dup float_dec integer_sub float_dup float_swap float_dup integer_mult float_dec integer_fromfloat float_shove float_dec float_dec integer_min integer_yankdup integer_rot float_dec float_dec float_dec float_dup float_dec integer_min integer_add integer_rot integer_div print_integer float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec integer_add integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec integer_add integer_dup_times integer_dup_times float_dec float_dup integer_div float_dec integer_dup_times float_dec float_dup integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_rot float_dup float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec integer_dec float_dec float_dup float_dup_items integer_flush float_dec float_dup integer_rot float_dec float_dup integer_rot float_dec float_dup float_yankdup float_dup float_dec float_dup float_dec integer_rot float_dec float_dup_times float_dec float_dup float_dup float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [24.0 3 42.0 2 30.0 1 4.7589 11 31.0 2 28.3514 11 46.1989 10 5.0 1 27.0058 10 3.0 2 37.0 2 20.0 1 2.5399 9 1.0 2 14.0 2 2.9487 10 9.0 2 36.0 3 4.4498 10 3.1555 12 38.0 2 0.2858 8 23.0 2 27.0 2 29.0 2]
Total: 610.6946999999999
Mean: 12.213894
Genome size: 177
Size: 178
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3776.5103993999996
Median total errors in population: 710.98615
Error averages by case: (159.99973479999989 6.22 149.67804190000007 5.384 151.63262570000006 4.56 129.7245236999995 10.245 154.56948159999993 5.058 147.6039344999998 9.984 154.7679591999999 10.791 154.65409019999998 5.559 142.92808140000025 10.288 121.53903140000008 5.129 147.58228570000003 5.389 157.8491986 5.378 129.6410858999999 9.287 124.08503549999982 4.882 152.87350400000014 5.376 129.1781325999997 9.684 142.20849719999998 5.303 154.1310709 5.971 136.05653020000028 10.669 129.79296379999838 12.236 138.32202229999987 5.439 141.5848725 5.476 172.4247947000001 5.572 129.27371140000005 5.702 149.72418969999984 5.103)
Error minima by case: (0.3262 2 0.0 1 3.6788 1 0.7361 2 2.9468 2 0.3686 2 2.0922 8 0.0 0 7.2347 2 0.0 0 0.0132 1 1.5059 1 0.5507 2 0.1693 1 5.0 1 0.3716 2 0.0 0 0.9696 1 0.2716 1 0.1548 8 0.4527 1 0.2415 1 14.0 1 0.0 0 6.8753 2)
Average genome size in population (length): 177.457
Average program size in population (points): 178.457
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 171.5802084361926
Average age in population: 165.6152045816231
Median age in population: 169.7318714189098
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.973
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.973
Total error diversity:				 0.803
Error (vector) diversity:			 0.811
Behavioral diversity:				 0.813
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 328298562
--- Timings ---
Current time: 1529615380722 milliseconds
Total Time:         553.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.1 seconds, 30.4%
Fitness Testing:    307.0 seconds, 55.5%
Report:              78.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 41944.64530000004
Test mean error for best: 20.97232
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -75.6738378996
Correct output: -31.2572440177 | Program output: -71.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -121.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -71.0605266238
Correct output: -98.4940591545 | Program output: -76.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -80.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -95.7139415536
Correct output: -85.4359203887 | Program output: -119.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -45.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -148.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction 21.111275461635646} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add})
Best program: (integer_mod 21.111275461635646 in1 integer_add float_dec integer_div integer_dup_times float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_add integer_rot integer_add integer_rot float_dec integer_sub float_dup float_dup_items float_dup integer_rot integer_div float_yankdup float_dec integer_sub float_dup float_dup_items float_yankdup float_dec float_dec integer_fromfloat float_shove float_dec float_dec integer_rot integer_rot float_dec float_dup float_stackdepth integer_dec float_dec float_dup integer_rot float_dec float_dup float_dup_items integer_shove integer_add integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dup float_dup float_dup_items float_dec integer_add integer_min float_dec float_dup integer_flush float_dec float_dec float_dec integer_add integer_min float_dec float_dup integer_flush float_dec float_dec float_dec float_dup_items integer_rot integer_yankdup integer_dup_times float_dec float_dup integer_div integer_dup_times float_dec float_dup float_dup integer_div integer_inc float_dec float_dec float_dec integer_div float_dec float_dec integer_add print_integer float_dup float_dec float_dup integer_dup integer_rot float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_rot integer_dup float_dec integer_add float_dup integer_rot float_dec float_dec integer_add float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add)
Errors: [26.0 3 40.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 7.0 1 27.0058 10 0.0 0 35.0 2 22.0 2 10.4531 9 1.0 2 16.0 2 4.6088 9 7.0 2 34.0 3 7.5834 11 3.1555 12 36.0 2 0.2858 8 25.0 2 24.0 2 29.0 2]
Total: 612.8274
Mean: 12.256548
Genome size: 179
Size: 180
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3559.5889948999993
Median total errors in population: 729.34905
Error averages by case: (157.70716470000002 6.416 145.54008419999994 5.555 136.75723839999998 4.51 116.59983979999942 10.115 136.77093679999993 5.028 133.8319309000004 10.013 139.2815434000006 10.752 154.36388840000006 5.74 129.14281109999936 10.272 112.8347815000001 5.234 143.50752690000007 5.584 154.7814703 5.646 115.11338579999975 9.39 116.79180799999989 4.773 150.58109550000015 5.549 113.51895509999984 9.653 140.05608709999993 5.484 151.85797620000008 6.11 129.65238250000024 10.61 116.89562279999845 12.162 131.85606339999998 5.56 126.02884669999983 5.312 173.08442500000015 5.719 122.01552950000008 5.791 134.92660089999993 5.113)
Error minima by case: (4.4505 2 0.0261 1 0.1474 1 0.7361 1 3.9829 1 0.4508 2 2.404 8 1.0 1 4.4702 2 0.0 0 0.0605 1 1.2707 1 0.6254 2 0.1961 1 0.4842 1 0.3112 1 0.0 0 0.0 0 0.2716 1 0.1548 8 0.4527 1 0.2415 1 16.0 1 0.1482 1 1.1247 2)
Average genome size in population (length): 178.053
Average program size in population (points): 179.053
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 172.8254860706293
Average age in population: 167.8615166978696
Median age in population: 170.9410707695894
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.81
Error (vector) diversity:			 0.818
Behavioral diversity:				 0.82
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 332750362
--- Timings ---
Current time: 1529615386519 milliseconds
Total Time:         559.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.5 seconds, 30.3%
Fitness Testing:    310.5 seconds, 55.5%
Report:              79.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 41845.59210000004
Test mean error for best: 20.92280
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -76.6738378996
Correct output: -31.2572440177 | Program output: -72.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -122.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -29.9825817496
Correct output: -36.0605266238 | Program output: -72.0605266238
Correct output: -98.4940591545 | Program output: -77.4940591545
Correct output: 118.444904963  | Program output: 125.7326963965
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -81.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -96.7139415536
Correct output: -85.4359203887 | Program output: -120.4359203887
Correct output: 29.5496488004  | Program output: 35.043940196  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -46.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -149.8513267506
Correct output: -16.4772789847 | Program output: -42.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_max} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_max float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec integer_sub float_dup integer_div float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_pop float_dec integer_swap integer_add integer_pop integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup float_dec float_dup integer_swap float_yankdup float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [25.0 3 41.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 6.0 1 27.0058 10 2.0 1 36.0 2 21.0 2 7.2878 9 1.0 2 15.0 2 4.6088 9 8.0 2 35.0 3 5.4943 10 3.1555 12 37.0 2 0.2858 8 24.0 2 26.0 2 29.0 2]
Total: 612.573
Mean: 12.25146
Genome size: 186
Size: 187
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3343.8848795999997
Median total errors in population: 693.79015
Error averages by case: (146.3178121 5.973 135.67150719999984 5.033 130.28687429999997 4.085 110.77913189999934 10.227 133.69586779999992 4.747 126.36391640000046 10.107 136.88928220000125 10.734 139.05408719999997 5.16 123.30282699999927 10.311 107.9134455000001 4.842 133.22430120000007 5.074 142.82808779999985 5.123 109.64918799999967 9.32 104.46448189999978 4.363 137.54483820000007 5.039 107.61252489999976 9.633 127.06339950000005 5.015 141.30190430000002 5.702 123.17033640000038 10.675 108.90395869999787 12.135 124.6224105999999 5.202 121.47870599999973 5.277 157.91883239999993 5.207 116.36128550000016 5.448 128.35287259999996 4.681)
Error minima by case: (0.6738 2 0.0555 1 12.48 1 0.7361 2 5.8662 1 0.3686 2 0.3186 8 0.0 0 1.0867 2 0.0 0 0.0261 1 5.4941 1 0.2531 2 0.1961 1 4.0 1 0.3716 2 0.0 0 0.0 1 0.2716 1 0.1548 8 1.3204 1 0.0749 1 13.0 1 0.1646 1 0.5476 2)
Average genome size in population (length): 178.821
Average program size in population (points): 179.821
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 174.1910914395838
Average age in population: 169.916523806619
Median age in population: 172.1575554351109
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.979
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.799
Error (vector) diversity:			 0.809
Behavioral diversity:				 0.811
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 337220962
--- Timings ---
Current time: 1529615392431 milliseconds
Total Time:         565.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.0 seconds, 30.3%
Fitness Testing:    314.2 seconds, 55.6%
Report:              79.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 41845.59210000004
Test mean error for best: 20.92280
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -76.6738378996
Correct output: -31.2572440177 | Program output: -72.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -122.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -29.9825817496
Correct output: -36.0605266238 | Program output: -72.0605266238
Correct output: -98.4940591545 | Program output: -77.4940591545
Correct output: 118.444904963  | Program output: 125.7326963965
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -81.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -96.7139415536
Correct output: -85.4359203887 | Program output: -120.4359203887
Correct output: 29.5496488004  | Program output: 35.043940196  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -46.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -149.8513267506
Correct output: -16.4772789847 | Program output: -42.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_max} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_max float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec integer_sub float_dup integer_div float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_pop float_dec integer_swap integer_add integer_pop integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup float_dec float_dup integer_swap float_yankdup float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [25.0 3 41.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 6.0 1 27.0058 10 2.0 1 36.0 2 21.0 2 7.2878 9 1.0 2 15.0 2 4.6088 9 8.0 2 35.0 3 5.4943 10 3.1555 12 37.0 2 0.2858 8 24.0 2 26.0 2 29.0 2]
Total: 612.573
Mean: 12.25146
Genome size: 186
Size: 187
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3290.9353105000014
Median total errors in population: 734.0781499999999
Error averages by case: (139.7479691 6.202 129.64495699999966 5.464 130.11696669999998 4.598 111.78279399999941 9.966 135.2760941999999 5.066 126.40605750000036 9.942 135.6753330000009 10.736 138.8970924 5.613 122.94729419999936 10.359 102.45961820000004 5.13 127.71767969999998 5.475 139.06508029999986 5.534 108.08167459999962 9.355 102.6636160999999 4.457 134.35629870000017 5.435 107.12941440000003 9.571 124.45403460000011 5.441 136.23582519999997 5.953 115.33655390000027 10.512 108.79637529999837 12.078 120.05076559999995 5.497 122.76825759999961 5.537 158.2208219 5.589 110.98583760000005 5.716 127.91689870000003 4.976)
Error minima by case: (0.3262 2 0.0 0 5.0536 1 0.7361 2 5.1125 2 0.4518 2 0.0922 7 0.0 0 1.0867 2 0.0 0 0.0 0 0.4941 1 0.6254 2 0.1961 1 0.2609 1 0.033 2 0.0 0 0.8914 1 0.2716 1 0.1392 8 0.2028 1 0.0581 2 17.0 1 0.4737 1 0.7954 2)
Average genome size in population (length): 179.192
Average program size in population (points): 180.192
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 175.5003537321544
Average age in population: 171.7339683415794
Median age in population: 173.5053981408503
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.813
Error (vector) diversity:			 0.824
Behavioral diversity:				 0.827
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 341700887
--- Timings ---
Current time: 1529615398286 milliseconds
Total Time:         570.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.4 seconds, 30.2%
Fitness Testing:    317.7 seconds, 55.7%
Report:              80.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 42000.233200000046
Test mean error for best: 21.00012
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 125.7326963965
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_max} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items integer_dup_items float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dup_items float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_max float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec integer_sub float_dup integer_div float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_pop float_dec integer_dup integer_add integer_pop integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup float_dec float_dup integer_swap float_yankdup float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [27.0 3 39.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 7.2878 9 1.0 2 17.0 2 4.6088 9 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 0.2858 8 26.0 2 24.0 2 29.0 2]
Total: 610.6621
Mean: 12.213242
Genome size: 186
Size: 187
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3659.2342735
Median total errors in population: 699.2951999999999
Error averages by case: (155.9904347999999 6.095 148.1214919 5.335 146.97368350000008 4.402 122.37124029999929 10.312 151.61332019999992 5.223 139.83181540000007 10.295 146.39986980000012 10.805 151.45345150000006 5.371 135.13892799999996 10.448 120.16744690000017 4.932 145.51995749999995 5.313 154.15233879999994 5.38 123.34812039999963 9.679 115.64896829999988 4.435 149.46059530000008 5.261 119.28793719999997 9.901 140.60144889999998 5.284 155.59755930000003 6.007 129.35766360000034 10.759 118.27224059999833 12.258 137.06977249999989 5.335 133.47048189999987 5.548 171.40255110000018 5.478 128.9679494000001 5.511 144.87600640000002 4.772)
Error minima by case: (2.6738 2 0.2572 1 9.5249 1 0.7361 2 0.7776 2 0.3686 2 1.7669 8 1.0 1 0.2714 2 0.0 0 0.0605 1 1.5224 1 0.6254 2 0.8526 1 6.0 1 0.3716 2 0.0 0 2.0 1 0.2716 1 0.1392 8 0.0 0 0.2858 1 15.0 1 0.1646 1 3.6422 1)
Average genome size in population (length): 178.58
Average program size in population (points): 179.58
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 176.5663672123663
Average age in population: 172.270161890052
Median age in population: 174.7294593044955
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.979
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.777
Error (vector) diversity:			 0.786
Behavioral diversity:				 0.788
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 346165362
--- Timings ---
Current time: 1529615404354 milliseconds
Total Time:         576.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.8 seconds, 30.1%
Fitness Testing:    321.4 seconds, 55.7%
Report:              81.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 41987.06450000005
Test mean error for best: 20.99353
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 125.7326963965
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_yank integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add float_dup integer_rot float_dec float_dup float_dec integer_add integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec integer_rot integer_add integer_rot float_dec float_dup float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [27.0 3 39.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 7.2878 9 1.0 2 17.0 2 4.6088 9 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 0.2858 8 26.0 2 24.0 2 29.0 2]
Total: 610.6621
Mean: 12.213242
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3423.8539724
Median total errors in population: 707.3024499999999
Error averages by case: (147.45274540000008 6.235 137.4563853999998 5.358 135.72325899999993 4.47 114.5031587999995 10.182 138.29051259999997 5.005 132.33765520000054 10.09 136.30944060000098 10.769 142.5088444000001 5.51 126.74982829999941 10.461 109.52414410000016 5.177 135.4813785 5.391 145.9402857999998 5.402 115.33759049999942 9.605 109.57622709999981 4.365 140.27612910000013 5.353 111.25149359999995 9.697 130.66868940000006 5.329 143.87208809999993 5.999 121.28938300000047 10.567 108.81196059999839 12.145 127.95961089999994 5.342 121.10479149999969 5.85 164.20523520000012 5.6 118.95387170000002 5.588 133.76026359999992 5.019)
Error minima by case: (0.3262 2 0.0826 1 0.8731 1 0.7361 2 1.3426 1 0.3126 2 0.0922 7 0.0 0 3.9336 2 0.0 0 0.0 0 0.203 1 0.6254 2 0.8526 2 1.1047 1 0.3716 2 0.0 0 0.814 1 0.0 0 0.1548 8 0.0 0 0.2491 1 2.8221 1 0.4773 1 8.3002 2)
Average genome size in population (length): 178.631
Average program size in population (points): 179.631
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 178.1040907193459
Average age in population: 173.0208997118913
Median age in population: 176.0612635627725
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.972
Total error diversity:				 0.762
Error (vector) diversity:			 0.78
Behavioral diversity:				 0.782
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 350631112
--- Timings ---
Current time: 1529615410242 milliseconds
Total Time:         582.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       175.2 seconds, 30.1%
Fitness Testing:    325.0 seconds, 55.8%
Report:              82.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 41987.06450000005
Test mean error for best: 20.99353
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 125.7326963965
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_yank integer_rot float_dec integer_swap float_dup_times float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add float_dup integer_rot float_dec float_dup float_dec integer_add integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec integer_rot integer_add integer_rot float_dec float_dup float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [27.0 3 39.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 7.2878 9 1.0 2 17.0 2 4.6088 9 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 0.2858 8 26.0 2 24.0 2 29.0 2]
Total: 610.6621
Mean: 12.213242
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3706.2135699999994
Median total errors in population: 711.47595
Error averages by case: (160.07462470000002 6.323 149.78922529999988 5.463 148.30297929999998 4.757 122.90031519999934 10.182 149.06263460000002 5.248 138.56901950000037 10.14 148.1288670000004 10.735 155.24259150000012 5.585 136.64293459999962 10.459 121.15915240000015 5.232 147.56561119999995 5.465 157.1153741999998 5.541 123.41088059999953 9.533 118.41440119999987 4.491 153.24103990000015 5.471 120.52933170000021 9.681 143.56242190000003 5.477 158.10072679999985 6.1 130.8555322000002 10.633 120.55617399999849 12.11 141.04340679999999 5.466 130.28790279999973 5.776 176.16720380000015 5.683 132.4902231 5.69 146.5089956999999 5.251)
Error minima by case: (12.6738 2 0.0538 1 7.4594 1 0.7361 2 0.2616 2 1.6929 2 2.8096 7 0.0 0 5.59 2 0.0 0 0.0 0 1.1165 1 0.6254 2 0.176 1 2.9791 1 0.3716 2 0.0 0 0.0 0 0.2716 1 0.1548 7 0.4527 1 0.2491 1 2.8221 1 0.0555 1 1.8753 2)
Average genome size in population (length): 179.466
Average program size in population (points): 180.466
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 179.79510473559
Average age in population: 174.550414312424
Median age in population: 177.198244834358
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.76
Error (vector) diversity:			 0.768
Behavioral diversity:				 0.769
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 355117887
--- Timings ---
Current time: 1529615416214 milliseconds
Total Time:         588.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.6 seconds, 30.0%
Fitness Testing:    328.6 seconds, 55.8%
Report:              83.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 41987.06450000005
Test mean error for best: 20.99353
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 125.7326963965
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_add} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_yank integer_rot float_dec integer_swap float_dup_times float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add float_dup integer_rot float_dec float_dup float_dec integer_add integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec integer_rot integer_add integer_rot float_dec float_dup float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_add in2 integer_min)
Errors: [27.0 3 39.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 7.2878 9 1.0 2 17.0 2 4.6088 9 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 0.2858 8 26.0 2 24.0 2 29.0 2]
Total: 610.6621
Mean: 12.213242
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3411.0324852
Median total errors in population: 702.96315
Error averages by case: (146.37728979999991 6.173 138.3362705999999 5.419 133.41888470000012 4.321 112.63398469999937 10.196 138.31749959999988 5.09 129.33842170000082 10.24 140.4275605000008 10.688 143.6927766 5.519 125.45111909999942 10.355 107.07865430000003 5.114 136.0502598000001 5.432 145.36334039999997 5.503 112.54297789999947 9.509 106.08669049999989 4.487 139.82886300000013 5.388 110.07007060000028 9.668 130.88380530000006 5.426 143.90701239999984 6.011 121.22074660000047 10.57 115.27800129999805 12.137 126.10522340000007 5.441 122.99072499999971 5.61 161.83581580000006 5.529 116.62276009999998 5.61 132.85173149999994 4.886)
Error minima by case: (1.0066 2 0.2572 1 1.6336 1 0.7361 3 1.2224 1 0.3686 2 0.9078 7 0.0 0 4.2473 2 0.0 0 0.002 1 1.1165 1 0.5507 2 0.4316 1 3.5182 1 0.3716 2 0.0 0 0.0 0 0.4263 1 0.1392 6 0.3775 1 0.2491 2 17.0 1 0.5227 1 0.1247 2)
Average genome size in population (length): 177.917
Average program size in population (points): 178.917
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 180.5697309990475
Average age in population: 173.0988216799957
Median age in population: 178.466800273303
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.739
Error (vector) diversity:			 0.75
Behavioral diversity:				 0.752
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 359565887
--- Timings ---
Current time: 1529615422033 milliseconds
Total Time:         594.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.1 seconds, 29.9%
Fitness Testing:    332.2 seconds, 55.9%
Report:              84.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 41754.1122
Test mean error for best: 20.87706
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -78.6738378996
Correct output: -31.2572440177 | Program output: -74.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -124.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -31.9825817496
Correct output: -36.0605266238 | Program output: -74.0605266238
Correct output: -98.4940591545 | Program output: -79.4940591545
Correct output: 118.444904963  | Program output: 122.5674160943
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -83.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -98.7139415536
Correct output: -85.4359203887 | Program output: -122.4359203887
Correct output: 29.5496488004  | Program output: 32.9548607898 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -48.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -151.8513267506
Correct output: -16.4772789847 | Program output: -44.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_max} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_max float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec integer_sub float_dup integer_div float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_pop float_dec integer_swap integer_add integer_pop integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup float_dec float_dup integer_swap float_yankdup float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [23.0 3 43.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 4.0 1 27.0058 10 4.0 2 38.0 2 19.0 2 4.1225 9 1.0 2 13.0 2 4.6088 9 10.0 1 37.0 3 3.4052 9 3.1555 12 39.0 2 0.2858 8 22.0 2 28.0 2 29.0 2]
Total: 610.3186
Mean: 12.206372
Genome size: 189
Size: 190
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3107.1387944999988
Median total errors in population: 676.7218499999999
Error averages by case: (134.01109879999998 5.937 125.94217309999983 5.194 121.76880109999999 4.07 100.19914649999994 10.008 126.88457029999998 4.959 116.97252720000074 9.962 129.71627770000146 10.614 127.63621010000003 5.21 116.62896779999939 10.249 98.64198110000011 4.959 122.30418349999992 5.208 131.26221209999986 5.229 102.09045379999961 9.322 95.63673519999996 4.078 125.64320960000003 5.118 98.02861260000057 9.474 117.2873268000001 5.202 130.38433769999983 5.778 110.98460580000042 10.539 100.65455569999907 12.117 119.16621100000003 5.312 107.32740299999972 5.412 146.65128020000003 5.248 110.50211750000004 5.549 121.35879629999994 4.707)
Error minima by case: (0.2687 2 0.3151 1 0.4136 1 0.1423 2 2.4451 1 0.7339 2 0.3186 7 0.0 0 0.0638 2 0.0 0 0.002 1 1.1165 1 0.6254 2 0.1961 2 5.2034 1 0.3677 2 0.0 0 0.0 0 0.2716 1 0.1548 6 0.3418 1 0.0463 1 8.4643 1 1.1646 1 5.8138 2)
Average genome size in population (length): 179.93
Average program size in population (points): 180.93
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 181.6833772563128
Average age in population: 176.4622667526222
Median age in population: 179.7059163780921
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.979
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.689
Error (vector) diversity:			 0.7
Behavioral diversity:				 0.702
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 364064337
--- Timings ---
Current time: 1529615428217 milliseconds
Total Time:         600.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       179.5 seconds, 29.9%
Fitness Testing:    335.8 seconds, 55.9%
Report:              85.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 41860.97850000003
Test mean error for best: 20.93049
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -76.6738378996
Correct output: -31.2572440177 | Program output: -72.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -122.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -29.9825817496
Correct output: -36.0605266238 | Program output: -72.0605266238
Correct output: -98.4940591545 | Program output: -77.4940591545
Correct output: 118.444904963  | Program output: 122.5674160943
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -81.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -96.7139415536
Correct output: -85.4359203887 | Program output: -120.4359203887
Correct output: 29.5496488004  | Program output: 35.043940196  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -46.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -149.8513267506
Correct output: -16.4772789847 | Program output: -42.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup} {:instruction float_dec} {:instruction print_integer} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_rot integer_rot integer_pop float_dec float_dup_times float_dec integer_rot integer_rot float_dec float_dec float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_yank float_dup integer_rot float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot integer_dec float_dup float_dec print_integer integer_swap float_dup integer_rot float_dec float_dec float_dup float_dec float_dup float_dec float_dup integer_swap float_yankdup float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [25.0 3 41.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 6.0 1 27.0058 10 2.0 1 36.0 2 21.0 2 4.1225 9 1.0 2 15.0 2 4.6088 9 8.0 2 35.0 3 5.4943 10 3.1555 12 37.0 2 0.2858 8 24.0 2 26.0 2 29.0 2]
Total: 609.4077000000001
Mean: 12.188154
Genome size: 178
Size: 179
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3338.5465731999993
Median total errors in population: 708.67185
Error averages by case: (145.7552060000001 6.419 133.44266279999965 5.538 131.95385339999987 4.585 109.28421479999938 10.114 134.99804389999997 5.19 127.07902140000071 9.981 133.4014324000014 10.66 140.32552630000004 5.622 123.98851029999926 10.415 104.36865400000012 5.322 131.72688519999994 5.624 142.91923639999968 5.64 111.18881049999958 9.639 103.1853661999999 4.207 138.04870740000004 5.56 107.38393700000026 9.583 128.2055648 5.597 141.2135341999999 6.117 118.18574810000054 10.6 107.84169469999823 12.049 122.63190000000003 5.555 120.2955934999997 5.715 161.3727042000001 5.787 113.8790624 5.795 129.45570329999995 5.101)
Error minima by case: (16.6738 2 0.2289 1 4.5804 1 0.0763 2 2.4911 1 0.3686 2 0.9078 7 0.0 0 1.0867 2 0.0 0 0.0 0 2.4359 1 0.6254 2 0.5634 1 9.0 1 0.3716 1 0.0 0 0.8733 1 0.0611 1 0.1548 8 0.0 0 0.0463 2 1.5288 1 0.0 0 6.7417 1)
Average genome size in population (length): 178.769
Average program size in population (points): 179.769
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 183.2623316498153
Average age in population: 176.020892789424
Median age in population: 181.121586240161
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.727
Error (vector) diversity:			 0.732
Behavioral diversity:				 0.736
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 368533712
--- Timings ---
Current time: 1529615434130 milliseconds
Total Time:         606.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.0 seconds, 29.8%
Fitness Testing:    339.4 seconds, 55.9%
Report:              86.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 41860.97850000003
Test mean error for best: 20.93049
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -76.6738378996
Correct output: -31.2572440177 | Program output: -72.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -122.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -29.9825817496
Correct output: -36.0605266238 | Program output: -72.0605266238
Correct output: -98.4940591545 | Program output: -77.4940591545
Correct output: 118.444904963  | Program output: 122.5674160943
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -81.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -96.7139415536
Correct output: -85.4359203887 | Program output: -120.4359203887
Correct output: 29.5496488004  | Program output: 35.043940196  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -46.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -149.8513267506
Correct output: -16.4772789847 | Program output: -42.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup} {:instruction float_dec} {:instruction print_integer} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_rot integer_rot integer_pop float_dec float_dup_times float_dec integer_rot integer_rot float_dec float_dec float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_yank float_dup integer_rot float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot integer_dec float_dup float_dec print_integer integer_swap float_dup integer_rot float_dec float_dec float_dup float_dec float_dup float_dec float_dup integer_swap float_yankdup float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [25.0 3 41.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 6.0 1 27.0058 10 2.0 1 36.0 2 21.0 2 4.1225 9 1.0 2 15.0 2 4.6088 9 8.0 2 35.0 3 5.4943 10 3.1555 12 37.0 2 0.2858 8 24.0 2 26.0 2 29.0 2]
Total: 609.4077000000001
Mean: 12.188154
Genome size: 178
Size: 179
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3179.5676586
Median total errors in population: 703.12875
Error averages by case: (142.4147489000001 6.239 131.89039489999985 5.418 123.00879279999992 4.399 99.02942260000002 10.108 129.06937150000002 5.017 115.4461019000007 10.042 126.02384810000143 10.537 136.80428519999998 5.439 111.3108501999994 10.36 98.29202070000007 4.994 129.68022529999996 5.436 139.09502809999975 5.487 97.89920959999962 9.522 101.99427909999997 4.215 133.83905240000018 5.385 96.26190250000059 9.603 125.64458030000004 5.45 137.77055199999992 5.944 113.92170940000037 10.461 95.57314409999921 11.956 122.13662750000002 5.402 109.34573509999973 5.653 155.95748720000012 5.537 112.27468920000005 5.59 121.86259999999997 4.827)
Error minima by case: (2.3262 2 0.2572 1 16.0536 1 0.7361 1 5.8875 1 0.4508 2 6.8796 7 0.0 0 1.0867 2 0.0 0 0.3546 1 0.203 1 0.6254 2 0.9083 2 0.2689 1 0.3716 2 0.0 0 0.3542 1 0.2716 1 0.1548 7 0.3119 1 0.0463 1 17.0 1 0.4328 1 10.2046 2)
Average genome size in population (length): 178.842
Average program size in population (points): 179.842
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 184.3714719312182
Average age in population: 176.6864417493468
Median age in population: 182.3621713113945
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.73
Error (vector) diversity:			 0.734
Behavioral diversity:				 0.739
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 373005087
--- Timings ---
Current time: 1529615440110 milliseconds
Total Time:         612.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.4 seconds, 29.8%
Fitness Testing:    343.0 seconds, 56.0%
Report:              87.1 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 41860.97850000003
Test mean error for best: 20.93049
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -76.6738378996
Correct output: -31.2572440177 | Program output: -72.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -122.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -29.9825817496
Correct output: -36.0605266238 | Program output: -72.0605266238
Correct output: -98.4940591545 | Program output: -77.4940591545
Correct output: 118.444904963  | Program output: 122.5674160943
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -81.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -96.7139415536
Correct output: -85.4359203887 | Program output: -120.4359203887
Correct output: 29.5496488004  | Program output: 35.043940196  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -46.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -149.8513267506
Correct output: -16.4772789847 | Program output: -42.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup} {:instruction float_dec} {:instruction print_integer} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_rot integer_rot integer_pop float_dec float_dup_times float_dec integer_rot integer_rot float_dec float_dec float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_yank float_dup integer_rot float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot integer_dec float_dup float_dec print_integer integer_swap float_dup integer_rot float_dec float_dec float_dup float_dec float_dup float_dec float_dup integer_swap integer_div float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [25.0 3 41.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 6.0 1 27.0058 10 2.0 1 36.0 2 21.0 2 4.1225 9 1.0 2 15.0 2 4.6088 9 8.0 2 35.0 3 5.4943 10 3.1555 12 37.0 2 0.2858 8 24.0 2 26.0 2 29.0 2]
Total: 609.4077000000001
Mean: 12.188154
Genome size: 178
Size: 179
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3506.3206026999997
Median total errors in population: 713.44065
Error averages by case: (149.64206539999998 6.431 138.7795201999999 5.54 138.26418 4.591 118.42919689999957 10.205 141.13612450000008 5.27 134.03849140000062 10.118 144.4004620000008 10.826 143.66805830000007 5.583 133.32235149999957 10.478 111.29794160000009 5.275 136.5682354 5.598 146.64981739999985 5.628 118.29473899999958 9.657 117.23140879999994 4.593 143.50263380000018 5.544 114.41946520000046 9.636 132.97401290000005 5.679 146.82259419999997 6.133 126.28150210000022 10.611 117.21706569999867 12.184 128.64939080000005 5.685 125.63940829999966 6.006 163.50105999999994 5.755 121.0282247 5.872 136.60265259999994 5.062)
Error minima by case: (1.3262 2 0.0555 1 8.4478 1 0.7361 2 0.3539 1 0.2483 1 0.3186 7 0.0 0 1.0867 2 0.0 0 0.0 0 1.1165 1 0.5507 2 0.1961 1 4.4953 1 0.3716 1 0.0 0 0.8914 1 0.2716 1 0.1392 6 0.0992 1 0.2491 2 14.0 1 0.1767 1 2.7172 2)
Average genome size in population (length): 180.785
Average program size in population (points): 181.785
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 185.8160532143142
Average age in population: 179.8012647743796
Median age in population: 183.6604012952694
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.692
Error (vector) diversity:			 0.703
Behavioral diversity:				 0.707
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 377524812
--- Timings ---
Current time: 1529615446033 milliseconds
Total Time:         618.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       183.9 seconds, 29.7%
Fitness Testing:    346.6 seconds, 56.0%
Report:              88.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 41860.97850000003
Test mean error for best: 20.93049
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -76.6738378996
Correct output: -31.2572440177 | Program output: -72.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -122.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -29.9825817496
Correct output: -36.0605266238 | Program output: -72.0605266238
Correct output: -98.4940591545 | Program output: -77.4940591545
Correct output: 118.444904963  | Program output: 122.5674160943
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -81.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -96.7139415536
Correct output: -85.4359203887 | Program output: -120.4359203887
Correct output: 29.5496488004  | Program output: 35.043940196  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -46.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -149.8513267506
Correct output: -16.4772789847 | Program output: -42.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup} {:instruction float_dec} {:instruction print_integer} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_rot integer_rot integer_pop float_dec float_dup_times float_dec integer_rot integer_rot float_dec float_dec float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_yank float_dup integer_rot float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot integer_dec float_dup float_dec print_integer integer_swap float_dup integer_rot float_dec float_dec float_dup float_dec float_dup float_dec float_dup integer_swap integer_div float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [25.0 3 41.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 6.0 1 27.0058 10 2.0 1 36.0 2 21.0 2 4.1225 9 1.0 2 15.0 2 4.6088 9 8.0 2 35.0 3 5.4943 10 3.1555 12 37.0 2 0.2858 8 24.0 2 26.0 2 29.0 2]
Total: 609.4077000000001
Mean: 12.188154
Genome size: 178
Size: 179
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3094.0182410999982
Median total errors in population: 680.2148
Error averages by case: (133.534731 6.104 123.26465489999983 5.298 119.6689397 4.254 100.42661179999953 10.156 125.58294399999997 4.881 117.18906260000081 10.028 126.65137660000147 10.626 129.11808469999994 5.313 116.01226479999934 10.348 97.19909540000003 4.883 120.98749989999999 5.293 131.6728766999998 5.329 102.08409119999962 9.588 97.47272669999997 4.256 125.72201990000002 5.254 97.96692910000041 9.558 117.12663120000003 5.297 129.77165869999982 5.904 109.21278740000042 10.605 100.16725319999868 12.087 116.4044516 5.321 109.52172619999968 5.722 149.24030340000007 5.407 108.40584349999995 5.485 117.88367690000001 4.733)
Error minima by case: (0.3366 2 0.2572 1 2.2203 1 0.7361 2 7.0485 2 0.3686 1 0.7242 7 0.0 0 1.0867 2 0.0 0 0.0833 1 1.5224 1 0.6254 2 0.012 1 3.4046 1 0.3716 2 0.0 0 0.8914 1 0.2716 1 0.0869 8 0.0 0 0.0749 1 15.0 1 0.4773 1 12.7687 1)
Average genome size in population (length): 178.812
Average program size in population (points): 179.812
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 186.8160532143142
Average age in population: 179.1406991041027
Median age in population: 184.8692242733544
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.695
Error (vector) diversity:			 0.699
Behavioral diversity:				 0.702
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 381995237
--- Timings ---
Current time: 1529615452017 milliseconds
Total Time:         624.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       185.3 seconds, 29.7%
Fitness Testing:    350.3 seconds, 56.1%
Report:              88.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 41860.97850000003
Test mean error for best: 20.93049
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -76.6738378996
Correct output: -31.2572440177 | Program output: -72.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -122.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -29.9825817496
Correct output: -36.0605266238 | Program output: -72.0605266238
Correct output: -98.4940591545 | Program output: -77.4940591545
Correct output: 118.444904963  | Program output: 122.5674160943
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -81.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -96.7139415536
Correct output: -85.4359203887 | Program output: -120.4359203887
Correct output: 29.5496488004  | Program output: 35.043940196  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -46.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -149.8513267506
Correct output: -16.4772789847 | Program output: -42.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup} {:instruction float_dec} {:instruction print_integer} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_rot integer_rot integer_pop float_dec float_dup_times float_dec integer_rot integer_rot float_dec float_dec float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_yank float_dup integer_rot float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot integer_dec float_dup float_dec print_integer integer_swap float_dup integer_rot float_dec float_dec float_dup float_dec float_dup float_dec float_dup integer_swap integer_div float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [25.0 3 41.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 6.0 1 27.0058 10 2.0 1 36.0 2 21.0 2 4.1225 9 1.0 2 15.0 2 4.6088 9 8.0 2 35.0 3 5.4943 10 3.1555 12 37.0 2 0.2858 8 24.0 2 26.0 2 29.0 2]
Total: 609.4077000000001
Mean: 12.188154
Genome size: 178
Size: 179
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3156.339513300001
Median total errors in population: 678.9264999999999
Error averages by case: (135.2765714 5.79 127.71705189999973 5.049 125.31360100000003 4.277 102.69633229999951 10.07 129.52753539999992 4.936 119.3097593000007 10.003 131.51326700000138 10.646 129.9458944 5.011 117.56567369999945 10.408 98.92780520000008 4.743 125.2761291 5.055 133.15043049999971 5.091 102.72680419999965 9.567 98.7621732 4.245 127.25746650000009 4.966 100.23664100000045 9.502 118.33611449999997 5.045 132.2653543999999 5.66 114.30443330000047 10.535 102.24220599999856 12.108 120.47813590000005 5.098 113.64479009999971 5.746 147.8018240000001 5.165 110.62734650000002 5.284 122.76217249999992 4.674)
Error minima by case: (1.3262 2 0.7155 1 3.6702 1 0.7361 2 2.6588 1 0.3686 2 0.7242 7 0.0 0 1.0867 2 0.0 0 0.9395 1 0.203 1 0.6254 2 0.0 0 8.0 1 0.276 2 0.0 0 0.8584 1 0.2716 1 0.1548 8 0.4527 1 0.1253 1 17.0 1 0.1637 1 0.1247 1)
Average genome size in population (length): 179.723
Average program size in population (points): 180.723
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 188.2568938698265
Average age in population: 182.7881112799443
Median age in population: 186.144179788323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.712
Error (vector) diversity:			 0.718
Behavioral diversity:				 0.722
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 386488687
--- Timings ---
Current time: 1529615457904 milliseconds
Total Time:         630.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.8 seconds, 29.6%
Fitness Testing:    353.9 seconds, 56.1%
Report:              89.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 41907.41450000004
Test mean error for best: 20.95371
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -75.6738378996
Correct output: -31.2572440177 | Program output: -71.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -121.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -28.9825817496
Correct output: -36.0605266238 | Program output: -71.0605266238
Correct output: -98.4940591545 | Program output: -76.4940591545
Correct output: 118.444904963  | Program output: 122.5674160943
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -80.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -95.7139415536
Correct output: -85.4359203887 | Program output: -119.4359203887
Correct output: 29.5496488004  | Program output: 36.088479899  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -45.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -148.8513267506
Correct output: -16.4772789847 | Program output: -41.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup} {:instruction float_dec} {:instruction print_integer} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_inc} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (print_float integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec integer_dec integer_fromfloat float_shove float_dec float_dec integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_rot integer_rot integer_pop float_dec float_dup_times float_dec integer_rot integer_rot float_dec float_dec float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_yank float_dup integer_rot float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot integer_dec float_dup float_dec print_integer integer_swap float_dup integer_rot float_dec float_dec float_dup float_inc float_dup float_dec float_dup integer_swap float_dec float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [26.0 3 40.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 7.0 1 27.0058 10 1.0 1 35.0 2 22.0 2 4.1225 9 1.0 2 16.0 2 4.6088 9 7.0 2 34.0 3 6.5388 11 3.1555 12 36.0 2 0.2858 8 25.0 2 25.0 2 29.0 2]
Total: 608.4522000000001
Mean: 12.169044
Genome size: 177
Size: 178
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3149.1904427999993
Median total errors in population: 690.0061499999999
Error averages by case: (140.987649 6.071 130.26538209999987 5.258 122.94878759999997 4.279 95.51194669999983 10.119 126.42628289999993 4.922 113.2057858000007 10.021 126.66844800000155 10.625 135.0863014 5.314 112.98443009999939 10.378 99.2118301 4.903 127.90548940000005 5.262 138.3989586 5.349 96.32038839999957 9.634 98.35711320000006 4.131 133.68539820000012 5.243 92.5156246000006 9.536 122.93719890000003 5.304 137.38606249999998 5.861 112.2304426000002 10.525 99.74309699999878 12.087 119.39063150000003 5.369 107.98240739999972 5.577 156.38719709999992 5.471 109.49398830000011 5.543 121.6656013999999 4.712)
Error minima by case: (2.6738 2 0.0894 1 4.4631 1 0.0763 2 1.6588 1 0.3686 2 3.0922 8 1.0 1 6.7527 2 0.0 0 0.0 0 2.4359 1 0.5507 2 0.9083 1 5.7725 1 0.3716 2 0.0 0 1.0 1 0.2716 1 0.1548 8 0.0 0 0.2735 1 16.0 1 0.0511 1 1.121 1)
Average genome size in population (length): 178.572
Average program size in population (points): 179.572
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 189.4388908924111
Average age in population: 182.7406107313967
Median age in population: 187.4690087639498
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.692
Error (vector) diversity:			 0.702
Behavioral diversity:				 0.705
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 390953337
--- Timings ---
Current time: 1529615464047 milliseconds
Total Time:         636.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.2 seconds, 29.6%
Fitness Testing:    357.5 seconds, 56.2%
Report:              90.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 40433.77440000004
Test mean error for best: 20.21689
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -75.6738378996
Correct output: -31.2572440177 | Program output: -71.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -121.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -28.9825817496
Correct output: -36.0605266238 | Program output: -71.0605266238
Correct output: -98.4940591545 | Program output: -76.4940591545
Correct output: 118.444904963  | Program output: 122.5674160943
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -80.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -95.7139415536
Correct output: -85.4359203887 | Program output: -119.4359203887
Correct output: 29.5496488004  | Program output: 36.088479899  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -45.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -148.8513267506
Correct output: -16.4772789847 | Program output: -41.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup} {:instruction float_dec} {:instruction print_integer} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_stackdepth integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_rot integer_rot integer_pop float_dec float_dup_times float_dec integer_rot integer_rot float_dec float_dec float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_yank float_dup integer_rot float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot integer_dec float_dup float_dec print_integer integer_swap float_dup integer_rot float_dec float_dec float_dup float_dec float_dup float_dec float_dup integer_swap integer_div float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [26.0 3 40.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 7.0 1 27.0058 10 1.0 1 35.0 2 22.0 2 4.1225 9 1.0 2 16.0 2 4.6088 9 7.0 2 34.0 3 6.5388 11 3.1555 12 36.0 2 0.2858 8 25.0 2 25.0 2 29.0 2]
Total: 608.4522000000001
Mean: 12.169044
Genome size: 178
Size: 179
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3620.3563719999993
Median total errors in population: 687.1709
Error averages by case: (155.38040959999995 6.29 145.93269609999996 5.426 141.0644288 4.629 118.19987559999934 10.206 145.7435385999999 5.115 138.21275870000042 10.155 146.15602340000044 10.691 149.64973320000007 5.566 134.2259266999995 10.498 117.22401780000006 5.11 143.59459039999996 5.471 152.78432359999988 5.584 119.25865079999973 9.781 122.9563106999999 4.473 148.14636260000017 5.446 116.89316970000016 9.596 138.48299930000002 5.53 152.12360320000005 6.022 130.61393250000046 10.585 118.8603001999982 12.153 138.67952859999997 5.481 130.27136069999958 6.059 170.22994070000018 5.638 129.3447531 5.666 140.1861373999999 4.97)
Error minima by case: (6.6738 2 0.0 0 1.1759 1 0.7361 2 1.4607 1 2.3391 2 3.0922 8 0.0 0 4.4702 2 0.0 0 0.0374 1 1.1165 1 0.6254 2 0.1961 1 3.2609 1 0.3716 2 0.0 0 0.8914 1 0.2716 1 0.1548 8 0.2419 1 0.2858 1 16.0 1 0.8354 1 0.771 2)
Average genome size in population (length): 179.803
Average program size in population (points): 180.803
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 190.8670005192877
Average age in population: 185.1721946467318
Median age in population: 188.7771264523254
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.972
Total error diversity:				 0.645
Error (vector) diversity:			 0.653
Behavioral diversity:				 0.656
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 395448362
--- Timings ---
Current time: 1529615469948 milliseconds
Total Time:         642.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       189.7 seconds, 29.5%
Fitness Testing:    361.1 seconds, 56.2%
Report:              91.7 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 40433.77440000004
Test mean error for best: 20.21689
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -75.6738378996
Correct output: -31.2572440177 | Program output: -71.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -121.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -28.9825817496
Correct output: -36.0605266238 | Program output: -71.0605266238
Correct output: -98.4940591545 | Program output: -76.4940591545
Correct output: 118.444904963  | Program output: 122.5674160943
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -80.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -95.7139415536
Correct output: -85.4359203887 | Program output: -119.4359203887
Correct output: 29.5496488004  | Program output: 36.088479899  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -45.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -148.8513267506
Correct output: -16.4772789847 | Program output: -41.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_dup} {:instruction float_dec} {:instruction print_integer} {:instruction integer_dup_times} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_stackdepth integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_rot integer_rot integer_pop float_dec float_dup_times float_dec integer_rot integer_rot float_dec float_dec float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_yank float_dup integer_rot float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot integer_dec float_dup float_dec print_integer integer_dup_times float_dup integer_rot float_dec float_dec float_dup float_dec float_dup float_dec float_dup integer_swap integer_div float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [26.0 3 40.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 7.0 1 27.0058 10 1.0 1 35.0 2 22.0 2 4.1225 9 1.0 2 16.0 2 4.6088 9 7.0 2 34.0 3 6.5388 11 3.1555 12 36.0 2 0.2858 8 25.0 2 25.0 2 29.0 2]
Total: 608.4522000000001
Mean: 12.169044
Genome size: 178
Size: 179
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3154.365676099999
Median total errors in population: 675.94045
Error averages by case: (135.32759840000008 5.972 125.72512989999976 5.114 123.41223299999999 4.378 102.84314849999986 10.284 127.35108289999984 5.011 121.98328230000064 10.108 131.4789148000015 10.699 129.07168679999992 5.205 117.6055139999994 10.456 99.7905544000001 4.964 122.97629580000003 5.12 132.29485659999972 5.196 107.0079020999997 9.668 101.15552719999988 4.259 129.0537987000002 5.149 100.66492260000044 9.687 116.6701456000001 5.144 133.63655209999988 5.786 114.28032960000043 10.598 101.47938129999889 12.143 116.89295160000002 5.279 113.1823092999997 5.805 148.9645875 5.345 108.93865810000001 5.481 120.87931300000007 4.848)
Error minima by case: (2.2367 2 0.0555 1 7.1717 1 0.7361 2 0.8875 2 0.8936 2 0.9078 8 0.0 0 2.6557 2 0.0 0 0.0605 1 0.203 1 0.5507 2 0.168 1 3.4259 1 0.3716 2 0.0 0 0.0 0 0.2716 1 0.1548 8 0.9985 1 0.2858 2 4.1959 1 0.0 0 1.7637 1)
Average genome size in population (length): 179.498
Average program size in population (points): 180.498
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 191.948423283994
Average age in population: 186.2788924964486
Median age in population: 190.0940497259513
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.97
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.97
Total error diversity:				 0.673
Error (vector) diversity:			 0.679
Behavioral diversity:				 0.681
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 399936012
--- Timings ---
Current time: 1529615476125 milliseconds
Total Time:         648.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       191.1 seconds, 29.5%
Fitness Testing:    365.0 seconds, 56.3%
Report:              92.5 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 42032.18780000005
Test mean error for best: 21.01609
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_max} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_swap} {:instruction in2} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup integer_pop float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_min integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_max float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_max float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec integer_sub float_dup integer_div float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_dup_items integer_pop float_dec integer_swap in2 float_dec integer_add integer_rot float_dec float_dup float_dec float_dup float_dec float_dup integer_swap float_yankdup float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [27.0 3 39.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 0.9572 9 1.0 2 17.0 2 4.6088 9 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 0.2858 8 26.0 2 24.0 2 29.0 2]
Total: 604.3315
Mean: 12.08663
Genome size: 179
Size: 180
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3537.9548246
Median total errors in population: 678.74405
Error averages by case: (154.46610650000002 6.129 144.02398079999986 5.293 138.73482129999982 4.303 115.8851797999996 10.118 143.16506559999996 5.064 133.77785970000062 9.996 143.08574110000103 10.682 147.78765250000015 5.367 129.18252929999937 10.474 112.51941030000002 4.869 141.63518619999994 5.337 150.79738659999987 5.413 115.61495649999964 9.668 112.33677299999998 4.155 146.2598517 5.232 114.37127420000046 9.544 135.82284559999988 5.342 150.12004160000004 5.935 129.14109940000037 10.558 114.6524539999987 12.111 134.4701649 5.336 127.01494969999963 5.637 167.31739500000023 5.473 125.94112160000002 5.463 137.49397770000002 4.838)
Error minima by case: (3.6738 2 0.0555 1 0.1177 1 0.7361 2 9.3412 2 0.3686 2 6.5324 8 1.0 1 2.2218 2 0.0 0 0.9395 1 1.1165 1 0.5507 2 0.4957 1 8.7391 1 0.3716 1 0.0 0 0.6029 1 0.0 0 0.1392 8 0.7293 1 0.2858 1 8.5237 1 0.2866 1 6.1247 2)
Average genome size in population (length): 178.07
Average program size in population (points): 179.07
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 193.3429932460681
Average age in population: 187.0219624220937
Median age in population: 191.463204046642
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.633
Error (vector) diversity:			 0.639
Behavioral diversity:				 0.641
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 404387937
--- Timings ---
Current time: 1529615482263 milliseconds
Total Time:         654.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.5 seconds, 29.4%
Fitness Testing:    368.7 seconds, 56.3%
Report:              93.4 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 41968.92750000004
Test mean error for best: 20.98446
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -75.6738378996
Correct output: -31.2572440177 | Program output: -71.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -121.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -28.9825817496
Correct output: -36.0605266238 | Program output: -71.0605266238
Correct output: -98.4940591545 | Program output: -76.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -80.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -95.7139415536
Correct output: -85.4359203887 | Program output: -119.4359203887
Correct output: 29.5496488004  | Program output: 36.088479899  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -45.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -148.8513267506
Correct output: -16.4772789847 | Program output: -41.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_dup_items} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup integer_pop float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_min integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_max float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup integer_div float_dec integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap integer_add float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_dup_items in2 integer_min)
Errors: [26.0 3 40.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 7.0 1 27.0058 10 1.0 1 35.0 2 22.0 2 0.9572 9 1.0 2 16.0 2 4.6088 9 7.0 2 34.0 3 6.5388 11 3.1555 12 36.0 2 0.2858 8 25.0 2 25.0 2 29.0 2]
Total: 605.2869
Mean: 12.105738
Genome size: 182
Size: 183
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3119.9332257
Median total errors in population: 709.8384499999999
Error averages by case: (137.99554450000002 6.174 124.9910975999998 5.365 120.53195280000001 4.459 99.37851519999955 10.039 128.2060285 5.234 116.43363230000088 10.027 128.6906907000014 10.595 132.91560689999991 5.429 114.49739929999932 10.341 95.03764780000002 5.082 123.11308730000012 5.378 134.76328429999973 5.428 97.34683959999971 9.433 99.04160550000002 4.202 129.2467718000001 5.287 96.42641320000037 9.502 119.04986360000005 5.345 132.30797189999984 5.878 111.74479500000015 10.461 99.90637329999859 12.052 114.44955090000005 5.499 112.3503126999997 5.743 153.22817350000005 5.536 105.4538556 5.663 119.81221189999995 4.862)
Error minima by case: (5.6738 2 0.0 0 1.3447 1 0.7361 2 0.2454 1 0.3686 2 1.0922 8 0.0 0 1.8918 2 0.0 0 0.1893 1 9.0302 1 0.5507 2 0.1961 1 7.0 1 0.3716 1 0.0 0 0.4359 1 0.2716 2 0.1548 6 0.0956 1 0.2858 1 9.5049 1 0.3951 1 1.5387 1)
Average genome size in population (length): 178.876
Average program size in population (points): 179.876
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 194.9171825283855
Average age in population: 188.6729764849721
Median age in population: 192.7591281455639
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.705
Error (vector) diversity:			 0.707
Behavioral diversity:				 0.708
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 408860012
--- Timings ---
Current time: 1529615488400 milliseconds
Total Time:         661.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.0 seconds, 29.4%
Fitness Testing:    372.5 seconds, 56.4%
Report:              94.4 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 42034.20500000004
Test mean error for best: 21.01710
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -70.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -70.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -118.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -44.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction integer_dup_items} {:instruction in2} {:instruction integer_min})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup integer_pop float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_min integer_mult float_dec float_dup integer_flush integer_sub float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_max float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup integer_div float_dec integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dup integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup integer_swap integer_add float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float integer_dup_items in2 integer_min)
Errors: [27.0 3 39.0 2 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 8.0 1 27.0058 10 0.0 0 34.0 2 23.0 2 0.9572 9 1.0 2 17.0 2 4.6088 9 6.0 2 33.0 3 7.5834 11 3.1555 12 35.0 2 0.2858 8 26.0 2 24.0 2 29.0 2]
Total: 604.3315
Mean: 12.08663
Genome size: 182
Size: 183
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4108.9161841
Median total errors in population: 703.56985
Error averages by case: (181.8124451999999 6.701 170.78079520000003 5.828 153.71122749999995 4.613 136.3437650999997 10.366 157.64907489999993 5.29 153.53078650000023 10.365 159.9368715999999 10.875 177.1441686000002 5.921 147.1575976000002 10.557 132.90892270000018 5.554 168.67908169999995 5.804 178.65054549999996 5.84 136.52927959999968 9.848 140.91146179999993 4.661 174.6572326000001 5.831 133.8861908000002 9.782 165.3585737999999 5.851 178.69967579999994 6.48 158.66094960000015 10.772 132.62652319999822 12.311 152.70752539999995 5.872 140.8726769999998 5.929 197.3543838000002 6.032 143.90762410000013 6.064 152.19380449999986 5.098)
Error minima by case: (5.6308 2 0.2724 1 1.8044 1 0.7361 2 0.3412 2 1.3957 2 6.5324 8 0.0 0 1.0867 2 0.0 0 0.0132 1 0.1933 1 0.6254 2 0.1961 1 1.5616 1 0.3716 2 0.0 0 0.8914 1 0.2716 1 0.1392 8 0.4527 1 0.2858 1 17.0 1 0.4069 1 1.8753 1)
Average genome size in population (length): 178.613
Average program size in population (points): 179.613
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 195.9032423800545
Average age in population: 188.5563516993218
Median age in population: 194.0237656540023
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.972
Total error diversity:				 0.66
Error (vector) diversity:			 0.673
Behavioral diversity:				 0.676
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 413325837
--- Timings ---
Current time: 1529615494585 milliseconds
Total Time:         667.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       195.4 seconds, 29.3%
Fitness Testing:    376.2 seconds, 56.4%
Report:              95.3 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 39949.405099999974
Test mean error for best: 19.97470
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -75.6738378996
Correct output: -31.2572440177 | Program output: -71.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -121.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -71.0605266238
Correct output: -98.4940591545 | Program output: -76.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -80.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -95.7139415536
Correct output: -85.4359203887 | Program output: -119.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -45.5473433631
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -148.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction 92} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction print_integer} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub 92 float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec float_dup integer_inc integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dup float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec integer_add integer_mult float_dec float_dup float_dup_items integer_shove float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dec float_dec integer_div float_dec float_dec integer_add print_integer float_dup integer_dup_items integer_sub integer_dup integer_rot float_dec float_dup_items float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup float_dec print_integer integer_swap float_dup integer_rot float_dec float_dec integer_add float_dup integer_dup_times float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [26.0 3 40.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 7.0 1 21.174 10 0.0 0 35.0 2 22.0 2 10.4531 9 1.0 2 16.0 2 2.9487 10 7.0 2 34.0 3 7.5834 11 0.5077 8 36.0 2 3.9588 11 25.0 2 24.0 2 29.0 2]
Total: 604.116
Mean: 12.08232
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3408.8072886999994
Median total errors in population: 675.5112999999999
Error averages by case: (149.0216598000001 6.178 141.32023389999983 5.338 129.8746947 4.271 108.27115569999954 10.082 133.6234816 5.027 125.73046480000087 10.124 137.44613380000104 10.678 145.09298880000014 5.372 124.68706439999931 10.427 106.5613352000001 4.98 138.9507175 5.405 146.8603505999998 5.45 110.00182669999967 9.466 113.3101896999999 4.242 141.79864290000015 5.35 105.63367000000054 9.508 132.51202219999996 5.372 148.01079059999986 5.999 128.3171180000003 10.777 107.42542959999845 12.118 131.11125320000002 5.387 119.22886379999969 5.566 163.2020187000001 5.544 120.32655400000004 5.545 127.55762849999999 4.725)
Error minima by case: (1.6738 2 0.2572 1 1.9884 1 0.6125 2 2.2224 2 0.3686 1 2.1377 8 0.0 0 4.6647 2 0.0 0 0.0 0 0.203 1 0.6254 2 0.1297 1 8.0 1 0.3716 2 0.0 0 1.0 1 0.2716 1 0.1548 8 0.0 0 0.2858 2 17.0 1 0.4773 1 1.1247 2)
Average genome size in population (length): 179.123
Average program size in population (points): 180.123
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 197.2406605104767
Average age in population: 190.8879860220596
Median age in population: 195.2050796775128
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.683
Error (vector) diversity:			 0.69
Behavioral diversity:				 0.692
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 417804212
--- Timings ---
Current time: 1529615500576 milliseconds
Total Time:         673.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       196.9 seconds, 29.3%
Fitness Testing:    379.7 seconds, 56.4%
Report:              96.4 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 39949.405099999974
Test mean error for best: 19.97470
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -75.6738378996
Correct output: -31.2572440177 | Program output: -71.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -121.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -71.0605266238
Correct output: -98.4940591545 | Program output: -76.4940591545
Correct output: 118.444904963  | Program output: 128.8979766987
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -80.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -95.7139415536
Correct output: -85.4359203887 | Program output: -119.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -45.5473433631
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -148.8513267506
Correct output: -16.4772789847 | Program output: -40.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction 92} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction print_integer} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub 92 float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec float_dup integer_inc integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dup float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec float_dec integer_add integer_mult float_dec float_dup float_dup_items integer_shove float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dec float_dec integer_div float_dec float_dec integer_add print_integer float_dup integer_dup_items integer_sub integer_dup integer_rot float_dec float_dup_items float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div float_dec float_dup float_dup_items integer_rot float_dec integer_swap integer_add float_dup integer_rot float_dec float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup float_dec print_integer integer_swap float_dup integer_rot float_dec float_dec integer_add float_dup integer_dup_times float_dup float_dec float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [26.0 3 40.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 7.0 1 21.174 10 0.0 0 35.0 2 22.0 2 10.4531 9 1.0 2 16.0 2 2.9487 10 7.0 2 34.0 3 7.5834 11 0.5077 8 36.0 2 3.9588 11 25.0 2 24.0 2 29.0 2]
Total: 604.116
Mean: 12.08232
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3543.4936494999993
Median total errors in population: 676.3721499999999
Error averages by case: (151.97637350000008 6.207 141.5721530999998 5.343 140.07886499999995 4.564 120.0092613999996 10.243 142.42629309999992 5.116 136.20408170000067 10.223 145.5456459000007 10.653 146.52308389999993 5.474 128.5415982999994 10.433 112.87805730000014 5.113 139.76408339999995 5.409 150.4853587999998 5.444 120.5119378999995 9.645 117.42654799999994 4.491 145.12802310000012 5.332 115.62375650000041 9.737 136.4126503 5.442 148.27005480000003 5.997 128.45197500000043 10.613 115.19211049999856 12.079 132.11022360000007 5.522 127.85442619999965 5.921 165.09265830000007 5.499 122.02810440000009 5.655 138.17832550000003 5.053)
Error minima by case: (4.6738 2 0.0 0 3.1956 1 0.7361 2 1.2223 1 0.3686 1 0.3782 8 1.0 1 1.0867 2 0.0 0 0.0282 1 6.8002 1 0.5507 2 0.1961 1 6.0 1 0.033 2 0.0 0 0.8914 1 0.2716 1 0.1548 8 0.0 0 0.2858 2 15.0 1 0.2643 1 2.3884 1)
Average genome size in population (length): 178.181
Average program size in population (points): 179.181
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 198.4066292332453
Average age in population: 193.1059450533506
Median age in population: 196.4695847535644
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.979
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.678
Error (vector) diversity:			 0.683
Behavioral diversity:				 0.686
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 422259137
--- Timings ---
Current time: 1529615506553 milliseconds
Total Time:         679.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       198.4 seconds, 29.2%
Fitness Testing:    383.4 seconds, 56.4%
Report:              97.3 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 41218.09259999999
Test mean error for best: 20.60905
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -72.6738378996
Correct output: -31.2572440177 | Program output: -68.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -118.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -25.9825817496
Correct output: -36.0605266238 | Program output: -68.0605266238
Correct output: -98.4940591545 | Program output: -73.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -77.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -92.7139415536
Correct output: -85.4359203887 | Program output: -116.4359203887
Correct output: 29.5496488004  | Program output: 39.2220990082 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -42.5473433631
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -145.8513267506
Correct output: -16.4772789847 | Program output: -38.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction in2} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup float_dup integer_sub float_dup float_dup_items float_dup float_dup float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items integer_yankdup integer_rot integer_yankdup integer_dup_times float_dec float_dup integer_div integer_dup_times float_dec print_integer float_dup integer_div integer_inc float_dec float_dec float_dec integer_div float_dec float_dec integer_add print_integer float_dup float_dec float_dup integer_dup integer_rot float_dec float_dup_times float_dec print_integer float_dec float_shove float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add integer_div integer_rot float_dec integer_sub float_dup integer_div float_dec float_dec integer_add float_dup float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_rot float_dec float_dec integer_swap in2 float_dec integer_add integer_rot float_dec integer_dup_items float_dec float_dup float_dec float_dup integer_swap float_yankdup float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [29.0 3 37.0 2 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 10.0 1 21.174 10 2.0 1 32.0 2 25.0 2 2.5399 9 1.0 2 19.0 2 2.9487 10 4.0 2 31.0 3 9.6725 10 0.5077 8 33.0 2 3.9588 11 28.0 2 22.0 2 29.0 2]
Total: 599.2918999999999
Mean: 11.985838
Genome size: 173
Size: 174
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3445.1801420999996
Median total errors in population: 683.09065
Error averages by case: (149.4221085000001 6.286 139.11865569999992 5.376 132.11937919999988 4.332 112.73737219999954 10.063 138.22831989999978 5.019 128.7879793000008 10.012 140.96601290000066 10.548 143.54006140000013 5.468 127.6297857999994 10.303 109.55134750000002 5.193 137.72264329999996 5.423 147.0587733999998 5.503 113.58145389999967 9.487 111.53406519999997 4.227 141.02277700000016 5.44 109.84708690000036 9.543 131.9865625 5.438 145.85439969999996 6.02 127.72678160000014 10.639 115.59388469999863 11.931 131.15213959999986 5.466 122.07539029999974 5.58 163.87468979999997 5.635 120.49372880000004 5.753 130.07174299999997 4.798)
Error minima by case: (1.6738 2 0.2572 1 2.4635 1 0.7361 1 0.7632 2 0.3686 2 4.5052 8 0.0 0 5.0938 2 0.0 0 0.0605 1 0.8684 1 0.6254 2 0.1961 1 0.8805 1 0.0097 2 0.0 0 0.0 0 0.2716 1 0.1548 8 0.1402 1 0.2858 1 15.0 1 0.2216 1 0.7657 1)
Average genome size in population (length): 177.522
Average program size in population (points): 178.522
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 199.8898709961017
Average age in population: 193.3885574122389
Median age in population: 197.7394500402548
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.727
Error (vector) diversity:			 0.731
Behavioral diversity:				 0.733
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 426697362
--- Timings ---
Current time: 1529615512411 milliseconds
Total Time:         685.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       199.8 seconds, 29.2%
Fitness Testing:    387.0 seconds, 56.5%
Report:              98.2 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 41218.09259999999
Test mean error for best: 20.60905
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -72.6738378996
Correct output: -31.2572440177 | Program output: -68.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -118.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -25.9825817496
Correct output: -36.0605266238 | Program output: -68.0605266238
Correct output: -98.4940591545 | Program output: -73.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -77.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -92.7139415536
Correct output: -85.4359203887 | Program output: -116.4359203887
Correct output: 29.5496488004  | Program output: 39.2220990082 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -42.5473433631
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -145.8513267506
Correct output: -16.4772789847 | Program output: -38.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction in2} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup float_dup integer_sub float_dup float_dup_items float_dup float_dup float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items integer_yankdup integer_rot integer_yankdup integer_dup_times float_dec float_dup integer_div integer_dup_times float_dec print_integer float_dup integer_div integer_inc float_dec float_dec float_dec integer_div float_dec float_dec integer_add print_integer float_dup float_dec float_dup integer_dup integer_rot float_dec float_dup_times float_dec print_integer float_dec float_shove float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add integer_div integer_rot float_dec integer_sub float_dup integer_div float_dec float_dec integer_add float_dup float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_rot float_dec float_dec integer_swap in2 float_dec integer_add integer_rot float_dec integer_dup_items float_dec float_dup float_dec float_dup integer_swap float_yankdup float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [29.0 3 37.0 2 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 10.0 1 21.174 10 2.0 1 32.0 2 25.0 2 2.5399 9 1.0 2 19.0 2 2.9487 10 4.0 2 31.0 3 9.6725 10 0.5077 8 33.0 2 3.9588 11 28.0 2 22.0 2 29.0 2]
Total: 599.2918999999999
Mean: 11.985838
Genome size: 173
Size: 174
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3380.1517885999997
Median total errors in population: 676.2582
Error averages by case: (146.41642589999998 5.944 137.3594345999999 5.148 132.57548249999994 4.38 109.24060769999977 10.057 137.12812149999988 5.089 127.05205500000082 10.077 139.91253420000075 10.526 140.1443589000001 5.169 123.85265449999945 10.291 107.5435408 4.938 134.94572180000011 5.169 143.93109599999985 5.203 110.38734679999988 9.279 108.05768729999993 4.255 138.66698010000005 5.172 107.01084140000037 9.559 128.69985110000002 5.154 143.2097515000001 5.817 123.51993720000038 10.51 110.66278089999867 11.882 128.57527960000007 5.25 122.87002549999966 5.669 160.18384460000007 5.371 118.61293350000003 5.438 129.32949569999997 4.916)
Error minima by case: (6.6522 2 0.0 0 0.8044 1 0.7361 1 0.9231 1 0.1757 2 7.7341 7 0.0 0 0.7844 2 0.0 0 0.0 0 1.5224 1 0.0698 2 0.1961 2 1.7175 1 0.3716 2 0.0 0 1.0 1 0.2716 1 0.1392 8 0.0 0 0.1009 1 13.5754 1 0.0 0 0.7895 1)
Average genome size in population (length): 177.547
Average program size in population (points): 178.547
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 200.8507972337805
Average age in population: 195.5988484924975
Median age in population: 199.0039136910169
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.731
Error (vector) diversity:			 0.738
Behavioral diversity:				 0.741
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 431136137
--- Timings ---
Current time: 1529615518167 milliseconds
Total Time:         690.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       201.2 seconds, 29.1%
Fitness Testing:    390.5 seconds, 56.5%
Report:              99.0 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 41218.09259999999
Test mean error for best: 20.60905
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -72.6738378996
Correct output: -31.2572440177 | Program output: -68.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -118.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -25.9825817496
Correct output: -36.0605266238 | Program output: -68.0605266238
Correct output: -98.4940591545 | Program output: -73.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -77.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -92.7139415536
Correct output: -85.4359203887 | Program output: -116.4359203887
Correct output: 29.5496488004  | Program output: 39.2220990082 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -42.5473433631
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -145.8513267506
Correct output: -16.4772789847 | Program output: -38.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction in2} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup float_dup integer_sub float_dup float_dup_items float_dup float_dup float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_281 integer_sub float_dup_times float_dup_items integer_yankdup integer_rot integer_yankdup integer_dup_times float_dec float_dup integer_div integer_dup_times float_dec print_integer float_dup integer_div integer_inc float_dec float_dec float_dec integer_div float_dec float_dec integer_add print_integer float_dup float_dec float_dup integer_dup integer_rot float_dec float_dup_times float_dec print_integer float_dec float_shove float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add integer_div integer_rot float_dec integer_sub float_dup integer_div float_dec float_dec integer_add float_dup float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_rot float_dec float_dec integer_swap in2 float_dec integer_add integer_rot float_dec integer_dup_items float_dec float_dup float_dec float_dup integer_swap float_yankdup float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [29.0 3 37.0 2 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 10.0 1 21.174 10 2.0 1 32.0 2 25.0 2 2.5399 9 1.0 2 19.0 2 2.9487 10 4.0 2 31.0 3 9.6725 10 0.5077 8 33.0 2 3.9588 11 28.0 2 22.0 2 29.0 2]
Total: 599.2918999999999
Mean: 11.985838
Genome size: 173
Size: 174
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3046.3860188
Median total errors in population: 672.9496
Error averages by case: (130.97897020000008 5.917 125.18345879999987 5.088 118.86037999999999 4.331 95.4880196999997 10.207 123.84554299999999 4.992 113.56622450000081 10.15 128.69652800000148 10.607 127.82303160000001 5.149 111.8677967999994 10.394 94.2203653 4.717 122.39142230000007 5.116 130.50311719999988 5.186 96.52615419999975 9.4 93.63950699999997 4.12 124.12379769999998 5.13 93.57456820000046 9.546 115.56349059999995 5.105 128.62840059999994 5.772 111.03833200000042 10.623 98.91894239999881 11.876 116.9037724999999 5.13 105.32883679999962 5.706 145.96671229999993 5.262 106.3375545 5.326 116.7470926 4.814)
Error minima by case: (0.5124 2 0.3451 1 0.6292 1 0.5587 2 6.4515 1 0.0052 2 1.2734 7 0.0 0 1.0867 2 0.0 0 0.0579 1 2.6674 1 0.534 2 0.1961 1 3.6609 1 0.3716 1 0.0 0 0.8914 1 0.2716 1 0.0308 8 0.0208 1 0.2858 2 15.0 1 0.0 0 4.9548 1)
Average genome size in population (length): 178.182
Average program size in population (points): 179.182
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 202.1994681445634
Average age in population: 198.5000062019133
Median age in population: 200.3547092382629
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.741
Error (vector) diversity:			 0.755
Behavioral diversity:				 0.757
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 435591087
--- Timings ---
Current time: 1529615524215 milliseconds
Total Time:         696.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       202.7 seconds, 29.1%
Fitness Testing:    394.2 seconds, 56.6%
Report:              99.8 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 39855.60890000001
Test mean error for best: 19.92780
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -72.6738378996
Correct output: -31.2572440177 | Program output: -41.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -118.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -25.9825817496
Correct output: -36.0605266238 | Program output: -48.0605266238
Correct output: -98.4940591545 | Program output: -73.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 90.420675275  
Correct output: -96.7391381937 | Program output: -77.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -92.7139415536
Correct output: -85.4359203887 | Program output: -98.4359203887
Correct output: 29.5496488004  | Program output: 39.2220990082 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -19.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -145.8513267506
Correct output: -16.4772789847 | Program output: -34.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction tag_integer_477} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add integer_stackdepth float_dec float_rot integer_max integer_rot float_dec integer_sub float_dec integer_sub float_dup float_dec integer_sub float_dup integer_yankdup float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup integer_pop float_dup tagged_281 integer_sub float_dup_times integer_min float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_min integer_mult float_dec float_dup float_dup_items integer_dup_times float_dec float_stackdepth integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec tag_integer_477 integer_inc float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_sub integer_add integer_add float_dup integer_rot float_dec float_dup integer_rot integer_rot float_dec integer_add integer_rot float_dec float_dup integer_swap float_yankdup float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [29.0 3 10.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 10.0 1 27.0058 10 2.0 1 12.0 2 25.0 2 0.9572 9 0.1961 8 19.0 2 4.6088 9 4.0 2 13.0 2 9.6725 10 3.1555 12 10.0 1 0.2858 8 28.0 2 18.0 2 29.0 2]
Total: 516.6167
Mean: 10.332334
Genome size: 174
Size: 175
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3119.5135353000005
Median total errors in population: 676.95965
Error averages by case: (137.56161890000013 5.999 128.20117289999982 5.176 120.35394849999992 4.367 100.24468999999965 10.086 126.02202630000001 5.04 117.79526780000077 9.933 126.6714216000013 10.561 130.3731322 5.134 114.39464639999942 10.442 94.0271137 4.921 125.63765209999997 5.102 134.19654149999982 5.188 99.3410274999998 9.402 98.86926449999996 4.239 129.70087890000005 5.137 97.74000260000052 9.488 119.19400349999992 5.124 133.45842979999998 5.881 113.76833040000041 10.683 98.91302499999897 11.85 116.30495690000001 5.151 110.4320664999996 5.759 150.4375081 5.283 106.8294995000001 5.409 118.9413102 4.749)
Error minima by case: (4.52 2 0.2699 1 0.9472 1 0.7361 2 0.6557 2 1.1303 2 2.6056 7 0.0 0 7.2347 2 0.0 0 0.0 0 0.203 1 0.6254 2 0.1961 1 4.0 1 0.3716 2 0.0 0 0.0 0 0.2716 2 0.1548 8 0.0 0 0.0585 2 13.0 1 0.1646 1 3.8721 2)
Average genome size in population (length): 178.342
Average program size in population (points): 179.342
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 203.5011446368291
Average age in population: 199.7793402382573
Median age in population: 201.6329460178672
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.973
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.973
Total error diversity:				 0.729
Error (vector) diversity:			 0.743
Behavioral diversity:				 0.744
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 440050162
--- Timings ---
Current time: 1529615530033 milliseconds
Total Time:         702.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       204.1 seconds, 29.0%
Fitness Testing:    397.7 seconds, 56.6%
Report:             100.7 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 40379.24310000004
Test mean error for best: 20.18962
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -74.6738378996
Correct output: -31.2572440177 | Program output: -37.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -120.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -26.9825817496
Correct output: -36.0605266238 | Program output: -49.0605266238
Correct output: -98.4940591545 | Program output: -75.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -79.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -94.7139415536
Correct output: -85.4359203887 | Program output: -99.4359203887
Correct output: 29.5496488004  | Program output: 38.1775593052 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -14.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -147.8513267506
Correct output: -16.4772789847 | Program output: -32.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_223} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_swap} {:instruction in2} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_sub float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_yank float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dec float_dup integer_rot float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_223 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec integer_dup_times float_dec float_dec float_dec float_dup integer_rot float_dec integer_flush float_dec float_dup float_dup float_dec integer_sub integer_dup integer_rot float_dec float_dup_times float_dec tagged_236 integer_add print_integer float_dup float_dec float_dup float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_yank integer_add float_dup integer_rot float_dec float_stackdepth float_dup integer_div float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_rot integer_dup integer_pop float_dec integer_swap in2 float_dec integer_add integer_rot float_dec float_dup float_dec float_dup float_dec integer_shove integer_swap float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger float_dup float_dec float_dup integer_dup integer_shove integer_swap float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [27.0 3 6.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 8.0 1 27.0058 10 1.0 1 13.0 2 23.0 2 2.5399 9 1.0 2 17.0 2 4.6088 9 6.0 2 14.0 2 8.6279 11 3.1555 12 5.0 2 34.0 2 26.0 2 16.0 2 29.0 2]
Total: 523.6729
Mean: 10.473458
Genome size: 196
Size: 197
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 2927.1441165999995
Median total errors in population: 672.5866000000001
Error averages by case: (127.37976039999994 5.993 120.10453879999977 5.215 114.80053229999997 4.285 90.7693142000003 10.148 120.0829854 4.963 108.87654150000074 10.077 121.10270920000136 10.556 124.3562129 5.249 105.15637049999951 10.341 85.93308759999998 4.97 117.58604879999996 5.258 126.03929909999981 5.274 92.14308229999969 9.422 94.47883980000002 4.245 120.00464390000005 5.178 88.09084390000062 9.578 112.15654470000005 5.309 125.38473819999984 5.812 105.55952400000027 10.595 89.19278109999968 11.836 108.40864239999999 5.299 103.38430969999975 5.743 142.54129650000007 5.341 99.23317280000009 5.487 113.50229660000002 4.702)
Error minima by case: (0.6738 2 0.0 0 0.1526 1 0.2482 2 5.6588 1 2.7113 2 6.7009 8 0.0 0 6.7527 2 0.0 0 0.0 0 0.203 1 0.5507 2 0.1961 1 4.4045 1 0.3716 2 0.0 0 0.0 0 0.2656 1 0.109 8 0.0162 1 0.2858 2 14.0 1 0.099 1 0.9015 1)
Average genome size in population (length): 177.968
Average program size in population (points): 178.968
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 205.0342850749888
Average age in population: 201.0168713029162
Median age in population: 202.8754617074804
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.742
Error (vector) diversity:			 0.746
Behavioral diversity:				 0.748
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 444499787
--- Timings ---
Current time: 1529615536069 milliseconds
Total Time:         708.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       205.5 seconds, 29.0%
Fitness Testing:    401.3 seconds, 56.6%
Report:             101.6 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 39144.3188
Test mean error for best: 19.57216
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -73.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -119.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -26.9825817496
Correct output: -36.0605266238 | Program output: -38.0605266238
Correct output: -98.4940591545 | Program output: -74.4940591545
Correct output: 118.444904963  | Program output: 124.1500562454
Correct output: 90.2245669646  | Program output: 90.420675275  
Correct output: -96.7391381937 | Program output: -78.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -93.7139415536
Correct output: -85.4359203887 | Program output: -87.4359203887
Correct output: 29.5496488004  | Program output: 38.1775593052 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -12.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -146.8513267506
Correct output: -16.4772789847 | Program output: -32.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_add} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction tagged_357} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_223} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_swap} {:instruction in2} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_add integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items tagged_357 integer_yankdup float_dec float_dup float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_223 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec integer_flush float_dec float_dup float_dup float_dec integer_sub integer_dup integer_rot float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_yank integer_add float_dup integer_rot float_dec float_stackdepth float_dup integer_div float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_rot integer_dup integer_pop float_dec integer_swap in2 float_dec integer_add integer_rot float_dec float_dup float_dec float_dup float_dec integer_shove integer_swap float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [28.0 3 3.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 9.0 2 27.0058 10 1.0 1 2.0 1 24.0 2 5.7052 12 0.1961 8 18.0 2 4.6088 9 5.0 2 2.0 1 8.6279 11 3.1555 12 3.0 2 34.0 2 27.0 2 16.0 2 29.0 2]
Total: 510.03430000000003
Mean: 10.200686
Genome size: 184
Size: 185
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 2841.5959852000015
Median total errors in population: 694.3358499999999
Error averages by case: (123.52654970000005 6.079 113.56843359999979 5.239 112.75208499999991 4.39 90.70084840000052 10.163 115.83324840000004 5.312 106.99752480000069 9.91 116.5228572000013 10.549 119.54637770000001 5.287 100.82719209999945 10.381 85.20900540000004 5.044 111.38339159999995 5.3 121.49235499999979 5.33 91.84135699999976 9.107 88.59622170000003 4.386 116.91430370000006 5.265 87.34152110000068 9.517 107.39248460000003 5.303 120.74565109999989 5.924 102.35359960000022 10.602 87.21769899999975 11.733 103.66133300000001 5.332 98.32796699999969 5.598 140.39104859999992 5.408 95.73141900000006 5.548 111.0685109 4.946)
Error minima by case: (1.4395 2 0.0 0 1.5526 1 0.7361 2 3.7879 1 0.3686 2 6.7009 8 0.0 0 6.7527 2 0.0 0 0.0 0 0.203 1 0.6254 2 0.1961 1 6.0 1 0.3716 2 0.0 0 0.8914 1 0.2716 1 0.1548 7 0.4369 1 0.0749 1 15.0 1 0.1175 1 3.6966 1)
Average genome size in population (length): 176.621
Average program size in population (points): 177.621
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 206.1769716418565
Average age in population: 200.6809338718842
Median age in population: 204.1514581215996
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.767
Error (vector) diversity:			 0.773
Behavioral diversity:				 0.776
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 448915912
--- Timings ---
Current time: 1529615541933 milliseconds
Total Time:         714.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       207.0 seconds, 29.0%
Fitness Testing:    404.9 seconds, 56.7%
Report:             102.6 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 36925.92679999999
Test mean error for best: 18.46296
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -76.6738378996
Correct output: -31.2572440177 | Program output: -37.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -122.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -28.9825817496
Correct output: -36.0605266238 | Program output: -39.0605266238
Correct output: -98.4940591545 | Program output: -77.4940591545
Correct output: 118.444904963  | Program output: 122.5674160943
Correct output: 90.2245669646  | Program output: 89.3720103938 
Correct output: -96.7391381937 | Program output: -81.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -96.7139415536
Correct output: -85.4359203887 | Program output: -89.4359203887
Correct output: 29.5496488004  | Program output: 36.088479899  
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -13.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -149.8513267506
Correct output: -16.4772789847 | Program output: -33.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_223} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_min} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_swap} {:instruction in2} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div float_dec integer_sub float_dup float_dec float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup float_dup integer_sub float_dup float_dup_items float_dup float_dup float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup float_dup integer_rot float_dup integer_pop float_dup tagged_281 integer_sub float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_223 integer_sub float_dup_times float_min float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec integer_flush float_dec float_dup float_dup float_dec integer_sub integer_dup integer_rot float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_yank integer_add float_dup integer_rot float_dec float_stackdepth float_dup integer_div float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_rot integer_dup integer_pop float_dec integer_swap in2 float_dec integer_add integer_rot float_dec float_dup float_dec float_dup float_dec integer_shove integer_swap float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [25.0 3 6.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 6.0 1 21.174 10 1.0 1 3.0 1 21.0 2 4.1225 9 0.8526 11 15.0 2 2.9487 10 8.0 2 4.0 1 6.5388 11 0.5077 8 4.0 2 34.0 2 24.0 2 17.0 2 29.0 2]
Total: 486.6346
Mean: 9.732692
Genome size: 187
Size: 188
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 2862.7838328999997
Median total errors in population: 670.2273
Error averages by case: (124.4271578000001 5.832 112.71908179999988 5.093 113.08740909999997 4.15 91.72374930000018 10.082 119.61740029999996 5.147 108.49044140000056 9.925 121.16333800000118 10.441 120.44847019999999 5.183 105.38476709999946 10.29 86.06040530000003 4.875 110.9240063 5.108 122.08907709999984 5.155 91.05799649999994 9.104 85.81607160000003 4.481 115.78073870000003 5.063 88.86221770000046 9.49 107.04298810000007 5.1 118.44279900000002 5.614 100.21278530000001 10.458 92.78338469999952 11.561 105.06859450000003 5.199 105.81266379999968 5.411 138.52643849999993 5.238 96.21998440000003 5.435 112.92186640000003 4.665)
Error minima by case: (2.3927 2 0.7155 1 5.7043 1 0.7361 2 1.6659 2 0.3686 2 1.1911 8 0.0 0 5.9518 2 0.0 0 0.0 0 0.7871 1 0.5507 2 0.1299 1 2.542 1 0.3716 2 0.0 0 0.0 1 0.0 0 0.1392 6 0.0 0 0.2858 1 3.7585 1 0.0 0 0.5562 1)
Average genome size in population (length): 177.303
Average program size in population (points): 178.303
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 207.4448772414257
Average age in population: 203.6861215846069
Median age in population: 205.5501314553265
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.808
Error (vector) diversity:			 0.813
Behavioral diversity:				 0.815
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 453348662
--- Timings ---
Current time: 1529615547855 milliseconds
Total Time:         720.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       208.5 seconds, 28.9%
Fitness Testing:    408.4 seconds, 56.7%
Report:             103.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 36168.21979999995
Test mean error for best: 18.08411
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -79.6738378996
Correct output: -31.2572440177 | Program output: -39.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -125.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -32.9825817496
Correct output: -36.0605266238 | Program output: -42.0605266238
Correct output: -98.4940591545 | Program output: -80.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 91.4693401562 
Correct output: -96.7391381937 | Program output: -84.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -99.7139415536
Correct output: -85.4359203887 | Program output: -93.4359203887
Correct output: 29.5496488004  | Program output: 31.9103210868 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -15.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -152.8513267506
Correct output: -16.4772789847 | Program output: -35.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction tag_integer_477} {:instruction integer_inc} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_swap} {:instruction in2} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup integer_pop float_dup tagged_281 integer_sub float_dup_times integer_dup float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dec float_dup float_dec float_dup float_dec tagged_236 integer_add print_integer integer_yankdup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec tag_integer_477 integer_inc integer_pop float_dec float_dup_times float_dec integer_rot integer_rot float_dec float_dec float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup float_yank float_dup integer_rot float_dec integer_div float_dec float_dup float_dup_items integer_yank integer_add float_dup integer_rot float_dec float_stackdepth float_dup integer_div float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_rot integer_dup integer_pop float_dec integer_swap in2 float_dec integer_add integer_rot float_dec float_dup float_dec float_dup float_dec integer_shove integer_swap float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [22.0 3 8.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 3.0 1 21.174 10 5.0 2 6.0 2 18.0 2 0.9572 9 1.2448 10 12.0 2 2.9487 10 11.0 2 8.0 2 2.3607 12 0.5077 8 6.0 2 34.0 2 21.0 2 19.0 2 29.0 2]
Total: 487.6834
Mean: 9.753668
Genome size: 195
Size: 196
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3149.2356124
Median total errors in population: 696.84735
Error averages by case: (138.47444219999986 6.087 123.26372209999991 5.199 122.90595809999992 4.553 101.62069029999974 10.271 128.48912939999997 5.442 117.83011460000044 10.039 127.05344150000123 10.481 136.1886215 5.452 114.46068719999943 10.336 95.86029359999996 5.17 122.86071740000008 5.247 137.13072229999986 5.404 101.78723470000006 9.247 101.16666230000004 4.991 131.19718230000007 5.257 98.8692394000002 9.742 121.93994680000003 5.363 131.8790760999999 5.767 117.84136090000041 10.434 98.10465369999925 11.466 111.65186650000001 5.355 114.33456149999968 5.349 154.44437350000004 5.506 106.3279453 5.606 120.81796919999988 4.971)
Error minima by case: (0.4912 2 0.0 0 1.0116 1 0.5801 1 3.3412 2 0.0842 2 1.5702 8 0.0 0 6.7527 2 0.0 0 0.0 0 0.203 1 0.6254 2 0.1961 1 4.4435 1 0.3716 1 0.0 0 0.0 0 0.2716 1 0.1392 8 0.4898 1 0.2858 2 15.0 1 0.0 0 0.1247 2)
Average genome size in population (length): 176.002
Average program size in population (points): 177.002
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 208.7527438675076
Average age in population: 203.8303659213448
Median age in population: 206.9290159017413
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.832
Error (vector) diversity:			 0.836
Behavioral diversity:				 0.838
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 457749012
--- Timings ---
Current time: 1529615554057 milliseconds
Total Time:         726.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       209.9 seconds, 28.9%
Fitness Testing:    412.2 seconds, 56.7%
Report:             104.3 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 36253.33640000001
Test mean error for best: 18.12667
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -76.6738378996
Correct output: -31.2572440177 | Program output: -36.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -122.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -28.9825817496
Correct output: -36.0605266238 | Program output: -39.0605266238
Correct output: -98.4940591545 | Program output: -77.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -81.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -96.7139415536
Correct output: -85.4359203887 | Program output: -87.4359203887
Correct output: 29.5496488004  | Program output: 36.088479899  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -11.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -149.8513267506
Correct output: -16.4772789847 | Program output: -18.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction tag_integer_477} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dup float_dup integer_sub float_dup float_dup_items float_dup float_dup float_dup integer_stackdepth integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup integer_pop float_dup integer_rot float_dup integer_pop float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items float_dup_items float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_min integer_mult float_dec float_dec float_stackdepth integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec tag_integer_477 integer_inc float_dec float_dec integer_add float_dup float_dec integer_pop integer_div float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_sub integer_add integer_add float_dup integer_rot float_dec float_dup integer_rot integer_rot float_dec integer_add integer_rot float_dec float_dup integer_swap float_yankdup float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [25.0 3 5.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 6.0 1 27.0058 10 1.0 1 3.0 1 21.0 2 0.9572 9 1.0 2 15.0 2 4.6088 9 8.0 2 2.0 1 6.5388 11 3.1555 12 2.0 2 34.0 2 24.0 2 2.0 1 29.0 2]
Total: 469.0011
Mean: 9.380022
Genome size: 192
Size: 193
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3653.3005853
Median total errors in population: 728.2551
Error averages by case: (160.33105169999993 6.369 135.64945109999994 5.206 145.85834130000003 4.728 121.28918959999946 10.348 149.38676360000002 5.509 138.18766890000032 10.191 149.49887550000045 10.605 157.23962140000017 5.797 135.57614569999967 10.365 120.69009840000007 5.648 136.20105340000015 5.385 158.31910349999995 5.576 122.55642560000005 9.265 114.9546599999999 5.849 152.62669700000018 5.541 118.64809639999989 9.87 143.67425690000005 5.554 145.55617780000006 5.69 138.88406670000026 10.552 122.15567069999885 11.649 126.95787200000004 5.495 135.93849919999985 5.294 175.8760384000002 5.788 125.37267890000004 5.935 144.42608159999983 5.237)
Error minima by case: (3.3262 2 0.0 0 5.5171 1 0.7361 2 0.9478 2 0.3686 2 4.2905 8 0.0 0 1.6323 2 0.0 0 0.0 0 1.4941 1 0.6254 2 0.0464 2 1.3825 1 0.3716 2 0.0 0 0.0 0 0.2716 1 0.0845 8 0.0 0 0.0749 1 12.0 1 0.0 0 3.479 1)
Average genome size in population (length): 176.656
Average program size in population (points): 177.656
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 210.3411752898404
Average age in population: 205.5164150160658
Median age in population: 208.457669507319
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.99
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.99
Total error diversity:				 0.877
Error (vector) diversity:			 0.883
Behavioral diversity:				 0.885
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 462165762
--- Timings ---
Current time: 1529615560327 milliseconds
Total Time:         732.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       211.4 seconds, 28.9%
Fitness Testing:    415.9 seconds, 56.8%
Report:             105.3 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 36262.975900000005
Test mean error for best: 18.13149
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -75.6738378996
Correct output: -31.2572440177 | Program output: -36.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -121.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -37.0605266238
Correct output: -98.4940591545 | Program output: -76.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -80.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -95.7139415536
Correct output: -85.4359203887 | Program output: -87.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -11.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -148.8513267506
Correct output: -16.4772789847 | Program output: -15.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_div} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction tag_integer_477} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_div float_shove float_dec float_rot integer_max integer_rot integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dup float_dup integer_sub float_dup float_dup_items float_dup float_dup float_dup integer_stackdepth integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup integer_pop float_dup integer_rot float_dup integer_pop float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items float_dup_items float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_min integer_mult float_dec float_dec float_stackdepth integer_add integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_dec float_dec float_dup_times float_dec tag_integer_477 integer_inc float_dec float_dec integer_add float_dup float_dec integer_pop integer_div float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot integer_inc float_dec integer_add integer_rot float_dup float_dec float_dup integer_sub integer_add integer_add float_dup integer_rot float_dec float_dup integer_rot integer_rot float_dec integer_add integer_rot float_dec float_dup integer_swap float_yankdup float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [26.0 3 5.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 7.0 1 27.0058 10 0.0 0 1.0 1 22.0 2 0.9572 9 1.0 2 16.0 2 4.6088 9 7.0 2 2.0 1 7.5834 11 3.1555 12 2.0 2 34.0 2 25.0 2 1.0 1 29.0 2]
Total: 469.0457
Mean: 9.380914
Genome size: 192
Size: 193
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4099.527105900001
Median total errors in population: 736.3367499999999
Error averages by case: (180.10240109999987 6.429 152.90712459999986 5.284 166.23548480000017 5.077 138.41038099999938 10.359 169.87871399999983 5.829 154.60050970000006 10.202 164.63164889999962 10.548 173.46991200000028 5.813 152.20101780000078 10.447 140.83771819999993 5.692 154.47705620000002 5.457 176.55719000000002 5.703 141.24971890000018 9.309 132.14372599999984 6.474 171.37118460000022 5.608 135.5343167999994 9.896 160.9841353 5.622 162.30055580000004 5.63 157.85769380000013 10.566 138.74524229999815 11.572 141.36337579999991 5.662 154.5775414999999 5.395 192.21568840000015 5.856 142.61464950000007 6.072 164.24211890000007 5.516)
Error minima by case: (3.3262 2 0.0 0 10.4594 1 0.7361 2 1.6588 1 0.3686 2 8.0342 7 0.0 0 6.7527 2 0.0 0 0.0 0 1.4941 1 0.5507 2 0.1693 2 9.0 1 0.3716 2 0.0 0 0.0 0 0.2716 1 0.0845 8 0.0 0 0.2858 1 7.0246 1 0.0 0 4.8753 1)
Average genome size in population (length): 175.412
Average program size in population (points): 176.412
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 211.6750984255098
Average age in population: 202.4130647673548
Median age in population: 209.7476935832245
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.876
Error (vector) diversity:			 0.88
Behavioral diversity:				 0.882
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 466551587
--- Timings ---
Current time: 1529615566382 milliseconds
Total Time:         739.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       212.9 seconds, 28.8%
Fitness Testing:    419.5 seconds, 56.8%
Report:             106.5 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 39642.7311
Test mean error for best: 19.82137
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -75.6738378996
Correct output: -31.2572440177 | Program output: -31.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -121.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -28.9825817496
Correct output: -36.0605266238 | Program output: -35.0605266238
Correct output: -98.4940591545 | Program output: -76.4940591545
Correct output: 118.444904963  | Program output: 127.3153365476
Correct output: 90.2245669646  | Program output: 89.3720103938 
Correct output: -96.7391381937 | Program output: -80.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -95.7139415536
Correct output: -85.4359203887 | Program output: -85.4359203887
Correct output: 29.5496488004  | Program output: 36.088479899  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -9.5473433631 
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -148.8513267506
Correct output: -16.4772789847 | Program output: -31.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_add} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction integer_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction tagged_357} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction tagged_223} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_rot} {:instruction print_integer} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction print_integer} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction tag_integer_477} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction integer_add} {:instruction float_yank} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_add integer_div float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot integer_min float_dec float_dec float_dup_items float_dup float_dec integer_mult float_dup integer_sub float_dup integer_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items tagged_357 integer_yankdup float_dec float_dup float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup float_dup_items float_dup tagged_223 integer_dec float_dup_times float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_dup_items integer_div float_dec float_dec float_dec integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec integer_flush float_dec float_dup float_dup float_dec integer_sub integer_dup integer_rot print_integer float_dup integer_div integer_inc float_dec float_dec float_dec integer_div float_dec float_dec integer_add print_integer integer_min float_dec float_dup float_dec tag_integer_477 integer_inc float_dec float_dec integer_dup integer_rot float_dec float_dup_times float_dec print_integer integer_add float_yank integer_add float_dup integer_rot float_dec float_dup integer_rot float_dec float_dec print_integer integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_sub float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [26.0 3 0.0 0 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 7.0 1 27.0058 10 1.0 1 1.0 1 22.0 2 8.8704 11 0.8526 11 16.0 2 4.6088 9 7.0 2 0.0 0 6.5388 11 3.1555 12 0.0 0 0.2858 8 25.0 2 15.0 2 29.0 2]
Total: 463.0527
Mean: 9.261054
Genome size: 187
Size: 188
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3572.924816500001
Median total errors in population: 727.8472999999999
Error averages by case: (156.5304071999999 6.49 123.0222312999999 4.856 142.7386296 4.794 125.36883369999983 10.474 146.8650916999999 5.447 143.4346157000001 10.204 148.26501440000047 10.554 154.56466700000007 5.833 133.38862409999953 10.404 118.89627070000007 5.674 124.81499450000008 5.21 153.9844207 5.718 120.78275690000001 9.563 114.26740819999999 6.494 149.2059058000001 5.65 122.17254959999988 9.893 140.0173114000001 5.615 134.37442109999998 5.376 134.1309988000003 10.755 119.16488769999926 11.387 115.3144434 5.432 137.63243359999987 5.313 173.61865060000017 5.888 119.48881529999998 6.026 142.58543349999994 5.245)
Error minima by case: (4.5221 2 0.0 0 0.6642 1 0.7361 2 0.1013 1 1.1303 2 5.378 8 0.0 0 0.7527 2 0.0 0 0.0 0 1.1165 1 0.5507 2 0.1961 1 0.4126 1 0.3716 2 0.0 0 0.0 0 0.2656 1 0.0845 8 0.0 0 0.2858 2 16.0 1 0.0 0 1.8645 1)
Average genome size in population (length): 176.735
Average program size in population (points): 177.735
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 213.0133006502209
Average age in population: 202.657627760158
Median age in population: 211.1278880399564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.877
Error (vector) diversity:			 0.881
Behavioral diversity:				 0.885
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 470970487
--- Timings ---
Current time: 1529615572425 milliseconds
Total Time:         745.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       214.4 seconds, 28.8%
Fitness Testing:    423.2 seconds, 56.8%
Report:             107.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 38290.87170000002
Test mean error for best: 19.14544
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -77.6738378996
Correct output: -31.2572440177 | Program output: -36.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 75.8044324784 
Correct output: -128.9331639543 | Program output: -123.9331639543
Correct output: 88.7526738391  | Program output: 115.758451369 
Correct output: -27.9825817496 | Program output: -29.9825817496
Correct output: -36.0605266238 | Program output: -41.0605266238
Correct output: -98.4940591545 | Program output: -78.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -82.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -97.7139415536
Correct output: -85.4359203887 | Program output: -89.4359203887
Correct output: 29.5496488004  | Program output: 35.043940196  
Correct output: 69.5585020781  | Program output: 72.7139996823 
Correct output: -9.5473433631  | Program output: -13.5473433631
Correct output: 73.1938622402  | Program output: 72.9080518405 
Correct output: -173.8513267506 | Program output: -150.8513267506
Correct output: -16.4772789847 | Program output: -23.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 72.69774605952773} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_div} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_swap} {:instruction in2} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 72.69774605952773 float_rot integer_add float_shove float_dec float_rot integer_max integer_rot integer_rot float_dec integer_add integer_rot float_dec integer_sub float_dup float_dec integer_sub integer_mod float_dup_items float_dup float_dec float_stackdepth integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup integer_div float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup float_dup integer_sub float_dup_times float_dup_items float_dec float_dup integer_dup_items integer_add float_yank integer_div float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_min integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec integer_dup integer_rot float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_yank integer_add float_dup integer_rot float_dec float_stackdepth float_dup integer_div float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_rot integer_dup integer_pop float_dec integer_swap in2 float_dec integer_add integer_rot float_dec float_dec float_dup float_dec integer_shove integer_swap float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [24.0 3 5.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 46.1989 10 5.0 1 27.0058 10 2.0 1 5.0 2 20.0 1 0.9572 9 1.0 2 14.0 2 4.6088 9 9.0 2 4.0 1 5.4943 10 3.1555 12 4.0 2 0.2858 8 23.0 2 7.0 2 29.0 2]
Total: 448.24240000000003
Mean: 8.964848
Genome size: 195
Size: 196
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3357.8264016000003
Median total errors in population: 715.3892999999999
Error averages by case: (147.8887802 6.343 116.85376139999984 4.72 136.96339679999994 4.582 115.00434629999961 10.314 139.42450649999995 5.307 132.5736460000004 10.079 141.4363109000008 10.4 142.99378200000012 5.568 126.3267683999994 10.317 107.13278790000004 5.607 118.60273420000004 4.928 144.91060819999996 5.589 112.38615609999994 9.42 107.73347620000008 6.444 139.60292150000026 5.503 111.70595049999955 9.772 130.58284490000003 5.519 126.38281419999998 5.172 128.48914110000032 10.62 113.68533929999926 11.187 106.47390530000004 5.416 127.84003409999977 5.094 162.00005040000008 5.65 110.3833331000001 5.944 135.73200609999986 5.222)
Error minima by case: (1.6738 2 0.0 0 0.8773 1 0.7361 2 12.3461 1 0.3686 2 1.7669 8 0.0 0 1.0867 2 0.0 0 0.0 0 0.203 1 0.5507 2 0.1693 1 0.0635 1 0.2885 2 0.0 0 0.0 0 0.0 0 0.0845 8 0.0 0 0.2858 1 14.0 1 0.0 0 12.9003 1)
Average genome size in population (length): 179.151
Average program size in population (points): 180.151
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 214.8672157132127
Average age in population: 206.8985385307435
Median age in population: 212.4318967358238
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.987
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.987
Total error diversity:				 0.904
Error (vector) diversity:			 0.905
Behavioral diversity:				 0.908
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 475449837
--- Timings ---
Current time: 1529615578306 milliseconds
Total Time:         750.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       215.8 seconds, 28.7%
Fitness Testing:    426.8 seconds, 56.8%
Report:             108.2 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 37241.53890000001
Test mean error for best: 18.62077
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -76.6738378996
Correct output: -31.2572440177 | Program output: -37.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 154.0079013742
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 104.4943353073
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -122.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -40.0605266238
Correct output: -98.4940591545 | Program output: -77.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -81.7391381937
Correct output: 123.7897097488 | Program output: 119.180914295 
Correct output: -88.7139415536 | Program output: -96.7139415536
Correct output: -85.4359203887 | Program output: -90.4359203887
Correct output: 29.5496488004  | Program output: 37.1330196021 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -14.5473433631
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -149.8513267506
Correct output: -16.4772789847 | Program output: -17.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_div} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_yank} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dup} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_swap} {:instruction in2} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div float_dec integer_sub float_dup float_dec float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dup float_dec integer_sub integer_mod float_dup_items float_dup float_dec float_stackdepth integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup integer_div float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup float_dup integer_sub float_dup_times float_dup_items float_dec float_dup integer_dup_items integer_add float_yank integer_div float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_min integer_mult float_dec float_dup integer_flush float_dec float_dup tagged_236 integer_add print_integer float_dup float_dec integer_dup integer_rot float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_dup integer_yank integer_add float_dup integer_rot float_dec float_stackdepth float_dup integer_div integer_div float_dec integer_add integer_rot float_dup float_dec float_dup integer_div float_dec integer_div float_dec float_rot integer_dup integer_pop float_dec integer_swap in2 float_dec integer_add integer_rot float_dec float_dup float_dec float_dup float_dec integer_shove integer_swap float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [25.0 3 6.0 1 30.0 1 2.9273 10 31.0 2 29.6088 10 42.38 9 6.0 1 21.174 10 0.0 0 4.0 2 21.0 2 0.9572 9 1.0 2 15.0 2 4.6088 9 8.0 2 5.0 2 7.5834 11 0.5077 8 5.0 2 3.9588 11 24.0 2 1.0 1 29.0 2]
Total: 438.70599999999996
Mean: 8.77412
Genome size: 197
Size: 198
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3716.264615799999
Median total errors in population: 779.2597
Error averages by case: (163.34469689999992 6.721 131.30380809999994 5.04 148.96384569999987 4.859 126.78112339999949 10.467 152.5415964999999 5.51 144.49653660000035 10.165 150.4138417000009 10.449 162.23332389999996 6.019 137.7070917999999 10.418 124.81231220000014 5.947 133.37431720000004 5.286 163.4837049999999 5.95 126.61502030000011 9.648 112.90057429999982 6.689 158.23556850000028 5.928 124.3998993999991 9.884 148.8980843000001 5.972 141.50249040000003 5.351 143.55748450000038 10.659 121.35785209999919 10.992 122.21864169999995 5.516 142.31126699999993 5.126 182.17047730000021 6.089 124.61141490000009 6.172 147.75064209999994 5.422)
Error minima by case: (2.2008 2 0.0 0 7.7205 1 0.7361 2 0.8047 1 0.0842 2 6.5659 8 0.0 0 6.7527 2 0.0 0 0.0 0 2.4359 1 0.5507 2 0.1961 1 0.7391 1 0.3677 2 0.0 0 0.0 0 0.0 0 0.0845 8 0.0 0 0.2858 1 14.0 1 0.0 0 0.4228 1)
Average genome size in population (length): 179.165
Average program size in population (points): 180.165
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 215.8615983556818
Average age in population: 204.8377970013502
Median age in population: 213.7727750809426
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.987
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.987
Total error diversity:				 0.886
Error (vector) diversity:			 0.891
Behavioral diversity:				 0.897
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 479929312
--- Timings ---
Current time: 1529615584332 milliseconds
Total Time:         756.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       217.2 seconds, 28.7%
Fitness Testing:    430.5 seconds, 56.9%
Report:             109.1 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 35585.486899999974
Test mean error for best: 17.79274
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -80.6738378996
Correct output: -31.2572440177 | Program output: -33.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -126.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -32.9825817496
Correct output: -36.0605266238 | Program output: -36.0605266238
Correct output: -98.4940591545 | Program output: -81.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 90.420675275  
Correct output: -96.7391381937 | Program output: -85.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -100.7139415536
Correct output: -85.4359203887 | Program output: -85.4359203887
Correct output: 29.5496488004  | Program output: 31.9103210868 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -10.5473433631
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -153.8513267506
Correct output: -16.4772789847 | Program output: -16.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_min} {:instruction tagged_236} {:instruction integer_add} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_max} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction tag_integer_477} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div float_dec integer_sub float_dup float_dec float_dup float_dec float_dec integer_fromfloat float_shove float_dec integer_dec float_dup integer_rot float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup float_dup integer_sub float_dup float_dup_items float_dup float_dup float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup integer_inc float_dup float_dec float_dup float_dec integer_sub float_dup float_dup_items float_dec float_dup float_dup_items float_dec float_dec float_dup float_dup integer_rot float_dup integer_pop float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_min integer_mult float_dec float_dup integer_flush float_dec integer_min tagged_236 integer_add print_integer float_dup float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_max integer_sub integer_dup integer_rot float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec tag_integer_477 integer_inc float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec integer_div integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dup float_dup integer_rot float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dec float_dup float_dec float_dup float_dec integer_shove integer_swap float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_dup in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [21.0 2 2.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 2.0 1 21.174 10 5.0 2 0.0 0 17.0 2 0.9572 9 0.1961 8 11.0 2 2.9487 10 12.0 3 0.0 0 2.3607 12 0.5077 8 1.0 2 34.0 2 20.0 1 0.0 0 29.0 2]
Total: 429.6347
Mean: 8.592694
Genome size: 197
Size: 198
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4023.3167900999997
Median total errors in population: 776.6066
Error averages by case: (177.37156419999988 6.767 145.5600719000001 5.027 163.25716980000007 4.87 136.42503749999986 10.699 165.03409610000003 5.379 152.19527940000043 10.09 163.022441800001 10.353 172.70886480000004 5.976 150.47591039999958 10.435 135.58391290000003 6.05 149.90874850000006 5.214 174.56205449999993 5.971 137.42162000000002 9.735 126.75258919999992 6.86 170.6586600000001 5.951 132.92460359999916 9.972 160.8443010000001 5.98 156.20456110000006 5.394 156.81271770000006 10.649 135.9370421999996 10.672 135.7960429000001 5.718 150.11128489999987 5.146 192.57470849999999 6.133 136.8684444000001 6.236 163.5270627999998 5.501)
Error minima by case: (1.155 2 0.0 0 1.0023 1 0.7361 2 7.6049 1 0.3686 2 0.3944 8 0.0 0 4.4425 2 0.0 0 0.0 0 4.3347 1 0.6254 2 0.1961 2 6.0 1 0.3716 2 0.0 0 0.0 0 0.0 0 0.0845 8 0.0 0 0.1939 1 15.0 1 0.0 0 4.3884 2)
Average genome size in population (length): 176.672
Average program size in population (points): 177.672
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 217.3933191346336
Average age in population: 202.0808411691033
Median age in population: 215.1708667157233
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.871
Error (vector) diversity:			 0.878
Behavioral diversity:				 0.881
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 484346437
--- Timings ---
Current time: 1529615590390 milliseconds
Total Time:         762.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       218.7 seconds, 28.7%
Fitness Testing:    434.0 seconds, 56.9%
Report:             110.0 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 34906.68839999999
Test mean error for best: 17.45334
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -78.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -124.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -31.9825817496
Correct output: -36.0605266238 | Program output: -35.0605266238
Correct output: -98.4940591545 | Program output: -79.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -83.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -98.7139415536
Correct output: -85.4359203887 | Program output: -85.4359203887
Correct output: 29.5496488004  | Program output: 32.9548607898 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -8.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -151.8513267506
Correct output: -16.4772789847 | Program output: -25.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_dup} {:instruction float_swap} {:instruction float_dup} {:instruction tagged_223} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup integer_sub float_dup float_dup_items float_dup float_dup float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup_items float_dec float_dec integer_yankdup float_dec float_dup float_dup float_dup_items integer_yankdup integer_dup_times integer_rot float_dup float_swap float_dup tagged_223 integer_sub float_dup_times float_dup_items float_dec float_dup integer_div integer_dup_items float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec integer_dup_times float_dec float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_frominteger float_dec integer_rot integer_rot integer_pop float_dec integer_add integer_rot float_dec integer_flush float_dec float_dup float_dup float_dec integer_sub integer_dup integer_rot float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dec float_dup float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_sub integer_add integer_dec float_dup integer_rot float_dec float_dup integer_rot integer_rot float_dec float_dec float_dup integer_swap float_yankdup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [23.0 3 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 4.0 1 21.174 10 4.0 2 1.0 1 19.0 2 2.5399 9 1.0 2 13.0 2 2.9487 10 10.0 1 0.0 0 3.4052 9 0.5077 8 1.0 1 3.9588 11 22.0 2 9.0 2 29.0 2]
Total: 423.02459999999996
Mean: 8.460492
Genome size: 185
Size: 186
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3919.9068524999993
Median total errors in population: 785.11915
Error averages by case: (170.70434609999995 6.62 140.86186170000005 5.069 159.1888517999999 4.929 134.5934786999998 10.601 161.21893190000003 5.499 149.91496860000035 10.072 160.87739270000083 10.295 166.80519660000013 5.894 146.77530499999952 10.352 134.10422779999993 6.124 143.63342830000002 5.146 167.94486410000007 5.869 134.95040730000014 9.451 126.79370989999994 6.374 164.35742310000015 5.839 130.59127229999882 9.964 155.74515320000006 5.834 150.7873268 5.282 148.6213094000004 10.623 132.30173119999984 10.406 130.67506849999995 5.679 149.4307015999998 4.976 187.24800549999995 6.076 134.61903540000006 6.202 158.3968549999998 5.59)
Error minima by case: (2.7072 2 0.0 0 0.4562 1 0.7361 2 1.264 1 0.0842 2 0.1054 8 0.0 0 4.4425 2 0.0 0 0.0 0 2.4359 1 0.6254 2 0.1961 2 3.9366 1 0.3716 2 0.0 0 0.0 0 0.0859 1 0.1392 8 0.0 0 0.2858 1 15.0 1 0.0 0 1.0757 1)
Average genome size in population (length): 179.684
Average program size in population (points): 180.684
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 218.8859061865365
Average age in population: 206.7944521848246
Median age in population: 216.5374801615114
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.861
Error (vector) diversity:			 0.864
Behavioral diversity:				 0.869
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 488838824
--- Timings ---
Current time: 1529615596220 milliseconds
Total Time:         768.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       220.1 seconds, 28.6%
Fitness Testing:    437.6 seconds, 56.9%
Report:             111.0 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 35019.42069999998
Test mean error for best: 17.50971
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -83.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -129.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -36.9825817496
Correct output: -36.0605266238 | Program output: -35.0605266238
Correct output: -98.4940591545 | Program output: -84.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -88.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -103.7139415536
Correct output: -85.4359203887 | Program output: -83.4359203887
Correct output: 29.5496488004  | Program output: 27.7321622745 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -8.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -156.8513267506
Correct output: -16.4772789847 | Program output: -20.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_min} {:instruction float_dup} {:instruction tagged_281} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_swap float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup integer_sub float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup integer_inc integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dup float_dec float_dec float_dup integer_rot float_dup integer_min float_dup tagged_281 float_dup float_dup_times float_dup_items float_dec integer_mod float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_max float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup float_dec float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup float_dec integer_add float_dup float_dec float_dup integer_rot float_dec integer_div float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup float_dec float_dec float_dup integer_swap float_yankdup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [18.0 3 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 1.0 1 21.174 10 9.0 2 1.0 1 14.0 2 2.5399 9 1.0 2 8.0 2 2.9487 10 15.0 3 2.0 1 1.8175 11 0.5077 8 1.0 1 3.9588 11 17.0 2 4.0 2 29.0 2]
Total: 410.4369
Mean: 8.208738
Genome size: 179
Size: 180
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4027.7520069
Median total errors in population: 824.0193000000002
Error averages by case: (175.88446289999982 6.764 143.5086315 5.11 161.23346920000006 4.988 139.31211609999963 10.549 163.00337609999994 5.466 153.9742941000009 10.006 163.9839795000009 10.311 175.48255790000002 6.048 148.1956790999997 10.449 138.74309280000006 6.08 145.45339890000008 5.215 174.85162549999998 6.109 136.47345280000002 9.517 128.64948759999993 6.453 170.60597870000018 6.041 135.52433849999878 9.985 164.40117250000014 6.157 152.75690720000006 5.295 157.07662740000015 10.598 135.1271284999999 10.329 134.85740879999997 5.545 153.3761054 5.219 194.47326770000012 6.285 140.86416209999996 6.057 159.76228609999984 5.601)
Error minima by case: (2.5417 2 0.0 0 11.5406 1 0.7361 2 2.3543 2 0.1757 1 3.3944 7 0.0 0 6.7527 2 0.0 0 0.0 0 0.203 1 0.6254 2 0.1961 1 4.0 1 0.3716 2 0.0 0 0.0 0 0.0 0 0.1548 7 0.0 0 0.2858 1 13.0 1 0.0 0 7.5613 1)
Average genome size in population (length): 178.024
Average program size in population (points): 179.024
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 220.0940997938286
Average age in population: 205.497455738283
Median age in population: 217.8993180673859
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.872
Error (vector) diversity:			 0.88
Behavioral diversity:				 0.884
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 493289821
--- Timings ---
Current time: 1529615602294 milliseconds
Total Time:         774.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       221.5 seconds, 28.6%
Fitness Testing:    441.2 seconds, 56.9%
Report:             111.9 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 35019.42069999998
Test mean error for best: 17.50971
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -83.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -129.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -36.9825817496
Correct output: -36.0605266238 | Program output: -35.0605266238
Correct output: -98.4940591545 | Program output: -84.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -88.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -103.7139415536
Correct output: -85.4359203887 | Program output: -83.4359203887
Correct output: 29.5496488004  | Program output: 27.7321622745 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -8.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -156.8513267506
Correct output: -16.4772789847 | Program output: -20.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_min} {:instruction float_dup} {:instruction tagged_281} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_swap float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup integer_sub float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup integer_inc integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dup float_dec float_dec float_dup integer_rot float_dup integer_min float_dup tagged_281 float_dup float_dup_times float_dup_items float_dec integer_mod float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_max float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup float_dec float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup float_dec integer_add float_dup float_dec float_dup integer_rot float_dec integer_div float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup float_dec float_dec float_dup integer_swap float_yankdup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [18.0 3 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 1.0 1 21.174 10 9.0 2 1.0 1 14.0 2 2.5399 9 1.0 2 8.0 2 2.9487 10 15.0 3 2.0 1 1.8175 11 0.5077 8 1.0 1 3.9588 11 17.0 2 4.0 2 29.0 2]
Total: 410.4369
Mean: 8.208738
Genome size: 179
Size: 180
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4361.2562601
Median total errors in population: 712.3132499999999
Error averages by case: (187.72635879999987 6.802 158.06073409999996 5.46 174.47898719999998 5.101 154.16609119999936 10.689 175.35397509999987 5.622 168.57828490000085 10.143 178.30882380000085 10.322 184.52164640000015 6.014 165.4266506999998 10.379 153.45546400000006 6.172 160.87766799999991 5.325 184.95348250000015 5.998 150.91740630000012 9.504 142.90432310000008 6.622 180.34125500000016 5.996 150.63674499999914 10.037 175.1419421 6.127 170.0761127000002 5.536 167.63862920000008 10.669 152.4170635999986 10.204 148.70656800000003 5.768 169.90750269999995 5.21 201.57367999999997 6.229 150.27634870000003 6.144 173.027517 5.71)
Error minima by case: (3.3262 2 0.0 0 0.5352 1 0.7361 2 1.9502 2 0.0842 1 0.581 7 0.0 0 6.7527 2 0.0 0 0.0 0 1.1165 1 0.5507 2 0.1961 1 3.0 1 0.3716 2 0.0 0 0.0 0 0.1391 1 0.4923 8 0.0 0 0.2858 1 12.0 1 0.0 0 6.1193 1)
Average genome size in population (length): 177.969
Average program size in population (points): 178.969
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 221.244336044057
Average age in population: 203.8806681875828
Median age in population: 219.1867682051446
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.859
Error (vector) diversity:			 0.865
Behavioral diversity:				 0.871
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 497739571
--- Timings ---
Current time: 1529615608206 milliseconds
Total Time:         780.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       223.0 seconds, 28.6%
Fitness Testing:    444.9 seconds, 57.0%
Report:             112.9 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 35134.228199999976
Test mean error for best: 17.56711
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -82.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -128.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -35.9825817496
Correct output: -36.0605266238 | Program output: -35.0605266238
Correct output: -98.4940591545 | Program output: -83.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -87.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -102.7139415536
Correct output: -85.4359203887 | Program output: -83.4359203887
Correct output: 29.5496488004  | Program output: 28.7767019776 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -8.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -155.8513267506
Correct output: -16.4772789847 | Program output: -20.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_min} {:instruction float_dup} {:instruction tagged_281} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_div} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_swap float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup integer_sub float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup integer_inc integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dup float_dec float_dec float_dup integer_rot float_dup integer_min float_dup tagged_281 float_dup float_dup_times float_dup_items float_dec integer_mod float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_max float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup float_dec float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup float_dec integer_add float_dup integer_div float_dup integer_rot float_dec integer_div float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup float_dec float_dec float_dup integer_swap float_yankdup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [19.0 3 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 0.0 0 21.174 10 8.0 2 1.0 1 15.0 2 2.5399 9 1.0 2 9.0 2 2.9487 10 14.0 3 2.0 1 0.7729 11 0.5077 8 1.0 1 3.9588 11 18.0 2 4.0 2 29.0 2]
Total: 409.3923
Mean: 8.187846
Genome size: 179
Size: 180
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3974.9776890000003
Median total errors in population: 732.9926
Error averages by case: (167.63746619999992 6.644 144.49668399999996 5.166 163.22319669999993 4.918 139.22790149999966 10.601 164.83634289999995 5.53 154.33108660000062 10.046 164.67704370000163 10.148 166.43296190000012 5.804 149.95466479999953 10.242 138.2890552000001 6.109 144.0231750000002 5.081 165.3923061 5.897 137.40454120000015 9.485 129.4490021999999 6.419 161.0312917000002 5.868 135.7704078999986 10.029 158.07274389999995 6.036 151.24578189999997 5.25 146.82476040000017 10.491 137.6861386 9.904 135.51913209999995 5.601 155.0878485999998 5.043 185.15816380000004 6.046 138.22276800000003 5.997 163.0082240999999 5.62)
Error minima by case: (6.6738 2 0.0 0 0.5438 1 0.7361 2 7.3412 1 0.6986 1 6.6056 8 0.0 0 1.6095 2 0.0 0 0.0 0 1.1165 1 0.6254 2 0.1961 2 0.294 1 0.3716 2 0.0 0 0.0 0 0.0 0 0.0487 8 0.0 0 0.2858 1 10.0 1 0.0 0 4.6348 2)
Average genome size in population (length): 178.219
Average program size in population (points): 179.219
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 222.7110175142798
Average age in population: 205.3005659241636
Median age in population: 220.4560871537043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.988
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.988
Total error diversity:				 0.867
Error (vector) diversity:			 0.874
Behavioral diversity:				 0.877
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 502195396
--- Timings ---
Current time: 1529615614166 milliseconds
Total Time:         786.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       224.3 seconds, 28.5%
Fitness Testing:    448.5 seconds, 57.0%
Report:             113.7 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 35259.045699999995
Test mean error for best: 17.62952
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -81.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -127.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -34.9825817496
Correct output: -36.0605266238 | Program output: -35.0605266238
Correct output: -98.4940591545 | Program output: -82.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -86.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -101.7139415536
Correct output: -85.4359203887 | Program output: -83.4359203887
Correct output: 29.5496488004  | Program output: 29.8212416806 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -8.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -154.8513267506
Correct output: -16.4772789847 | Program output: -19.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_min} {:instruction float_dup} {:instruction tagged_281} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_div} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_swap float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup integer_sub float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup integer_inc integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dup float_dec float_dec float_dup integer_rot float_dup integer_min float_dup tagged_281 float_dup float_dup_times float_dup_items float_dec integer_mod float_dec float_dec float_dec integer_div float_dec float_yankdup float_dec float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_max float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup float_dec float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup float_dec integer_add float_dup integer_div float_dup integer_rot float_dec integer_div float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup float_dec float_dec float_dup integer_swap float_yankdup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [20.0 2 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 1.0 1 21.174 10 7.0 2 1.0 1 16.0 2 2.5399 9 1.0 2 10.0 1 2.9487 10 13.0 3 2.0 1 0.2716 8 0.5077 8 1.0 1 3.9588 11 19.0 2 3.0 1 29.0 2]
Total: 405.89099999999996
Mean: 8.11782
Genome size: 179
Size: 180
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4056.473151800001
Median total errors in population: 834.21315
Error averages by case: (174.86502060000015 6.976 141.055613 5.298 163.207332 5.137 143.87858129999984 10.622 162.13046949999995 5.64 159.27433780000072 10.087 169.21206850000132 10.092 172.23671010000015 6.124 152.92581199999958 10.33 142.45578890000013 6.443 141.24603740000003 5.293 173.33119789999998 6.204 140.29875690000006 9.351 132.91489609999996 6.46 167.69845480000015 6.079 139.61051029999905 10.096 164.96014780000002 6.403 150.9576453 5.46 157.7547496000001 10.617 141.3356885999999 9.821 135.91576999999998 5.647 157.00011029999982 5.223 190.18980040000008 6.328 138.65355470000006 6.187 161.725098 5.721)
Error minima by case: (11.0 2 0.0 0 0.4594 1 0.5291 2 1.3642 1 0.3686 1 6.5659 8 0.0 0 1.6998 2 0.0 0 0.0 0 3.4937 1 0.6254 2 0.0805 2 1.0 1 0.3716 2 0.0 0 0.0 0 0.0 0 0.3033 8 0.0 0 0.2858 1 10.0 1 0.0 0 5.1247 1)
Average genome size in population (length): 177.231
Average program size in population (points): 178.231
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 223.786624742254
Average age in population: 204.3249675632581
Median age in population: 221.8026383412397
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.988
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.988
Total error diversity:				 0.859
Error (vector) diversity:			 0.863
Behavioral diversity:				 0.867
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 506626196
--- Timings ---
Current time: 1529615620127 milliseconds
Total Time:         792.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       225.8 seconds, 28.5%
Fitness Testing:    452.2 seconds, 57.0%
Report:             114.7 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 35591.03929999996
Test mean error for best: 17.79552
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -88.6738378996
Correct output: -31.2572440177 | Program output: -32.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -134.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -41.9825817496
Correct output: -36.0605266238 | Program output: -35.0605266238
Correct output: -98.4940591545 | Program output: -89.4940591545
Correct output: 118.444904963  | Program output: 119.402135792 
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -93.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -108.7139415536
Correct output: -85.4359203887 | Program output: -83.4359203887
Correct output: 29.5496488004  | Program output: 22.5094637592 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -9.5473433631 
Correct output: 73.1938622402  | Program output: 39.1938622402 
Correct output: -173.8513267506 | Program output: -161.8513267506
Correct output: -16.4772789847 | Program output: -12.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction 35} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction tag_integer_477} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction tagged_329} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_cos float_rot integer_max integer_rot float_dup_items float_dec integer_sub float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec 35 float_dup float_dec integer_sub float_dec float_dec float_dup_items float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup_items float_dec integer_yankdup float_dec float_dup float_dup float_dup integer_inc float_dup integer_sub float_dup float_dup_items float_dec integer_yankdup float_dup float_dup_items float_dec integer_sub float_dup float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup integer_pop float_dec float_dup float_dec float_dec integer_pop float_dec float_dup float_dup_times integer_dup_times float_dec float_dec float_dup integer_div integer_min float_dec float_dec float_dec integer_dup_items integer_div float_dec float_dec float_dup_items integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup float_dec float_dec float_dup float_dec float_dup float_dec integer_pop float_dec integer_flush float_dec float_dup float_dup float_dec integer_sub integer_dup integer_rot float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_dec float_dec tag_integer_477 integer_inc float_dec float_dec integer_add float_dup float_dec float_dup integer_yank float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add float_dec integer_add integer_rot float_dec float_dup float_dec float_dup float_dec integer_shove integer_dec float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot tagged_329 float_pop float_cos float_cos float_div float_max print_float)
Errors: [13.0 3 1.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 6.0 2 21.174 10 14.0 2 1.0 1 9.0 2 0.9572 9 1.0 2 3.0 1 2.9487 10 20.0 2 2.0 1 7.0402 9 0.5077 8 0.0 0 34.0 2 12.0 2 4.0 1 29.0 2]
Total: 422.1181
Mean: 8.442362
Genome size: 198
Size: 199
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4608.389601500001
Median total errors in population: 752.7569
Error averages by case: (192.1694285999997 6.904 170.5161058999999 5.378 187.62962339999999 5.052 165.91566999999938 10.661 189.03710149999998 5.603 180.3774741000012 9.971 190.77327060000178 10.211 189.5986985999999 6.04 175.53556529999943 10.263 163.78079559999995 6.432 169.27905259999994 5.357 190.63920530000007 6.121 165.9075388 9.502 152.60041210000009 6.379 185.5454950000001 6.055 161.80464309999923 10.022 183.44298210000014 6.37 177.12908860000005 5.511 175.1913145999998 10.644 166.25240289999886 9.829 157.8090586999999 5.639 180.6530141999999 5.287 208.3509293 6.373 160.514236 6.14 186.52949459999994 5.663)
Error minima by case: (5.6738 2 0.0 0 3.5438 1 0.7361 2 1.4028 2 0.3686 1 3.5004 8 0.0 0 6.7527 2 0.0 0 0.0 0 3.4937 1 0.6254 2 0.1961 2 0.0 0 0.3716 2 0.0 0 0.0 0 0.0 0 0.3033 8 0.0 0 0.2858 1 9.0 1 0.0 0 4.6193 2)
Average genome size in population (length): 175.975
Average program size in population (points): 176.975
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 225.1233847022789
Average age in population: 204.0055819362338
Median age in population: 223.1532055252701
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.991
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.991
Total error diversity:				 0.853
Error (vector) diversity:			 0.86
Behavioral diversity:				 0.865
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 511025921
--- Timings ---
Current time: 1529615626312 milliseconds
Total Time:         798.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       227.3 seconds, 28.5%
Fitness Testing:    455.8 seconds, 57.1%
Report:             115.5 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 37081.376699999986
Test mean error for best: 18.54069
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -85.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -131.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -38.9825817496
Correct output: -36.0605266238 | Program output: -35.0605266238
Correct output: -98.4940591545 | Program output: -86.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -90.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -105.7139415536
Correct output: -85.4359203887 | Program output: -83.4359203887
Correct output: 29.5496488004  | Program output: 25.6430828684 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -8.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -158.8513267506
Correct output: -16.4772789847 | Program output: -18.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_min} {:instruction float_dup} {:instruction tagged_281} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction tag_integer_477} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction tagged_329} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_swap float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup integer_sub float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup integer_inc integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dup float_dec float_dec float_dup integer_rot float_dup integer_min float_dup tagged_281 float_dup float_dup_times float_dup_items float_dec integer_mod float_dup float_dup_times float_dup_items float_dec integer_mod float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_swap float_dec float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_max float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup float_dec float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec integer_add float_dec float_dup integer_rot float_dec float_dec integer_dec float_dec tag_integer_477 integer_inc float_dec float_dec integer_add float_dup float_dec float_dup integer_yank float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add float_dec integer_add integer_rot float_dec float_dup float_dec float_dup float_dec integer_shove integer_dec float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot tagged_329 float_pop float_cos float_cos float_div float_max print_float)
Errors: [16.0 3 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 3.0 2 21.174 10 11.0 2 1.0 1 12.0 2 2.5399 9 1.0 2 6.0 1 2.9487 10 17.0 3 2.0 1 3.9066 8 0.5077 8 1.0 1 3.9588 11 15.0 2 2.0 1 29.0 2]
Total: 404.526
Mean: 8.09052
Genome size: 189
Size: 190
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4314.5584592000005
Median total errors in population: 649.2597999999999
Error averages by case: (183.2973949 6.738 155.912643 5.105 174.25840330000014 4.94 152.09382259999953 10.664 174.1742525 5.337 168.22932540000085 9.991 178.1828543000015 10.056 178.32900809999992 5.845 163.15947839999941 10.275 155.0235129000002 6.281 156.8034956000001 4.967 180.41375480000002 5.959 149.99952770000016 9.283 144.23141750000005 6.146 175.37506110000024 5.833 147.93755739999926 9.991 173.25207910000017 6.222 165.00213039999994 5.216 164.67190559999997 10.579 153.3502020999996 9.643 151.1116961 5.461 166.60076209999994 5.022 198.6644071 6.168 154.47506439999998 6.018 172.67770280000002 5.591)
Error minima by case: (10.0 2 0.0 0 1.0883 1 0.7361 2 2.3412 2 3.4393 2 7.6086 8 0.0 0 0.0415 2 0.0 0 0.0 0 3.4937 1 0.6254 2 0.1961 1 0.0 0 0.3716 2 0.0 0 0.0 0 0.0 0 0.5077 8 0.0 0 0.2858 2 9.0 1 0.0 0 0.8753 1)
Average genome size in population (length): 176.869
Average program size in population (points): 177.869
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 226.4601300694708
Average age in population: 207.2312731881187
Median age in population: 224.4690575246475
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.845
Error (vector) diversity:			 0.853
Behavioral diversity:				 0.859
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 515447921
--- Timings ---
Current time: 1529615632621 milliseconds
Total Time:         805.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       228.7 seconds, 28.4%
Fitness Testing:    459.6 seconds, 57.1%
Report:             116.5 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 37206.56409999998
Test mean error for best: 18.60328
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -84.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -130.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -37.9825817496
Correct output: -36.0605266238 | Program output: -35.0605266238
Correct output: -98.4940591545 | Program output: -85.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -89.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -104.7139415536
Correct output: -85.4359203887 | Program output: -83.4359203887
Correct output: 29.5496488004  | Program output: 26.6876225714 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -8.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -157.8513267506
Correct output: -16.4772789847 | Program output: -18.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_min} {:instruction float_dup} {:instruction tagged_281} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction tag_integer_477} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction tagged_329} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_swap float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup integer_sub float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup integer_inc integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dup float_dec float_dec float_dup integer_rot float_dup integer_min float_dup tagged_281 float_dup float_dup_times float_dup_items float_dec integer_mod float_dup float_dup_times float_dup_items float_dec integer_mod float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_swap float_dec float_dec float_dup integer_add integer_flush float_dec float_dup_times float_dec integer_max float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup float_dec float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec integer_add float_dec float_dup integer_rot float_dec float_dec integer_dec float_dec tag_integer_477 integer_inc float_dec float_dec integer_add float_dup float_dec float_dup integer_yank float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add float_dec integer_add integer_rot integer_stackdepth float_dup float_dec float_dup float_dec integer_shove integer_dec float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot tagged_329 float_pop float_cos float_cos float_div float_max print_float)
Errors: [17.0 3 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 2.0 2 21.174 10 10.0 1 1.0 1 13.0 2 2.5399 9 1.0 2 7.0 2 2.9487 10 16.0 3 2.0 1 2.862 9 0.5077 8 1.0 1 3.9588 11 16.0 2 2.0 1 29.0 2]
Total: 405.4814
Mean: 8.109628
Genome size: 189
Size: 190
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3868.0444189
Median total errors in population: 730.85045
Error averages by case: (167.33621089999997 6.667 138.14837910000003 5.036 155.9142271000001 4.821 135.32844829999976 10.597 158.82396829999996 5.361 150.97088000000065 9.708 159.86479840000177 10.033 165.03510850000006 5.728 145.19515739999937 10.096 133.9968132000002 6.209 137.86088840000008 4.908 164.37627110000014 5.855 135.4955830000003 9.099 122.06421739999985 6.046 159.2113744000001 5.755 131.66323519999895 9.896 158.79605410000005 6.254 148.47928289999993 5.253 151.04632410000002 10.475 131.7482773000006 9.559 124.9934835 5.271 149.97322339999994 4.848 183.5239862 6.064 128.5531866000001 5.847 154.7870400999999 5.472)
Error minima by case: (6.6738 2 0.0 0 4.6205 1 0.7361 2 11.5692 2 3.4393 2 1.6056 8 0.0 0 2.0749 2 0.0 0 0.0 0 3.4937 1 0.6254 2 0.1961 2 0.0 0 0.3716 2 0.0 0 0.0 0 0.0 0 0.013 7 0.0 0 0.2858 1 7.0 1 0.0 0 10.2046 1)
Average genome size in population (length): 179.266
Average program size in population (points): 180.266
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 227.8771389667359
Average age in population: 212.3668526289646
Median age in population: 225.8553867387983
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.861
Error (vector) diversity:			 0.872
Behavioral diversity:				 0.877
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 519930221
--- Timings ---
Current time: 1529615638592 milliseconds
Total Time:         811.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       230.2 seconds, 28.4%
Fitness Testing:    463.2 seconds, 57.1%
Report:             117.7 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 37206.56409999998
Test mean error for best: 18.60328
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -84.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -130.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -37.9825817496
Correct output: -36.0605266238 | Program output: -35.0605266238
Correct output: -98.4940591545 | Program output: -85.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -89.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -104.7139415536
Correct output: -85.4359203887 | Program output: -83.4359203887
Correct output: 29.5496488004  | Program output: 26.6876225714 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -8.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -157.8513267506
Correct output: -16.4772789847 | Program output: -18.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_min} {:instruction float_dup} {:instruction tagged_281} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction tag_integer_477} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction tagged_329} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_swap float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup integer_sub float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup integer_inc integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dup float_dec float_dec float_dup integer_rot float_dup integer_min float_dup tagged_281 float_dup float_dup_times float_dup_items float_dec integer_mod float_dup float_dup_times float_dup_items float_dec integer_mod float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_swap float_dec float_dec float_dup integer_add integer_flush float_dec float_dup_times float_dec integer_max float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup float_dec float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec integer_add float_dec float_dup integer_rot float_dec float_dec integer_dec float_dec tag_integer_477 integer_inc float_dec float_dec integer_add float_dup float_dec float_dup integer_yank float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add float_dec integer_add integer_rot integer_stackdepth float_dup float_dec float_dup float_dec integer_shove integer_dec float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot tagged_329 float_pop float_cos float_cos float_div float_max print_float)
Errors: [17.0 3 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 2.0 2 21.174 10 10.0 1 1.0 1 13.0 2 2.5399 9 1.0 2 7.0 2 2.9487 10 16.0 3 2.0 1 2.862 9 0.5077 8 1.0 1 3.9588 11 16.0 2 2.0 1 29.0 2]
Total: 405.4814
Mean: 8.109628
Genome size: 189
Size: 190
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3812.827000100001
Median total errors in population: 780.0615500000001
Error averages by case: (165.25617910000003 6.77 134.62369039999996 5.222 152.89877869999984 5.022 130.96170529999998 10.567 155.31714989999986 5.471 146.2209669000006 9.905 154.94818460000138 9.979 162.4811784999999 5.972 143.8684527999995 10.252 136.99554330000018 6.35 136.87780620000015 5.174 162.88210349999997 6.049 128.84557900000033 9.321 117.83476689999993 6.319 158.44770680000013 5.878 127.07369229999894 9.947 157.0550469 6.479 146.61059369999995 5.349 148.19501579999982 10.219 127.12674640000051 9.48 128.61527219999994 5.448 146.18051249999985 5.022 181.45686789999996 6.223 132.14183430000008 5.935 151.90562619999983 5.653)
Error minima by case: (2.1912 2 0.0 0 11.9977 1 0.6756 2 9.6588 1 3.4393 1 2.6056 8 0.0 0 0.7893 2 0.0 0 0.0 0 3.4937 1 0.6254 2 0.0 0 1.0 1 0.0278 2 0.0 0 0.0 0 0.0 0 0.013 8 0.0 0 1.0166 1 7.0 1 0.0 0 5.4256 1)
Average genome size in population (length): 178.045
Average program size in population (points): 179.045
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 229.4625418580011
Average age in population: 211.0372199152679
Median age in population: 227.1106258279472
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.987
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.987
Total error diversity:				 0.855
Error (vector) diversity:			 0.863
Behavioral diversity:				 0.87
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 524382646
--- Timings ---
Current time: 1529615644613 milliseconds
Total Time:         817.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       231.6 seconds, 28.3%
Fitness Testing:    466.9 seconds, 57.1%
Report:             118.6 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 34617.23579999998
Test mean error for best: 17.30862
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -85.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -131.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -38.9825817496
Correct output: -36.0605266238 | Program output: -36.0605266238
Correct output: -98.4940591545 | Program output: -86.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -90.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -105.7139415536
Correct output: -85.4359203887 | Program output: -84.4359203887
Correct output: 29.5496488004  | Program output: 25.6430828684 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -9.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -158.8513267506
Correct output: -16.4772789847 | Program output: -13.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dup} {:instruction float_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction tag_integer_477} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dec float_dup float_dec integer_sub float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup_items float_dup integer_yankdup float_dup float_dec float_dec float_dup float_dup_items float_dup_items float_dup float_dup_items float_dec integer_yankdup float_dec float_dup integer_dup_items integer_add float_dup_items float_dec integer_yankdup float_dec float_dup integer_dup_items integer_add float_dup float_swap float_dec float_dec float_dec integer_dup_times float_dec float_dec integer_add float_dec float_dup float_dec float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dup_times float_dec float_dup_times float_dec float_dup float_dec integer_flush float_dec float_dup float_dup float_dec integer_sub integer_dup float_dec integer_add float_dec float_dup integer_rot float_dec float_dec integer_dec float_dec tag_integer_477 integer_inc float_dec float_dec float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup float_dec float_dec float_dup integer_swap float_yankdup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [16.0 3 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 3.0 2 21.174 10 11.0 2 0.0 0 12.0 2 2.5399 9 1.0 2 6.0 1 2.9487 10 17.0 3 1.0 1 3.9066 8 0.5077 8 0.0 0 3.9588 11 15.0 2 3.0 1 29.0 2]
Total: 400.526
Mean: 8.01052
Genome size: 185
Size: 186
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4119.6252042
Median total errors in population: 871.2072000000001
Error averages by case: (175.32014669999978 7.043 149.0689452999999 5.383 165.14856180000007 5.315 144.79278669999974 10.688 166.68310340000005 5.726 159.73960030000057 10.006 167.36847660000146 10.061 174.83812250000008 6.205 152.92981629999935 10.407 145.69109430000012 6.687 149.7376766 5.305 172.23752200000015 6.257 143.23996660000032 9.187 136.5879917999999 6.204 168.4165706000003 6.078 140.35151639999918 9.997 168.43066179999997 6.643 159.56302860000014 5.552 160.2338208999999 10.441 140.98902909999993 9.559 139.64957169999994 5.675 155.59884869999982 5.153 192.88811790000003 6.477 143.75295140000006 6.306 164.11127619999996 5.901)
Error minima by case: (4.3223 2 0.0 0 7.9684 1 0.7361 2 4.4954 2 0.3686 2 1.3215 8 0.0 0 3.4539 2 0.0 0 0.0 0 2.195 1 0.6254 2 0.1961 2 0.0 0 0.3716 2 0.0 0 0.0 0 0.0 0 0.4923 8 0.0 0 1.0098 1 6.3979 1 0.0 0 0.508 1)
Average genome size in population (length): 177.867
Average program size in population (points): 178.867
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 230.6747414607576
Average age in population: 212.4561583743916
Median age in population: 228.3636786360154
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.844
Error (vector) diversity:			 0.857
Behavioral diversity:				 0.862
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 528830771
--- Timings ---
Current time: 1529615650573 milliseconds
Total Time:         823.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       233.0 seconds, 28.3%
Fitness Testing:    470.5 seconds, 57.2%
Report:             119.5 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 36231.123299999985
Test mean error for best: 18.11556
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -85.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -131.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -38.9825817496
Correct output: -36.0605266238 | Program output: -35.0605266238
Correct output: -98.4940591545 | Program output: -86.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -90.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -105.7139415536
Correct output: -85.4359203887 | Program output: -83.4359203887
Correct output: 29.5496488004  | Program output: 25.6430828684 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -8.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -158.8513267506
Correct output: -16.4772789847 | Program output: -13.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_751} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup} {:instruction tagged_281} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (tagged_751 integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_swap float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup integer_sub float_dup float_dup integer_inc float_dup float_dec integer_sub float_dup float_dup integer_inc integer_dup_times float_dec float_dup float_dup float_dup_items float_dec float_dup float_dec float_dec integer_sub float_dup float_dup_items float_dec float_dup float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dup tagged_281 float_dec float_dec integer_inc float_dec float_dec float_dec integer_dup_items integer_div float_dec float_dec float_dec integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec float_dec integer_add float_dec float_dup float_dec integer_div float_dec float_dec float_dec print_integer float_dup float_dec float_dup integer_add float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec float_dec float_dup integer_div float_dec integer_yank float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_yankdup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add float_dec integer_add integer_rot float_dec float_dup float_dec float_dup float_dec integer_shove integer_dec float_yankdup integer_shove integer_swap float_yankdup float_dup integer_swap float_dup_times float_swap in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [16.0 3 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 3.0 2 21.174 10 11.0 2 1.0 1 12.0 2 2.5399 9 1.0 2 6.0 1 2.9487 10 17.0 3 2.0 1 3.9066 8 0.5077 8 1.0 1 3.9588 11 15.0 2 3.0 1 29.0 2]
Total: 405.526
Mean: 8.11052
Genome size: 184
Size: 185
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4362.546210799999
Median total errors in population: 829.1478500000001
Error averages by case: (187.46005639999984 6.872 160.37242970000003 5.279 173.10554479999996 4.95 151.44940089999946 10.767 174.72809600000002 5.452 165.71666790000063 9.919 176.08410780000187 10.16 188.50611929999997 6.075 160.36656789999947 10.383 159.04241090000002 6.584 161.02560840000004 5.196 186.94832200000022 6.071 149.70879820000053 9.471 141.59167509999992 6.14 182.02329760000018 5.96 149.13515939999908 10.075 184.3111175 6.627 168.1160892000001 5.412 170.08842259999963 10.199 146.95433560000015 9.666 149.25710160000003 5.526 168.32465299999978 5.416 203.50991609999997 6.304 151.8006650000001 6.18 172.6896478999999 5.546)
Error minima by case: (2.8537 2 0.0 0 2.1649 1 0.7361 2 2.2091 1 0.3686 1 5.5858 8 0.0 0 4.0847 2 0.0 0 0.0 0 4.0 1 0.2833 2 0.0245 2 0.0 0 0.3716 2 0.0 0 0.0 0 0.0 0 0.0853 8 0.0 0 0.7595 2 7.0 1 0.0 0 3.4192 1)
Average genome size in population (length): 178.254
Average program size in population (points): 179.254
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 231.6273315637411
Average age in population: 214.3926065698956
Median age in population: 229.753392550188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.85
Error (vector) diversity:			 0.86
Behavioral diversity:				 0.863
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 533289096
--- Timings ---
Current time: 1529615656552 milliseconds
Total Time:         829.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       234.5 seconds, 28.3%
Fitness Testing:    474.2 seconds, 57.2%
Report:             120.4 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 35154.66849999998
Test mean error for best: 17.57733
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -82.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -128.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -35.9825817496
Correct output: -36.0605266238 | Program output: -35.0605266238
Correct output: -98.4940591545 | Program output: -83.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -87.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -102.7139415536
Correct output: -85.4359203887 | Program output: -83.4359203887
Correct output: 29.5496488004  | Program output: 28.7767019776 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -8.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -155.8513267506
Correct output: -16.4772789847 | Program output: -18.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction -32} {:instruction integer_pop} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction tag_integer_477} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_swap float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup integer_sub float_dup float_dup integer_inc integer_stackdepth integer_shove integer_sub float_dup float_dup_items float_dec float_dup float_dup_items float_dup float_dup integer_inc float_dup float_dup float_dup integer_rot -32 integer_pop float_dup tagged_281 integer_sub float_dup_times float_dup_items float_dec float_dup integer_min float_dec float_dup_times float_dup_items float_dec float_dup float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_max float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec integer_flush float_dec integer_rot integer_rot integer_pop float_dec integer_add float_yankdup float_dup float_dec float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dec print_integer float_dec integer_dec float_dec tag_integer_477 integer_inc float_dec float_dec integer_add float_dup float_dec float_dup integer_yank float_dec integer_div float_dup_times float_dup integer_yank float_dup integer_rot float_dup integer_rot float_dec integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup float_dec float_dec float_dup integer_swap float_yankdup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [19.0 3 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 0.0 0 21.174 10 8.0 2 1.0 1 15.0 2 2.5399 9 1.0 2 9.0 2 2.9487 10 14.0 3 2.0 1 0.7729 11 0.5077 8 1.0 1 3.9588 11 18.0 2 2.0 1 29.0 2]
Total: 406.3923
Mean: 8.127846
Genome size: 193
Size: 194
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4101.3235842
Median total errors in population: 822.1948
Error averages by case: (175.31667839999992 6.883 152.72887789999996 5.344 165.58435849999995 5.049 140.7311950999997 10.665 167.81680209999996 5.43 157.76952620000026 9.901 166.64067000000153 10.101 172.75680439999996 6.078 151.32186039999942 10.274 147.93816210000006 6.612 152.31343490000006 5.251 171.8229723000001 6.065 141.01296090000062 9.292 130.64437889999977 5.69 168.2942125000002 5.943 137.86024679999898 10.002 168.99501809999998 6.564 161.42993430000013 5.458 155.11222579999995 10.231 137.8713188999998 9.565 142.0296264 5.593 156.13911129999983 5.121 189.9879996000001 6.297 144.80034490000003 6.222 165.1038634999998 5.67)
Error minima by case: (2.6777 2 0.0 0 3.4594 1 0.7361 2 2.4449 1 0.3686 1 3.0161 8 0.0 0 6.7527 2 0.0 0 0.0 0 0.432 1 0.6254 2 0.1961 2 0.0 0 0.3716 2 0.0 0 0.0 0 0.0 0 0.0853 8 0.0 0 2.0503 1 5.77 1 0.0 0 2.1247 1)
Average genome size in population (length): 178.644
Average program size in population (points): 179.644
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 232.820764677364
Average age in population: 216.9944183677851
Median age in population: 231.0453340274383
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.852
Error (vector) diversity:			 0.867
Behavioral diversity:				 0.87
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 537757882
--- Timings ---
Current time: 1529615662655 milliseconds
Total Time:         835.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       236.0 seconds, 28.3%
Fitness Testing:    477.9 seconds, 57.2%
Report:             121.2 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 36678.18489999997
Test mean error for best: 18.33909
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -81.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -127.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -34.9825817496
Correct output: -36.0605266238 | Program output: -36.0605266238
Correct output: -98.4940591545 | Program output: -82.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -86.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -101.7139415536
Correct output: -85.4359203887 | Program output: -85.4359203887
Correct output: 29.5496488004  | Program output: 29.8212416806 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -9.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -154.8513267506
Correct output: -16.4772789847 | Program output: -18.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup float_dup float_dup integer_inc float_dup float_dec float_dup float_dec integer_sub float_dup float_dup_items float_dec float_dup float_dec float_dup float_dup float_dup_items float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_min integer_mult float_dec float_dup print_integer float_dec float_dup tagged_236 integer_add float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_dup_items integer_div float_dec float_dec float_dec integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_yankdup integer_rot float_dec float_dec integer_add float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dec float_dup_times float_dec float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dup integer_mod integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_sub integer_add integer_add float_dup integer_rot float_dec float_dup integer_rot float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [20.0 2 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 1.0 1 21.174 10 7.0 2 0.0 0 16.0 2 2.5399 9 1.0 2 10.0 1 2.9487 10 13.0 3 0.0 0 0.2716 8 0.5077 8 0.0 0 3.9588 11 19.0 2 2.0 1 29.0 2]
Total: 397.89099999999996
Mean: 7.95782
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3605.2396317999996
Median total errors in population: 759.9849
Error averages by case: (151.00375480000002 6.739 129.7663417 5.258 147.75083659999999 4.92 126.8753198999999 10.524 148.61892159999996 5.435 143.26268990000014 9.822 149.71562870000136 10.064 151.5193994 6.003 136.8272013999995 10.328 126.73081820000016 6.421 129.69415040000015 5.152 149.43329349999982 5.98 123.27295730000057 9.252 114.59107639999985 5.596 144.3305472000003 5.754 122.90739679999913 9.82 144.73414659999997 6.366 137.5129664 5.385 134.52822139999972 10.189 121.72574500000067 9.603 118.30147760000006 5.36 139.64411689999977 5.162 167.78043639999993 6.086 120.51049680000003 5.985 147.41269089999972 5.585)
Error minima by case: (1.8753 2 0.0 0 2.0926 1 0.7361 1 8.8617 2 3.2134 1 1.3944 8 0.0 0 5.7527 2 0.0 0 0.0 0 1.3044 1 0.6254 2 0.1961 2 0.0 0 0.0663 1 0.0 0 0.0 0 0.0 0 0.0853 8 0.0 0 0.7595 2 5.0 1 0.0 0 2.1434 1)
Average genome size in population (length): 179.061
Average program size in population (points): 180.061
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 234.298164248563
Average age in population: 218.4234133993284
Median age in population: 232.3119404845485
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.869
Error (vector) diversity:			 0.88
Behavioral diversity:				 0.884
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 542237332
--- Timings ---
Current time: 1529615668750 milliseconds
Total Time:         841.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       237.4 seconds, 28.2%
Fitness Testing:    481.7 seconds, 57.3%
Report:             122.1 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 36678.18489999997
Test mean error for best: 18.33909
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -81.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -127.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -34.9825817496
Correct output: -36.0605266238 | Program output: -36.0605266238
Correct output: -98.4940591545 | Program output: -82.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -86.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -101.7139415536
Correct output: -85.4359203887 | Program output: -85.4359203887
Correct output: 29.5496488004  | Program output: 29.8212416806 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -9.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -154.8513267506
Correct output: -16.4772789847 | Program output: -18.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup float_dup float_dup integer_inc float_dup float_dec float_dup float_dec integer_sub float_dup float_dup_items float_dec float_dup float_dec float_dup float_dup float_dup_items float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_min integer_mult float_dec float_dup print_integer float_dec float_dup tagged_236 integer_add float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_dup_items integer_div float_dec float_dec float_dec integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_yankdup integer_rot float_dec float_dec integer_add float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dec float_dup_times float_dec float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dup integer_mod integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_sub integer_add integer_add float_dup integer_rot float_dec float_dup integer_rot float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [20.0 2 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 1.0 1 21.174 10 7.0 2 0.0 0 16.0 2 2.5399 9 1.0 2 10.0 1 2.9487 10 13.0 3 0.0 0 0.2716 8 0.5077 8 0.0 0 3.9588 11 19.0 2 2.0 1 29.0 2]
Total: 397.89099999999996
Mean: 7.95782
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4461.674281500001
Median total errors in population: 641.2846
Error averages by case: (191.81798919999986 6.86 168.11437809999995 5.349 179.6536051 4.969 154.54044109999933 10.799 180.6260479999999 5.467 169.77304960000083 9.914 180.59647790000147 10.192 187.94370280000004 5.963 163.60285189999945 10.529 158.86746809999994 6.33 168.25273820000012 5.171 187.70366490000015 6.01 155.18691740000048 9.326 148.7776259999999 5.55 182.98824480000007 5.872 151.21032569999934 10.078 184.08242110000003 6.452 176.04023460000013 5.401 172.37674730000006 10.32 152.94789789999945 9.713 156.4508129 5.504 168.8445751999998 5.326 205.3509293000001 6.169 157.3106340000001 6.076 179.6985004 5.576)
Error minima by case: (3.4386 2 0.0 0 2.5438 1 0.7361 2 6.939 2 0.0842 1 1.3535 8 0.0 0 5.7527 2 0.0 0 0.0 0 3.0 1 0.6254 2 0.1961 1 0.0 0 0.3716 1 0.0 0 0.0 0 0.0 0 0.5063 8 0.0 0 1.0166 2 6.0 1 0.0 0 0.8955 1)
Average genome size in population (length): 178.929
Average program size in population (points): 179.929
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 235.6770702673171
Average age in population: 220.5708393562166
Median age in population: 233.6132458138606
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.988
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.988
Total error diversity:				 0.839
Error (vector) diversity:			 0.86
Behavioral diversity:				 0.861
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 546713557
--- Timings ---
Current time: 1529615674756 milliseconds
Total Time:         847.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       238.9 seconds, 28.2%
Fitness Testing:    485.3 seconds, 57.3%
Report:             123.1 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 36678.18489999997
Test mean error for best: 18.33909
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -81.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -127.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -34.9825817496
Correct output: -36.0605266238 | Program output: -36.0605266238
Correct output: -98.4940591545 | Program output: -82.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -86.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -101.7139415536
Correct output: -85.4359203887 | Program output: -85.4359203887
Correct output: 29.5496488004  | Program output: 29.8212416806 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -9.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -154.8513267506
Correct output: -16.4772789847 | Program output: -18.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup float_dup float_dup integer_inc float_dup float_dec float_dup float_dec integer_sub float_dup float_dup_items float_dec float_dup float_dec float_dup float_dup float_dup_items float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_min integer_mult float_dec float_dup print_integer float_dec float_dup tagged_236 integer_add float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_dup_items integer_div float_dec float_dec float_dec integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_yankdup integer_rot float_dec float_dec integer_add float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dec float_dup_times float_dec float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dup integer_mod integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_sub integer_add integer_add float_dup integer_rot float_dec float_dup integer_rot float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [20.0 2 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 1.0 1 21.174 10 7.0 2 0.0 0 16.0 2 2.5399 9 1.0 2 10.0 1 2.9487 10 13.0 3 0.0 0 0.2716 8 0.5077 8 0.0 0 3.9588 11 19.0 2 2.0 1 29.0 2]
Total: 397.89099999999996
Mean: 7.95782
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3579.7901682
Median total errors in population: 664.7572
Error averages by case: (153.62868619999998 6.594 130.39209559999992 5.169 142.70563339999995 4.796 121.89430709999995 10.417 143.44111500000002 5.213 136.09861160000005 9.768 147.83975970000145 10.048 152.71370229999985 5.745 132.2968535999995 10.258 125.63630810000008 6.294 130.26176710000007 4.995 152.34593129999993 5.802 118.62198430000069 8.964 112.69801819999985 5.222 146.4189946000002 5.611 119.37043869999896 9.674 147.89976650000003 6.275 140.6377325000002 5.278 139.71886510000004 10.046 119.90096660000087 9.567 121.6380005 5.329 136.1719602999998 5.004 168.96359920000015 5.997 123.2915723000001 6.068 141.68249839999982 5.387)
Error minima by case: (4.3223 2 0.0 0 1.4594 1 0.7361 2 1.7376 1 0.1757 2 6.5659 8 0.0 0 3.4393 2 0.0 0 0.0 0 3.0 1 0.2765 2 0.0 0 0.0 0 0.3716 2 0.0 0 0.0 0 0.0 0 0.1782 7 0.0 0 0.9856 1 6.0 1 0.0 0 4.1247 1)
Average genome size in population (length): 179.095
Average program size in population (points): 180.095
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 237.0218500373598
Average age in population: 222.358787280947
Median age in population: 234.7127720336458
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.877
Error (vector) diversity:			 0.892
Behavioral diversity:				 0.896
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 551193007
--- Timings ---
Current time: 1529615680794 milliseconds
Total Time:         853.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       240.4 seconds, 28.2%
Fitness Testing:    489.0 seconds, 57.3%
Report:             123.9 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 36678.18489999997
Test mean error for best: 18.33909
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -81.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -127.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -34.9825817496
Correct output: -36.0605266238 | Program output: -36.0605266238
Correct output: -98.4940591545 | Program output: -82.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -86.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -101.7139415536
Correct output: -85.4359203887 | Program output: -85.4359203887
Correct output: 29.5496488004  | Program output: 29.8212416806 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -9.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -154.8513267506
Correct output: -16.4772789847 | Program output: -18.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup float_dup float_dup integer_inc float_dup float_dec float_dup float_dec integer_sub float_dup float_dup_items float_dec float_dup float_dec float_dup float_dup float_dup_items float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_min integer_mult float_dec float_dup print_integer float_dec float_dup tagged_236 integer_add float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_dup_items integer_div float_dec float_dec float_dec integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_yankdup integer_rot float_dec float_dec integer_add float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dec float_dup_times float_dec float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dup integer_mod integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_sub integer_add integer_add float_dup integer_rot float_dec float_dup integer_rot float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [20.0 2 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 1.0 1 21.174 10 7.0 2 0.0 0 16.0 2 2.5399 9 1.0 2 10.0 1 2.9487 10 13.0 3 0.0 0 0.2716 8 0.5077 8 0.0 0 3.9588 11 19.0 2 2.0 1 29.0 2]
Total: 397.89099999999996
Mean: 7.95782
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3990.7743045999996
Median total errors in population: 825.0706499999999
Error averages by case: (170.4248595999998 6.983 148.07347659999994 5.633 158.38301959999995 5.313 135.38303679999984 10.605 161.16641149999998 5.726 151.34785440000027 9.726 163.20424940000126 10.098 169.83712170000004 6.29 147.0675264999996 10.357 142.59093809999996 6.646 149.40726060000006 5.473 168.4718823000001 6.193 133.51977030000037 9.194 129.47584149999983 5.663 164.2975614000003 6.024 132.7082519999995 9.858 164.47894600000018 6.633 158.25693480000012 5.668 152.90227950000002 10.068 136.08916459999995 9.644 136.95870289999988 5.715 151.89096659999984 5.288 187.04221190000015 6.416 138.31680860000012 6.393 157.89922739999983 5.973)
Error minima by case: (6.0 2 0.0 0 0.0438 1 0.043 1 1.4795 2 1.9039 2 6.3944 8 0.0 0 3.4393 2 0.0 0 0.0 0 2.0 1 0.6254 2 0.0805 2 0.0 0 0.3716 2 0.0 0 0.0 0 0.0 0 0.3033 8 0.0 0 0.7595 2 5.0 1 0.0 0 0.3595 1)
Average genome size in population (length): 177.545
Average program size in population (points): 178.545
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 238.5036924303293
Average age in population: 219.7810076698102
Median age in population: 236.0017763744989
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.99
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.99
Total error diversity:				 0.857
Error (vector) diversity:			 0.867
Behavioral diversity:				 0.871
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 555632957
--- Timings ---
Current time: 1529615686662 milliseconds
Total Time:         859.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       241.8 seconds, 28.1%
Fitness Testing:    492.6 seconds, 57.3%
Report:             124.8 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 36678.18489999997
Test mean error for best: 18.33909
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -81.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -127.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -34.9825817496
Correct output: -36.0605266238 | Program output: -36.0605266238
Correct output: -98.4940591545 | Program output: -82.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -86.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -101.7139415536
Correct output: -85.4359203887 | Program output: -85.4359203887
Correct output: 29.5496488004  | Program output: 29.8212416806 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -9.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -154.8513267506
Correct output: -16.4772789847 | Program output: -18.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup float_dup float_dup integer_inc float_dup float_dec float_dup float_dec integer_sub float_dup float_dup_items float_dec float_dup float_dec float_dup float_dup float_dup_items float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_min integer_mult float_dec float_dup print_integer float_dec float_dup tagged_236 integer_add float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_dup_items integer_div float_dec float_dec float_dec integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_yankdup integer_rot float_dec float_dec integer_add float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dec float_dup_times float_dec float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dup integer_mod integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_sub integer_add integer_add float_dup integer_rot float_dec float_dup integer_rot float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [20.0 2 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 1.0 1 21.174 10 7.0 2 0.0 0 16.0 2 2.5399 9 1.0 2 10.0 1 2.9487 10 13.0 3 0.0 0 0.2716 8 0.5077 8 0.0 0 3.9588 11 19.0 2 2.0 1 29.0 2]
Total: 397.89099999999996
Mean: 7.95782
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4020.6615475
Median total errors in population: 656.92595
Error averages by case: (168.90624320000012 6.578 149.18758859999986 5.264 164.24513110000007 5.053 144.30886159999966 10.788 166.07357799999997 5.494 159.56034630000042 9.879 168.00676960000135 10.205 164.96476530000007 5.777 149.6317176999995 10.426 141.60195350000015 6.178 147.65540280000002 5.142 165.92763379999994 5.792 139.29980830000056 9.211 127.65114839999985 5.533 161.58058390000016 5.615 140.61250899999933 9.967 162.16399310000003 6.255 154.4097478 5.31 153.90636999999998 10.165 139.5941108000004 9.751 136.50529200000005 5.393 153.7905111999999 5.209 181.58003600000004 5.992 139.14037420000008 5.925 163.7900713 5.665)
Error minima by case: (0.4546 2 0.0 0 0.0125 1 0.7361 2 2.3461 2 0.3686 2 4.3944 8 0.0 0 3.4393 2 0.0 0 0.0 0 0.4941 1 0.5507 2 0.1961 1 0.0 0 0.3716 1 0.0 0 0.0 0 0.0 0 0.3175 8 0.0 0 0.7595 2 3.0 1 0.0 0 0.2213 1)
Average genome size in population (length): 179.695
Average program size in population (points): 180.695
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 239.3639568322412
Average age in population: 222.8533503302032
Median age in population: 237.2674565474245
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.867
Error (vector) diversity:			 0.882
Behavioral diversity:				 0.886
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 560125807
--- Timings ---
Current time: 1529615692655 milliseconds
Total Time:         865.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       243.2 seconds, 28.1%
Fitness Testing:    496.3 seconds, 57.4%
Report:             125.6 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 36678.18489999997
Test mean error for best: 18.33909
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -81.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -127.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -34.9825817496
Correct output: -36.0605266238 | Program output: -36.0605266238
Correct output: -98.4940591545 | Program output: -82.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -86.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -101.7139415536
Correct output: -85.4359203887 | Program output: -85.4359203887
Correct output: 29.5496488004  | Program output: 29.8212416806 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -9.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -154.8513267506
Correct output: -16.4772789847 | Program output: -18.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup float_dup float_dup integer_inc float_dup float_dec float_dup float_dec integer_sub float_dup float_dup_items float_dec float_dup float_dec float_dup float_dup float_dup_items float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_min integer_mult float_dec float_dup print_integer float_dec float_dup tagged_236 integer_add float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_dup_items integer_div float_dec float_dec float_dec integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_yankdup integer_rot float_dec float_dec integer_add float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dec float_dup_times float_dec float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dup integer_mod integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_sub integer_add integer_add float_dup integer_rot float_dec float_dup integer_rot float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [20.0 2 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 1.0 1 21.174 10 7.0 2 0.0 0 16.0 2 2.5399 9 1.0 2 10.0 1 2.9487 10 13.0 3 0.0 0 0.2716 8 0.5077 8 0.0 0 3.9588 11 19.0 2 2.0 1 29.0 2]
Total: 397.89099999999996
Mean: 7.95782
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4581.253782700001
Median total errors in population: 816.64755
Error averages by case: (193.8293919999999 6.966 172.18501890000005 5.64 180.7721484999999 5.074 160.2398096999994 10.735 182.4400815999998 5.408 175.7594384000009 9.962 186.91779780000152 10.226 194.52548470000008 6.245 171.43723729999957 10.381 165.49840860000012 6.616 172.95857389999992 5.423 192.8103771000003 6.128 158.3477588000006 9.377 149.89737169999987 5.598 188.40955090000006 5.983 157.78814429999937 9.924 191.06141310000004 6.59 181.30193440000042 5.648 178.4725369000002 10.12 159.64544779999912 9.771 160.6874246000001 5.714 174.86843139999985 5.409 209.1698745000001 6.305 161.0942501 6.328 179.8558756999999 5.709)
Error minima by case: (4.3223 2 0.0 0 0.7904 1 0.7361 2 4.8438 2 1.9039 2 8.0342 8 0.0 0 3.4393 2 0.0 0 0.0 0 0.7365 1 0.5398 2 0.1961 2 0.0 0 0.3716 2 0.0 0 0.0 0 0.0 0 0.5077 8 0.0 0 0.8635 2 6.0 1 0.0 0 6.5985 2)
Average genome size in population (length): 177.018
Average program size in population (points): 178.018
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 240.9490674399004
Average age in population: 220.6446981414608
Median age in population: 238.4691267689742
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.84
Error (vector) diversity:			 0.851
Behavioral diversity:				 0.856
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 564551707
--- Timings ---
Current time: 1529615698683 milliseconds
Total Time:         871.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       244.6 seconds, 28.1%
Fitness Testing:    500.0 seconds, 57.4%
Report:             126.4 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 36678.18489999997
Test mean error for best: 18.33909
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -81.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -127.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -34.9825817496
Correct output: -36.0605266238 | Program output: -36.0605266238
Correct output: -98.4940591545 | Program output: -82.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -86.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -101.7139415536
Correct output: -85.4359203887 | Program output: -85.4359203887
Correct output: 29.5496488004  | Program output: 29.8212416806 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -9.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -154.8513267506
Correct output: -16.4772789847 | Program output: -18.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_dup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup float_dup float_dup integer_inc float_dup float_dec float_dup float_dec integer_sub float_dup float_dup_items float_dec float_dup float_dec float_dup float_dup float_dup_items float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec integer_min integer_mult float_dec float_dup print_integer float_dec float_dup tagged_236 integer_add float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_dup_items integer_div float_dec float_dec float_dec integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_yankdup integer_rot float_dec float_dec integer_add float_dup integer_add integer_rot float_dec float_dup_times float_dec float_dec float_dup_times float_dec float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dup integer_mod integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup integer_sub integer_add integer_add float_dup integer_rot float_dec float_dup integer_rot float_yankdup float_dup integer_swap float_dup_times float_dup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [20.0 2 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 1.0 1 21.174 10 7.0 2 0.0 0 16.0 2 2.5399 9 1.0 2 10.0 1 2.9487 10 13.0 3 0.0 0 0.2716 8 0.5077 8 0.0 0 3.9588 11 19.0 2 2.0 1 29.0 2]
Total: 397.89099999999996
Mean: 7.95782
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4185.2455873
Median total errors in population: 826.6224
Error averages by case: (173.90946269999992 6.745 153.00693109999986 5.39 173.6054533 5.144 148.54355339999967 10.586 174.63509190000002 5.606 162.2044626000003 9.769 174.14724020000142 10.153 172.901859 6.118 158.33018469999948 10.321 149.7123775999999 6.669 152.0075664 5.223 170.7281442000001 5.946 146.5177312000007 9.162 134.99660219999978 5.545 166.4636734000001 5.792 145.8395191999993 9.738 167.88037920000002 6.375 162.17598440000023 5.561 159.15558230000008 9.927 148.59350169999996 9.751 141.19190940000013 5.65 163.66660899999982 5.485 189.78686910000008 6.278 143.14389330000003 6.404 172.95300579999994 5.81)
Error minima by case: (3.0 2 0.0 0 0.3344 1 0.342 2 0.9599 1 0.3686 1 1.1845 8 0.0 0 0.0415 2 0.0 0 0.0 0 1.0 1 0.6254 2 0.1961 1 0.0 0 0.3716 1 0.0 0 0.0 0 0.0 0 0.4923 8 0.0 0 0.7595 1 2.0 1 0.0 0 0.0927 1)
Average genome size in population (length): 178.632
Average program size in population (points): 179.632
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 241.955146416368
Average age in population: 223.7712912253409
Median age in population: 239.8156854024152
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.864
Error (vector) diversity:			 0.868
Behavioral diversity:				 0.87
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 569017732
--- Timings ---
Current time: 1529615704564 milliseconds
Total Time:         877.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       246.1 seconds, 28.1%
Fitness Testing:    503.5 seconds, 57.4%
Report:             127.4 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 34506.34019999999
Test mean error for best: 17.25317
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -87.6738378996
Correct output: -31.2572440177 | Program output: -34.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 155.8395702238
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 105.7517411088
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -133.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -40.9825817496
Correct output: -36.0605266238 | Program output: -36.0605266238
Correct output: -98.4940591545 | Program output: -88.4940591545
Correct output: 118.444904963  | Program output: 120.9847759431
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -92.7391381937
Correct output: 123.7897097488 | Program output: 120.8410535366
Correct output: -88.7139415536 | Program output: -107.7139415536
Correct output: -85.4359203887 | Program output: -85.4359203887
Correct output: 29.5496488004  | Program output: 23.5540034622 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -9.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -160.8513267506
Correct output: -16.4772789847 | Program output: -17.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction integer_max} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction tagged_223} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_yankdup float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items float_dup_items float_dup float_dup float_dup float_dup integer_inc integer_stackdepth float_dec float_dup float_dec integer_sub float_dup float_dup_items float_dec float_dup float_dec float_dup float_dup float_dup_items float_dup integer_max float_dup float_dup integer_rot float_dup float_dup_items float_dup float_dup_items float_dec tagged_223 integer_sub float_dup_times float_dup_items float_dec float_dup float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_min float_dec float_dec float_dup integer_add integer_rot float_dec float_stackdepth float_dec integer_max float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup float_dup_items integer_swap float_dec float_dec float_dup integer_add integer_rot float_dec integer_rot integer_rot integer_pop float_dec integer_add float_dec float_dup float_dec float_dec integer_sub integer_dup integer_rot float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dec float_dup float_dec integer_add float_dup integer_rot float_dec float_dec integer_add float_dup integer_rot float_dec float_dec integer_div float_dec float_dup integer_yank integer_dup_times integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup float_dec float_dec float_dup integer_swap float_yankdup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [14.0 3 3.0 1 30.0 1 4.7589 11 31.0 2 28.3514 11 42.38 9 5.0 2 21.174 10 13.0 2 0.0 0 10.0 1 2.5399 9 1.0 2 4.0 1 2.9487 10 19.0 3 0.0 0 5.9956 10 0.5077 8 0.0 0 3.9588 11 13.0 2 1.0 1 29.0 2]
Total: 397.615
Mean: 7.9523
Genome size: 194
Size: 195
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4196.152963400001
Median total errors in population: 727.2608
Error averages by case: (176.16020889999996 6.697 155.5543101000001 5.351 166.4771392999999 4.928 148.65387259999954 10.72 168.11478659999997 5.454 162.33092050000067 9.734 171.9795536000015 10.148 174.97001240000003 5.975 158.3905398999996 10.36 151.82687780000006 6.434 155.46360390000007 5.064 173.9102959 5.844 144.8688995000006 9.111 140.3627594999999 5.338 170.17170240000027 5.662 146.42801699999933 9.711 169.73216190000005 6.202 164.36570880000014 5.481 160.56845109999983 9.902 144.48523679999977 9.644 149.61691539999995 5.558 157.85422679999974 5.561 190.97284730000004 6.086 149.85287619999994 6.186 166.2900391999999 5.6)
Error minima by case: (6.0 2 0.0 0 4.362 1 0.6125 2 0.6588 2 0.3686 1 6.4146 8 0.0 0 3.0237 2 0.0 0 0.0 0 2.0 1 0.6254 1 0.1961 1 0.0 0 0.3716 1 0.0 0 0.0 0 0.0 0 0.3804 7 0.0 0 1.0098 1 5.0 1 0.0 0 1.2221 1)
Average genome size in population (length): 176.542
Average program size in population (points): 177.542
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 243.093706070292
Average age in population: 222.7891941849813
Median age in population: 241.08325900441
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.85
Error (vector) diversity:			 0.855
Behavioral diversity:				 0.86
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 573431582
--- Timings ---
Current time: 1529615710587 milliseconds
Total Time:         883.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       247.5 seconds, 28.0%
Fitness Testing:    507.3 seconds, 57.4%
Report:             128.2 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 34654.04529999998
Test mean error for best: 17.32702
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -86.6738378996
Correct output: -31.2572440177 | Program output: -33.2572440177
Correct output: -46.4593524807 | Program output: -76.4593524807
Correct output: 151.0806466807 | Program output: 157.6712390733
Correct output: -37.658849841  | Program output: -68.658849841 
Correct output: 134.1031121233 | Program output: 107.0091469103
Correct output: 29.6055550185  | Program output: 71.9855135034 
Correct output: -128.9331639543 | Program output: -132.9331639543
Correct output: 88.7526738391  | Program output: 109.9267060211
Correct output: -27.9825817496 | Program output: -39.9825817496
Correct output: -36.0605266238 | Program output: -36.0605266238
Correct output: -98.4940591545 | Program output: -87.4940591545
Correct output: 118.444904963  | Program output: 122.5674160943
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -91.7391381937
Correct output: 123.7897097488 | Program output: 122.5011927781
Correct output: -88.7139415536 | Program output: -106.7139415536
Correct output: -85.4359203887 | Program output: -85.4359203887
Correct output: 29.5496488004  | Program output: 24.5985431653 
Correct output: 69.5585020781  | Program output: 69.050772295  
Correct output: -9.5473433631  | Program output: -9.5473433631 
Correct output: 73.1938622402  | Program output: 69.2350483827 
Correct output: -173.8513267506 | Program output: -159.8513267506
Correct output: -16.4772789847 | Program output: -16.4772789847
Correct output: -40.8753187944 | Program output: -69.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_mod} {:instruction integer_mod} {:instruction 20.687271621547836} {:instruction in1} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction 69.0353375064752} {:instruction float_rot} {:instruction integer_add} {:instruction float_shove} {:instruction float_cos} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction in2} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_cos} {:instruction float_cos} {:instruction float_div} {:instruction float_max} {:instruction print_float})
Best program: (float_flush integer_mod integer_mod 20.687271621547836 in1 integer_add float_dec float_shove 69.0353375064752 float_rot integer_add float_shove float_cos float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_dec float_dup_items integer_mult float_dup float_dup float_dup float_dup integer_inc float_dup float_dec float_dup float_dec integer_sub float_dup float_dup_items float_dec float_dup float_dec float_dup float_dup float_dup_items float_dup float_dup_items float_dec float_dec float_dup integer_rot float_dup_items float_dec float_dec float_dup float_dup float_dup float_dup_items float_dec integer_add float_dec float_dec float_dup float_dup_items integer_dup float_dup_items float_dup float_dup_times float_dec float_dec float_dup float_dec in2 float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec float_dup integer_add integer_rot float_dec float_dup_times float_dec integer_max float_dec integer_rot integer_rot integer_pop float_dec integer_add float_yankdup float_dup float_dec float_dec float_dup_times float_dec print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec float_dec integer_add integer_add float_dup integer_rot float_dec integer_div float_dec integer_div float_dec float_dup integer_yank float_dup integer_rot float_dec integer_div integer_div float_dec float_dup in2 float_dec float_stackdepth integer_rot float_dec float_dec integer_add integer_rot float_dup float_dec float_dup float_dec float_dec float_dup integer_swap float_yankdup in1 float_rot float_frominteger in2 integer_inc float_yank integer_swap in1 float_rot float_frominteger float_pop float_cos float_cos float_div float_max print_float)
Errors: [15.0 3 2.0 1 30.0 1 6.5906 11 31.0 2 27.094 9 42.38 9 4.0 2 21.174 10 12.0 2 0.0 0 11.0 2 4.1225 9 1.0 2 5.0 1 1.2885 9 18.0 3 0.0 0 4.9511 9 0.5077 8 0.0 0 3.9588 11 14.0 2 0.0 0 29.0 2]
Total: 392.06719999999996
Mean: 7.841344
Genome size: 185
Size: 186
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3461.4895619999998
Median total errors in population: 691.0104000000001
Error averages by case: (145.58861250000007 6.543 127.0328189 5.149 139.50930409999995 4.807 119.7123772000001 10.605 140.20308849999998 5.321 134.72602539999946 9.569 145.34590210000098 10.099 146.5875239 5.848 128.51246699999948 10.327 118.17909880000009 6.326 126.12228060000001 4.862 144.1632596 5.728 116.00959450000049 9.119 105.99035459999996 5.022 138.07092190000023 5.551 116.32782839999945 9.754 140.6592183000001 6.171 136.70015360000008 5.347 131.00043779999984 9.995 119.4063494000007 9.608 114.75803000000002 5.25 136.9729056999996 5.469 162.25331599999998 6.024 116.28388760000001 5.82 137.69780559999978 5.362)
Error minima by case: (0.0 2 0.0 0 0.0 1 0.7361 2 0.0 2 0.3686 2 0.0 5 0.0 0 0.0415 2 0.0 0 0.0 0 0.0 1 0.5507 2 0.1961 1 0.0 0 0.3716 2 0.0 0 0.0 0 0.0 1 0.0 5 0.0 0 0.0 1 0.0 1 0.0 0 0.0 1)
Average genome size in population (length): 181.115
Average program size in population (points): 182.115
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 244.2255692979591
Average age in population: 233.0948568480035
Median age in population: 242.3124955942258
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.874
Error (vector) diversity:			 0.889
Behavioral diversity:				 0.891
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 577959532
--- Timings ---
Current time: 1529615716666 milliseconds
Total Time:         889.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       249.0 seconds, 28.0%
Fitness Testing:    510.9 seconds, 57.5%
Report:             129.1 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 10294.754799999995
Test mean error for best: 5.14738
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: 
-101.6738378996


Correct output: -31.2572440177 | Program output: 
-31.2572440177


Correct output: -46.4593524807 | Program output: 
-46.4593524807


Correct output: 151.0806466807 | Program output: 
81.9901970531


Correct output: -37.658849841  | Program output: 
-37.658849841


Correct output: 134.1031121233 | Program output: 
81.9901970531


Correct output: 29.6055550185  | Program output: 
29.6055550185


Correct output: -128.9331639543 | Program output: 
-128.9331639543


Correct output: 88.7526738391  | Program output: 
81.9901970531


Correct output: -27.9825817496 | Program output: 
-27.9825817496


Correct output: -36.0605266238 | Program output: 
-36.0605266238


Correct output: -98.4940591545 | Program output: 
-98.4940591545


Correct output: 118.444904963  | Program output: 
81.9901970531


Correct output: 90.2245669646  | Program output: 
81.9901970531


Correct output: -96.7391381937 | Program output: 
-96.7391381937


Correct output: 123.7897097488 | Program output: 
81.9901970531


Correct output: -88.7139415536 | Program output: 
-88.7139415536


Correct output: -85.4359203887 | Program output: 
-85.4359203887


Correct output: 29.5496488004  | Program output: 
29.5496488004


Correct output: 69.5585020781  | Program output: 
69.5585020781


Correct output: -9.5473433631  | Program output: 
-9.5473433631


Correct output: 73.1938622402  | Program output: 
73.1938622402


Correct output: -173.8513267506 | Program output: 
-173.8513267506


Correct output: -16.4772789847 | Program output: 
-16.4772789847


Correct output: -40.8753187944 | Program output: 
-40.8753187944


;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_swap} {:instruction float_dup} {:instruction in1} {:instruction float_swap} {:instruction float_add} {:instruction integer_div} {:instruction integer_dup_items} {:instruction print_newline} {:instruction integer_div} {:instruction float_shove} {:instruction integer_pop} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction 81.99019705305832} {:instruction integer_mult} {:instruction float_min} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_sub} {:instruction print_float} {:instruction float_max} {:instruction integer_add} {:instruction float_shove} {:instruction print_newline} {:instruction float_sub} {:instruction float_cos} {:instruction float_mult} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction print_integer} {:instruction float_add} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_mult} {:instruction float_mod} {:instruction float_sin} {:instruction float_flush} {:instruction -31} {:instruction float_tan} {:instruction integer_pop} {:instruction float_sin} {:instruction float_stackdepth} {:instruction print_newline} {:instruction integer_dup_items} {:instruction float_pop} {:instruction -51.18661315997457} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_mult} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_shove} {:instruction float_sub} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_236} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec})
Best program: (print_integer integer_fromfloat in2 float_yankdup float_stackdepth float_yank integer_yankdup integer_dup_items float_frominteger float_swap float_dup in1 float_swap float_add integer_div integer_dup_items print_newline integer_div float_shove integer_pop integer_shove integer_dup_items float_yankdup 81.99019705305832 integer_mult float_min integer_yankdup integer_pop integer_sub print_integer integer_sub print_float float_max integer_add float_shove print_newline float_sub float_cos float_mult integer_shove integer_swap float_mod print_integer float_add integer_rot integer_swap integer_mult float_mod float_sin float_flush -31 float_tan integer_pop float_sin float_stackdepth print_newline integer_dup_items float_pop -51.18661315997457 float_sin integer_yank integer_max integer_mult integer_yank integer_fromfloat integer_yankdup integer_stackdepth float_sub float_mult float_min integer_dup integer_dup_items float_div float_dec integer_yankdup integer_pop float_dec integer_shove float_sub float_dec float_dup tagged_236 integer_add float_dec float_dup integer_div integer_inc float_dec float_dec float_dec integer_dup_items integer_div float_dec float_dec float_dec integer_dup_times float_dec float_dec integer_add integer_mult float_dec float_dup integer_rot float_dec)
Errors: [0.0 3 0.0 3 0.0 3 69.0904 13 0.0 3 52.1129 13 0.0 3 0.0 3 6.7625 12 0.0 3 0.0 3 0.0 3 36.4547 13 8.2344 15 0.0 3 41.7995 12 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3 0.0 3]
Total: 349.4544
Mean: 6.989088
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3946.0005304000006
Median total errors in population: 747.2561
Error averages by case: (166.7190345 6.619 145.95549989999998 5.439 158.28610249999997 4.895 137.22284189999962 10.767 160.18722380000003 5.461 152.32661580000004 9.619 162.44924720000122 10.029 167.10162940000006 5.995 146.01542129999933 10.412 140.4798248000002 6.557 146.7355341 5.078 164.46540240000002 5.798 135.81514790000054 9.156 125.84547509999977 5.476 159.65148590000018 5.617 133.749719899999 9.901 160.90434140000005 6.259 155.87179260000005 5.467 151.50339710000003 9.771 135.37006490000033 9.535 135.7368666000001 5.534 149.81489919999962 5.668 182.6052666000001 6.057 137.3807845000001 6.102 157.00791109999992 5.587)
Error minima by case: (0.0 2 0.0 0 0.0 1 0.2749 2 0.0 2 0.3686 2 0.0 3 0.0 0 3.2473 2 0.0 0 0.0 0 0.0 1 0.6254 2 0.1961 2 0.0 0 0.3716 2 0.0 0 0.0 0 0.0 0 0.0 3 0.0 0 0.0 2 0.0 1 0.0 0 0.0 1)
Average genome size in population (length): 179.421
Average program size in population (points): 180.421
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 245.7362745944122
Average age in population: 230.8954223654172
Median age in population: 243.531769781777
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.86
Error (vector) diversity:			 0.871
Behavioral diversity:				 0.875
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 582445032
--- Timings ---
Current time: 1529615722623 milliseconds
Total Time:         895.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       250.4 seconds, 28.0%
Fitness Testing:    514.8 seconds, 57.5%
Report:             130.1 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 9339.754799999997
Test mean error for best: 4.66988
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: 
-101.6738378996

Correct output: -31.2572440177 | Program output: 
-31.2572440177

Correct output: -46.4593524807 | Program output: 
-46.4593524807

Correct output: 151.0806466807 | Program output: 
81.9901970531

Correct output: -37.658849841  | Program output: 
-37.658849841

Correct output: 134.1031121233 | Program output: 
81.9901970531

Correct output: 29.6055550185  | Program output: 
29.6055550185

Correct output: -128.9331639543 | Program output: 
-128.9331639543

Correct output: 88.7526738391  | Program output: 
81.9901970531

Correct output: -27.9825817496 | Program output: 
-27.9825817496

Correct output: -36.0605266238 | Program output: 
-36.0605266238

Correct output: -98.4940591545 | Program output: 
-98.4940591545

Correct output: 118.444904963  | Program output: 
81.9901970531

Correct output: 90.2245669646  | Program output: 
81.9901970531

Correct output: -96.7391381937 | Program output: 
-96.7391381937

Correct output: 123.7897097488 | Program output: 
81.9901970531

Correct output: -88.7139415536 | Program output: 
-88.7139415536

Correct output: -85.4359203887 | Program output: 
-85.4359203887

Correct output: 29.5496488004  | Program output: 
29.5496488004

Correct output: 69.5585020781  | Program output: 
69.5585020781

Correct output: -9.5473433631  | Program output: 
-9.5473433631

Correct output: 73.1938622402  | Program output: 
73.1938622402

Correct output: -173.8513267506 | Program output: 
-173.8513267506

Correct output: -16.4772789847 | Program output: 
-16.4772789847

Correct output: -40.8753187944 | Program output: 
-40.8753187944

;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_swap} {:instruction float_dup} {:instruction in1} {:instruction float_swap} {:instruction float_add} {:instruction integer_div} {:instruction integer_dup_items} {:instruction print_newline} {:instruction integer_div} {:instruction float_shove} {:instruction integer_pop} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction 81.99019705305832} {:instruction integer_mult} {:instruction float_min} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_sub} {:instruction print_float} {:instruction float_max} {:instruction integer_add} {:instruction float_shove} {:instruction print_newline} {:instruction float_sub} {:instruction float_mult} {:instruction float_mult} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction print_integer} {:instruction float_add} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_mult} {:instruction float_mod} {:instruction float_sin} {:instruction float_flush} {:instruction -31} {:instruction float_tan} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_rot} {:instruction tagged_994} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec})
Best program: (print_integer integer_fromfloat in2 float_yankdup float_stackdepth float_yank integer_yankdup integer_dup_items float_frominteger float_swap float_dup in1 float_swap float_add integer_div integer_dup_items print_newline integer_div float_shove integer_pop integer_shove integer_dup_items float_yankdup 81.99019705305832 integer_mult float_min integer_yankdup integer_pop integer_sub print_integer integer_sub print_float float_max integer_add float_shove print_newline float_sub float_mult float_mult integer_shove integer_swap float_mod print_integer float_add integer_rot integer_swap integer_mult float_mod float_sin float_flush -31 float_tan float_dup float_dup integer_inc float_dup float_dec float_dup float_dec integer_sub float_dup float_dup_items float_dup float_dup float_dec float_dup float_dup float_dup_items float_dec float_dup float_dup float_dup_items float_dec float_dec float_dup float_dup_times integer_add float_dup float_dup integer_dup float_dup_items float_dup float_dup_times float_dec float_dec float_dup float_dec in2 float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec float_dup integer_add integer_rot float_dec float_dup_times integer_inc float_dup integer_rot tagged_994 float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dup float_dup integer_rot float_dec integer_div integer_div float_dec float_dup float_dec integer_add float_dec integer_add float_dec integer_add float_dec float_dup integer_rot float_dec float_dec integer_dec float_dec float_dup float_dec)
Errors: [0.0 2 0.0 2 0.0 2 69.0904 12 0.0 2 52.1129 12 0.0 2 0.0 2 6.7625 11 0.0 2 0.0 2 0.0 2 36.4547 12 8.2344 14 0.0 2 41.7995 12 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2]
Total: 325.4544
Mean: 6.509088
Genome size: 146
Size: 147
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 4358.950101199999
Median total errors in population: 894.99355
Error averages by case: (184.12915570000004 7.125 162.9789832 5.946 174.33820790000001 5.472 156.3651082999995 10.719 177.21582809999984 5.863 168.38966320000057 9.666 178.14550660000137 10.041 184.73109270000006 6.525 163.60355909999947 10.414 153.3208371000001 6.803 161.9669579999998 5.667 180.62722920000013 6.342 152.18918600000052 9.181 141.1775414999998 5.892 176.87532890000026 6.21 151.685882799999 9.797 178.2322819000001 6.804 171.0511595000002 5.889 166.18576549999977 9.912 156.56077589999958 9.629 145.0677629 5.871 166.14862119999955 5.705 201.30181950000005 6.625 148.30510100000006 6.38 173.8387454999999 6.04)
Error minima by case: (0.0 2 0.0 0 0.0 1 0.7361 2 0.0 2 0.3686 1 0.0 2 0.0 0 0.8824 1 0.0 0 0.0 0 0.0 0 0.6254 2 0.1961 1 0.0 0 0.3716 1 0.0 0 0.0 0 0.0 0 0.0 2 0.0 0 0.0 2 0.0 1 0.0 0 0.0 1)
Average genome size in population (length): 175.253
Average program size in population (points): 176.253
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 246.9596406295859
Average age in population: 228.3635729917138
Median age in population: 244.595582695487
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.99
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.99
Total error diversity:				 0.846
Error (vector) diversity:			 0.849
Behavioral diversity:				 0.853
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 586826307
--- Timings ---
Current time: 1529615728480 milliseconds
Total Time:         901.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       251.9 seconds, 28.0%
Fitness Testing:    518.3 seconds, 57.5%
Report:             130.8 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 2132.0
Test mean error for best: 1.06600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -102.6738378996
Correct output: -31.2572440177 | Program output: -32.2572440177
Correct output: -46.4593524807 | Program output: -47.4593524807
Correct output: 151.0806466807 | Program output: 150.0806466807
Correct output: -37.658849841  | Program output: -38.658849841 
Correct output: 134.1031121233 | Program output: 133.1031121233
Correct output: 29.6055550185  | Program output: 28.6055550185 
Correct output: -128.9331639543 | Program output: -129.9331639543
Correct output: 88.7526738391  | Program output: 87.7526738391 
Correct output: -27.9825817496 | Program output: -28.9825817496
Correct output: -36.0605266238 | Program output: -37.0605266238
Correct output: -98.4940591545 | Program output: -99.4940591545
Correct output: 118.444904963  | Program output: 117.444904963 
Correct output: 90.2245669646  | Program output: 89.2245669646 
Correct output: -96.7391381937 | Program output: -97.7391381937
Correct output: 123.7897097488 | Program output: 122.7897097488
Correct output: -88.7139415536 | Program output: -89.7139415536
Correct output: -85.4359203887 | Program output: -86.4359203887
Correct output: 29.5496488004  | Program output: 28.5496488004 
Correct output: 69.5585020781  | Program output: 68.5585020781 
Correct output: -9.5473433631  | Program output: -10.5473433631
Correct output: 73.1938622402  | Program output: 72.1938622402 
Correct output: -173.8513267506 | Program output: -174.8513267506
Correct output: -16.4772789847 | Program output: -17.4772789847
Correct output: -40.8753187944 | Program output: -41.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_swap} {:instruction float_dup} {:instruction in1} {:instruction float_swap} {:instruction float_add} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction print_float} {:instruction float_dec} {:instruction integer_div} {:instruction float_shove} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_min} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction in2} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup})
Best program: (print_integer integer_fromfloat in2 float_yankdup float_stackdepth float_yank integer_yankdup integer_dup_items float_frominteger float_swap float_dup in1 float_swap float_add integer_div integer_dup_items float_rot integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat print_float float_dec integer_div float_shove integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_max float_dup_items integer_mult float_dup float_dup float_dup float_dup integer_inc float_dec float_dup float_dup float_dec float_dup float_dup float_dup_items integer_mult float_dec float_dup integer_rot float_dup float_dup float_dup float_dec integer_mod float_dup float_dup float_dup float_dup_items float_dec float_dup float_dec float_dec float_dup float_dup integer_max float_dec float_dec float_dup tagged_281 integer_sub integer_shove float_dup_items float_dec float_dup integer_min integer_add float_dec float_dec float_dec float_frominteger float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dup float_dup_items float_dec in2 integer_div integer_inc float_dec float_dec float_dec integer_dup_items integer_div float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dup_times float_dup_items print_integer float_dec float_dup_times float_dec float_dup_times float_dec float_dup integer_rot float_dec integer_flush float_dec float_dup float_dup)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 52.0
Mean: 1.04
Genome size: 148
Size: 149
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 5224.9570066
Median total errors in population: 890.52545
Error averages by case: (213.80479629999988 7.309 192.55432049999996 6.27 207.7668364999998 6.173 200.8492800999982 11.528 209.28825329999987 6.518 208.36993380000192 10.716 209.5381955000013 9.947 212.14885639999994 6.781 200.72920960000005 10.983 191.96745170000023 7.03 192.70612589999996 6.09 209.87946380000008 6.598 194.2370272000004 10.324 183.37157579999942 7.63 206.47415280000018 6.482 193.2799008999995 10.756 206.82146900000004 6.927 201.72025680000016 6.236 199.29225319999986 9.828 188.35283139999785 9.533 185.65431840000002 6.308 199.5218293999996 6.512 225.40379320000014 6.895 188.26134049999996 6.902 206.06653459999995 6.621)
Error minima by case: (0.0 1 0.0 0 0.0 1 0.8481 1 0.0 1 0.1757 1 0.0 1 0.0 0 1.0 1 0.0 0 0.0 0 0.0 1 0.2531 1 0.0394 1 0.0 0 0.3716 1 0.0 0 0.0 0 0.0 1 0.0 1 0.0 0 0.0 1 0.0 1 0.0 0 0.0 1)
Average genome size in population (length): 163.998
Average program size in population (points): 164.998
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 248.0541515898155
Average age in population: 223.3916623054645
Median age in population: 245.4185612818139
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.971
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.724
Error (vector) diversity:			 0.731
Behavioral diversity:				 0.737
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 590926382
--- Timings ---
Current time: 1529615734150 milliseconds
Total Time:         906.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       253.5 seconds, 27.9%
Fitness Testing:    521.8 seconds, 57.5%
Report:             131.6 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 1000.0
Test mean error for best: 0.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: 
-101.6738378996
Correct output: -31.2572440177 | Program output: 
-31.2572440177
Correct output: -46.4593524807 | Program output: 
-46.4593524807
Correct output: 151.0806466807 | Program output: 
151.0806466807
Correct output: -37.658849841  | Program output: 
-37.658849841
Correct output: 134.1031121233 | Program output: 
134.1031121233
Correct output: 29.6055550185  | Program output: 
29.6055550185
Correct output: -128.9331639543 | Program output: 
-128.9331639543
Correct output: 88.7526738391  | Program output: 
88.7526738391
Correct output: -27.9825817496 | Program output: 
-27.9825817496
Correct output: -36.0605266238 | Program output: 
-36.0605266238
Correct output: -98.4940591545 | Program output: 
-98.4940591545
Correct output: 118.444904963  | Program output: 
118.444904963
Correct output: 90.2245669646  | Program output: 
90.2245669646
Correct output: -96.7391381937 | Program output: 
-96.7391381937
Correct output: 123.7897097488 | Program output: 
123.7897097488
Correct output: -88.7139415536 | Program output: 
-88.7139415536
Correct output: -85.4359203887 | Program output: 
-85.4359203887
Correct output: 29.5496488004  | Program output: 
29.5496488004
Correct output: 69.5585020781  | Program output: 
69.5585020781
Correct output: -9.5473433631  | Program output: 
-9.5473433631
Correct output: 73.1938622402  | Program output: 
73.1938622402
Correct output: -173.8513267506 | Program output: 
-173.8513267506
Correct output: -16.4772789847 | Program output: 
-16.4772789847
Correct output: -40.8753187944 | Program output: 
-40.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_swap} {:instruction float_dup} {:instruction in1} {:instruction float_swap} {:instruction float_add} {:instruction integer_div} {:instruction integer_dup_items} {:instruction print_newline} {:instruction integer_div} {:instruction float_shove} {:instruction integer_pop} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction print_float} {:instruction float_dec} {:instruction integer_div} {:instruction float_shove} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_min} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction in2} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec})
Best program: (print_integer integer_fromfloat in2 float_yankdup float_stackdepth float_yank integer_yankdup integer_dup_items float_frominteger float_swap float_dup in1 float_swap float_add integer_div integer_dup_items print_newline integer_div float_shove integer_pop integer_shove integer_dup_items float_yankdup float_dup float_dec float_dec integer_fromfloat print_float float_dec integer_div float_shove integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_max float_dup_items integer_mult float_dup float_dup float_dup float_dup integer_inc float_dec float_dup float_dup float_dec integer_pop float_dup float_dup_items integer_mult float_dec float_dup integer_rot float_dup float_dup float_dup float_dec integer_mod float_dup float_dup float_dup float_dup_items float_dec float_dup float_dec float_dec float_dup float_dup integer_max float_dec float_dec float_dup tagged_281 integer_sub integer_shove float_dup_items float_dec float_dup integer_min integer_add float_dec float_dec float_dec float_frominteger float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dup float_dup_items float_dec in2 integer_div integer_inc float_dec float_dec float_dec integer_dup_items integer_div float_dec float_dec)
Errors: [0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1]
Total: 25.0
Mean: 0.5
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 6897.808477
Median total errors in population: 511.27139999999997
Error averages by case: (271.56718629999995 7.553 257.1315918999998 6.875 266.17283579999986 6.88 290.1278695999969 12.728 266.09177139999997 6.863 286.3904460000012 12.452 272.2626964000004 8.952 270.8091671 7.307 267.6935322000014 11.913 260.0754318000001 7.643 257.3784941 6.796 269.6734699 7.065 274.4153548000009 12.196 255.1606584999977 11.473 267.88105900000005 7.04 276.59042139999923 12.021 266.9413363999999 7.165 263.23289330000006 6.867 264.6879261999998 8.552 262.623884699999 8.817 253.8266146 7.157 264.6116072999999 6.963 278.06924129999993 7.364 255.53407039999988 7.598 265.53691660000004 7.082)
Error minima by case: (0.0 1 0.0 0 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 0 0.0 1 0.0 0 0.0 0 0.0 1 0.0 1 0.0 1 0.0 0 0.0 1 0.0 0 0.0 0 0.0 1 0.0 1 0.0 0 0.0 1 0.0 1 0.0 0 0.0 1)
Average genome size in population (length): 136.978
Average program size in population (points): 137.978
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 249.1702510799306
Average age in population: 213.0661101524605
Median age in population: 217.6758377522535
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.414
Error (vector) diversity:			 0.422
Behavioral diversity:				 0.428
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 594351118
--- Timings ---
Current time: 1529615739090 milliseconds
Total Time:         911.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       254.8 seconds, 27.9%
Fitness Testing:    524.7 seconds, 57.5%
Report:             132.3 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 1000.0
Test mean error for best: 0.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: 
-101.6738378996
Correct output: -31.2572440177 | Program output: 
-31.2572440177
Correct output: -46.4593524807 | Program output: 
-46.4593524807
Correct output: 151.0806466807 | Program output: 
151.0806466807
Correct output: -37.658849841  | Program output: 
-37.658849841
Correct output: 134.1031121233 | Program output: 
134.1031121233
Correct output: 29.6055550185  | Program output: 
29.6055550185
Correct output: -128.9331639543 | Program output: 
-128.9331639543
Correct output: 88.7526738391  | Program output: 
88.7526738391
Correct output: -27.9825817496 | Program output: 
-27.9825817496
Correct output: -36.0605266238 | Program output: 
-36.0605266238
Correct output: -98.4940591545 | Program output: 
-98.4940591545
Correct output: 118.444904963  | Program output: 
118.444904963
Correct output: 90.2245669646  | Program output: 
90.2245669646
Correct output: -96.7391381937 | Program output: 
-96.7391381937
Correct output: 123.7897097488 | Program output: 
123.7897097488
Correct output: -88.7139415536 | Program output: 
-88.7139415536
Correct output: -85.4359203887 | Program output: 
-85.4359203887
Correct output: 29.5496488004  | Program output: 
29.5496488004
Correct output: 69.5585020781  | Program output: 
69.5585020781
Correct output: -9.5473433631  | Program output: 
-9.5473433631
Correct output: 73.1938622402  | Program output: 
73.1938622402
Correct output: -173.8513267506 | Program output: 
-173.8513267506
Correct output: -16.4772789847 | Program output: 
-16.4772789847
Correct output: -40.8753187944 | Program output: 
-40.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_swap} {:instruction float_dup} {:instruction in1} {:instruction float_swap} {:instruction float_add} {:instruction integer_div} {:instruction integer_dup_items} {:instruction print_newline} {:instruction integer_div} {:instruction float_shove} {:instruction integer_pop} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction print_float} {:instruction float_dec} {:instruction integer_div} {:instruction float_shove} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction tagged_281} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_min} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction in2} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec})
Best program: (print_integer integer_fromfloat in2 float_yankdup float_stackdepth float_yank integer_yankdup integer_dup_items float_frominteger float_swap float_dup in1 float_swap float_add integer_div integer_dup_items print_newline integer_div float_shove integer_pop integer_shove integer_dup_items float_yankdup float_dup float_dec float_dec integer_fromfloat print_float float_dec integer_div float_shove integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dec float_stackdepth float_dec float_dec float_dec float_dec float_max float_dup_items integer_mult float_dup float_dup float_dup float_dup integer_inc float_dec float_dup float_dup float_dec integer_pop float_dup float_dup_items integer_mult float_dec float_dup integer_rot float_dup float_dup float_dup float_dec integer_mod float_dup float_dup float_dup float_dup_items float_dec float_dup float_dec float_dec float_dup float_dup integer_max float_dec float_dec float_dup tagged_281 integer_sub integer_shove float_dup_items float_dec float_dup integer_min integer_add float_dec float_dec float_dec float_frominteger float_dup_items float_dec float_dup integer_div integer_inc float_dec float_dec float_dup float_dup_items float_dec in2 integer_div integer_inc float_dec float_dec float_dec integer_dup_items integer_div float_dec float_dec)
Errors: [0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1]
Total: 25.0
Mean: 0.5
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2881.9036854999968
Median total errors in population: 349.4544
Error averages by case: (105.11615990000006 4.688 97.94854199999985 4.438 109.23246770000017 4.588 153.6153970999986 12.464 108.78698280000013 4.527 140.39479119999805 12.495 104.8170024000001 5.237 106.32385479999998 4.61 104.18670349999864 11.28 99.87879339999998 5.083 98.34588510000012 4.457 104.68188909999992 4.474 127.87821960000103 12.374 104.06491200000082 13.678 104.24015550000011 4.519 131.46824629999793 11.691 102.82006090000013 4.502 102.64560529999986 4.437 100.54773159999982 5.145 100.62121640000007 5.215 95.83724820000005 4.917 98.44735649999997 4.614 110.41560119999987 4.685 97.1271566 5.124 108.59770639999999 4.622)
Error minima by case: (0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 0 0.0 1 0.0 1 0.0 0 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 0 0.0 1 0.0 1 0.0 0 0.0 1 0.0 1 0.0 1 0.0 1)
Average genome size in population (length): 123.331
Average program size in population (points): 124.331
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 249.6634424935736
Average age in population: 210.4942272272279
Median age in population: 211.9695525684553
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.189
Error (vector) diversity:			 0.198
Behavioral diversity:				 0.211
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 597434543
--- Timings ---
Current time: 1529615743997 milliseconds
Total Time:         916.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       256.2 seconds, 28.0%
Fitness Testing:    527.4 seconds, 57.5%
Report:             133.0 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -101.6738378996
Correct output: -31.2572440177 | Program output: -31.2572440177
Correct output: -46.4593524807 | Program output: -46.4593524807
Correct output: 151.0806466807 | Program output: 151.0806466807
Correct output: -37.658849841  | Program output: -37.658849841 
Correct output: 134.1031121233 | Program output: 134.1031121233
Correct output: 29.6055550185  | Program output: 29.6055550185 
Correct output: -128.9331639543 | Program output: -128.9331639543
Correct output: 88.7526738391  | Program output: 88.7526738391 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -36.0605266238
Correct output: -98.4940591545 | Program output: -98.4940591545
Correct output: 118.444904963  | Program output: 118.444904963 
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -96.7391381937
Correct output: 123.7897097488 | Program output: 123.7897097488
Correct output: -88.7139415536 | Program output: -88.7139415536
Correct output: -85.4359203887 | Program output: -85.4359203887
Correct output: 29.5496488004  | Program output: 29.5496488004 
Correct output: 69.5585020781  | Program output: 69.5585020781 
Correct output: -9.5473433631  | Program output: -9.5473433631 
Correct output: 73.1938622402  | Program output: 73.1938622402 
Correct output: -173.8513267506 | Program output: -173.8513267506
Correct output: -16.4772789847 | Program output: -16.4772789847
Correct output: -40.8753187944 | Program output: -40.8753187944
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_swap} {:instruction float_dup} {:instruction in1} {:instruction float_swap} {:instruction float_add} {:instruction integer_div} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_shove} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction print_float} {:instruction float_dec} {:instruction integer_div} {:instruction float_shove} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_dup_items} {:instruction float_pop} {:instruction -51.18661315997457} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_mult} {:instruction float_min} {:instruction float_dup} {:instruction float_dup} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup} {:instruction float_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dup} {:instruction float_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction float_dup} {:instruction integer_rot} {:instruction tagged_994} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction 76.00483206399889} {:instruction float_dec} {:instruction float_dup} {:instruction float_tan})
Best program: (print_integer integer_fromfloat in2 float_yankdup float_stackdepth float_yank integer_yankdup integer_dup_items float_frominteger float_swap float_dup in1 float_swap float_add integer_div integer_dup_items integer_div float_shove float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat print_float float_dec integer_div float_shove integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_dup integer_dup_items float_pop -51.18661315997457 float_sin integer_yank integer_max integer_mult integer_yank integer_fromfloat integer_yankdup integer_stackdepth float_sub float_mult float_min float_dup float_dup float_dup_items float_dec float_dec float_dup float_dup_times integer_add float_dup float_dup integer_dup float_dup_items float_dup float_dup_times float_dup float_dup integer_dup float_dup_items float_dup float_dup_times float_dec float_dec float_dup float_dec in2 float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec float_dup integer_add integer_rot float_dup_times integer_yankdup float_dup integer_rot tagged_994 float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dup float_dup integer_rot integer_rot float_dec integer_div integer_div float_dec float_dup float_dec integer_add float_dec integer_add float_dec integer_add float_dec float_dup integer_rot float_dec 76.00483206399889 float_dec float_dup float_tan)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 144
Size: 145
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2740.884781999998
Median total errors in population: 325.4544
Error averages by case: (101.04703210000001 3.803 94.9158506999999 3.629 100.67083740000017 3.785 144.28028660000004 10.409 100.13022590000003 3.699 132.56732769999755 10.448 102.43380720000003 4.356 101.88862069999998 3.777 101.87829809999876 9.279 97.68324139999993 4.165 95.25862050000008 3.649 100.71360929999997 3.668 121.92856850000108 10.286 98.74408340000068 11.752 100.37415050000003 3.678 125.33417379999817 9.952 99.0050724000001 3.696 98.63846639999984 3.64 99.7071826999998 4.129 99.02096360000004 4.302 92.75868119999997 4.034 96.60566959999998 3.744 105.1233769999999 3.79 94.39794330000004 4.166 100.133692 3.809)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 124.663
Average program size in population (points): 125.663
Average percent parens in population: 0.008
Minimum age in population: 159.0496056842299
Maximum age in population: 235.6580352263222
Average age in population: 215.0341184534415
Median age in population: 216.1805086485859
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.165
Error (vector) diversity:			 0.173
Behavioral diversity:				 0.186
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 600551405
--- Timings ---
Current time: 1529615748909 milliseconds
Total Time:         921.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       257.6 seconds, 28.0%
Fitness Testing:    530.2 seconds, 57.5%
Report:             133.8 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 183
Successful program: (print_integer integer_fromfloat in2 float_yankdup float_stackdepth float_yank integer_yankdup integer_dup_items float_frominteger float_swap float_dup in1 float_swap float_add integer_div integer_dup_items integer_div float_shove float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat print_float float_dec integer_div float_shove integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_dup integer_dup_items float_pop -51.18661315997457 float_sin integer_yank integer_max integer_mult integer_yank integer_fromfloat integer_yankdup integer_stackdepth float_sub float_mult float_min float_dup float_dup float_dup_items float_dec float_dec float_dup float_dup_times integer_add float_dup float_dup integer_dup float_dup_items float_dup float_dup_times float_dup float_dup integer_dup float_dup_items float_dup float_dup_times float_dec float_dec float_dup float_dec in2 float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec float_dup integer_add integer_rot float_dup_times integer_yankdup float_dup integer_rot tagged_994 float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dup float_dup integer_rot integer_rot float_dec integer_div integer_div float_dec float_dup float_dec integer_add float_dec integer_add float_dec integer_add float_dec float_dup integer_rot float_dec 76.00483206399889 float_dec float_dup float_tan)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 145


Auto-simplifying with starting size: 145
step: 0
program: (print_integer integer_fromfloat in2 float_yankdup float_stackdepth float_yank integer_yankdup integer_dup_items float_frominteger float_swap float_dup in1 float_swap float_add integer_div integer_dup_items integer_div float_shove float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat print_float float_dec integer_div float_shove integer_max integer_rot integer_div integer_rot float_dec integer_sub float_dup float_dup_items float_dup float_dec float_dec integer_fromfloat float_shove float_dec float_dec float_dup integer_rot float_dec float_dup float_dup integer_dup_items float_pop -51.18661315997457 float_sin integer_yank integer_max integer_mult integer_yank integer_fromfloat integer_yankdup integer_stackdepth float_sub float_mult float_min float_dup float_dup float_dup_items float_dec float_dec float_dup float_dup_times integer_add float_dup float_dup integer_dup float_dup_items float_dup float_dup_times float_dup float_dup integer_dup float_dup_items float_dup float_dup_times float_dec float_dec float_dup float_dec in2 float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dup integer_dup_items integer_add float_dec float_dec float_dec float_dup float_dup_items integer_dup_times float_dec float_dec float_dup integer_add integer_rot float_dup_times integer_yankdup float_dup integer_rot tagged_994 float_dec integer_add float_dup float_dec float_dup integer_div float_dec float_dup float_dup integer_rot integer_rot float_dec integer_div integer_div float_dec float_dup float_dec integer_add float_dec integer_add float_dec integer_add float_dec float_dup integer_rot float_dec 76.00483206399889 float_dec float_dup float_tan)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 145

step: 500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -101.6738378996 | Program output: -101.6738378996
Correct output: -31.2572440177 | Program output: -31.2572440177
Correct output: -46.4593524807 | Program output: -46.4593524807
Correct output: 151.0806466807 | Program output: 151.0806466807
Correct output: -37.658849841  | Program output: -37.658849841 
Correct output: 134.1031121233 | Program output: 134.1031121233
Correct output: 29.6055550185  | Program output: 29.6055550185 
Correct output: -128.9331639543 | Program output: -128.9331639543
Correct output: 88.7526738391  | Program output: 88.7526738391 
Correct output: -27.9825817496 | Program output: -27.9825817496
Correct output: -36.0605266238 | Program output: -36.0605266238
Correct output: -98.4940591545 | Program output: -98.4940591545
Correct output: 118.444904963  | Program output: 118.444904963 
Correct output: 90.2245669646  | Program output: 90.2245669646 
Correct output: -96.7391381937 | Program output: -96.7391381937
Correct output: 123.7897097488 | Program output: 123.7897097488
Correct output: -88.7139415536 | Program output: -88.7139415536
Correct output: -85.4359203887 | Program output: -85.4359203887
Correct output: 29.5496488004  | Program output: 29.5496488004 
Correct output: 69.5585020781  | Program output: 69.5585020781 
Correct output: -9.5473433631  | Program output: -9.5473433631 
Correct output: 73.1938622402  | Program output: 73.1938622402 
Correct output: -173.8513267506 | Program output: -173.8513267506
Correct output: -16.4772789847 | Program output: -16.4772789847
Correct output: -40.8753187944 | Program output: -40.8753187944
;;******************************
